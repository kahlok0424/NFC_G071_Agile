
NFC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004140  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004140  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae5f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bbf  00000000  00000000  0002ae93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002ca58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016888  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a000  00000000  00000000  00044728  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e31f  00000000  00000000  0004e728  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dca47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002558  00000000  00000000  000dcac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800409c 	.word	0x0800409c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800409c 	.word	0x0800409c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 fbfc 	bl	8003e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f8ed 	bl	800085e <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8cc 	bl	8000834 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b7f      	cmp	r3, #127	; 0x7f
 8000724:	d932      	bls.n	800078c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	230f      	movs	r3, #15
 8000730:	400b      	ands	r3, r1
 8000732:	3b08      	subs	r3, #8
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3306      	adds	r3, #6
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	3304      	adds	r3, #4
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1dfa      	adds	r2, r7, #7
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	0011      	movs	r1, r2
 8000746:	2203      	movs	r2, #3
 8000748:	400a      	ands	r2, r1
 800074a:	00d2      	lsls	r2, r2, #3
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	4091      	lsls	r1, r2
 8000750:	000a      	movs	r2, r1
 8000752:	43d2      	mvns	r2, r2
 8000754:	401a      	ands	r2, r3
 8000756:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	019b      	lsls	r3, r3, #6
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	401a      	ands	r2, r3
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0018      	movs	r0, r3
 8000766:	2303      	movs	r3, #3
 8000768:	4003      	ands	r3, r0
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001c      	movs	r4, r3
 8000776:	230f      	movs	r3, #15
 8000778:	4023      	ands	r3, r4
 800077a:	3b08      	subs	r3, #8
 800077c:	089b      	lsrs	r3, r3, #2
 800077e:	430a      	orrs	r2, r1
 8000780:	3306      	adds	r3, #6
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	18c3      	adds	r3, r0, r3
 8000786:	3304      	adds	r3, #4
 8000788:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e027      	b.n	80007dc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	33c0      	adds	r3, #192	; 0xc0
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	589b      	ldr	r3, [r3, r2]
 800079c:	1dfa      	adds	r2, r7, #7
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	0011      	movs	r1, r2
 80007a2:	2203      	movs	r2, #3
 80007a4:	400a      	ands	r2, r1
 80007a6:	00d2      	lsls	r2, r2, #3
 80007a8:	21ff      	movs	r1, #255	; 0xff
 80007aa:	4091      	lsls	r1, r2
 80007ac:	000a      	movs	r2, r1
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	401a      	ands	r2, r3
 80007b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	401a      	ands	r2, r3
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0018      	movs	r0, r3
 80007c2:	2303      	movs	r3, #3
 80007c4:	4003      	ands	r3, r0
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <NVIC_SetPriority+0xd8>)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	33c0      	adds	r3, #192	; 0xc0
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	501a      	str	r2, [r3, r0]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b003      	add	sp, #12
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	e000e100 	.word	0xe000e100

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <SysTick_Config+0x40>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d901      	bls.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e010      	b.n	8000824 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <SysTick_Config+0x44>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	3a01      	subs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	2301      	movs	r3, #1
 800080c:	425b      	negs	r3, r3
 800080e:	2103      	movs	r1, #3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7d 	bl	8000710 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SysTick_Config+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x44>)
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	00ffffff 	.word	0x00ffffff
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	210f      	movs	r1, #15
 8000840:	187b      	adds	r3, r7, r1
 8000842:	1c02      	adds	r2, r0, #0
 8000844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	187b      	adds	r3, r7, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <NVIC_SetPriority>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffbf 	bl	80007ec <SysTick_Config>
 800086e:	0003      	movs	r3, r0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e147      	b.n	8000b18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x28>
 800089e:	e138      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0x38>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d123      	bne.n	80008f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	58d3      	ldr	r3, [r2, r3]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2207      	movs	r2, #7
 80008c2:	4013      	ands	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	220f      	movs	r2, #15
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	2107      	movs	r1, #7
 80008dc:	400b      	ands	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2203      	movs	r2, #3
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <HAL_GPIO_Init+0xd4>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d007      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2b11      	cmp	r3, #17
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	43da      	mvns	r2, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	2201      	movs	r2, #1
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	055b      	lsls	r3, r3, #21
 80009e6:	4013      	ands	r3, r2
 80009e8:	d100      	bne.n	80009ec <HAL_GPIO_Init+0x174>
 80009ea:	e092      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3318      	adds	r3, #24
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	589b      	ldr	r3, [r3, r2]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2203      	movs	r2, #3
 80009fe:	4013      	ands	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	220f      	movs	r2, #15
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	23a0      	movs	r3, #160	; 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x1ca>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <HAL_GPIO_Init+0x2bc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x1c6>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <HAL_GPIO_Init+0x2c0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x1c2>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <HAL_GPIO_Init+0x2c4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x1be>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e004      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a42:	2300      	movs	r3, #0
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	2103      	movs	r1, #3
 8000a48:	400a      	ands	r2, r1
 8000a4a:	00d2      	lsls	r2, r2, #3
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a54:	4936      	ldr	r1, [pc, #216]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	58d3      	ldr	r3, [r2, r3]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	025b      	lsls	r3, r3, #9
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a88:	4929      	ldr	r1, [pc, #164]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a92:	2384      	movs	r3, #132	; 0x84
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ab8:	2284      	movs	r2, #132	; 0x84
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	035b      	lsls	r3, r3, #13
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43da      	mvns	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	039b      	lsls	r3, r3, #14
 8000b00:	4013      	ands	r3, r2
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	1e13      	subs	r3, r2, #0
 8000b22:	d000      	beq.n	8000b26 <HAL_GPIO_Init+0x2ae>
 8000b24:	e6b0      	b.n	8000888 <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b006      	add	sp, #24
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40021800 	.word	0x40021800
 8000b34:	50000400 	.word	0x50000400
 8000b38:	50000800 	.word	0x50000800
 8000b3c:	50000c00 	.word	0x50000c00

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	0008      	movs	r0, r1
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	1cbb      	adds	r3, r7, #2
 8000b4e:	1c02      	adds	r2, r0, #0
 8000b50:	801a      	strh	r2, [r3, #0]
 8000b52:	1c7b      	adds	r3, r7, #1
 8000b54:	1c0a      	adds	r2, r1, #0
 8000b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b58:	1c7b      	adds	r3, r7, #1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e082      	b.n	8000c94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2241      	movs	r2, #65	; 0x41
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f003 f967 	bl	8003e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2241      	movs	r2, #65	; 0x41
 8000bae:	2124      	movs	r1, #36	; 0x24
 8000bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4934      	ldr	r1, [pc, #208]	; (8000c9c <HAL_I2C_Init+0x120>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4931      	ldr	r1, [pc, #196]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d108      	bne.n	8000bfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0209      	lsls	r1, r1, #8
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	e007      	b.n	8000c0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2184      	movs	r1, #132	; 0x84
 8000c04:	0209      	lsls	r1, r1, #8
 8000c06:	430a      	orrs	r2, r1
 8000c08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d104      	bne.n	8000c1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	491f      	ldr	r1, [pc, #124]	; (8000ca4 <HAL_I2C_Init+0x128>)
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	021a      	lsls	r2, r3, #8
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69d9      	ldr	r1, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2241      	movs	r2, #65	; 0x41
 8000c80:	2120      	movs	r1, #32
 8000c82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2242      	movs	r2, #66	; 0x42
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	f0ffffff 	.word	0xf0ffffff
 8000ca0:	ffff7fff 	.word	0xffff7fff
 8000ca4:	02008000 	.word	0x02008000

08000ca8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	0008      	movs	r0, r1
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	1c0a      	adds	r2, r1, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2241      	movs	r2, #65	; 0x41
 8000cca:	5c9b      	ldrb	r3, [r3, r2]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b20      	cmp	r3, #32
 8000cd0:	d000      	beq.n	8000cd4 <HAL_I2C_Master_Receive+0x2c>
 8000cd2:	e0e8      	b.n	8000ea6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_I2C_Master_Receive+0x3a>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e0e2      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000cea:	f7ff fd07 	bl	80006fc <HAL_GetTick>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	0219      	lsls	r1, r3, #8
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2319      	movs	r3, #25
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f000 fa16 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e0cd      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2241      	movs	r2, #65	; 0x41
 8000d10:	2122      	movs	r1, #34	; 0x22
 8000d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2242      	movs	r2, #66	; 0x42
 8000d18:	2110      	movs	r1, #16
 8000d1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d911      	bls.n	8000d66 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	22ff      	movs	r2, #255	; 0xff
 8000d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	045c      	lsls	r4, r3, #17
 8000d52:	230a      	movs	r3, #10
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	8819      	ldrh	r1, [r3, #0]
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <HAL_I2C_Master_Receive+0x208>)
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	0023      	movs	r3, r4
 8000d60:	f000 fb34 	bl	80013cc <I2C_TransferConfig>
 8000d64:	e076      	b.n	8000e54 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	049c      	lsls	r4, r3, #18
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <HAL_I2C_Master_Receive+0x208>)
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	0023      	movs	r3, r4
 8000d88:	f000 fb20 	bl	80013cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000d8c:	e062      	b.n	8000e54 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fa47 	bl	8001228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e082      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <HAL_I2C_Master_Receive+0x1ac>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d136      	bne.n	8000e54 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	0013      	movs	r3, r2
 8000df0:	2200      	movs	r2, #0
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	f000 f99c 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e053      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	2bff      	cmp	r3, #255	; 0xff
 8000e08:	d911      	bls.n	8000e2e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	045c      	lsls	r4, r3, #17
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	8819      	ldrh	r1, [r3, #0]
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	2300      	movs	r3, #0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	0023      	movs	r3, r4
 8000e28:	f000 fad0 	bl	80013cc <I2C_TransferConfig>
 8000e2c:	e012      	b.n	8000e54 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	049c      	lsls	r4, r3, #18
 8000e42:	230a      	movs	r3, #10
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	8819      	ldrh	r1, [r3, #0]
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	0023      	movs	r3, r4
 8000e50:	f000 fabc 	bl	80013cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d197      	bne.n	8000d8e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 f9a2 	bl	80011ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e01a      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2220      	movs	r2, #32
 8000e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	490b      	ldr	r1, [pc, #44]	; (8000eb4 <HAL_I2C_Master_Receive+0x20c>)
 8000e86:	400a      	ands	r2, r1
 8000e88:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2241      	movs	r2, #65	; 0x41
 8000e8e:	2120      	movs	r1, #32
 8000e90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2242      	movs	r2, #66	; 0x42
 8000e96:	2100      	movs	r1, #0
 8000e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8000ea6:	2302      	movs	r3, #2
  }
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b007      	add	sp, #28
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	80002400 	.word	0x80002400
 8000eb4:	fe00e800 	.word	0xfe00e800

08000eb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	1c0a      	adds	r2, r1, #0
 8000eca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2241      	movs	r2, #65	; 0x41
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b20      	cmp	r3, #32
 8000eda:	d000      	beq.n	8000ede <HAL_I2C_IsDeviceReady+0x26>
 8000edc:	e0fe      	b.n	80010dc <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	401a      	ands	r2, r3
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e0f3      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_I2C_IsDeviceReady+0x4c>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e0ec      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2240      	movs	r2, #64	; 0x40
 8000f08:	2101      	movs	r1, #1
 8000f0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2241      	movs	r2, #65	; 0x41
 8000f10:	2124      	movs	r1, #36	; 0x24
 8000f12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d107      	bne.n	8000f32 <HAL_I2C_IsDeviceReady+0x7a>
 8000f22:	230a      	movs	r3, #10
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	059b      	lsls	r3, r3, #22
 8000f2a:	0d9b      	lsrs	r3, r3, #22
 8000f2c:	4a6e      	ldr	r2, [pc, #440]	; (80010e8 <HAL_I2C_IsDeviceReady+0x230>)
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	e007      	b.n	8000f42 <HAL_I2C_IsDeviceReady+0x8a>
 8000f32:	230a      	movs	r3, #10
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	059b      	lsls	r3, r3, #22
 8000f3a:	0d9b      	lsrs	r3, r3, #22
 8000f3c:	22a0      	movs	r2, #160	; 0xa0
 8000f3e:	0192      	lsls	r2, r2, #6
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000f48:	f7ff fbd8 	bl	80006fc <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2220      	movs	r2, #32
 8000f58:	4013      	ands	r3, r2
 8000f5a:	3b20      	subs	r3, #32
 8000f5c:	425a      	negs	r2, r3
 8000f5e:	4153      	adcs	r3, r2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	231f      	movs	r3, #31
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2210      	movs	r2, #16
 8000f70:	4013      	ands	r3, r2
 8000f72:	3b10      	subs	r3, #16
 8000f74:	425a      	negs	r2, r3
 8000f76:	4153      	adcs	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	231e      	movs	r3, #30
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000f80:	e035      	b.n	8000fee <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	d01a      	beq.n	8000fbe <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f88:	f7ff fbb8 	bl	80006fc <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d302      	bcc.n	8000f9e <HAL_I2C_IsDeviceReady+0xe6>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2241      	movs	r2, #65	; 0x41
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	2220      	movs	r2, #32
 8000fac:	431a      	orrs	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e08f      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	3b20      	subs	r3, #32
 8000fca:	425a      	negs	r2, r3
 8000fcc:	4153      	adcs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	231f      	movs	r3, #31
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	4013      	ands	r3, r2
 8000fe0:	3b10      	subs	r3, #16
 8000fe2:	425a      	negs	r2, r3
 8000fe4:	4153      	adcs	r3, r2
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	231e      	movs	r3, #30
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000fee:	231f      	movs	r3, #31
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <HAL_I2C_IsDeviceReady+0x14a>
 8000ff8:	231e      	movs	r3, #30
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0bf      	beq.n	8000f82 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2210      	movs	r2, #16
 800100a:	4013      	ands	r3, r2
 800100c:	2b10      	cmp	r3, #16
 800100e:	d01a      	beq.n	8001046 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	0013      	movs	r3, r2
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	f000 f887 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e059      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2220      	movs	r2, #32
 8001030:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2241      	movs	r2, #65	; 0x41
 8001036:	2120      	movs	r1, #32
 8001038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e04b      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	0013      	movs	r3, r2
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	f000 f86c 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e03e      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2210      	movs	r2, #16
 8001066:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2220      	movs	r2, #32
 800106e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d119      	bne.n	80010ac <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	01c9      	lsls	r1, r1, #7
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	0013      	movs	r3, r2
 8001094:	2200      	movs	r2, #0
 8001096:	2120      	movs	r1, #32
 8001098:	f000 f84a 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e01c      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2220      	movs	r2, #32
 80010aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d900      	bls.n	80010bc <HAL_I2C_IsDeviceReady+0x204>
 80010ba:	e72e      	b.n	8000f1a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2241      	movs	r2, #65	; 0x41
 80010c0:	2120      	movs	r1, #32
 80010c2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	2220      	movs	r2, #32
 80010ca:	431a      	orrs	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	2100      	movs	r1, #0
 80010d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80010dc:	2302      	movs	r3, #2
  }
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b008      	add	sp, #32
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	02002000 	.word	0x02002000

080010ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d103      	bne.n	800110a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2201      	movs	r2, #1
 8001112:	4013      	ands	r3, r2
 8001114:	2b01      	cmp	r3, #1
 8001116:	d007      	beq.n	8001128 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2101      	movs	r1, #1
 8001124:	430a      	orrs	r2, r1
 8001126:	619a      	str	r2, [r3, #24]
  }
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}

08001130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001140:	e021      	b.n	8001186 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	d01e      	beq.n	8001186 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001148:	f7ff fad8 	bl	80006fc <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d302      	bcc.n	800115e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d113      	bne.n	8001186 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	2220      	movs	r2, #32
 8001164:	431a      	orrs	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2241      	movs	r2, #65	; 0x41
 800116e:	2120      	movs	r1, #32
 8001170:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2242      	movs	r2, #66	; 0x42
 8001176:	2100      	movs	r1, #0
 8001178:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2240      	movs	r2, #64	; 0x40
 800117e:	2100      	movs	r1, #0
 8001180:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	4013      	ands	r3, r2
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	425a      	negs	r2, r3
 8001196:	4153      	adcs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	001a      	movs	r2, r3
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d0ce      	beq.n	8001142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}

080011ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011ba:	e028      	b.n	800120e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f89c 	bl	8001300 <I2C_IsAcknowledgeFailed>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e026      	b.n	800121e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011d0:	f7ff fa94 	bl	80006fc <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d302      	bcc.n	80011e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d113      	bne.n	800120e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	2220      	movs	r2, #32
 80011ec:	431a      	orrs	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2241      	movs	r2, #65	; 0x41
 80011f6:	2120      	movs	r1, #32
 80011f8:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2242      	movs	r2, #66	; 0x42
 80011fe:	2100      	movs	r1, #0
 8001200:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	2100      	movs	r1, #0
 8001208:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e007      	b.n	800121e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2220      	movs	r2, #32
 8001216:	4013      	ands	r3, r2
 8001218:	2b20      	cmp	r3, #32
 800121a:	d1cf      	bne.n	80011bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b004      	add	sp, #16
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001234:	e055      	b.n	80012e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f85f 	bl	8001300 <I2C_IsAcknowledgeFailed>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e053      	b.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2220      	movs	r2, #32
 8001252:	4013      	ands	r3, r2
 8001254:	2b20      	cmp	r3, #32
 8001256:	d129      	bne.n	80012ac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	2b04      	cmp	r3, #4
 8001264:	d105      	bne.n	8001272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e03f      	b.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2220      	movs	r2, #32
 8001278:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	491d      	ldr	r1, [pc, #116]	; (80012fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001286:	400a      	ands	r2, r1
 8001288:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2241      	movs	r2, #65	; 0x41
 8001294:	2120      	movs	r1, #32
 8001296:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2242      	movs	r2, #66	; 0x42
 800129c:	2100      	movs	r1, #0
 800129e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e022      	b.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ac:	f7ff fa26 	bl	80006fc <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	2220      	movs	r2, #32
 80012c8:	431a      	orrs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	2120      	movs	r1, #32
 80012d4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2240      	movs	r2, #64	; 0x40
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e007      	b.n	80012f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2204      	movs	r2, #4
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d1a2      	bne.n	8001236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	fe00e800 	.word	0xfe00e800

08001300 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	2b10      	cmp	r3, #16
 8001318:	d151      	bne.n	80013be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800131a:	e021      	b.n	8001360 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	d01e      	beq.n	8001360 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001322:	f7ff f9eb 	bl	80006fc <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d302      	bcc.n	8001338 <I2C_IsAcknowledgeFailed+0x38>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d113      	bne.n	8001360 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	2220      	movs	r2, #32
 800133e:	431a      	orrs	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2241      	movs	r2, #65	; 0x41
 8001348:	2120      	movs	r1, #32
 800134a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2242      	movs	r2, #66	; 0x42
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2240      	movs	r2, #64	; 0x40
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e02f      	b.n	80013c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2220      	movs	r2, #32
 8001368:	4013      	ands	r3, r2
 800136a:	2b20      	cmp	r3, #32
 800136c:	d1d6      	bne.n	800131c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2210      	movs	r2, #16
 8001374:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2220      	movs	r2, #32
 800137c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff feb3 	bl	80010ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001392:	400a      	ands	r2, r1
 8001394:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	2204      	movs	r2, #4
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	2120      	movs	r1, #32
 80013a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2242      	movs	r2, #66	; 0x42
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	fe00e800 	.word	0xfe00e800

080013cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	0008      	movs	r0, r1
 80013d6:	0011      	movs	r1, r2
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	240a      	movs	r4, #10
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	801a      	strh	r2, [r3, #0]
 80013e2:	2009      	movs	r0, #9
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	1c0a      	adds	r2, r1, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	6a3a      	ldr	r2, [r7, #32]
 80013f2:	0d51      	lsrs	r1, r2, #21
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	00d2      	lsls	r2, r2, #3
 80013f8:	400a      	ands	r2, r1
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <I2C_TransferConfig+0x68>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	43d2      	mvns	r2, r2
 8001400:	401a      	ands	r2, r3
 8001402:	0011      	movs	r1, r2
 8001404:	193b      	adds	r3, r7, r4
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	059b      	lsls	r3, r3, #22
 800140a:	0d9a      	lsrs	r2, r3, #22
 800140c:	183b      	adds	r3, r7, r0
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	0418      	lsls	r0, r3, #16
 8001412:	23ff      	movs	r3, #255	; 0xff
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	4003      	ands	r3, r0
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b005      	add	sp, #20
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	03ff63ff 	.word	0x03ff63ff

08001438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2241      	movs	r2, #65	; 0x41
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b20      	cmp	r3, #32
 800144c:	d138      	bne.n	80014c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	5c9b      	ldrb	r3, [r3, r2]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001458:	2302      	movs	r3, #2
 800145a:	e032      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	2101      	movs	r1, #1
 8001462:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2241      	movs	r2, #65	; 0x41
 8001468:	2124      	movs	r1, #36	; 0x24
 800146a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4911      	ldr	r1, [pc, #68]	; (80014cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2101      	movs	r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2241      	movs	r2, #65	; 0x41
 80014b0:	2120      	movs	r1, #32
 80014b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	ffffefff 	.word	0xffffefff

080014d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2241      	movs	r2, #65	; 0x41
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d139      	bne.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e033      	b.n	800155c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	2101      	movs	r1, #1
 80014fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2241      	movs	r2, #65	; 0x41
 8001500:	2124      	movs	r1, #36	; 0x24
 8001502:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	; 0x41
 800154a:	2120      	movs	r1, #32
 800154c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800155a:	2302      	movs	r3, #2
  }
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	fffff0ff 	.word	0xfffff0ff

08001568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d11f      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	0013      	movs	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	189b      	adds	r3, r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4912      	ldr	r1, [pc, #72]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fdb2 	bl	8000104 <__udivsi3>
 80015a0:	0003      	movs	r3, r0
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a6:	e008      	b.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e001      	b.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e009      	b.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	401a      	ands	r2, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d0ed      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40007000 	.word	0x40007000
 80015dc:	fffff9ff 	.word	0xfffff9ff
 80015e0:	20000008 	.word	0x20000008
 80015e4:	000f4240 	.word	0x000f4240

080015e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	23e0      	movs	r3, #224	; 0xe0
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4013      	ands	r3, r2
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e304      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x1e>
 800161c:	e07c      	b.n	8001718 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161e:	4bc3      	ldr	r3, [pc, #780]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2238      	movs	r2, #56	; 0x38
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001628:	4bc0      	ldr	r3, [pc, #768]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b10      	cmp	r3, #16
 8001636:	d102      	bne.n	800163e <HAL_RCC_OscConfig+0x3e>
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d002      	beq.n	8001644 <HAL_RCC_OscConfig+0x44>
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4bb9      	ldr	r3, [pc, #740]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	d062      	beq.n	8001716 <HAL_RCC_OscConfig+0x116>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d15e      	bne.n	8001716 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e2df      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	429a      	cmp	r2, r3
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x78>
 8001668:	4bb0      	ldr	r3, [pc, #704]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4baf      	ldr	r3, [pc, #700]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0249      	lsls	r1, r1, #9
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e020      	b.n	80016ba <HAL_RCC_OscConfig+0xba>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	23a0      	movs	r3, #160	; 0xa0
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	429a      	cmp	r2, r3
 8001682:	d10e      	bne.n	80016a2 <HAL_RCC_OscConfig+0xa2>
 8001684:	4ba9      	ldr	r3, [pc, #676]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4ba8      	ldr	r3, [pc, #672]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	02c9      	lsls	r1, r1, #11
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	4ba6      	ldr	r3, [pc, #664]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4ba5      	ldr	r3, [pc, #660]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0249      	lsls	r1, r1, #9
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e00b      	b.n	80016ba <HAL_RCC_OscConfig+0xba>
 80016a2:	4ba2      	ldr	r3, [pc, #648]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4ba1      	ldr	r3, [pc, #644]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80016a8:	49a1      	ldr	r1, [pc, #644]	; (8001930 <HAL_RCC_OscConfig+0x330>)
 80016aa:	400a      	ands	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	4b9f      	ldr	r3, [pc, #636]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b9e      	ldr	r3, [pc, #632]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	499f      	ldr	r1, [pc, #636]	; (8001934 <HAL_RCC_OscConfig+0x334>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d014      	beq.n	80016ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff f81b 	bl	80006fc <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff f816 	bl	80006fc <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e29e      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	4b93      	ldr	r3, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xcc>
 80016ea:	e015      	b.n	8001718 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f806 	bl	80006fc <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f6:	f7ff f801 	bl	80006fc <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e289      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	4013      	ands	r3, r2
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0xf6>
 8001714:	e000      	b.n	8001718 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x124>
 8001722:	e099      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2238      	movs	r2, #56	; 0x38
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172e:	4b7f      	ldr	r3, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2203      	movs	r2, #3
 8001734:	4013      	ands	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b10      	cmp	r3, #16
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0x144>
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d002      	beq.n	800174a <HAL_RCC_OscConfig+0x14a>
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d135      	bne.n	80017b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4013      	ands	r3, r2
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x162>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e25c      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a74      	ldr	r2, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x338>)
 8001768:	4013      	ands	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	021a      	lsls	r2, r3, #8
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800177e:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x33c>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001792:	4b66      	ldr	r3, [pc, #408]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0adb      	lsrs	r3, r3, #11
 8001798:	2207      	movs	r2, #7
 800179a:	4013      	ands	r3, r2
 800179c:	4a68      	ldr	r2, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x340>)
 800179e:	40da      	lsrs	r2, r3
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x344>)
 80017a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x348>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7fe ff4d 	bl	8000648 <HAL_InitTick>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d051      	beq.n	8001856 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e232      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d030      	beq.n	8001820 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5e      	ldr	r2, [pc, #376]	; (800193c <HAL_RCC_OscConfig+0x33c>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0049      	lsls	r1, r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7fe ff8c 	bl	80006fc <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ea:	f7fe ff87 	bl	80006fc <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e20f      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x338>)
 800180e:	4013      	ands	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	021a      	lsls	r2, r3, #8
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e01b      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001820:	4b42      	ldr	r3, [pc, #264]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001826:	4949      	ldr	r1, [pc, #292]	; (800194c <HAL_RCC_OscConfig+0x34c>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7fe ff66 	bl	80006fc <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7fe ff61 	bl	80006fc <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1e9      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4013      	ands	r3, r2
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x236>
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001856:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	4013      	ands	r3, r2
 8001860:	d047      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2238      	movs	r2, #56	; 0x38
 8001868:	4013      	ands	r3, r2
 800186a:	2b18      	cmp	r3, #24
 800186c:	d10a      	bne.n	8001884 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d03c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d138      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e1cb      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d019      	beq.n	80018c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7fe ff30 	bl	80006fc <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7fe ff2b 	bl	80006fc <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1b3      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d0f1      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2a2>
 80018be:	e018      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80018c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	438a      	bics	r2, r1
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7fe ff16 	bl	80006fc <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d6:	f7fe ff11 	bl	80006fc <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e199      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d1f1      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2204      	movs	r2, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0x2fe>
 80018fc:	e0c6      	b.n	8001a8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	231f      	movs	r3, #31
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2238      	movs	r2, #56	; 0x38
 800190c:	4013      	ands	r3, r2
 800190e:	2b20      	cmp	r3, #32
 8001910:	d11e      	bne.n	8001950 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCC_OscConfig+0x31e>
 800191c:	e0b6      	b.n	8001a8c <HAL_RCC_OscConfig+0x48c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d000      	beq.n	8001928 <HAL_RCC_OscConfig+0x328>
 8001926:	e0b1      	b.n	8001a8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e177      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
 800192c:	40021000 	.word	0x40021000
 8001930:	fffeffff 	.word	0xfffeffff
 8001934:	fffbffff 	.word	0xfffbffff
 8001938:	ffff80ff 	.word	0xffff80ff
 800193c:	ffffc7ff 	.word	0xffffc7ff
 8001940:	00f42400 	.word	0x00f42400
 8001944:	20000008 	.word	0x20000008
 8001948:	20000000 	.word	0x20000000
 800194c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001950:	4bb4      	ldr	r3, [pc, #720]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	055b      	lsls	r3, r3, #21
 8001958:	4013      	ands	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x360>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x362>
 8001960:	2300      	movs	r3, #0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d011      	beq.n	800198a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4baf      	ldr	r3, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800196a:	4bae      	ldr	r3, [pc, #696]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0549      	lsls	r1, r1, #21
 8001970:	430a      	orrs	r2, r1
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
 8001974:	4bab      	ldr	r3, [pc, #684]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	055b      	lsls	r3, r3, #21
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001982:	231f      	movs	r3, #31
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <HAL_RCC_OscConfig+0x628>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d11a      	bne.n	80019cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001996:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <HAL_RCC_OscConfig+0x628>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <HAL_RCC_OscConfig+0x628>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0049      	lsls	r1, r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019a4:	f7fe feaa 	bl	80006fc <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7fe fea5 	bl	80006fc <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e12d      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <HAL_RCC_OscConfig+0x628>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3e2>
 80019d4:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x41c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x404>
 80019ea:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ee:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019f0:	2104      	movs	r1, #4
 80019f2:	430a      	orrs	r2, r1
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019f6:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019fa:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0x41c>
 8001a04:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a14:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a16:	2104      	movs	r1, #4
 8001a18:	438a      	bics	r2, r1
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d014      	beq.n	8001a4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7fe fe6a 	bl	80006fc <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe fe65 	bl	80006fc <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a7c      	ldr	r2, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x62c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0ec      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a42:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x42e>
 8001a4c:	e013      	b.n	8001a76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7fe fe55 	bl	80006fc <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a56:	e009      	b.n	8001a6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7fe fe50 	bl	80006fc <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x62c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0d7      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a76:	231f      	movs	r3, #31
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a84:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a86:	496a      	ldr	r1, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x630>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x496>
 8001a94:	e0c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2238      	movs	r2, #56	; 0x38
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d100      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4a4>
 8001aa2:	e081      	b.n	8001ba8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d156      	bne.n	8001b5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001ab2:	4960      	ldr	r1, [pc, #384]	; (8001c34 <HAL_RCC_OscConfig+0x634>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fe20 	bl	80006fc <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7fe fe1b 	bl	80006fc <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0a3      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	049b      	lsls	r3, r3, #18
 8001adc:	4013      	ands	r3, r2
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_RCC_OscConfig+0x638>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0449      	lsls	r1, r1, #17
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b22:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0549      	lsls	r1, r1, #21
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe fde4 	bl	80006fc <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fddf 	bl	80006fc <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e067      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	049b      	lsls	r3, r3, #18
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x53a>
 8001b58:	e05f      	b.n	8001c1a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x634>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	438a      	bics	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b78:	4930      	ldr	r1, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x63c>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fdbd 	bl	80006fc <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe fdb8 	bl	80006fc <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e040      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	049b      	lsls	r3, r3, #18
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x588>
 8001ba6:	e038      	b.n	8001c1a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e033      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x624>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d126      	bne.n	8001c16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2270      	movs	r2, #112	; 0x70
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	23fe      	movs	r3, #254	; 0xfe
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d116      	bne.n	8001c16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	23f8      	movs	r3, #248	; 0xf8
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10e      	bne.n	8001c16 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	23e0      	movs	r3, #224	; 0xe0
 8001bfc:	051b      	lsls	r3, r3, #20
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	0f5b      	lsrs	r3, r3, #29
 8001c0c:	075a      	lsls	r2, r3, #29
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b008      	add	sp, #32
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	efffffff 	.word	0xefffffff
 8001c34:	feffffff 	.word	0xfeffffff
 8001c38:	11c1808c 	.word	0x11c1808c
 8001c3c:	eefeffff 	.word	0xeefeffff

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e9      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2207      	movs	r2, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d91e      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c74:	f7fe fd42 	bl	80006fc <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7fe fd3d 	bl	80006fc <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0ca      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d006      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	21e0      	movs	r1, #224	; 0xe0
 8001cbc:	01c9      	lsls	r1, r1, #7
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_ClockConfig+0x1fc>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d057      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e097      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d11f      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e08b      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	d113      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07f      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e074      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e06d      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2207      	movs	r2, #7
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7fe fccc 	bl	80006fc <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7fe fcc7 	bl	80006fc <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	; 0x38
 8001d84:	401a      	ands	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2207      	movs	r2, #7
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d21e      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2207      	movs	r2, #7
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db0:	f7fe fca4 	bl	80006fc <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f7fe fc9f 	bl	80006fc <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_RCC_ClockConfig+0x1f4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e02c      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_RCC_ClockConfig+0x200>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dfa:	f000 f829 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001dfe:	0001      	movs	r1, r0
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	220f      	movs	r2, #15
 8001e08:	401a      	ands	r2, r3
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x204>)
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d3      	ldr	r3, [r2, r3]
 8001e10:	221f      	movs	r2, #31
 8001e12:	4013      	ands	r3, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x208>)
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x20c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe fc11 	bl	8000648 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	fffff0ff 	.word	0xfffff0ff
 8001e40:	ffff8fff 	.word	0xffff8fff
 8001e44:	080040c4 	.word	0x080040c4
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2238      	movs	r2, #56	; 0x38
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d10f      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0adb      	lsrs	r3, r3, #11
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4835      	ldr	r0, [pc, #212]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e76:	f7fe f945 	bl	8000104 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e05d      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2238      	movs	r2, #56	; 0x38
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d138      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10d      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	4824      	ldr	r0, [pc, #144]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ec0:	f7fe f920 	bl	8000104 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	227f      	movs	r2, #127	; 0x7f
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	434b      	muls	r3, r1
 8001ed4:	617b      	str	r3, [r7, #20]
        break;
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	481c      	ldr	r0, [pc, #112]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001edc:	f7fe f912 	bl	8000104 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0f5b      	lsrs	r3, r3, #29
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7fe f8fd 	bl	8000104 <__udivsi3>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2238      	movs	r2, #56	; 0x38
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d103      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2238      	movs	r2, #56	; 0x38
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b18      	cmp	r3, #24
 8001f2e:	d103      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f30:	23fa      	movs	r3, #250	; 0xfa
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e001      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b006      	add	sp, #24
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	0004      	movs	r4, r0
 8001f72:	f7ff fb39 	bl	80015e8 <LL_RCC_GetAPB1Prescaler>
 8001f76:	0003      	movs	r3, r0
 8001f78:	0b1a      	lsrs	r2, r3, #12
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	221f      	movs	r2, #31
 8001f82:	4013      	ands	r3, r2
 8001f84:	40dc      	lsrs	r4, r3
 8001f86:	0023      	movs	r3, r4
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	08004104 	.word	0x08004104

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f9c:	2313      	movs	r3, #19
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fb8:	e0a4      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2311      	movs	r3, #17
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4bc3      	ldr	r3, [pc, #780]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d111      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4bc0      	ldr	r3, [pc, #768]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd2:	4bbf      	ldr	r3, [pc, #764]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0549      	lsls	r1, r1, #21
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fdc:	4bbc      	ldr	r3, [pc, #752]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2311      	movs	r3, #17
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff2:	4bb8      	ldr	r3, [pc, #736]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0049      	lsls	r1, r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002000:	f7fe fb7c 	bl	80006fc <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002008:	e00b      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7fe fb77 	bl	80006fc <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d904      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002018:	2313      	movs	r3, #19
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2203      	movs	r2, #3
 800201e:	701a      	strb	r2, [r3, #0]
        break;
 8002020:	e005      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002022:	4bac      	ldr	r3, [pc, #688]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d0ed      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800202e:	2313      	movs	r3, #19
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d154      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002038:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4013      	ands	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	d014      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002054:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	4a9f      	ldr	r2, [pc, #636]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205e:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002062:	4b9b      	ldr	r3, [pc, #620]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0249      	lsls	r1, r1, #9
 8002068:	430a      	orrs	r2, r1
 800206a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206c:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002070:	4b97      	ldr	r3, [pc, #604]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002072:	499a      	ldr	r1, [pc, #616]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002074:	400a      	ands	r2, r1
 8002076:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002078:	4b95      	ldr	r3, [pc, #596]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	d016      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fb39 	bl	80006fc <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208e:	e00c      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe fb34 	bl	80006fc <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	4a91      	ldr	r2, [pc, #580]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d904      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80020a0:	2313      	movs	r3, #19
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2203      	movs	r2, #3
 80020a6:	701a      	strb	r2, [r3, #0]
            break;
 80020a8:	e004      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0ed      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80020b4:	2313      	movs	r3, #19
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020be:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	4a85      	ldr	r2, [pc, #532]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020d2:	e00c      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d4:	2312      	movs	r3, #18
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2213      	movs	r2, #19
 80020da:	18ba      	adds	r2, r7, r2
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e005      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e2:	2312      	movs	r3, #18
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2213      	movs	r2, #19
 80020e8:	18ba      	adds	r2, r7, r2
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ee:	2311      	movs	r3, #17
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fc:	4b74      	ldr	r3, [pc, #464]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fe:	4979      	ldr	r1, [pc, #484]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002100:	400a      	ands	r2, r1
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d009      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	2203      	movs	r2, #3
 8002114:	4393      	bics	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211e:	430a      	orrs	r2, r1
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	220c      	movs	r2, #12
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213c:	430a      	orrs	r2, r1
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	4013      	ands	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800215a:	430a      	orrs	r2, r1
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216a:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217a:	430a      	orrs	r2, r1
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4013      	ands	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800218a:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002190:	4013      	ands	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800219a:	430a      	orrs	r2, r1
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	4013      	ands	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a8:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4013      	ands	r3, r2
 80021c6:	d015      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c8:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	0899      	lsrs	r1, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d106      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0249      	lsls	r1, r1, #9
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	2240      	movs	r2, #64	; 0x40
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002210:	430a      	orrs	r2, r1
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	039b      	lsls	r3, r3, #14
 800221c:	4013      	ands	r3, r2
 800221e:	d016      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	430a      	orrs	r2, r1
 8002232:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	03db      	lsls	r3, r3, #15
 800223c:	429a      	cmp	r2, r3
 800223e:	d106      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0449      	lsls	r1, r1, #17
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	03db      	lsls	r3, r3, #15
 8002256:	4013      	ands	r3, r2
 8002258:	d016      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	4a27      	ldr	r2, [pc, #156]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002260:	4013      	ands	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226a:	430a      	orrs	r2, r1
 800226c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	045b      	lsls	r3, r3, #17
 8002276:	429a      	cmp	r2, r3
 8002278:	d106      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0449      	lsls	r1, r1, #17
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d016      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	01db      	lsls	r3, r3, #7
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0249      	lsls	r1, r1, #9
 80022be:	430a      	orrs	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80022c2:	2312      	movs	r3, #18
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b006      	add	sp, #24
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	fffffcff 	.word	0xfffffcff
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	00001388 	.word	0x00001388
 80022e4:	efffffff 	.word	0xefffffff
 80022e8:	fffff3ff 	.word	0xfffff3ff
 80022ec:	fff3ffff 	.word	0xfff3ffff
 80022f0:	ffcfffff 	.word	0xffcfffff
 80022f4:	ffffcfff 	.word	0xffffcfff
 80022f8:	ffbfffff 	.word	0xffbfffff
 80022fc:	feffffff 	.word	0xfeffffff
 8002300:	ffff3fff 	.word	0xffff3fff

08002304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e046      	b.n	80023a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	589b      	ldr	r3, [r3, r2]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	227c      	movs	r2, #124	; 0x7c
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f001 fdf0 	bl	8003f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	2124      	movs	r1, #36	; 0x24
 8002336:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f830 	bl	80023b0 <UART_SetConfig>
 8002350:	0003      	movs	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e024      	b.n	80023a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f001 f90d 	bl	8003584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	490d      	ldr	r1, [pc, #52]	; (80023ac <HAL_UART_Init+0xa8>)
 8002376:	400a      	ands	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	212a      	movs	r1, #42	; 0x2a
 8002386:	438a      	bics	r2, r1
 8002388:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f001 f9a5 	bl	80036ec <UART_CheckIdleState>
 80023a2:	0003      	movs	r3, r0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	ffffb7ff 	.word	0xffffb7ff

080023b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b09f      	sub	sp, #124	; 0x7c
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80023bc:	2313      	movs	r3, #19
 80023be:	2258      	movs	r2, #88	; 0x58
 80023c0:	18ba      	adds	r2, r7, r2
 80023c2:	18d2      	adds	r2, r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	431a      	orrs	r2, r3
 80023dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 80023e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ea:	4313      	orrs	r3, r2
 80023ec:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4bba      	ldr	r3, [pc, #744]	; (80026e0 <UART_SetConfig+0x330>)
 80023f6:	401a      	ands	r2, r3
 80023f8:	0011      	movs	r1, r2
 80023fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	430b      	orrs	r3, r1
 8002402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4bb6      	ldr	r3, [pc, #728]	; (80026e4 <UART_SetConfig+0x334>)
 800240c:	401a      	ands	r2, r3
 800240e:	0010      	movs	r0, r2
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002412:	68d9      	ldr	r1, [r3, #12]
 8002414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	0003      	movs	r3, r0
 800241a:	430b      	orrs	r3, r1
 800241c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800241e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4baf      	ldr	r3, [pc, #700]	; (80026e8 <UART_SetConfig+0x338>)
 800242a:	429a      	cmp	r2, r3
 800242c:	d004      	beq.n	8002438 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800242e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002434:	4313      	orrs	r3, r2
 8002436:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4bab      	ldr	r3, [pc, #684]	; (80026ec <UART_SetConfig+0x33c>)
 8002440:	401a      	ands	r2, r3
 8002442:	0011      	movs	r1, r2
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	430b      	orrs	r3, r1
 800244c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	230f      	movs	r3, #15
 8002456:	439a      	bics	r2, r3
 8002458:	0010      	movs	r0, r2
 800245a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	0003      	movs	r3, r0
 8002464:	430b      	orrs	r3, r1
 8002466:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <UART_SetConfig+0x340>)
 800246e:	429a      	cmp	r2, r3
 8002470:	d12f      	bne.n	80024d2 <UART_SetConfig+0x122>
 8002472:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <UART_SetConfig+0x344>)
 8002474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002476:	2303      	movs	r3, #3
 8002478:	4013      	ands	r3, r2
 800247a:	2b01      	cmp	r3, #1
 800247c:	d013      	beq.n	80024a6 <UART_SetConfig+0xf6>
 800247e:	d304      	bcc.n	800248a <UART_SetConfig+0xda>
 8002480:	2b02      	cmp	r3, #2
 8002482:	d009      	beq.n	8002498 <UART_SetConfig+0xe8>
 8002484:	2b03      	cmp	r3, #3
 8002486:	d015      	beq.n	80024b4 <UART_SetConfig+0x104>
 8002488:	e01b      	b.n	80024c2 <UART_SetConfig+0x112>
 800248a:	231b      	movs	r3, #27
 800248c:	2258      	movs	r2, #88	; 0x58
 800248e:	18ba      	adds	r2, r7, r2
 8002490:	18d2      	adds	r2, r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	7013      	strb	r3, [r2, #0]
 8002496:	e0b4      	b.n	8002602 <UART_SetConfig+0x252>
 8002498:	231b      	movs	r3, #27
 800249a:	2258      	movs	r2, #88	; 0x58
 800249c:	18ba      	adds	r2, r7, r2
 800249e:	18d2      	adds	r2, r2, r3
 80024a0:	2302      	movs	r3, #2
 80024a2:	7013      	strb	r3, [r2, #0]
 80024a4:	e0ad      	b.n	8002602 <UART_SetConfig+0x252>
 80024a6:	231b      	movs	r3, #27
 80024a8:	2258      	movs	r2, #88	; 0x58
 80024aa:	18ba      	adds	r2, r7, r2
 80024ac:	18d2      	adds	r2, r2, r3
 80024ae:	2304      	movs	r3, #4
 80024b0:	7013      	strb	r3, [r2, #0]
 80024b2:	e0a6      	b.n	8002602 <UART_SetConfig+0x252>
 80024b4:	231b      	movs	r3, #27
 80024b6:	2258      	movs	r2, #88	; 0x58
 80024b8:	18ba      	adds	r2, r7, r2
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	2308      	movs	r3, #8
 80024be:	7013      	strb	r3, [r2, #0]
 80024c0:	e09f      	b.n	8002602 <UART_SetConfig+0x252>
 80024c2:	231b      	movs	r3, #27
 80024c4:	2258      	movs	r2, #88	; 0x58
 80024c6:	18ba      	adds	r2, r7, r2
 80024c8:	18d2      	adds	r2, r2, r3
 80024ca:	2310      	movs	r3, #16
 80024cc:	7013      	strb	r3, [r2, #0]
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	e097      	b.n	8002602 <UART_SetConfig+0x252>
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <UART_SetConfig+0x348>)
 80024d8:	429a      	cmp	r2, r3
 80024da:	d132      	bne.n	8002542 <UART_SetConfig+0x192>
 80024dc:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <UART_SetConfig+0x344>)
 80024de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024e0:	230c      	movs	r3, #12
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d016      	beq.n	8002516 <UART_SetConfig+0x166>
 80024e8:	d802      	bhi.n	80024f0 <UART_SetConfig+0x140>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <UART_SetConfig+0x14a>
 80024ee:	e020      	b.n	8002532 <UART_SetConfig+0x182>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d009      	beq.n	8002508 <UART_SetConfig+0x158>
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	d015      	beq.n	8002524 <UART_SetConfig+0x174>
 80024f8:	e01b      	b.n	8002532 <UART_SetConfig+0x182>
 80024fa:	231b      	movs	r3, #27
 80024fc:	2258      	movs	r2, #88	; 0x58
 80024fe:	18ba      	adds	r2, r7, r2
 8002500:	18d2      	adds	r2, r2, r3
 8002502:	2300      	movs	r3, #0
 8002504:	7013      	strb	r3, [r2, #0]
 8002506:	e07c      	b.n	8002602 <UART_SetConfig+0x252>
 8002508:	231b      	movs	r3, #27
 800250a:	2258      	movs	r2, #88	; 0x58
 800250c:	18ba      	adds	r2, r7, r2
 800250e:	18d2      	adds	r2, r2, r3
 8002510:	2302      	movs	r3, #2
 8002512:	7013      	strb	r3, [r2, #0]
 8002514:	e075      	b.n	8002602 <UART_SetConfig+0x252>
 8002516:	231b      	movs	r3, #27
 8002518:	2258      	movs	r2, #88	; 0x58
 800251a:	18ba      	adds	r2, r7, r2
 800251c:	18d2      	adds	r2, r2, r3
 800251e:	2304      	movs	r3, #4
 8002520:	7013      	strb	r3, [r2, #0]
 8002522:	e06e      	b.n	8002602 <UART_SetConfig+0x252>
 8002524:	231b      	movs	r3, #27
 8002526:	2258      	movs	r2, #88	; 0x58
 8002528:	18ba      	adds	r2, r7, r2
 800252a:	18d2      	adds	r2, r2, r3
 800252c:	2308      	movs	r3, #8
 800252e:	7013      	strb	r3, [r2, #0]
 8002530:	e067      	b.n	8002602 <UART_SetConfig+0x252>
 8002532:	231b      	movs	r3, #27
 8002534:	2258      	movs	r2, #88	; 0x58
 8002536:	18ba      	adds	r2, r7, r2
 8002538:	18d2      	adds	r2, r2, r3
 800253a:	2310      	movs	r3, #16
 800253c:	7013      	strb	r3, [r2, #0]
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	e05f      	b.n	8002602 <UART_SetConfig+0x252>
 8002542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <UART_SetConfig+0x34c>)
 8002548:	429a      	cmp	r2, r3
 800254a:	d106      	bne.n	800255a <UART_SetConfig+0x1aa>
 800254c:	231b      	movs	r3, #27
 800254e:	2258      	movs	r2, #88	; 0x58
 8002550:	18ba      	adds	r2, r7, r2
 8002552:	18d2      	adds	r2, r2, r3
 8002554:	2300      	movs	r3, #0
 8002556:	7013      	strb	r3, [r2, #0]
 8002558:	e053      	b.n	8002602 <UART_SetConfig+0x252>
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b68      	ldr	r3, [pc, #416]	; (8002700 <UART_SetConfig+0x350>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <UART_SetConfig+0x1c2>
 8002564:	231b      	movs	r3, #27
 8002566:	2258      	movs	r2, #88	; 0x58
 8002568:	18ba      	adds	r2, r7, r2
 800256a:	18d2      	adds	r2, r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	7013      	strb	r3, [r2, #0]
 8002570:	e047      	b.n	8002602 <UART_SetConfig+0x252>
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <UART_SetConfig+0x338>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d13c      	bne.n	80025f6 <UART_SetConfig+0x246>
 800257c:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <UART_SetConfig+0x344>)
 800257e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	401a      	ands	r2, r3
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	429a      	cmp	r2, r3
 800258c:	d01d      	beq.n	80025ca <UART_SetConfig+0x21a>
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	429a      	cmp	r2, r3
 8002594:	d802      	bhi.n	800259c <UART_SetConfig+0x1ec>
 8002596:	2a00      	cmp	r2, #0
 8002598:	d009      	beq.n	80025ae <UART_SetConfig+0x1fe>
 800259a:	e024      	b.n	80025e6 <UART_SetConfig+0x236>
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d00b      	beq.n	80025bc <UART_SetConfig+0x20c>
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d015      	beq.n	80025d8 <UART_SetConfig+0x228>
 80025ac:	e01b      	b.n	80025e6 <UART_SetConfig+0x236>
 80025ae:	231b      	movs	r3, #27
 80025b0:	2258      	movs	r2, #88	; 0x58
 80025b2:	18ba      	adds	r2, r7, r2
 80025b4:	18d2      	adds	r2, r2, r3
 80025b6:	2300      	movs	r3, #0
 80025b8:	7013      	strb	r3, [r2, #0]
 80025ba:	e022      	b.n	8002602 <UART_SetConfig+0x252>
 80025bc:	231b      	movs	r3, #27
 80025be:	2258      	movs	r2, #88	; 0x58
 80025c0:	18ba      	adds	r2, r7, r2
 80025c2:	18d2      	adds	r2, r2, r3
 80025c4:	2302      	movs	r3, #2
 80025c6:	7013      	strb	r3, [r2, #0]
 80025c8:	e01b      	b.n	8002602 <UART_SetConfig+0x252>
 80025ca:	231b      	movs	r3, #27
 80025cc:	2258      	movs	r2, #88	; 0x58
 80025ce:	18ba      	adds	r2, r7, r2
 80025d0:	18d2      	adds	r2, r2, r3
 80025d2:	2304      	movs	r3, #4
 80025d4:	7013      	strb	r3, [r2, #0]
 80025d6:	e014      	b.n	8002602 <UART_SetConfig+0x252>
 80025d8:	231b      	movs	r3, #27
 80025da:	2258      	movs	r2, #88	; 0x58
 80025dc:	18ba      	adds	r2, r7, r2
 80025de:	18d2      	adds	r2, r2, r3
 80025e0:	2308      	movs	r3, #8
 80025e2:	7013      	strb	r3, [r2, #0]
 80025e4:	e00d      	b.n	8002602 <UART_SetConfig+0x252>
 80025e6:	231b      	movs	r3, #27
 80025e8:	2258      	movs	r2, #88	; 0x58
 80025ea:	18ba      	adds	r2, r7, r2
 80025ec:	18d2      	adds	r2, r2, r3
 80025ee:	2310      	movs	r3, #16
 80025f0:	7013      	strb	r3, [r2, #0]
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	e005      	b.n	8002602 <UART_SetConfig+0x252>
 80025f6:	231b      	movs	r3, #27
 80025f8:	2258      	movs	r2, #88	; 0x58
 80025fa:	18ba      	adds	r2, r7, r2
 80025fc:	18d2      	adds	r2, r2, r3
 80025fe:	2310      	movs	r3, #16
 8002600:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <UART_SetConfig+0x338>)
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <UART_SetConfig+0x260>
 800260c:	f000 fbcc 	bl	8002da8 <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002610:	231b      	movs	r3, #27
 8002612:	2258      	movs	r2, #88	; 0x58
 8002614:	4694      	mov	ip, r2
 8002616:	44bc      	add	ip, r7
 8002618:	4463      	add	r3, ip
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d100      	bne.n	8002622 <UART_SetConfig+0x272>
 8002620:	e070      	b.n	8002704 <UART_SetConfig+0x354>
 8002622:	dc02      	bgt.n	800262a <UART_SetConfig+0x27a>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <UART_SetConfig+0x288>
 8002628:	e15f      	b.n	80028ea <UART_SetConfig+0x53a>
 800262a:	2b04      	cmp	r3, #4
 800262c:	d100      	bne.n	8002630 <UART_SetConfig+0x280>
 800262e:	e0b4      	b.n	800279a <UART_SetConfig+0x3ea>
 8002630:	2b08      	cmp	r3, #8
 8002632:	d100      	bne.n	8002636 <UART_SetConfig+0x286>
 8002634:	e105      	b.n	8002842 <UART_SetConfig+0x492>
 8002636:	e158      	b.n	80028ea <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002638:	f7ff fc96 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800263c:	0002      	movs	r2, r0
 800263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2b00      	cmp	r3, #0
 8002644:	d044      	beq.n	80026d0 <UART_SetConfig+0x320>
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b01      	cmp	r3, #1
 800264c:	d03e      	beq.n	80026cc <UART_SetConfig+0x31c>
 800264e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b02      	cmp	r3, #2
 8002654:	d038      	beq.n	80026c8 <UART_SetConfig+0x318>
 8002656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b03      	cmp	r3, #3
 800265c:	d032      	beq.n	80026c4 <UART_SetConfig+0x314>
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b04      	cmp	r3, #4
 8002664:	d02c      	beq.n	80026c0 <UART_SetConfig+0x310>
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b05      	cmp	r3, #5
 800266c:	d026      	beq.n	80026bc <UART_SetConfig+0x30c>
 800266e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b06      	cmp	r3, #6
 8002674:	d020      	beq.n	80026b8 <UART_SetConfig+0x308>
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2b07      	cmp	r3, #7
 800267c:	d01a      	beq.n	80026b4 <UART_SetConfig+0x304>
 800267e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b08      	cmp	r3, #8
 8002684:	d014      	beq.n	80026b0 <UART_SetConfig+0x300>
 8002686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b09      	cmp	r3, #9
 800268c:	d00e      	beq.n	80026ac <UART_SetConfig+0x2fc>
 800268e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b0a      	cmp	r3, #10
 8002694:	d008      	beq.n	80026a8 <UART_SetConfig+0x2f8>
 8002696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b0b      	cmp	r3, #11
 800269c:	d102      	bne.n	80026a4 <UART_SetConfig+0x2f4>
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	e016      	b.n	80026d2 <UART_SetConfig+0x322>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e014      	b.n	80026d2 <UART_SetConfig+0x322>
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	e012      	b.n	80026d2 <UART_SetConfig+0x322>
 80026ac:	2340      	movs	r3, #64	; 0x40
 80026ae:	e010      	b.n	80026d2 <UART_SetConfig+0x322>
 80026b0:	2320      	movs	r3, #32
 80026b2:	e00e      	b.n	80026d2 <UART_SetConfig+0x322>
 80026b4:	2310      	movs	r3, #16
 80026b6:	e00c      	b.n	80026d2 <UART_SetConfig+0x322>
 80026b8:	230c      	movs	r3, #12
 80026ba:	e00a      	b.n	80026d2 <UART_SetConfig+0x322>
 80026bc:	230a      	movs	r3, #10
 80026be:	e008      	b.n	80026d2 <UART_SetConfig+0x322>
 80026c0:	2308      	movs	r3, #8
 80026c2:	e006      	b.n	80026d2 <UART_SetConfig+0x322>
 80026c4:	2306      	movs	r3, #6
 80026c6:	e004      	b.n	80026d2 <UART_SetConfig+0x322>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e002      	b.n	80026d2 <UART_SetConfig+0x322>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e000      	b.n	80026d2 <UART_SetConfig+0x322>
 80026d0:	2301      	movs	r3, #1
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f7fd fd15 	bl	8000104 <__udivsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80026de:	e10b      	b.n	80028f8 <UART_SetConfig+0x548>
 80026e0:	cfff69f3 	.word	0xcfff69f3
 80026e4:	ffffcfff 	.word	0xffffcfff
 80026e8:	40008000 	.word	0x40008000
 80026ec:	11fff4ff 	.word	0x11fff4ff
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40004800 	.word	0x40004800
 8002700:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <UART_SetConfig+0x3e4>
 800270c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2b01      	cmp	r3, #1
 8002712:	d03d      	beq.n	8002790 <UART_SetConfig+0x3e0>
 8002714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b02      	cmp	r3, #2
 800271a:	d037      	beq.n	800278c <UART_SetConfig+0x3dc>
 800271c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	2b03      	cmp	r3, #3
 8002722:	d031      	beq.n	8002788 <UART_SetConfig+0x3d8>
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2b04      	cmp	r3, #4
 800272a:	d02b      	beq.n	8002784 <UART_SetConfig+0x3d4>
 800272c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b05      	cmp	r3, #5
 8002732:	d025      	beq.n	8002780 <UART_SetConfig+0x3d0>
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b06      	cmp	r3, #6
 800273a:	d01f      	beq.n	800277c <UART_SetConfig+0x3cc>
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b07      	cmp	r3, #7
 8002742:	d019      	beq.n	8002778 <UART_SetConfig+0x3c8>
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2b08      	cmp	r3, #8
 800274a:	d013      	beq.n	8002774 <UART_SetConfig+0x3c4>
 800274c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b09      	cmp	r3, #9
 8002752:	d00d      	beq.n	8002770 <UART_SetConfig+0x3c0>
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2b0a      	cmp	r3, #10
 800275a:	d007      	beq.n	800276c <UART_SetConfig+0x3bc>
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b0b      	cmp	r3, #11
 8002762:	d101      	bne.n	8002768 <UART_SetConfig+0x3b8>
 8002764:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <UART_SetConfig+0x660>)
 8002766:	e016      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002768:	4baa      	ldr	r3, [pc, #680]	; (8002a14 <UART_SetConfig+0x664>)
 800276a:	e014      	b.n	8002796 <UART_SetConfig+0x3e6>
 800276c:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <UART_SetConfig+0x668>)
 800276e:	e012      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002770:	4baa      	ldr	r3, [pc, #680]	; (8002a1c <UART_SetConfig+0x66c>)
 8002772:	e010      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002774:	4baa      	ldr	r3, [pc, #680]	; (8002a20 <UART_SetConfig+0x670>)
 8002776:	e00e      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002778:	4baa      	ldr	r3, [pc, #680]	; (8002a24 <UART_SetConfig+0x674>)
 800277a:	e00c      	b.n	8002796 <UART_SetConfig+0x3e6>
 800277c:	4baa      	ldr	r3, [pc, #680]	; (8002a28 <UART_SetConfig+0x678>)
 800277e:	e00a      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002780:	4baa      	ldr	r3, [pc, #680]	; (8002a2c <UART_SetConfig+0x67c>)
 8002782:	e008      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002784:	4baa      	ldr	r3, [pc, #680]	; (8002a30 <UART_SetConfig+0x680>)
 8002786:	e006      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002788:	4baa      	ldr	r3, [pc, #680]	; (8002a34 <UART_SetConfig+0x684>)
 800278a:	e004      	b.n	8002796 <UART_SetConfig+0x3e6>
 800278c:	4baa      	ldr	r3, [pc, #680]	; (8002a38 <UART_SetConfig+0x688>)
 800278e:	e002      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002790:	4baa      	ldr	r3, [pc, #680]	; (8002a3c <UART_SetConfig+0x68c>)
 8002792:	e000      	b.n	8002796 <UART_SetConfig+0x3e6>
 8002794:	4b9f      	ldr	r3, [pc, #636]	; (8002a14 <UART_SetConfig+0x664>)
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002798:	e0ae      	b.n	80028f8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800279a:	f7ff fb59 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 800279e:	0002      	movs	r2, r0
 80027a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d044      	beq.n	8002832 <UART_SetConfig+0x482>
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d03e      	beq.n	800282e <UART_SetConfig+0x47e>
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d038      	beq.n	800282a <UART_SetConfig+0x47a>
 80027b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d032      	beq.n	8002826 <UART_SetConfig+0x476>
 80027c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d02c      	beq.n	8002822 <UART_SetConfig+0x472>
 80027c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d026      	beq.n	800281e <UART_SetConfig+0x46e>
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d020      	beq.n	800281a <UART_SetConfig+0x46a>
 80027d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2b07      	cmp	r3, #7
 80027de:	d01a      	beq.n	8002816 <UART_SetConfig+0x466>
 80027e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d014      	beq.n	8002812 <UART_SetConfig+0x462>
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d00e      	beq.n	800280e <UART_SetConfig+0x45e>
 80027f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b0a      	cmp	r3, #10
 80027f6:	d008      	beq.n	800280a <UART_SetConfig+0x45a>
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d102      	bne.n	8002806 <UART_SetConfig+0x456>
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	e016      	b.n	8002834 <UART_SetConfig+0x484>
 8002806:	2301      	movs	r3, #1
 8002808:	e014      	b.n	8002834 <UART_SetConfig+0x484>
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	e012      	b.n	8002834 <UART_SetConfig+0x484>
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	e010      	b.n	8002834 <UART_SetConfig+0x484>
 8002812:	2320      	movs	r3, #32
 8002814:	e00e      	b.n	8002834 <UART_SetConfig+0x484>
 8002816:	2310      	movs	r3, #16
 8002818:	e00c      	b.n	8002834 <UART_SetConfig+0x484>
 800281a:	230c      	movs	r3, #12
 800281c:	e00a      	b.n	8002834 <UART_SetConfig+0x484>
 800281e:	230a      	movs	r3, #10
 8002820:	e008      	b.n	8002834 <UART_SetConfig+0x484>
 8002822:	2308      	movs	r3, #8
 8002824:	e006      	b.n	8002834 <UART_SetConfig+0x484>
 8002826:	2306      	movs	r3, #6
 8002828:	e004      	b.n	8002834 <UART_SetConfig+0x484>
 800282a:	2304      	movs	r3, #4
 800282c:	e002      	b.n	8002834 <UART_SetConfig+0x484>
 800282e:	2302      	movs	r3, #2
 8002830:	e000      	b.n	8002834 <UART_SetConfig+0x484>
 8002832:	2301      	movs	r3, #1
 8002834:	0019      	movs	r1, r3
 8002836:	0010      	movs	r0, r2
 8002838:	f7fd fc64 	bl	8000104 <__udivsi3>
 800283c:	0003      	movs	r3, r0
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002840:	e05a      	b.n	80028f8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04b      	beq.n	80028e2 <UART_SetConfig+0x532>
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b01      	cmp	r3, #1
 8002850:	d044      	beq.n	80028dc <UART_SetConfig+0x52c>
 8002852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b02      	cmp	r3, #2
 8002858:	d03d      	beq.n	80028d6 <UART_SetConfig+0x526>
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b03      	cmp	r3, #3
 8002860:	d037      	beq.n	80028d2 <UART_SetConfig+0x522>
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b04      	cmp	r3, #4
 8002868:	d030      	beq.n	80028cc <UART_SetConfig+0x51c>
 800286a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b05      	cmp	r3, #5
 8002870:	d02a      	beq.n	80028c8 <UART_SetConfig+0x518>
 8002872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b06      	cmp	r3, #6
 8002878:	d024      	beq.n	80028c4 <UART_SetConfig+0x514>
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b07      	cmp	r3, #7
 8002880:	d01d      	beq.n	80028be <UART_SetConfig+0x50e>
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2b08      	cmp	r3, #8
 8002888:	d016      	beq.n	80028b8 <UART_SetConfig+0x508>
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b09      	cmp	r3, #9
 8002890:	d00f      	beq.n	80028b2 <UART_SetConfig+0x502>
 8002892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b0a      	cmp	r3, #10
 8002898:	d008      	beq.n	80028ac <UART_SetConfig+0x4fc>
 800289a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b0b      	cmp	r3, #11
 80028a0:	d101      	bne.n	80028a6 <UART_SetConfig+0x4f6>
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	e01f      	b.n	80028e6 <UART_SetConfig+0x536>
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	e01c      	b.n	80028e6 <UART_SetConfig+0x536>
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	e019      	b.n	80028e6 <UART_SetConfig+0x536>
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	e016      	b.n	80028e6 <UART_SetConfig+0x536>
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	e013      	b.n	80028e6 <UART_SetConfig+0x536>
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	e010      	b.n	80028e6 <UART_SetConfig+0x536>
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <UART_SetConfig+0x690>)
 80028c6:	e00e      	b.n	80028e6 <UART_SetConfig+0x536>
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <UART_SetConfig+0x694>)
 80028ca:	e00c      	b.n	80028e6 <UART_SetConfig+0x536>
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	015b      	lsls	r3, r3, #5
 80028d0:	e009      	b.n	80028e6 <UART_SetConfig+0x536>
 80028d2:	4b5d      	ldr	r3, [pc, #372]	; (8002a48 <UART_SetConfig+0x698>)
 80028d4:	e007      	b.n	80028e6 <UART_SetConfig+0x536>
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	e004      	b.n	80028e6 <UART_SetConfig+0x536>
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	e001      	b.n	80028e6 <UART_SetConfig+0x536>
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80028e8:	e006      	b.n	80028f8 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 80028ea:	2313      	movs	r3, #19
 80028ec:	2258      	movs	r2, #88	; 0x58
 80028ee:	18ba      	adds	r2, r7, r2
 80028f0:	18d2      	adds	r2, r2, r3
 80028f2:	2301      	movs	r3, #1
 80028f4:	7013      	strb	r3, [r2, #0]
        break;
 80028f6:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80028f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <UART_SetConfig+0x552>
 80028fe:	f000 fe09 	bl	8003514 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	0013      	movs	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	189a      	adds	r2, r3, r2
 800290c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800290e:	4293      	cmp	r3, r2
 8002910:	d305      	bcc.n	800291e <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800291a:	4293      	cmp	r3, r2
 800291c:	d908      	bls.n	8002930 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 800291e:	2313      	movs	r3, #19
 8002920:	2258      	movs	r2, #88	; 0x58
 8002922:	4694      	mov	ip, r2
 8002924:	44bc      	add	ip, r7
 8002926:	4463      	add	r3, ip
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	f000 fdf2 	bl	8003514 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002930:	231b      	movs	r3, #27
 8002932:	2258      	movs	r2, #88	; 0x58
 8002934:	4694      	mov	ip, r2
 8002936:	44bc      	add	ip, r7
 8002938:	4463      	add	r3, ip
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d100      	bne.n	8002942 <UART_SetConfig+0x592>
 8002940:	e0a9      	b.n	8002a96 <UART_SetConfig+0x6e6>
 8002942:	dc02      	bgt.n	800294a <UART_SetConfig+0x59a>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <UART_SetConfig+0x5a8>
 8002948:	e20f      	b.n	8002d6a <UART_SetConfig+0x9ba>
 800294a:	2b04      	cmp	r3, #4
 800294c:	d100      	bne.n	8002950 <UART_SetConfig+0x5a0>
 800294e:	e10f      	b.n	8002b70 <UART_SetConfig+0x7c0>
 8002950:	2b08      	cmp	r3, #8
 8002952:	d100      	bne.n	8002956 <UART_SetConfig+0x5a6>
 8002954:	e192      	b.n	8002c7c <UART_SetConfig+0x8cc>
 8002956:	e208      	b.n	8002d6a <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002958:	f7ff fb06 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800295c:	0003      	movs	r3, r0
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002960:	2300      	movs	r3, #0
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	2b00      	cmp	r3, #0
 800296a:	d100      	bne.n	800296e <UART_SetConfig+0x5be>
 800296c:	e06e      	b.n	8002a4c <UART_SetConfig+0x69c>
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2b01      	cmp	r3, #1
 8002974:	d049      	beq.n	8002a0a <UART_SetConfig+0x65a>
 8002976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b02      	cmp	r3, #2
 800297c:	d042      	beq.n	8002a04 <UART_SetConfig+0x654>
 800297e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b03      	cmp	r3, #3
 8002984:	d03b      	beq.n	80029fe <UART_SetConfig+0x64e>
 8002986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2b04      	cmp	r3, #4
 800298c:	d034      	beq.n	80029f8 <UART_SetConfig+0x648>
 800298e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b05      	cmp	r3, #5
 8002994:	d02d      	beq.n	80029f2 <UART_SetConfig+0x642>
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b06      	cmp	r3, #6
 800299c:	d026      	beq.n	80029ec <UART_SetConfig+0x63c>
 800299e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b07      	cmp	r3, #7
 80029a4:	d01f      	beq.n	80029e6 <UART_SetConfig+0x636>
 80029a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d018      	beq.n	80029e0 <UART_SetConfig+0x630>
 80029ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	d011      	beq.n	80029da <UART_SetConfig+0x62a>
 80029b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b0a      	cmp	r3, #10
 80029bc:	d00a      	beq.n	80029d4 <UART_SetConfig+0x624>
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b0b      	cmp	r3, #11
 80029c4:	d103      	bne.n	80029ce <UART_SetConfig+0x61e>
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2400      	movs	r4, #0
 80029cc:	e040      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029ce:	2301      	movs	r3, #1
 80029d0:	2400      	movs	r4, #0
 80029d2:	e03d      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	2400      	movs	r4, #0
 80029d8:	e03a      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	2400      	movs	r4, #0
 80029de:	e037      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029e0:	2320      	movs	r3, #32
 80029e2:	2400      	movs	r4, #0
 80029e4:	e034      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029e6:	2310      	movs	r3, #16
 80029e8:	2400      	movs	r4, #0
 80029ea:	e031      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029ec:	230c      	movs	r3, #12
 80029ee:	2400      	movs	r4, #0
 80029f0:	e02e      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029f2:	230a      	movs	r3, #10
 80029f4:	2400      	movs	r4, #0
 80029f6:	e02b      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029f8:	2308      	movs	r3, #8
 80029fa:	2400      	movs	r4, #0
 80029fc:	e028      	b.n	8002a50 <UART_SetConfig+0x6a0>
 80029fe:	2306      	movs	r3, #6
 8002a00:	2400      	movs	r4, #0
 8002a02:	e025      	b.n	8002a50 <UART_SetConfig+0x6a0>
 8002a04:	2304      	movs	r3, #4
 8002a06:	2400      	movs	r4, #0
 8002a08:	e022      	b.n	8002a50 <UART_SetConfig+0x6a0>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	e01f      	b.n	8002a50 <UART_SetConfig+0x6a0>
 8002a10:	0000f424 	.word	0x0000f424
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	0001e848 	.word	0x0001e848
 8002a1c:	0003d090 	.word	0x0003d090
 8002a20:	0007a120 	.word	0x0007a120
 8002a24:	000f4240 	.word	0x000f4240
 8002a28:	00145855 	.word	0x00145855
 8002a2c:	00186a00 	.word	0x00186a00
 8002a30:	001e8480 	.word	0x001e8480
 8002a34:	0028b0aa 	.word	0x0028b0aa
 8002a38:	003d0900 	.word	0x003d0900
 8002a3c:	007a1200 	.word	0x007a1200
 8002a40:	00000aaa 	.word	0x00000aaa
 8002a44:	00000ccc 	.word	0x00000ccc
 8002a48:	00001555 	.word	0x00001555
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	2400      	movs	r4, #0
 8002a50:	001a      	movs	r2, r3
 8002a52:	0023      	movs	r3, r4
 8002a54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a58:	f7fd fcca 	bl	80003f0 <__aeabi_uldivmod>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	000c      	movs	r4, r1
 8002a60:	0e1a      	lsrs	r2, r3, #24
 8002a62:	0226      	lsls	r6, r4, #8
 8002a64:	4316      	orrs	r6, r2
 8002a66:	021d      	lsls	r5, r3, #8
 8002a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a70:	2300      	movs	r3, #0
 8002a72:	647b      	str	r3, [r7, #68]	; 0x44
 8002a74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a78:	1940      	adds	r0, r0, r5
 8002a7a:	4171      	adcs	r1, r6
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a82:	2300      	movs	r3, #0
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	f7fd fcb1 	bl	80003f0 <__aeabi_uldivmod>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	000c      	movs	r4, r1
 8002a92:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002a94:	e171      	b.n	8002d7a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04f      	beq.n	8002b3e <UART_SetConfig+0x78e>
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d048      	beq.n	8002b38 <UART_SetConfig+0x788>
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d041      	beq.n	8002b32 <UART_SetConfig+0x782>
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d03a      	beq.n	8002b2c <UART_SetConfig+0x77c>
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d033      	beq.n	8002b26 <UART_SetConfig+0x776>
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d02c      	beq.n	8002b20 <UART_SetConfig+0x770>
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d025      	beq.n	8002b1a <UART_SetConfig+0x76a>
 8002ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b07      	cmp	r3, #7
 8002ad4:	d01e      	beq.n	8002b14 <UART_SetConfig+0x764>
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d017      	beq.n	8002b0e <UART_SetConfig+0x75e>
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d010      	beq.n	8002b08 <UART_SetConfig+0x758>
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b0a      	cmp	r3, #10
 8002aec:	d009      	beq.n	8002b02 <UART_SetConfig+0x752>
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b0b      	cmp	r3, #11
 8002af4:	d102      	bne.n	8002afc <UART_SetConfig+0x74c>
 8002af6:	4bba      	ldr	r3, [pc, #744]	; (8002de0 <UART_SetConfig+0xa30>)
 8002af8:	2400      	movs	r4, #0
 8002afa:	e022      	b.n	8002b42 <UART_SetConfig+0x792>
 8002afc:	4bb9      	ldr	r3, [pc, #740]	; (8002de4 <UART_SetConfig+0xa34>)
 8002afe:	2400      	movs	r4, #0
 8002b00:	e01f      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b02:	4bb9      	ldr	r3, [pc, #740]	; (8002de8 <UART_SetConfig+0xa38>)
 8002b04:	2400      	movs	r4, #0
 8002b06:	e01c      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b08:	4bb8      	ldr	r3, [pc, #736]	; (8002dec <UART_SetConfig+0xa3c>)
 8002b0a:	2400      	movs	r4, #0
 8002b0c:	e019      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b0e:	4bb8      	ldr	r3, [pc, #736]	; (8002df0 <UART_SetConfig+0xa40>)
 8002b10:	2400      	movs	r4, #0
 8002b12:	e016      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b14:	4bb7      	ldr	r3, [pc, #732]	; (8002df4 <UART_SetConfig+0xa44>)
 8002b16:	2400      	movs	r4, #0
 8002b18:	e013      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b1a:	4bb7      	ldr	r3, [pc, #732]	; (8002df8 <UART_SetConfig+0xa48>)
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	e010      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b20:	4bb6      	ldr	r3, [pc, #728]	; (8002dfc <UART_SetConfig+0xa4c>)
 8002b22:	2400      	movs	r4, #0
 8002b24:	e00d      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b26:	4bb6      	ldr	r3, [pc, #728]	; (8002e00 <UART_SetConfig+0xa50>)
 8002b28:	2400      	movs	r4, #0
 8002b2a:	e00a      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b2c:	4bb5      	ldr	r3, [pc, #724]	; (8002e04 <UART_SetConfig+0xa54>)
 8002b2e:	2400      	movs	r4, #0
 8002b30:	e007      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b32:	4bb5      	ldr	r3, [pc, #724]	; (8002e08 <UART_SetConfig+0xa58>)
 8002b34:	2400      	movs	r4, #0
 8002b36:	e004      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b38:	4bb4      	ldr	r3, [pc, #720]	; (8002e0c <UART_SetConfig+0xa5c>)
 8002b3a:	2400      	movs	r4, #0
 8002b3c:	e001      	b.n	8002b42 <UART_SetConfig+0x792>
 8002b3e:	4ba9      	ldr	r3, [pc, #676]	; (8002de4 <UART_SetConfig+0xa34>)
 8002b40:	2400      	movs	r4, #0
 8002b42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b44:	6852      	ldr	r2, [r2, #4]
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	633a      	str	r2, [r7, #48]	; 0x30
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	637a      	str	r2, [r7, #52]	; 0x34
 8002b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b52:	18c0      	adds	r0, r0, r3
 8002b54:	4161      	adcs	r1, r4
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	f7fd fc44 	bl	80003f0 <__aeabi_uldivmod>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	000c      	movs	r4, r1
 8002b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002b6e:	e104      	b.n	8002d7a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b70:	f7ff f96e 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002b74:	0003      	movs	r3, r0
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d050      	beq.n	8002c26 <UART_SetConfig+0x876>
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d049      	beq.n	8002c20 <UART_SetConfig+0x870>
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d042      	beq.n	8002c1a <UART_SetConfig+0x86a>
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d03b      	beq.n	8002c14 <UART_SetConfig+0x864>
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d034      	beq.n	8002c0e <UART_SetConfig+0x85e>
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d02d      	beq.n	8002c08 <UART_SetConfig+0x858>
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d026      	beq.n	8002c02 <UART_SetConfig+0x852>
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b07      	cmp	r3, #7
 8002bba:	d01f      	beq.n	8002bfc <UART_SetConfig+0x84c>
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d018      	beq.n	8002bf6 <UART_SetConfig+0x846>
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d011      	beq.n	8002bf0 <UART_SetConfig+0x840>
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b0a      	cmp	r3, #10
 8002bd2:	d00a      	beq.n	8002bea <UART_SetConfig+0x83a>
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b0b      	cmp	r3, #11
 8002bda:	d103      	bne.n	8002be4 <UART_SetConfig+0x834>
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2400      	movs	r4, #0
 8002be2:	e022      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002be4:	2301      	movs	r3, #1
 8002be6:	2400      	movs	r4, #0
 8002be8:	e01f      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	2400      	movs	r4, #0
 8002bee:	e01c      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002bf0:	2340      	movs	r3, #64	; 0x40
 8002bf2:	2400      	movs	r4, #0
 8002bf4:	e019      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	2400      	movs	r4, #0
 8002bfa:	e016      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	2400      	movs	r4, #0
 8002c00:	e013      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c02:	230c      	movs	r3, #12
 8002c04:	2400      	movs	r4, #0
 8002c06:	e010      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c08:	230a      	movs	r3, #10
 8002c0a:	2400      	movs	r4, #0
 8002c0c:	e00d      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	2400      	movs	r4, #0
 8002c12:	e00a      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c14:	2306      	movs	r3, #6
 8002c16:	2400      	movs	r4, #0
 8002c18:	e007      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	2400      	movs	r4, #0
 8002c1e:	e004      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c20:	2302      	movs	r3, #2
 8002c22:	2400      	movs	r4, #0
 8002c24:	e001      	b.n	8002c2a <UART_SetConfig+0x87a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	2400      	movs	r4, #0
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	0023      	movs	r3, r4
 8002c2e:	6a38      	ldr	r0, [r7, #32]
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	f7fd fbdd 	bl	80003f0 <__aeabi_uldivmod>
 8002c36:	0003      	movs	r3, r0
 8002c38:	000c      	movs	r4, r1
 8002c3a:	0e1a      	lsrs	r2, r3, #24
 8002c3c:	0221      	lsls	r1, r4, #8
 8002c3e:	6579      	str	r1, [r7, #84]	; 0x54
 8002c40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c42:	4311      	orrs	r1, r2
 8002c44:	6579      	str	r1, [r7, #84]	; 0x54
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	653b      	str	r3, [r7, #80]	; 0x50
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	69fc      	ldr	r4, [r7, #28]
 8002c5e:	18c0      	adds	r0, r0, r3
 8002c60:	4161      	adcs	r1, r4
 8002c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f7fd fbbe 	bl	80003f0 <__aeabi_uldivmod>
 8002c74:	0003      	movs	r3, r0
 8002c76:	000c      	movs	r4, r1
 8002c78:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002c7a:	e07e      	b.n	8002d7a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d058      	beq.n	8002d36 <UART_SetConfig+0x986>
 8002c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d050      	beq.n	8002d2e <UART_SetConfig+0x97e>
 8002c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d048      	beq.n	8002d26 <UART_SetConfig+0x976>
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d041      	beq.n	8002d20 <UART_SetConfig+0x970>
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d039      	beq.n	8002d18 <UART_SetConfig+0x968>
 8002ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d032      	beq.n	8002d12 <UART_SetConfig+0x962>
 8002cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d02b      	beq.n	8002d0c <UART_SetConfig+0x95c>
 8002cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d023      	beq.n	8002d04 <UART_SetConfig+0x954>
 8002cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d01b      	beq.n	8002cfc <UART_SetConfig+0x94c>
 8002cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d013      	beq.n	8002cf4 <UART_SetConfig+0x944>
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b0a      	cmp	r3, #10
 8002cd2:	d00b      	beq.n	8002cec <UART_SetConfig+0x93c>
 8002cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b0b      	cmp	r3, #11
 8002cda:	d103      	bne.n	8002ce4 <UART_SetConfig+0x934>
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	e02b      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	2400      	movs	r4, #0
 8002cea:	e027      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	e023      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	2400      	movs	r4, #0
 8002cfa:	e01f      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	02db      	lsls	r3, r3, #11
 8002d00:	2400      	movs	r4, #0
 8002d02:	e01b      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	031b      	lsls	r3, r3, #12
 8002d08:	2400      	movs	r4, #0
 8002d0a:	e017      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d0c:	4b40      	ldr	r3, [pc, #256]	; (8002e10 <UART_SetConfig+0xa60>)
 8002d0e:	2400      	movs	r4, #0
 8002d10:	e014      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <UART_SetConfig+0xa64>)
 8002d14:	2400      	movs	r4, #0
 8002d16:	e011      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	035b      	lsls	r3, r3, #13
 8002d1c:	2400      	movs	r4, #0
 8002d1e:	e00d      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d20:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <UART_SetConfig+0xa68>)
 8002d22:	2400      	movs	r4, #0
 8002d24:	e00a      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	039b      	lsls	r3, r3, #14
 8002d2a:	2400      	movs	r4, #0
 8002d2c:	e006      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	03db      	lsls	r3, r3, #15
 8002d32:	2400      	movs	r4, #0
 8002d34:	e002      	b.n	8002d3c <UART_SetConfig+0x98c>
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	2400      	movs	r4, #0
 8002d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d3e:	6852      	ldr	r2, [r2, #4]
 8002d40:	0852      	lsrs	r2, r2, #1
 8002d42:	60ba      	str	r2, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	60fa      	str	r2, [r7, #12]
 8002d48:	68b8      	ldr	r0, [r7, #8]
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	18c0      	adds	r0, r0, r3
 8002d4e:	4161      	adcs	r1, r4
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f7fd fb47 	bl	80003f0 <__aeabi_uldivmod>
 8002d62:	0003      	movs	r3, r0
 8002d64:	000c      	movs	r4, r1
 8002d66:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002d68:	e007      	b.n	8002d7a <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8002d6a:	2313      	movs	r3, #19
 8002d6c:	2258      	movs	r2, #88	; 0x58
 8002d6e:	4694      	mov	ip, r2
 8002d70:	44bc      	add	ip, r7
 8002d72:	4463      	add	r3, ip
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
            break;
 8002d78:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <UART_SetConfig+0xa6c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d909      	bls.n	8002d96 <UART_SetConfig+0x9e6>
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <UART_SetConfig+0xa70>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d805      	bhi.n	8002d96 <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	f000 fbbf 	bl	8003514 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 8002d96:	2313      	movs	r3, #19
 8002d98:	2258      	movs	r2, #88	; 0x58
 8002d9a:	4694      	mov	ip, r2
 8002d9c:	44bc      	add	ip, r7
 8002d9e:	4463      	add	r3, ip
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	f000 fbb6 	bl	8003514 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d000      	beq.n	8002db6 <UART_SetConfig+0xa06>
 8002db4:	e1e4      	b.n	8003180 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 8002db6:	231b      	movs	r3, #27
 8002db8:	2258      	movs	r2, #88	; 0x58
 8002dba:	4694      	mov	ip, r2
 8002dbc:	44bc      	add	ip, r7
 8002dbe:	4463      	add	r3, ip
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d100      	bne.n	8002dc8 <UART_SetConfig+0xa18>
 8002dc6:	e08e      	b.n	8002ee6 <UART_SetConfig+0xb36>
 8002dc8:	dc02      	bgt.n	8002dd0 <UART_SetConfig+0xa20>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02a      	beq.n	8002e24 <UART_SetConfig+0xa74>
 8002dce:	e1a3      	b.n	8003118 <UART_SetConfig+0xd68>
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d100      	bne.n	8002dd6 <UART_SetConfig+0xa26>
 8002dd4:	e0de      	b.n	8002f94 <UART_SetConfig+0xbe4>
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d100      	bne.n	8002ddc <UART_SetConfig+0xa2c>
 8002dda:	e13c      	b.n	8003056 <UART_SetConfig+0xca6>
 8002ddc:	e19c      	b.n	8003118 <UART_SetConfig+0xd68>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	f4240000 	.word	0xf4240000
 8002de8:	01e84800 	.word	0x01e84800
 8002dec:	03d09000 	.word	0x03d09000
 8002df0:	07a12000 	.word	0x07a12000
 8002df4:	0f424000 	.word	0x0f424000
 8002df8:	14585500 	.word	0x14585500
 8002dfc:	186a0000 	.word	0x186a0000
 8002e00:	1e848000 	.word	0x1e848000
 8002e04:	28b0aa00 	.word	0x28b0aa00
 8002e08:	3d090000 	.word	0x3d090000
 8002e0c:	7a120000 	.word	0x7a120000
 8002e10:	000aaa00 	.word	0x000aaa00
 8002e14:	000ccc00 	.word	0x000ccc00
 8002e18:	00155500 	.word	0x00155500
 8002e1c:	000002ff 	.word	0x000002ff
 8002e20:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e24:	f7ff f8a0 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d044      	beq.n	8002ebc <UART_SetConfig+0xb0c>
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d03e      	beq.n	8002eb8 <UART_SetConfig+0xb08>
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d038      	beq.n	8002eb4 <UART_SetConfig+0xb04>
 8002e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d032      	beq.n	8002eb0 <UART_SetConfig+0xb00>
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d02c      	beq.n	8002eac <UART_SetConfig+0xafc>
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d026      	beq.n	8002ea8 <UART_SetConfig+0xaf8>
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d020      	beq.n	8002ea4 <UART_SetConfig+0xaf4>
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d01a      	beq.n	8002ea0 <UART_SetConfig+0xaf0>
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d014      	beq.n	8002e9c <UART_SetConfig+0xaec>
 8002e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d00e      	beq.n	8002e98 <UART_SetConfig+0xae8>
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d008      	beq.n	8002e94 <UART_SetConfig+0xae4>
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b0b      	cmp	r3, #11
 8002e88:	d102      	bne.n	8002e90 <UART_SetConfig+0xae0>
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	e016      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e014      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	e012      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	e010      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e00e      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e00c      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	e00a      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	e008      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002eac:	2308      	movs	r3, #8
 8002eae:	e006      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002eb0:	2306      	movs	r3, #6
 8002eb2:	e004      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e002      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e000      	b.n	8002ebe <UART_SetConfig+0xb0e>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	0010      	movs	r0, r2
 8002ec2:	f7fd f91f 	bl	8000104 <__udivsi3>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	005a      	lsls	r2, r3, #1
 8002eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	18d2      	adds	r2, r2, r3
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	0010      	movs	r0, r2
 8002eda:	f7fd f913 	bl	8000104 <__udivsi3>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002ee4:	e120      	b.n	8003128 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d043      	beq.n	8002f76 <UART_SetConfig+0xbc6>
 8002eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d03d      	beq.n	8002f72 <UART_SetConfig+0xbc2>
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d037      	beq.n	8002f6e <UART_SetConfig+0xbbe>
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d031      	beq.n	8002f6a <UART_SetConfig+0xbba>
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d02b      	beq.n	8002f66 <UART_SetConfig+0xbb6>
 8002f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d025      	beq.n	8002f62 <UART_SetConfig+0xbb2>
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d01f      	beq.n	8002f5e <UART_SetConfig+0xbae>
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	d019      	beq.n	8002f5a <UART_SetConfig+0xbaa>
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d013      	beq.n	8002f56 <UART_SetConfig+0xba6>
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b09      	cmp	r3, #9
 8002f34:	d00d      	beq.n	8002f52 <UART_SetConfig+0xba2>
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b0a      	cmp	r3, #10
 8002f3c:	d007      	beq.n	8002f4e <UART_SetConfig+0xb9e>
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b0b      	cmp	r3, #11
 8002f44:	d101      	bne.n	8002f4a <UART_SetConfig+0xb9a>
 8002f46:	4bba      	ldr	r3, [pc, #744]	; (8003230 <UART_SetConfig+0xe80>)
 8002f48:	e016      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f4a:	4bba      	ldr	r3, [pc, #744]	; (8003234 <UART_SetConfig+0xe84>)
 8002f4c:	e014      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f4e:	4bba      	ldr	r3, [pc, #744]	; (8003238 <UART_SetConfig+0xe88>)
 8002f50:	e012      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f52:	4bba      	ldr	r3, [pc, #744]	; (800323c <UART_SetConfig+0xe8c>)
 8002f54:	e010      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f56:	4bba      	ldr	r3, [pc, #744]	; (8003240 <UART_SetConfig+0xe90>)
 8002f58:	e00e      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f5a:	4bba      	ldr	r3, [pc, #744]	; (8003244 <UART_SetConfig+0xe94>)
 8002f5c:	e00c      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f5e:	4bba      	ldr	r3, [pc, #744]	; (8003248 <UART_SetConfig+0xe98>)
 8002f60:	e00a      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f62:	4bba      	ldr	r3, [pc, #744]	; (800324c <UART_SetConfig+0xe9c>)
 8002f64:	e008      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f66:	4bba      	ldr	r3, [pc, #744]	; (8003250 <UART_SetConfig+0xea0>)
 8002f68:	e006      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f6a:	4bba      	ldr	r3, [pc, #744]	; (8003254 <UART_SetConfig+0xea4>)
 8002f6c:	e004      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f6e:	4bba      	ldr	r3, [pc, #744]	; (8003258 <UART_SetConfig+0xea8>)
 8002f70:	e002      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f72:	4bba      	ldr	r3, [pc, #744]	; (800325c <UART_SetConfig+0xeac>)
 8002f74:	e000      	b.n	8002f78 <UART_SetConfig+0xbc8>
 8002f76:	4baf      	ldr	r3, [pc, #700]	; (8003234 <UART_SetConfig+0xe84>)
 8002f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f7a:	6852      	ldr	r2, [r2, #4]
 8002f7c:	0852      	lsrs	r2, r2, #1
 8002f7e:	189a      	adds	r2, r3, r2
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0019      	movs	r1, r3
 8002f86:	0010      	movs	r0, r2
 8002f88:	f7fd f8bc 	bl	8000104 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002f92:	e0c9      	b.n	8003128 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f94:	f7fe ff5c 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d044      	beq.n	800302c <UART_SetConfig+0xc7c>
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d03e      	beq.n	8003028 <UART_SetConfig+0xc78>
 8002faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d038      	beq.n	8003024 <UART_SetConfig+0xc74>
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d032      	beq.n	8003020 <UART_SetConfig+0xc70>
 8002fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d02c      	beq.n	800301c <UART_SetConfig+0xc6c>
 8002fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d026      	beq.n	8003018 <UART_SetConfig+0xc68>
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d020      	beq.n	8003014 <UART_SetConfig+0xc64>
 8002fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b07      	cmp	r3, #7
 8002fd8:	d01a      	beq.n	8003010 <UART_SetConfig+0xc60>
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d014      	beq.n	800300c <UART_SetConfig+0xc5c>
 8002fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d00e      	beq.n	8003008 <UART_SetConfig+0xc58>
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d008      	beq.n	8003004 <UART_SetConfig+0xc54>
 8002ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b0b      	cmp	r3, #11
 8002ff8:	d102      	bne.n	8003000 <UART_SetConfig+0xc50>
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	e016      	b.n	800302e <UART_SetConfig+0xc7e>
 8003000:	2301      	movs	r3, #1
 8003002:	e014      	b.n	800302e <UART_SetConfig+0xc7e>
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	e012      	b.n	800302e <UART_SetConfig+0xc7e>
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	e010      	b.n	800302e <UART_SetConfig+0xc7e>
 800300c:	2320      	movs	r3, #32
 800300e:	e00e      	b.n	800302e <UART_SetConfig+0xc7e>
 8003010:	2310      	movs	r3, #16
 8003012:	e00c      	b.n	800302e <UART_SetConfig+0xc7e>
 8003014:	230c      	movs	r3, #12
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0xc7e>
 8003018:	230a      	movs	r3, #10
 800301a:	e008      	b.n	800302e <UART_SetConfig+0xc7e>
 800301c:	2308      	movs	r3, #8
 800301e:	e006      	b.n	800302e <UART_SetConfig+0xc7e>
 8003020:	2306      	movs	r3, #6
 8003022:	e004      	b.n	800302e <UART_SetConfig+0xc7e>
 8003024:	2304      	movs	r3, #4
 8003026:	e002      	b.n	800302e <UART_SetConfig+0xc7e>
 8003028:	2302      	movs	r3, #2
 800302a:	e000      	b.n	800302e <UART_SetConfig+0xc7e>
 800302c:	2301      	movs	r3, #1
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f7fd f867 	bl	8000104 <__udivsi3>
 8003036:	0003      	movs	r3, r0
 8003038:	005a      	lsls	r2, r3, #1
 800303a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0019      	movs	r1, r3
 8003048:	0010      	movs	r0, r2
 800304a:	f7fd f85b 	bl	8000104 <__udivsi3>
 800304e:	0003      	movs	r3, r0
 8003050:	b29b      	uxth	r3, r3
 8003052:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003054:	e068      	b.n	8003128 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d04c      	beq.n	80030f8 <UART_SetConfig+0xd48>
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b01      	cmp	r3, #1
 8003064:	d045      	beq.n	80030f2 <UART_SetConfig+0xd42>
 8003066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b02      	cmp	r3, #2
 800306c:	d03e      	beq.n	80030ec <UART_SetConfig+0xd3c>
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b03      	cmp	r3, #3
 8003074:	d038      	beq.n	80030e8 <UART_SetConfig+0xd38>
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b04      	cmp	r3, #4
 800307c:	d031      	beq.n	80030e2 <UART_SetConfig+0xd32>
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b05      	cmp	r3, #5
 8003084:	d02b      	beq.n	80030de <UART_SetConfig+0xd2e>
 8003086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b06      	cmp	r3, #6
 800308c:	d025      	beq.n	80030da <UART_SetConfig+0xd2a>
 800308e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b07      	cmp	r3, #7
 8003094:	d01e      	beq.n	80030d4 <UART_SetConfig+0xd24>
 8003096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b08      	cmp	r3, #8
 800309c:	d017      	beq.n	80030ce <UART_SetConfig+0xd1e>
 800309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b09      	cmp	r3, #9
 80030a4:	d010      	beq.n	80030c8 <UART_SetConfig+0xd18>
 80030a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b0a      	cmp	r3, #10
 80030ac:	d009      	beq.n	80030c2 <UART_SetConfig+0xd12>
 80030ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b0b      	cmp	r3, #11
 80030b4:	d102      	bne.n	80030bc <UART_SetConfig+0xd0c>
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	e01f      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	e01c      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	e019      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	e016      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	e013      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	e010      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030da:	4b61      	ldr	r3, [pc, #388]	; (8003260 <UART_SetConfig+0xeb0>)
 80030dc:	e00e      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030de:	4b61      	ldr	r3, [pc, #388]	; (8003264 <UART_SetConfig+0xeb4>)
 80030e0:	e00c      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	019b      	lsls	r3, r3, #6
 80030e6:	e009      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <UART_SetConfig+0xeb8>)
 80030ea:	e007      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	01db      	lsls	r3, r3, #7
 80030f0:	e004      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	e001      	b.n	80030fc <UART_SetConfig+0xd4c>
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030fe:	6852      	ldr	r2, [r2, #4]
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	189a      	adds	r2, r3, r2
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f7fc fffa 	bl	8000104 <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	b29b      	uxth	r3, r3
 8003114:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003116:	e007      	b.n	8003128 <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 8003118:	2313      	movs	r3, #19
 800311a:	2258      	movs	r2, #88	; 0x58
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
        break;
 8003126:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d920      	bls.n	8003170 <UART_SetConfig+0xdc0>
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	4a4e      	ldr	r2, [pc, #312]	; (800326c <UART_SetConfig+0xebc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d81c      	bhi.n	8003170 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	b29a      	uxth	r2, r3
 800313a:	200a      	movs	r0, #10
 800313c:	2458      	movs	r4, #88	; 0x58
 800313e:	193b      	adds	r3, r7, r4
 8003140:	181b      	adds	r3, r3, r0
 8003142:	210f      	movs	r1, #15
 8003144:	438a      	bics	r2, r1
 8003146:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	b29b      	uxth	r3, r3
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	b299      	uxth	r1, r3
 8003154:	193b      	adds	r3, r7, r4
 8003156:	181b      	adds	r3, r3, r0
 8003158:	193a      	adds	r2, r7, r4
 800315a:	1812      	adds	r2, r2, r0
 800315c:	8812      	ldrh	r2, [r2, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	193a      	adds	r2, r7, r4
 8003168:	1812      	adds	r2, r2, r0
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	e1d1      	b.n	8003514 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003170:	2313      	movs	r3, #19
 8003172:	2258      	movs	r2, #88	; 0x58
 8003174:	4694      	mov	ip, r2
 8003176:	44bc      	add	ip, r7
 8003178:	4463      	add	r3, ip
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e1c9      	b.n	8003514 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8003180:	231b      	movs	r3, #27
 8003182:	2258      	movs	r2, #88	; 0x58
 8003184:	4694      	mov	ip, r2
 8003186:	44bc      	add	ip, r7
 8003188:	4463      	add	r3, ip
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d100      	bne.n	8003192 <UART_SetConfig+0xde2>
 8003190:	e08d      	b.n	80032ae <UART_SetConfig+0xefe>
 8003192:	dc02      	bgt.n	800319a <UART_SetConfig+0xdea>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <UART_SetConfig+0xdf8>
 8003198:	e1a1      	b.n	80034de <UART_SetConfig+0x112e>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d100      	bne.n	80031a0 <UART_SetConfig+0xdf0>
 800319e:	e0dd      	b.n	800335c <UART_SetConfig+0xfac>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d100      	bne.n	80031a6 <UART_SetConfig+0xdf6>
 80031a4:	e13b      	b.n	800341e <UART_SetConfig+0x106e>
 80031a6:	e19a      	b.n	80034de <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a8:	f7fe fede 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80031ac:	0002      	movs	r2, r0
 80031ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <UART_SetConfig+0xe08>
 80031b6:	e065      	b.n	8003284 <UART_SetConfig+0xed4>
 80031b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d100      	bne.n	80031c2 <UART_SetConfig+0xe12>
 80031c0:	e05e      	b.n	8003280 <UART_SetConfig+0xed0>
 80031c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d058      	beq.n	800327c <UART_SetConfig+0xecc>
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d052      	beq.n	8003278 <UART_SetConfig+0xec8>
 80031d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d04c      	beq.n	8003274 <UART_SetConfig+0xec4>
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d046      	beq.n	8003270 <UART_SetConfig+0xec0>
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d020      	beq.n	800322c <UART_SetConfig+0xe7c>
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d01a      	beq.n	8003228 <UART_SetConfig+0xe78>
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d014      	beq.n	8003224 <UART_SetConfig+0xe74>
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d00e      	beq.n	8003220 <UART_SetConfig+0xe70>
 8003202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b0a      	cmp	r3, #10
 8003208:	d008      	beq.n	800321c <UART_SetConfig+0xe6c>
 800320a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b0b      	cmp	r3, #11
 8003210:	d102      	bne.n	8003218 <UART_SetConfig+0xe68>
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	e036      	b.n	8003286 <UART_SetConfig+0xed6>
 8003218:	2301      	movs	r3, #1
 800321a:	e034      	b.n	8003286 <UART_SetConfig+0xed6>
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	e032      	b.n	8003286 <UART_SetConfig+0xed6>
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	e030      	b.n	8003286 <UART_SetConfig+0xed6>
 8003224:	2320      	movs	r3, #32
 8003226:	e02e      	b.n	8003286 <UART_SetConfig+0xed6>
 8003228:	2310      	movs	r3, #16
 800322a:	e02c      	b.n	8003286 <UART_SetConfig+0xed6>
 800322c:	230c      	movs	r3, #12
 800322e:	e02a      	b.n	8003286 <UART_SetConfig+0xed6>
 8003230:	0001e848 	.word	0x0001e848
 8003234:	01e84800 	.word	0x01e84800
 8003238:	0003d090 	.word	0x0003d090
 800323c:	0007a120 	.word	0x0007a120
 8003240:	000f4240 	.word	0x000f4240
 8003244:	001e8480 	.word	0x001e8480
 8003248:	0028b0aa 	.word	0x0028b0aa
 800324c:	0030d400 	.word	0x0030d400
 8003250:	003d0900 	.word	0x003d0900
 8003254:	00516154 	.word	0x00516154
 8003258:	007a1200 	.word	0x007a1200
 800325c:	00f42400 	.word	0x00f42400
 8003260:	00001554 	.word	0x00001554
 8003264:	00001998 	.word	0x00001998
 8003268:	00002aaa 	.word	0x00002aaa
 800326c:	0000ffff 	.word	0x0000ffff
 8003270:	230a      	movs	r3, #10
 8003272:	e008      	b.n	8003286 <UART_SetConfig+0xed6>
 8003274:	2308      	movs	r3, #8
 8003276:	e006      	b.n	8003286 <UART_SetConfig+0xed6>
 8003278:	2306      	movs	r3, #6
 800327a:	e004      	b.n	8003286 <UART_SetConfig+0xed6>
 800327c:	2304      	movs	r3, #4
 800327e:	e002      	b.n	8003286 <UART_SetConfig+0xed6>
 8003280:	2302      	movs	r3, #2
 8003282:	e000      	b.n	8003286 <UART_SetConfig+0xed6>
 8003284:	2301      	movs	r3, #1
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f7fc ff3b 	bl	8000104 <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	001a      	movs	r2, r3
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	18d2      	adds	r2, r2, r3
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f7fc ff2f 	bl	8000104 <__udivsi3>
 80032a6:	0003      	movs	r3, r0
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80032ac:	e11f      	b.n	80034ee <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d043      	beq.n	800333e <UART_SetConfig+0xf8e>
 80032b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d03d      	beq.n	800333a <UART_SetConfig+0xf8a>
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d037      	beq.n	8003336 <UART_SetConfig+0xf86>
 80032c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d031      	beq.n	8003332 <UART_SetConfig+0xf82>
 80032ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d02b      	beq.n	800332e <UART_SetConfig+0xf7e>
 80032d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d025      	beq.n	800332a <UART_SetConfig+0xf7a>
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d01f      	beq.n	8003326 <UART_SetConfig+0xf76>
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b07      	cmp	r3, #7
 80032ec:	d019      	beq.n	8003322 <UART_SetConfig+0xf72>
 80032ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d013      	beq.n	800331e <UART_SetConfig+0xf6e>
 80032f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	d00d      	beq.n	800331a <UART_SetConfig+0xf6a>
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d007      	beq.n	8003316 <UART_SetConfig+0xf66>
 8003306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b0b      	cmp	r3, #11
 800330c:	d101      	bne.n	8003312 <UART_SetConfig+0xf62>
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <UART_SetConfig+0x1194>)
 8003310:	e016      	b.n	8003340 <UART_SetConfig+0xf90>
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <UART_SetConfig+0x1198>)
 8003314:	e014      	b.n	8003340 <UART_SetConfig+0xf90>
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <UART_SetConfig+0x119c>)
 8003318:	e012      	b.n	8003340 <UART_SetConfig+0xf90>
 800331a:	4b8d      	ldr	r3, [pc, #564]	; (8003550 <UART_SetConfig+0x11a0>)
 800331c:	e010      	b.n	8003340 <UART_SetConfig+0xf90>
 800331e:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <UART_SetConfig+0x11a4>)
 8003320:	e00e      	b.n	8003340 <UART_SetConfig+0xf90>
 8003322:	4b8d      	ldr	r3, [pc, #564]	; (8003558 <UART_SetConfig+0x11a8>)
 8003324:	e00c      	b.n	8003340 <UART_SetConfig+0xf90>
 8003326:	4b8d      	ldr	r3, [pc, #564]	; (800355c <UART_SetConfig+0x11ac>)
 8003328:	e00a      	b.n	8003340 <UART_SetConfig+0xf90>
 800332a:	4b8d      	ldr	r3, [pc, #564]	; (8003560 <UART_SetConfig+0x11b0>)
 800332c:	e008      	b.n	8003340 <UART_SetConfig+0xf90>
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <UART_SetConfig+0x11b4>)
 8003330:	e006      	b.n	8003340 <UART_SetConfig+0xf90>
 8003332:	4b8d      	ldr	r3, [pc, #564]	; (8003568 <UART_SetConfig+0x11b8>)
 8003334:	e004      	b.n	8003340 <UART_SetConfig+0xf90>
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <UART_SetConfig+0x11bc>)
 8003338:	e002      	b.n	8003340 <UART_SetConfig+0xf90>
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <UART_SetConfig+0x11c0>)
 800333c:	e000      	b.n	8003340 <UART_SetConfig+0xf90>
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <UART_SetConfig+0x1198>)
 8003340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003342:	6852      	ldr	r2, [r2, #4]
 8003344:	0852      	lsrs	r2, r2, #1
 8003346:	189a      	adds	r2, r3, r2
 8003348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0019      	movs	r1, r3
 800334e:	0010      	movs	r0, r2
 8003350:	f7fc fed8 	bl	8000104 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	b29b      	uxth	r3, r3
 8003358:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800335a:	e0c8      	b.n	80034ee <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800335c:	f7fe fd78 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8003360:	0002      	movs	r2, r0
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <UART_SetConfig+0x1044>
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b01      	cmp	r3, #1
 8003370:	d03e      	beq.n	80033f0 <UART_SetConfig+0x1040>
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b02      	cmp	r3, #2
 8003378:	d038      	beq.n	80033ec <UART_SetConfig+0x103c>
 800337a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b03      	cmp	r3, #3
 8003380:	d032      	beq.n	80033e8 <UART_SetConfig+0x1038>
 8003382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2b04      	cmp	r3, #4
 8003388:	d02c      	beq.n	80033e4 <UART_SetConfig+0x1034>
 800338a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b05      	cmp	r3, #5
 8003390:	d026      	beq.n	80033e0 <UART_SetConfig+0x1030>
 8003392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b06      	cmp	r3, #6
 8003398:	d020      	beq.n	80033dc <UART_SetConfig+0x102c>
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d01a      	beq.n	80033d8 <UART_SetConfig+0x1028>
 80033a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d014      	beq.n	80033d4 <UART_SetConfig+0x1024>
 80033aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	d00e      	beq.n	80033d0 <UART_SetConfig+0x1020>
 80033b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b0a      	cmp	r3, #10
 80033b8:	d008      	beq.n	80033cc <UART_SetConfig+0x101c>
 80033ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b0b      	cmp	r3, #11
 80033c0:	d102      	bne.n	80033c8 <UART_SetConfig+0x1018>
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	e016      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e014      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	e012      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033d0:	2340      	movs	r3, #64	; 0x40
 80033d2:	e010      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033d4:	2320      	movs	r3, #32
 80033d6:	e00e      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033d8:	2310      	movs	r3, #16
 80033da:	e00c      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033dc:	230c      	movs	r3, #12
 80033de:	e00a      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033e0:	230a      	movs	r3, #10
 80033e2:	e008      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033e4:	2308      	movs	r3, #8
 80033e6:	e006      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033e8:	2306      	movs	r3, #6
 80033ea:	e004      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e002      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e000      	b.n	80033f6 <UART_SetConfig+0x1046>
 80033f4:	2301      	movs	r3, #1
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f7fc fe83 	bl	8000104 <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	001a      	movs	r2, r3
 8003402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0019      	movs	r1, r3
 8003410:	0010      	movs	r0, r2
 8003412:	f7fc fe77 	bl	8000104 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	b29b      	uxth	r3, r3
 800341a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800341c:	e067      	b.n	80034ee <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04b      	beq.n	80034be <UART_SetConfig+0x110e>
 8003426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b01      	cmp	r3, #1
 800342c:	d044      	beq.n	80034b8 <UART_SetConfig+0x1108>
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	d03d      	beq.n	80034b2 <UART_SetConfig+0x1102>
 8003436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b03      	cmp	r3, #3
 800343c:	d037      	beq.n	80034ae <UART_SetConfig+0x10fe>
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b04      	cmp	r3, #4
 8003444:	d030      	beq.n	80034a8 <UART_SetConfig+0x10f8>
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b05      	cmp	r3, #5
 800344c:	d02a      	beq.n	80034a4 <UART_SetConfig+0x10f4>
 800344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b06      	cmp	r3, #6
 8003454:	d024      	beq.n	80034a0 <UART_SetConfig+0x10f0>
 8003456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2b07      	cmp	r3, #7
 800345c:	d01d      	beq.n	800349a <UART_SetConfig+0x10ea>
 800345e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b08      	cmp	r3, #8
 8003464:	d016      	beq.n	8003494 <UART_SetConfig+0x10e4>
 8003466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b09      	cmp	r3, #9
 800346c:	d00f      	beq.n	800348e <UART_SetConfig+0x10de>
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b0a      	cmp	r3, #10
 8003474:	d008      	beq.n	8003488 <UART_SetConfig+0x10d8>
 8003476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b0b      	cmp	r3, #11
 800347c:	d101      	bne.n	8003482 <UART_SetConfig+0x10d2>
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	e01f      	b.n	80034c2 <UART_SetConfig+0x1112>
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	e01c      	b.n	80034c2 <UART_SetConfig+0x1112>
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	e019      	b.n	80034c2 <UART_SetConfig+0x1112>
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	e016      	b.n	80034c2 <UART_SetConfig+0x1112>
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	e013      	b.n	80034c2 <UART_SetConfig+0x1112>
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	e010      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <UART_SetConfig+0x11c4>)
 80034a2:	e00e      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034a4:	4b34      	ldr	r3, [pc, #208]	; (8003578 <UART_SetConfig+0x11c8>)
 80034a6:	e00c      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <UART_SetConfig+0x11cc>)
 80034b0:	e007      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	019b      	lsls	r3, r3, #6
 80034b6:	e004      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	01db      	lsls	r3, r3, #7
 80034bc:	e001      	b.n	80034c2 <UART_SetConfig+0x1112>
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	189a      	adds	r2, r3, r2
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0019      	movs	r1, r3
 80034d0:	0010      	movs	r0, r2
 80034d2:	f7fc fe17 	bl	8000104 <__udivsi3>
 80034d6:	0003      	movs	r3, r0
 80034d8:	b29b      	uxth	r3, r3
 80034da:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80034dc:	e007      	b.n	80034ee <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 80034de:	2313      	movs	r3, #19
 80034e0:	2258      	movs	r2, #88	; 0x58
 80034e2:	4694      	mov	ip, r2
 80034e4:	44bc      	add	ip, r7
 80034e6:	4463      	add	r3, ip
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
        break;
 80034ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d908      	bls.n	8003506 <UART_SetConfig+0x1156>
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <UART_SetConfig+0x11d0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d804      	bhi.n	8003506 <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 80034fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	e006      	b.n	8003514 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003506:	2313      	movs	r3, #19
 8003508:	2258      	movs	r2, #88	; 0x58
 800350a:	4694      	mov	ip, r2
 800350c:	44bc      	add	ip, r7
 800350e:	4463      	add	r3, ip
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003516:	226a      	movs	r2, #106	; 0x6a
 8003518:	2101      	movs	r1, #1
 800351a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800351c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351e:	2268      	movs	r2, #104	; 0x68
 8003520:	2101      	movs	r1, #1
 8003522:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003526:	2200      	movs	r2, #0
 8003528:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800352a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352c:	2200      	movs	r2, #0
 800352e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003530:	2313      	movs	r3, #19
 8003532:	2258      	movs	r2, #88	; 0x58
 8003534:	4694      	mov	ip, r2
 8003536:	44bc      	add	ip, r7
 8003538:	4463      	add	r3, ip
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b01f      	add	sp, #124	; 0x7c
 8003542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003544:	0000f424 	.word	0x0000f424
 8003548:	00f42400 	.word	0x00f42400
 800354c:	0001e848 	.word	0x0001e848
 8003550:	0003d090 	.word	0x0003d090
 8003554:	0007a120 	.word	0x0007a120
 8003558:	000f4240 	.word	0x000f4240
 800355c:	00145855 	.word	0x00145855
 8003560:	00186a00 	.word	0x00186a00
 8003564:	001e8480 	.word	0x001e8480
 8003568:	0028b0aa 	.word	0x0028b0aa
 800356c:	003d0900 	.word	0x003d0900
 8003570:	007a1200 	.word	0x007a1200
 8003574:	00000aaa 	.word	0x00000aaa
 8003578:	00000ccc 	.word	0x00000ccc
 800357c:	00001555 	.word	0x00001555
 8003580:	0000ffff 	.word	0x0000ffff

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <UART_AdvFeatureConfig+0x144>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	2202      	movs	r2, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a43      	ldr	r2, [pc, #268]	; (80036cc <UART_AdvFeatureConfig+0x148>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <UART_AdvFeatureConfig+0x14c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2208      	movs	r2, #8
 80035f8:	4013      	ands	r3, r2
 80035fa:	d00b      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <UART_AdvFeatureConfig+0x150>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2210      	movs	r2, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d00b      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <UART_AdvFeatureConfig+0x154>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <UART_AdvFeatureConfig+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	d01d      	beq.n	800369e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <UART_AdvFeatureConfig+0x15c>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	429a      	cmp	r2, r3
 8003684:	d10b      	bne.n	800369e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <UART_AdvFeatureConfig+0x160>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <UART_AdvFeatureConfig+0x164>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	fffdffff 	.word	0xfffdffff
 80036cc:	fffeffff 	.word	0xfffeffff
 80036d0:	fffbffff 	.word	0xfffbffff
 80036d4:	ffff7fff 	.word	0xffff7fff
 80036d8:	ffffefff 	.word	0xffffefff
 80036dc:	ffffdfff 	.word	0xffffdfff
 80036e0:	ffefffff 	.word	0xffefffff
 80036e4:	ff9fffff 	.word	0xff9fffff
 80036e8:	fff7ffff 	.word	0xfff7ffff

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2288      	movs	r2, #136	; 0x88
 80036f8:	2100      	movs	r1, #0
 80036fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036fc:	f7fc fffe 	bl	80006fc <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2208      	movs	r2, #8
 800370c:	4013      	ands	r3, r2
 800370e:	2b08      	cmp	r3, #8
 8003710:	d10d      	bne.n	800372e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	0399      	lsls	r1, r3, #14
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <UART_CheckIdleState+0x90>)
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0013      	movs	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	f000 f82d 	bl	8003780 <UART_WaitOnFlagUntilTimeout>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e021      	b.n	8003772 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	2b04      	cmp	r3, #4
 800373a:	d10d      	bne.n	8003758 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	03d9      	lsls	r1, r3, #15
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <UART_CheckIdleState+0x90>)
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	0013      	movs	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	f000 f818 	bl	8003780 <UART_WaitOnFlagUntilTimeout>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d001      	beq.n	8003758 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e00c      	b.n	8003772 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2284      	movs	r2, #132	; 0x84
 8003764:	2120      	movs	r1, #32
 8003766:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	227c      	movs	r2, #124	; 0x7c
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b004      	add	sp, #16
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	01ffffff 	.word	0x01ffffff

08003780 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003790:	e02b      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3301      	adds	r3, #1
 8003796:	d028      	beq.n	80037ea <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fc ffb0 	bl	80006fc <HAL_GetTick>
 800379c:	0002      	movs	r2, r0
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <UART_WaitOnFlagUntilTimeout+0x94>)
 80037ba:	400a      	ands	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	438a      	bics	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	2120      	movs	r1, #32
 80037d4:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2284      	movs	r2, #132	; 0x84
 80037da:	2120      	movs	r1, #32
 80037dc:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	227c      	movs	r2, #124	; 0x7c
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e00f      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	425a      	negs	r2, r3
 80037fa:	4153      	adcs	r3, r2
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	001a      	movs	r2, r3
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d0c4      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b004      	add	sp, #16
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	fffffe5f 	.word	0xfffffe5f

08003818 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	227c      	movs	r2, #124	; 0x7c
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_UARTEx_DisableFifoMode+0x16>
 800382a:	2302      	movs	r3, #2
 800382c:	e027      	b.n	800387e <HAL_UARTEx_DisableFifoMode+0x66>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	227c      	movs	r2, #124	; 0x7c
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	2124      	movs	r1, #36	; 0x24
 800383c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	438a      	bics	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <HAL_UARTEx_DisableFifoMode+0x70>)
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	2120      	movs	r1, #32
 8003872:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	227c      	movs	r2, #124	; 0x7c
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b004      	add	sp, #16
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	dfffffff 	.word	0xdfffffff

0800388c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	227c      	movs	r2, #124	; 0x7c
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e02e      	b.n	8003902 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	227c      	movs	r2, #124	; 0x7c
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	2124      	movs	r1, #36	; 0x24
 80038b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	08d9      	lsrs	r1, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f854 	bl	8003990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	2120      	movs	r1, #32
 80038f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	227c      	movs	r2, #124	; 0x7c
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	227c      	movs	r2, #124	; 0x7c
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003920:	2302      	movs	r3, #2
 8003922:	e02f      	b.n	8003984 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	227c      	movs	r2, #124	; 0x7c
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	2124      	movs	r1, #36	; 0x24
 8003932:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2101      	movs	r1, #1
 8003948:	438a      	bics	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	4a0e      	ldr	r2, [pc, #56]	; (800398c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f000 f813 	bl	8003990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	2120      	movs	r1, #32
 8003978:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	227c      	movs	r2, #124	; 0x7c
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	f1ffffff 	.word	0xf1ffffff

08003990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003998:	2314      	movs	r3, #20
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <UARTEx_SetNbDataToProcess+0xcc>)
 800399e:	ca03      	ldmia	r2!, {r0, r1}
 80039a0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80039a2:	230c      	movs	r3, #12
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <UARTEx_SetNbDataToProcess+0xd0>)
 80039a8:	ca03      	ldmia	r2!, {r0, r1}
 80039aa:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d108      	bne.n	80039c6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	226a      	movs	r2, #106	; 0x6a
 80039b8:	2101      	movs	r1, #1
 80039ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2268      	movs	r2, #104	; 0x68
 80039c0:	2101      	movs	r1, #1
 80039c2:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039c4:	e046      	b.n	8003a54 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039c6:	261f      	movs	r6, #31
 80039c8:	19bb      	adds	r3, r7, r6
 80039ca:	2208      	movs	r2, #8
 80039cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039ce:	201e      	movs	r0, #30
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	2208      	movs	r2, #8
 80039d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	0e5b      	lsrs	r3, r3, #25
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	241d      	movs	r4, #29
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	2107      	movs	r1, #7
 80039e6:	400a      	ands	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	0f5b      	lsrs	r3, r3, #29
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	251c      	movs	r5, #28
 80039f6:	197b      	adds	r3, r7, r5
 80039f8:	2107      	movs	r1, #7
 80039fa:	400a      	ands	r2, r1
 80039fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	197a      	adds	r2, r7, r5
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	2114      	movs	r1, #20
 8003a08:	1879      	adds	r1, r7, r1
 8003a0a:	5c8a      	ldrb	r2, [r1, r2]
 8003a0c:	435a      	muls	r2, r3
 8003a0e:	0010      	movs	r0, r2
 8003a10:	197b      	adds	r3, r7, r5
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	250c      	movs	r5, #12
 8003a16:	197a      	adds	r2, r7, r5
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	f7fc fbfc 	bl	8000218 <__divsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	b299      	uxth	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	226a      	movs	r2, #106	; 0x6a
 8003a28:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003a2a:	19bb      	adds	r3, r7, r6
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	193a      	adds	r2, r7, r4
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	2114      	movs	r1, #20
 8003a34:	1879      	adds	r1, r7, r1
 8003a36:	5c8a      	ldrb	r2, [r1, r2]
 8003a38:	435a      	muls	r2, r3
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	197a      	adds	r2, r7, r5
 8003a42:	5cd3      	ldrb	r3, [r2, r3]
 8003a44:	0019      	movs	r1, r3
 8003a46:	f7fc fbe7 	bl	8000218 <__divsi3>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2268      	movs	r2, #104	; 0x68
 8003a52:	5299      	strh	r1, [r3, r2]
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b009      	add	sp, #36	; 0x24
 8003a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5c:	080040b4 	.word	0x080040b4
 8003a60:	080040bc 	.word	0x080040bc

08003a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a6a:	f7fc fdcd 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a6e:	f000 f827 	bl	8003ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a72:	f000 f917 	bl	8003ca4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003a76:	f000 f885 	bl	8003b84 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003a7a:	f000 f8c3 	bl	8003c04 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  unsigned char buffer[6];
  unsigned char received[11];
  buffer[0]= 0x11;
 8003a7e:	2110      	movs	r1, #16
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2211      	movs	r2, #17
 8003a84:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x22;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2222      	movs	r2, #34	; 0x22
 8003a8a:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x33;
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2233      	movs	r2, #51	; 0x33
 8003a90:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x44;
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2244      	movs	r2, #68	; 0x44
 8003a96:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x55;
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	2255      	movs	r2, #85	; 0x55
 8003a9c:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x66;
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	2266      	movs	r2, #102	; 0x66
 8003aa2:	715a      	strb	r2, [r3, #5]

  initNFC(&hi2c1, (NFC_UserMemory));
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <main+0x58>)
 8003aa6:	21a6      	movs	r1, #166	; 0xa6
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f979 	bl	8003da0 <initNFC>
  //HAL_I2C_Master_Transmit(&hi2c1, (NFC_UserMemory), buffer, 5,10);
  //HAL_I2C_Mem_Write(&hi2c1,NFC_UserMemory,0x1A,0x04,buffer,5,50);
  currentAddRead(&hi2c1, NFC_UserMemory, received);
 8003aae:	1d3a      	adds	r2, r7, #4
 8003ab0:	4b02      	ldr	r3, [pc, #8]	; (8003abc <main+0x58>)
 8003ab2:	21a6      	movs	r1, #166	; 0xa6
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 f9a5 	bl	8003e04 <currentAddRead>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003aba:	e7fe      	b.n	8003aba <main+0x56>
 8003abc:	2000002c 	.word	0x2000002c

08003ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b0a1      	sub	sp, #132	; 0x84
 8003ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ac6:	2448      	movs	r4, #72	; 0x48
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	0018      	movs	r0, r3
 8003acc:	2338      	movs	r3, #56	; 0x38
 8003ace:	001a      	movs	r2, r3
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f000 fadb 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad6:	2338      	movs	r3, #56	; 0x38
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	0018      	movs	r0, r3
 8003adc:	2310      	movs	r3, #16
 8003ade:	001a      	movs	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f000 fad3 	bl	800408c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	0018      	movs	r0, r3
 8003aea:	2334      	movs	r3, #52	; 0x34
 8003aec:	001a      	movs	r2, r3
 8003aee:	2100      	movs	r1, #0
 8003af0:	f000 facc 	bl	800408c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fd fd35 	bl	8001568 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	0052      	lsls	r2, r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003b0c:	193b      	adds	r3, r7, r4
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b12:	193b      	adds	r3, r7, r4
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1e:	193b      	adds	r3, r7, r4
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7fd fd6d 	bl	8001600 <HAL_RCC_OscConfig>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003b2a:	f000 f933 	bl	8003d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2e:	2138      	movs	r1, #56	; 0x38
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2207      	movs	r2, #7
 8003b34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	2200      	movs	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7fe f877 	bl	8001c40 <HAL_RCC_ClockConfig>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003b56:	f000 f91d 	bl	8003d94 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2260      	movs	r2, #96	; 0x60
 8003b5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fe fa10 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003b78:	f000 f90c 	bl	8003d94 <Error_Handler>
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b021      	add	sp, #132	; 0x84
 8003b82:	bd90      	pop	{r4, r7, pc}

08003b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <MX_I2C1_Init+0x78>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <MX_I2C1_Init+0x7c>)
 8003b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fc ffdb 	bl	8000b7c <HAL_I2C_Init>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bca:	f000 f8e3 	bl	8003d94 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fd fc30 	bl	8001438 <HAL_I2CEx_ConfigAnalogFilter>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d001      	beq.n	8003be0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003bdc:	f000 f8da 	bl	8003d94 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003be2:	2100      	movs	r1, #0
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fd fc73 	bl	80014d0 <HAL_I2CEx_ConfigDigitalFilter>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bee:	f000 f8d1 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000002c 	.word	0x2000002c
 8003bfc:	40005400 	.word	0x40005400
 8003c00:	00303d5b 	.word	0x00303d5b

08003c04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c0a:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <MX_LPUART1_UART_Init+0x98>)
 8003c0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <MX_LPUART1_UART_Init+0x9c>)
 8003c12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	0552      	lsls	r2, r2, #21
 8003c1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c34:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c3a:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fe fb58 	bl	8002304 <HAL_UART_Init>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d001      	beq.n	8003c5c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c58:	f000 f89c 	bl	8003d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c5e:	2100      	movs	r1, #0
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fe13 	bl	800388c <HAL_UARTEx_SetTxFifoThreshold>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d001      	beq.n	8003c6e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c6a:	f000 f893 	bl	8003d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c70:	2100      	movs	r1, #0
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff fe4a 	bl	800390c <HAL_UARTEx_SetRxFifoThreshold>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c7c:	f000 f88a 	bl	8003d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <MX_LPUART1_UART_Init+0x94>)
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff fdc8 	bl	8003818 <HAL_UARTEx_DisableFifoMode>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c8c:	f000 f882 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	20000078 	.word	0x20000078
 8003c9c:	40008000 	.word	0x40008000
 8003ca0:	00033324 	.word	0x00033324

08003ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
 8003ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003caa:	2414      	movs	r4, #20
 8003cac:	193b      	adds	r3, r7, r4
 8003cae:	0018      	movs	r0, r3
 8003cb0:	2314      	movs	r3, #20
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f000 f9e9 	bl	800408c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003d08:	2102      	movs	r1, #2
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <MX_GPIO_Init+0xe8>)
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	00d9      	lsls	r1, r3, #3
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	2200      	movs	r2, #0
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fc ff0b 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED2_Pin|NFC_LED1_Pin, GPIO_PIN_RESET);
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <MX_GPIO_Init+0xec>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2130      	movs	r1, #48	; 0x30
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7fc ff05 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	00d2      	lsls	r2, r2, #3
 8003d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	2201      	movs	r2, #1
 8003d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	193b      	adds	r3, r7, r4
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 8003d50:	193a      	adds	r2, r7, r4
 8003d52:	23a0      	movs	r3, #160	; 0xa0
 8003d54:	05db      	lsls	r3, r3, #23
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fc fd8d 	bl	8000878 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED2_Pin NFC_LED1_Pin */
  GPIO_InitStruct.Pin = NFC_LED2_Pin|NFC_LED1_Pin;
 8003d5e:	0021      	movs	r1, r4
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	2230      	movs	r2, #48	; 0x30
 8003d64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2201      	movs	r2, #1
 8003d6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <MX_GPIO_Init+0xec>)
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	0010      	movs	r0, r2
 8003d80:	f7fc fd7a 	bl	8000878 <HAL_GPIO_Init>

}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b00b      	add	sp, #44	; 0x2c
 8003d8a:	bd90      	pop	{r4, r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	50000400 	.word	0x50000400

08003d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <initNFC>:
 */

#include "nfc.h"
#include "stm32g0xx_hal.h"

void initNFC(I2C_HandleTypeDef *hi2c, uint16_t devAddress){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	000a      	movs	r2, r1
 8003daa:	1cbb      	adds	r3, r7, #2
 8003dac:	801a      	strh	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(hi2c, devAddress,3,50) == HAL_OK){
 8003dae:	1cbb      	adds	r3, r7, #2
 8003db0:	8819      	ldrh	r1, [r3, #0]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	2332      	movs	r3, #50	; 0x32
 8003db6:	2203      	movs	r2, #3
 8003db8:	f7fd f87e 	bl	8000eb8 <HAL_I2C_IsDeviceReady>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d114      	bne.n	8003dea <initNFC+0x4a>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <initNFC+0x60>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fc feba 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NFC_LED2_PORT,NFC_LED2,1);
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <initNFC+0x60>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc feb4 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NFC_LED3_PORT,NFC_LED3,1);
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	23a0      	movs	r3, #160	; 0xa0
 8003dde:	05db      	lsls	r3, r3, #23
 8003de0:	2201      	movs	r2, #1
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fc feac 	bl	8000b40 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
	}
}
 8003de8:	e005      	b.n	8003df6 <initNFC+0x56>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <initNFC+0x60>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	2120      	movs	r1, #32
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7fc fea5 	bl	8000b40 <HAL_GPIO_WritePin>
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	50000400 	.word	0x50000400

08003e04 <currentAddRead>:


void currentAddRead(I2C_HandleTypeDef *hi2c, uint16_t devAddress, char *buffer){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	200a      	movs	r0, #10
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	1c0a      	adds	r2, r1, #0
 8003e14:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Master_Receive(hi2c, devAddress, buffer, 10,50);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	183b      	adds	r3, r7, r0
 8003e1a:	8819      	ldrh	r1, [r3, #0]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	2332      	movs	r3, #50	; 0x32
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	230a      	movs	r3, #10
 8003e24:	f7fc ff40 	bl	8000ca8 <HAL_I2C_Master_Receive>
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_MspInit+0x44>)
 8003e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_MspInit+0x44>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_MspInit+0x44>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2201      	movs	r2, #1
 8003e48:	4013      	ands	r3, r2
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_MspInit+0x44>)
 8003e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_MspInit+0x44>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0549      	lsls	r1, r1, #21
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_MspInit+0x44>)
 8003e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	055b      	lsls	r3, r3, #21
 8003e64:	4013      	ands	r3, r2
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	2314      	movs	r3, #20
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	0018      	movs	r0, r3
 8003e86:	2314      	movs	r3, #20
 8003e88:	001a      	movs	r2, r3
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f000 f8fe 	bl	800408c <memset>
  if(hi2c->Instance==I2C1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_I2C_MspInit+0x8c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d130      	bne.n	8003efc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	2202      	movs	r2, #2
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eb2:	2114      	movs	r1, #20
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	22c0      	movs	r2, #192	; 0xc0
 8003eb8:	0092      	lsls	r2, r2, #2
 8003eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	2212      	movs	r2, #18
 8003ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_I2C_MspInit+0x94>)
 8003ed8:	0019      	movs	r1, r3
 8003eda:	0010      	movs	r0, r2
 8003edc:	f7fc fccc 	bl	8000878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	0389      	lsls	r1, r1, #14
 8003eea:	430a      	orrs	r2, r1
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_I2C_MspInit+0x90>)
 8003ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	039b      	lsls	r3, r3, #14
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b00a      	add	sp, #40	; 0x28
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40005400 	.word	0x40005400
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	50000400 	.word	0x50000400

08003f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	2314      	movs	r3, #20
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	2314      	movs	r3, #20
 8003f20:	001a      	movs	r2, r3
 8003f22:	2100      	movs	r1, #0
 8003f24:	f000 f8b2 	bl	800408c <memset>
  if(huart->Instance==LPUART1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_UART_MspInit+0x8c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d130      	bne.n	8003f94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	0349      	lsls	r1, r1, #13
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	035b      	lsls	r3, r3, #13
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_UART_MspInit+0x90>)
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003f66:	2114      	movs	r1, #20
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	220c      	movs	r2, #12
 8003f6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2202      	movs	r2, #2
 8003f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2206      	movs	r2, #6
 8003f84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f86:	187a      	adds	r2, r7, r1
 8003f88:	23a0      	movs	r3, #160	; 0xa0
 8003f8a:	05db      	lsls	r3, r3, #23
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7fc fc72 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b00a      	add	sp, #40	; 0x28
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40008000 	.word	0x40008000
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <HardFault_Handler+0x4>

08003fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fcc:	f7fc fb86 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <SystemInit+0x14>)
 8003fde:	2280      	movs	r2, #128	; 0x80
 8003fe0:	0512      	lsls	r2, r2, #20
 8003fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ff0:	480d      	ldr	r0, [pc, #52]	; (8004028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ff2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ff4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ff6:	e003      	b.n	8004000 <LoopCopyDataInit>

08003ff8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003ffa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ffc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003ffe:	3104      	adds	r1, #4

08004000 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004000:	480b      	ldr	r0, [pc, #44]	; (8004030 <LoopForever+0xa>)
  ldr r3, =_edata
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <LoopForever+0xe>)
  adds r2, r0, r1
 8004004:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004006:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004008:	d3f6      	bcc.n	8003ff8 <CopyDataInit>
  ldr r2, =_sbss
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <LoopForever+0x12>)
  b LoopFillZerobss
 800400c:	e002      	b.n	8004014 <LoopFillZerobss>

0800400e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004010:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004012:	3204      	adds	r2, #4

08004014 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <LoopForever+0x16>)
  cmp r2, r3
 8004016:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004018:	d3f9      	bcc.n	800400e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800401a:	f7ff ffdd 	bl	8003fd8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800401e:	f000 f811 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004022:	f7ff fd1f 	bl	8003a64 <main>

08004026 <LoopForever>:

LoopForever:
    b LoopForever
 8004026:	e7fe      	b.n	8004026 <LoopForever>
  ldr   r0, =_estack
 8004028:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800402c:	08004134 	.word	0x08004134
  ldr r0, =_sdata
 8004030:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004034:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004038:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800403c:	20000104 	.word	0x20000104

08004040 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004040:	e7fe      	b.n	8004040 <ADC1_COMP_IRQHandler>
	...

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	2600      	movs	r6, #0
 8004048:	4d0c      	ldr	r5, [pc, #48]	; (800407c <__libc_init_array+0x38>)
 800404a:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	2600      	movs	r6, #0
 8004056:	f000 f821 	bl	800409c <_init>
 800405a:	4d0a      	ldr	r5, [pc, #40]	; (8004084 <__libc_init_array+0x40>)
 800405c:	4c0a      	ldr	r4, [pc, #40]	; (8004088 <__libc_init_array+0x44>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	00b3      	lsls	r3, r6, #2
 800406a:	58eb      	ldr	r3, [r5, r3]
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	00b3      	lsls	r3, r6, #2
 8004074:	58eb      	ldr	r3, [r5, r3]
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	0800412c 	.word	0x0800412c
 8004080:	0800412c 	.word	0x0800412c
 8004084:	0800412c 	.word	0x0800412c
 8004088:	08004130 	.word	0x08004130

0800408c <memset>:
 800408c:	0003      	movs	r3, r0
 800408e:	1812      	adds	r2, r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	7019      	strb	r1, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
