
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004bc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004bc0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020bf  00000000  00000000  0002d12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e77  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b04b  00000000  00000000  0004882f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000936f6  00000000  00000000  0005387a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  000e6fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004740 	.word	0x08004740

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004740 	.word	0x08004740

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	464f      	mov	r7, r9
 8000444:	4646      	mov	r6, r8
 8000446:	46d6      	mov	lr, sl
 8000448:	b5c0      	push	{r6, r7, lr}
 800044a:	0004      	movs	r4, r0
 800044c:	b082      	sub	sp, #8
 800044e:	000d      	movs	r5, r1
 8000450:	4691      	mov	r9, r2
 8000452:	4698      	mov	r8, r3
 8000454:	428b      	cmp	r3, r1
 8000456:	d82f      	bhi.n	80004b8 <__udivmoddi4+0x78>
 8000458:	d02c      	beq.n	80004b4 <__udivmoddi4+0x74>
 800045a:	4641      	mov	r1, r8
 800045c:	4648      	mov	r0, r9
 800045e:	f000 f8b1 	bl	80005c4 <__clzdi2>
 8000462:	0029      	movs	r1, r5
 8000464:	0006      	movs	r6, r0
 8000466:	0020      	movs	r0, r4
 8000468:	f000 f8ac 	bl	80005c4 <__clzdi2>
 800046c:	1a33      	subs	r3, r6, r0
 800046e:	469c      	mov	ip, r3
 8000470:	3b20      	subs	r3, #32
 8000472:	469a      	mov	sl, r3
 8000474:	d500      	bpl.n	8000478 <__udivmoddi4+0x38>
 8000476:	e076      	b.n	8000566 <__udivmoddi4+0x126>
 8000478:	464b      	mov	r3, r9
 800047a:	4652      	mov	r2, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	001f      	movs	r7, r3
 8000480:	464b      	mov	r3, r9
 8000482:	4662      	mov	r2, ip
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d828      	bhi.n	80004de <__udivmoddi4+0x9e>
 800048c:	d025      	beq.n	80004da <__udivmoddi4+0x9a>
 800048e:	4653      	mov	r3, sl
 8000490:	1ba4      	subs	r4, r4, r6
 8000492:	41bd      	sbcs	r5, r7
 8000494:	2b00      	cmp	r3, #0
 8000496:	da00      	bge.n	800049a <__udivmoddi4+0x5a>
 8000498:	e07b      	b.n	8000592 <__udivmoddi4+0x152>
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
 800049e:	9200      	str	r2, [sp, #0]
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4652      	mov	r2, sl
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	4662      	mov	r2, ip
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	e018      	b.n	80004e6 <__udivmoddi4+0xa6>
 80004b4:	4282      	cmp	r2, r0
 80004b6:	d9d0      	bls.n	800045a <__udivmoddi4+0x1a>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <__udivmoddi4+0x8a>
 80004c6:	601c      	str	r4, [r3, #0]
 80004c8:	605d      	str	r5, [r3, #4]
 80004ca:	9800      	ldr	r0, [sp, #0]
 80004cc:	9901      	ldr	r1, [sp, #4]
 80004ce:	b002      	add	sp, #8
 80004d0:	bc1c      	pop	{r2, r3, r4}
 80004d2:	4690      	mov	r8, r2
 80004d4:	4699      	mov	r9, r3
 80004d6:	46a2      	mov	sl, r4
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	42a3      	cmp	r3, r4
 80004dc:	d9d7      	bls.n	800048e <__udivmoddi4+0x4e>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	4663      	mov	r3, ip
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0e9      	beq.n	80004c0 <__udivmoddi4+0x80>
 80004ec:	07fb      	lsls	r3, r7, #31
 80004ee:	4698      	mov	r8, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0872      	lsrs	r2, r6, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	087b      	lsrs	r3, r7, #1
 80004f8:	4666      	mov	r6, ip
 80004fa:	e00e      	b.n	800051a <__udivmoddi4+0xda>
 80004fc:	42ab      	cmp	r3, r5
 80004fe:	d101      	bne.n	8000504 <__udivmoddi4+0xc4>
 8000500:	42a2      	cmp	r2, r4
 8000502:	d80c      	bhi.n	800051e <__udivmoddi4+0xde>
 8000504:	1aa4      	subs	r4, r4, r2
 8000506:	419d      	sbcs	r5, r3
 8000508:	2001      	movs	r0, #1
 800050a:	1924      	adds	r4, r4, r4
 800050c:	416d      	adcs	r5, r5
 800050e:	2100      	movs	r1, #0
 8000510:	3e01      	subs	r6, #1
 8000512:	1824      	adds	r4, r4, r0
 8000514:	414d      	adcs	r5, r1
 8000516:	2e00      	cmp	r6, #0
 8000518:	d006      	beq.n	8000528 <__udivmoddi4+0xe8>
 800051a:	42ab      	cmp	r3, r5
 800051c:	d9ee      	bls.n	80004fc <__udivmoddi4+0xbc>
 800051e:	3e01      	subs	r6, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2e00      	cmp	r6, #0
 8000526:	d1f8      	bne.n	800051a <__udivmoddi4+0xda>
 8000528:	9800      	ldr	r0, [sp, #0]
 800052a:	9901      	ldr	r1, [sp, #4]
 800052c:	4653      	mov	r3, sl
 800052e:	1900      	adds	r0, r0, r4
 8000530:	4169      	adcs	r1, r5
 8000532:	2b00      	cmp	r3, #0
 8000534:	db23      	blt.n	800057e <__udivmoddi4+0x13e>
 8000536:	002b      	movs	r3, r5
 8000538:	4652      	mov	r2, sl
 800053a:	40d3      	lsrs	r3, r2
 800053c:	002a      	movs	r2, r5
 800053e:	4664      	mov	r4, ip
 8000540:	40e2      	lsrs	r2, r4
 8000542:	001c      	movs	r4, r3
 8000544:	4653      	mov	r3, sl
 8000546:	0015      	movs	r5, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	db2d      	blt.n	80005a8 <__udivmoddi4+0x168>
 800054c:	0026      	movs	r6, r4
 800054e:	4657      	mov	r7, sl
 8000550:	40be      	lsls	r6, r7
 8000552:	0033      	movs	r3, r6
 8000554:	0026      	movs	r6, r4
 8000556:	4667      	mov	r7, ip
 8000558:	40be      	lsls	r6, r7
 800055a:	0032      	movs	r2, r6
 800055c:	1a80      	subs	r0, r0, r2
 800055e:	4199      	sbcs	r1, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	e7ac      	b.n	80004c0 <__udivmoddi4+0x80>
 8000566:	4662      	mov	r2, ip
 8000568:	2320      	movs	r3, #32
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	40da      	lsrs	r2, r3
 8000570:	4661      	mov	r1, ip
 8000572:	0013      	movs	r3, r2
 8000574:	4642      	mov	r2, r8
 8000576:	408a      	lsls	r2, r1
 8000578:	0017      	movs	r7, r2
 800057a:	431f      	orrs	r7, r3
 800057c:	e780      	b.n	8000480 <__udivmoddi4+0x40>
 800057e:	4662      	mov	r2, ip
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	002a      	movs	r2, r5
 8000586:	4666      	mov	r6, ip
 8000588:	409a      	lsls	r2, r3
 800058a:	0023      	movs	r3, r4
 800058c:	40f3      	lsrs	r3, r6
 800058e:	4313      	orrs	r3, r2
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0xfc>
 8000592:	4662      	mov	r2, ip
 8000594:	2320      	movs	r3, #32
 8000596:	2100      	movs	r1, #0
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	9100      	str	r1, [sp, #0]
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	40da      	lsrs	r2, r3
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	e780      	b.n	80004aa <__udivmoddi4+0x6a>
 80005a8:	2320      	movs	r3, #32
 80005aa:	4662      	mov	r2, ip
 80005ac:	0026      	movs	r6, r4
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	40de      	lsrs	r6, r3
 80005b2:	002f      	movs	r7, r5
 80005b4:	46b0      	mov	r8, r6
 80005b6:	4666      	mov	r6, ip
 80005b8:	40b7      	lsls	r7, r6
 80005ba:	4646      	mov	r6, r8
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7c8      	b.n	8000554 <__udivmoddi4+0x114>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzdi2>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d103      	bne.n	80005d2 <__clzdi2+0xe>
 80005ca:	f000 f807 	bl	80005dc <__clzsi2>
 80005ce:	3020      	adds	r0, #32
 80005d0:	e002      	b.n	80005d8 <__clzdi2+0x14>
 80005d2:	1c08      	adds	r0, r1, #0
 80005d4:	f000 f802 	bl	80005dc <__clzsi2>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_Init+0x3c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_Init+0x3c>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0049      	lsls	r1, r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f810 	bl	8000658 <HAL_InitTick>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d003      	beq.n	8000644 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f003 ff2a 	bl	800449c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <HAL_InitTick+0x88>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02b      	beq.n	80006c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_InitTick+0x8c>)
 8000672:	681c      	ldr	r4, [r3, #0]
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <HAL_InitTick+0x88>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	0019      	movs	r1, r3
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	0098      	lsls	r0, r3, #2
 800067e:	f7ff fd49 	bl	8000114 <__udivsi3>
 8000682:	0003      	movs	r3, r0
 8000684:	0019      	movs	r1, r3
 8000686:	0020      	movs	r0, r4
 8000688:	f7ff fd44 	bl	8000114 <__udivsi3>
 800068c:	0003      	movs	r3, r0
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f935 	bl	80008fe <HAL_SYSTICK_Config>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d112      	bne.n	80006be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d80a      	bhi.n	80006b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	425b      	negs	r3, r3
 80006a4:	2200      	movs	r2, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f904 	bl	80008b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_InitTick+0x90>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	e00d      	b.n	80006d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e008      	b.n	80006d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006be:	230f      	movs	r3, #15
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e003      	b.n	80006d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006d0:	230f      	movs	r3, #15
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
}
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b005      	add	sp, #20
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <HAL_IncTick+0x18>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_IncTick+0x1c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_IncTick+0x18>)
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000028 	.word	0x20000028

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff fff0 	bl	800070c <HAL_GetTick>
 800072c:	0003      	movs	r3, r0
 800072e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	d004      	beq.n	8000744 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_Delay+0x40>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	f7ff ffe1 	bl	800070c <HAL_GetTick>
 800074a:	0002      	movs	r2, r0
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	429a      	cmp	r2, r3
 8000754:	d8f7      	bhi.n	8000746 <HAL_Delay+0x26>
  {
  }
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000004 	.word	0x20000004

08000764 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	231f      	movs	r3, #31
 8000778:	401a      	ands	r2, r3
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <NVIC_EnableIRQ+0x28>)
 800077c:	2101      	movs	r1, #1
 800077e:	4091      	lsls	r1, r2
 8000780:	000a      	movs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	e000e100 	.word	0xe000e100

08000790 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b7f      	cmp	r3, #127	; 0x7f
 80007a4:	d932      	bls.n	800080c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <NVIC_SetPriority+0xd4>)
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	230f      	movs	r3, #15
 80007b0:	400b      	ands	r3, r1
 80007b2:	3b08      	subs	r3, #8
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	3306      	adds	r3, #6
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	18d3      	adds	r3, r2, r3
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1dfa      	adds	r2, r7, #7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	0011      	movs	r1, r2
 80007c6:	2203      	movs	r2, #3
 80007c8:	400a      	ands	r2, r1
 80007ca:	00d2      	lsls	r2, r2, #3
 80007cc:	21ff      	movs	r1, #255	; 0xff
 80007ce:	4091      	lsls	r1, r2
 80007d0:	000a      	movs	r2, r1
 80007d2:	43d2      	mvns	r2, r2
 80007d4:	401a      	ands	r2, r3
 80007d6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	401a      	ands	r2, r3
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0018      	movs	r0, r3
 80007e6:	2303      	movs	r3, #3
 80007e8:	4003      	ands	r3, r0
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	001c      	movs	r4, r3
 80007f6:	230f      	movs	r3, #15
 80007f8:	4023      	ands	r3, r4
 80007fa:	3b08      	subs	r3, #8
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	3306      	adds	r3, #6
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	18c3      	adds	r3, r0, r3
 8000806:	3304      	adds	r3, #4
 8000808:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800080a:	e027      	b.n	800085c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	33c0      	adds	r3, #192	; 0xc0
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	589b      	ldr	r3, [r3, r2]
 800081c:	1dfa      	adds	r2, r7, #7
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	0011      	movs	r1, r2
 8000822:	2203      	movs	r2, #3
 8000824:	400a      	ands	r2, r1
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	21ff      	movs	r1, #255	; 0xff
 800082a:	4091      	lsls	r1, r2
 800082c:	000a      	movs	r2, r1
 800082e:	43d2      	mvns	r2, r2
 8000830:	401a      	ands	r2, r3
 8000832:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	019b      	lsls	r3, r3, #6
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	401a      	ands	r2, r3
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0018      	movs	r0, r3
 8000842:	2303      	movs	r3, #3
 8000844:	4003      	ands	r3, r0
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <NVIC_SetPriority+0xd8>)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	33c0      	adds	r3, #192	; 0xc0
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	501a      	str	r2, [r3, r0]
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b003      	add	sp, #12
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000e100 	.word	0xe000e100

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <SysTick_Config+0x40>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d901      	bls.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e010      	b.n	80008a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <SysTick_Config+0x44>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	3a01      	subs	r2, #1
 8000888:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	2301      	movs	r3, #1
 800088c:	425b      	negs	r3, r3
 800088e:	2103      	movs	r1, #3
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff7d 	bl	8000790 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SysTick_Config+0x44>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x44>)
 800089e:	2207      	movs	r2, #7
 80008a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b002      	add	sp, #8
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	00ffffff 	.word	0x00ffffff
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	210f      	movs	r1, #15
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	1c02      	adds	r2, r0, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff5d 	bl	8000790 <NVIC_SetPriority>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	0002      	movs	r2, r0
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff37 	bl	8000764 <NVIC_EnableIRQ>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ffaf 	bl	800086c <SysTick_Config>
 800090e:	0003      	movs	r3, r0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e147      	b.n	8000bb8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <HAL_GPIO_Init+0x28>
 800093e:	e138      	b.n	8000bb2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d003      	beq.n	8000950 <HAL_GPIO_Init+0x38>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b12      	cmp	r3, #18
 800094e:	d123      	bne.n	8000998 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	58d3      	ldr	r3, [r2, r3]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	2207      	movs	r2, #7
 8000962:	4013      	ands	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	220f      	movs	r2, #15
 8000968:	409a      	lsls	r2, r3
 800096a:	0013      	movs	r3, r2
 800096c:	43da      	mvns	r2, r3
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	691a      	ldr	r2, [r3, #16]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2107      	movs	r1, #7
 800097c:	400b      	ands	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	43da      	mvns	r2, r3
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d00b      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d007      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e0:	2b11      	cmp	r3, #17
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d130      	bne.n	8000a4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	409a      	lsls	r2, r3
 80009fa:	0013      	movs	r3, r2
 80009fc:	43da      	mvns	r2, r3
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	0013      	movs	r3, r2
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	2201      	movs	r2, #1
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	2203      	movs	r2, #3
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	055b      	lsls	r3, r3, #21
 8000a86:	4013      	ands	r3, r2
 8000a88:	d100      	bne.n	8000a8c <HAL_GPIO_Init+0x174>
 8000a8a:	e092      	b.n	8000bb2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3318      	adds	r3, #24
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	589b      	ldr	r3, [r3, r2]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x1ca>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a45      	ldr	r2, [pc, #276]	; (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x1c6>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x1c2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x1be>
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	400a      	ands	r2, r1
 8000aea:	00d2      	lsls	r2, r2, #3
 8000aec:	4093      	lsls	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000af4:	4936      	ldr	r1, [pc, #216]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3318      	adds	r3, #24
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	58d3      	ldr	r3, [r2, r3]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	025b      	lsls	r3, r3, #9
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b28:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b30:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b32:	2384      	movs	r3, #132	; 0x84
 8000b34:	58d3      	ldr	r3, [r2, r3]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	029b      	lsls	r3, r3, #10
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b56:	491e      	ldr	r1, [pc, #120]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b58:	2284      	movs	r2, #132	; 0x84
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	035b      	lsls	r3, r3, #13
 8000b76:	4013      	ands	r3, r2
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43da      	mvns	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	039b      	lsls	r3, r3, #14
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	40da      	lsrs	r2, r3
 8000bc0:	1e13      	subs	r3, r2, #0
 8000bc2:	d000      	beq.n	8000bc6 <HAL_GPIO_Init+0x2ae>
 8000bc4:	e6b0      	b.n	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b006      	add	sp, #24
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	50000400 	.word	0x50000400
 8000bd8:	50000800 	.word	0x50000800
 8000bdc:	50000c00 	.word	0x50000c00

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	0008      	movs	r0, r1
 8000bea:	0011      	movs	r1, r2
 8000bec:	1cbb      	adds	r3, r7, #2
 8000bee:	1c02      	adds	r2, r0, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	1c7b      	adds	r3, r7, #1
 8000bf4:	1c0a      	adds	r2, r1, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf8:	1c7b      	adds	r3, r7, #1
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	1dba      	adds	r2, r7, #6
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	4013      	ands	r3, r2
 8000c32:	d008      	beq.n	8000c46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c36:	1dba      	adds	r2, r7, #6
 8000c38:	8812      	ldrh	r2, [r2, #0]
 8000c3a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f815 	bl	8000c70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	1dba      	adds	r2, r7, #6
 8000c4c:	8812      	ldrh	r2, [r2, #0]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d008      	beq.n	8000c64 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c54:	1dba      	adds	r2, r7, #6
 8000c56:	8812      	ldrh	r2, [r2, #0]
 8000c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f810 	bl	8000c84 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021800 	.word	0x40021800

08000c70 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	1dbb      	adds	r3, r7, #6
 8000c8e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e082      	b.n	8000db0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2241      	movs	r2, #65	; 0x41
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d107      	bne.n	8000cc6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 fc0f 	bl	80044e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2241      	movs	r2, #65	; 0x41
 8000cca:	2124      	movs	r1, #36	; 0x24
 8000ccc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4934      	ldr	r1, [pc, #208]	; (8000db8 <HAL_I2C_Init+0x120>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4931      	ldr	r1, [pc, #196]	; (8000dbc <HAL_I2C_Init+0x124>)
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0209      	lsls	r1, r1, #8
 8000d10:	430a      	orrs	r2, r1
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	e007      	b.n	8000d26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2184      	movs	r1, #132	; 0x84
 8000d20:	0209      	lsls	r1, r1, #8
 8000d22:	430a      	orrs	r2, r1
 8000d24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d104      	bne.n	8000d38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <HAL_I2C_Init+0x128>)
 8000d44:	430a      	orrs	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	491a      	ldr	r1, [pc, #104]	; (8000dbc <HAL_I2C_Init+0x124>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	021a      	lsls	r2, r3, #8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69d9      	ldr	r1, [r3, #28]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1a      	ldr	r2, [r3, #32]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2241      	movs	r2, #65	; 0x41
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2242      	movs	r2, #66	; 0x42
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	f0ffffff 	.word	0xf0ffffff
 8000dbc:	ffff7fff 	.word	0xffff7fff
 8000dc0:	02008000 	.word	0x02008000

08000dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	000c      	movs	r4, r1
 8000dce:	0010      	movs	r0, r2
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	1c22      	adds	r2, r4, #0
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	2308      	movs	r3, #8
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	1dbb      	adds	r3, r7, #6
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2241      	movs	r2, #65	; 0x41
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d000      	beq.n	8000df6 <HAL_I2C_Mem_Write+0x32>
 8000df4:	e10c      	b.n	8001010 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_I2C_Mem_Write+0x42>
 8000dfc:	232c      	movs	r3, #44	; 0x2c
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0ff      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_I2C_Mem_Write+0x5c>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0f8      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	2101      	movs	r1, #1
 8000e26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e28:	f7ff fc70 	bl	800070c <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	0219      	lsls	r1, r3, #8
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2319      	movs	r3, #25
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f000 f975 	bl	800112c <I2C_WaitOnFlagUntilTimeout>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0e3      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2241      	movs	r2, #65	; 0x41
 8000e4e:	2121      	movs	r1, #33	; 0x21
 8000e50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2242      	movs	r2, #66	; 0x42
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	222c      	movs	r2, #44	; 0x2c
 8000e6a:	18ba      	adds	r2, r7, r2
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e76:	1dbb      	adds	r3, r7, #6
 8000e78:	881c      	ldrh	r4, [r3, #0]
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	230a      	movs	r3, #10
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	8819      	ldrh	r1, [r3, #0]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	0023      	movs	r3, r4
 8000e92:	f000 f8c5 	bl	8001020 <I2C_RequestMemoryWrite>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0b5      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d911      	bls.n	8000ed4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	045c      	lsls	r4, r3, #17
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	8819      	ldrh	r1, [r3, #0]
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	0023      	movs	r3, r4
 8000ece:	f000 fa4d 	bl	800136c <I2C_TransferConfig>
 8000ed2:	e012      	b.n	8000efa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	049c      	lsls	r4, r3, #18
 8000ee8:	230a      	movs	r3, #10
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	8819      	ldrh	r1, [r3, #0]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	0023      	movs	r3, r4
 8000ef6:	f000 fa39 	bl	800136c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 f952 	bl	80011aa <I2C_WaitOnTXISFlagUntilTimeout>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e081      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03a      	beq.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d136      	bne.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	0013      	movs	r3, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f000 f8e5 	bl	800112c <I2C_WaitOnFlagUntilTimeout>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e053      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d911      	bls.n	8000f98 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	045c      	lsls	r4, r3, #17
 8000f84:	230a      	movs	r3, #10
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	0023      	movs	r3, r4
 8000f92:	f000 f9eb 	bl	800136c <I2C_TransferConfig>
 8000f96:	e012      	b.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	049c      	lsls	r4, r3, #18
 8000fac:	230a      	movs	r3, #10
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	0023      	movs	r3, r4
 8000fba:	f000 f9d7 	bl	800136c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d198      	bne.n	8000efa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f92a 	bl	8001228 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e01a      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	490b      	ldr	r1, [pc, #44]	; (800101c <HAL_I2C_Mem_Write+0x258>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2241      	movs	r2, #65	; 0x41
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2242      	movs	r2, #66	; 0x42
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001010:	2302      	movs	r3, #2
  }
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b007      	add	sp, #28
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	fe00e800 	.word	0xfe00e800

08001020 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	000c      	movs	r4, r1
 800102a:	0010      	movs	r0, r2
 800102c:	0019      	movs	r1, r3
 800102e:	250a      	movs	r5, #10
 8001030:	197b      	adds	r3, r7, r5
 8001032:	1c22      	adds	r2, r4, #0
 8001034:	801a      	strh	r2, [r3, #0]
 8001036:	2308      	movs	r3, #8
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	801a      	strh	r2, [r3, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	1c0a      	adds	r2, r1, #0
 8001042:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001044:	1dbb      	adds	r3, r7, #6
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	045c      	lsls	r4, r3, #17
 800104e:	197b      	adds	r3, r7, r5
 8001050:	8819      	ldrh	r1, [r3, #0]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <I2C_RequestMemoryWrite+0xc4>)
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	0023      	movs	r3, r4
 800105a:	f000 f987 	bl	800136c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800105e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001060:	6a39      	ldr	r1, [r7, #32]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	0018      	movs	r0, r3
 8001066:	f000 f8a0 	bl	80011aa <I2C_WaitOnTXISFlagUntilTimeout>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e033      	b.n	80010da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800107a:	2308      	movs	r3, #8
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
 8001088:	e019      	b.n	80010be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800108a:	2308      	movs	r3, #8
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	b29b      	uxth	r3, r3
 8001094:	b2da      	uxtb	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800109c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109e:	6a39      	ldr	r1, [r7, #32]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 f881 	bl	80011aa <I2C_WaitOnTXISFlagUntilTimeout>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e014      	b.n	80010da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010b0:	2308      	movs	r3, #8
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80010be:	6a3a      	ldr	r2, [r7, #32]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	0013      	movs	r3, r2
 80010c8:	2200      	movs	r2, #0
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	f000 f82e 	bl	800112c <I2C_WaitOnFlagUntilTimeout>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d001      	beq.n	80010d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bdb0      	pop	{r4, r5, r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	80002000 	.word	0x80002000

080010e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d103      	bne.n	8001106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2201      	movs	r2, #1
 800110e:	4013      	ands	r3, r2
 8001110:	2b01      	cmp	r3, #1
 8001112:	d007      	beq.n	8001124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2101      	movs	r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	619a      	str	r2, [r3, #24]
  }
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}

0800112c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800113c:	e021      	b.n	8001182 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	d01e      	beq.n	8001182 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001144:	f7ff fae2 	bl	800070c <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d302      	bcc.n	800115a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d113      	bne.n	8001182 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	2220      	movs	r2, #32
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2241      	movs	r2, #65	; 0x41
 800116a:	2120      	movs	r1, #32
 800116c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2242      	movs	r2, #66	; 0x42
 8001172:	2100      	movs	r1, #0
 8001174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2240      	movs	r2, #64	; 0x40
 800117a:	2100      	movs	r1, #0
 800117c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	4013      	ands	r3, r2
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	425a      	negs	r2, r3
 8001192:	4153      	adcs	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	001a      	movs	r2, r3
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d0ce      	beq.n	800113e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}

080011aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80011b6:	e02b      	b.n	8001210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f86e 	bl	80012a0 <I2C_IsAcknowledgeFailed>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e029      	b.n	8001220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3301      	adds	r3, #1
 80011d0:	d01e      	beq.n	8001210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011d2:	f7ff fa9b 	bl	800070c <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d302      	bcc.n	80011e8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d113      	bne.n	8001210 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	2220      	movs	r2, #32
 80011ee:	431a      	orrs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2241      	movs	r2, #65	; 0x41
 80011f8:	2120      	movs	r1, #32
 80011fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2242      	movs	r2, #66	; 0x42
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e007      	b.n	8001220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	2b02      	cmp	r3, #2
 800121c:	d1cc      	bne.n	80011b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}

08001228 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001234:	e028      	b.n	8001288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f82f 	bl	80012a0 <I2C_IsAcknowledgeFailed>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e026      	b.n	8001298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800124a:	f7ff fa5f 	bl	800070c <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	429a      	cmp	r2, r3
 8001258:	d302      	bcc.n	8001260 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d113      	bne.n	8001288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	2220      	movs	r2, #32
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2241      	movs	r2, #65	; 0x41
 8001270:	2120      	movs	r1, #32
 8001272:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2242      	movs	r2, #66	; 0x42
 8001278:	2100      	movs	r1, #0
 800127a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e007      	b.n	8001298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2220      	movs	r2, #32
 8001290:	4013      	ands	r3, r2
 8001292:	2b20      	cmp	r3, #32
 8001294:	d1cf      	bne.n	8001236 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b004      	add	sp, #16
 800129e:	bd80      	pop	{r7, pc}

080012a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2210      	movs	r2, #16
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d151      	bne.n	800135e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012ba:	e021      	b.n	8001300 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	d01e      	beq.n	8001300 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c2:	f7ff fa23 	bl	800070c <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <I2C_IsAcknowledgeFailed+0x38>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d113      	bne.n	8001300 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	2220      	movs	r2, #32
 80012de:	431a      	orrs	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2241      	movs	r2, #65	; 0x41
 80012e8:	2120      	movs	r1, #32
 80012ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2242      	movs	r2, #66	; 0x42
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	2100      	movs	r1, #0
 80012fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e02f      	b.n	8001360 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2220      	movs	r2, #32
 8001308:	4013      	ands	r3, r2
 800130a:	2b20      	cmp	r3, #32
 800130c:	d1d6      	bne.n	80012bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2210      	movs	r2, #16
 8001314:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fee1 	bl	80010e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <I2C_IsAcknowledgeFailed+0xc8>)
 8001332:	400a      	ands	r2, r1
 8001334:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	2204      	movs	r2, #4
 800133c:	431a      	orrs	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2241      	movs	r2, #65	; 0x41
 8001346:	2120      	movs	r1, #32
 8001348:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2242      	movs	r2, #66	; 0x42
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	2100      	movs	r1, #0
 8001358:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	fe00e800 	.word	0xfe00e800

0800136c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	0008      	movs	r0, r1
 8001376:	0011      	movs	r1, r2
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	240a      	movs	r4, #10
 800137c:	193b      	adds	r3, r7, r4
 800137e:	1c02      	adds	r2, r0, #0
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	2009      	movs	r0, #9
 8001384:	183b      	adds	r3, r7, r0
 8001386:	1c0a      	adds	r2, r1, #0
 8001388:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	6a3a      	ldr	r2, [r7, #32]
 8001392:	0d51      	lsrs	r1, r2, #21
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	00d2      	lsls	r2, r2, #3
 8001398:	400a      	ands	r2, r1
 800139a:	490e      	ldr	r1, [pc, #56]	; (80013d4 <I2C_TransferConfig+0x68>)
 800139c:	430a      	orrs	r2, r1
 800139e:	43d2      	mvns	r2, r2
 80013a0:	401a      	ands	r2, r3
 80013a2:	0011      	movs	r1, r2
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	059b      	lsls	r3, r3, #22
 80013aa:	0d9a      	lsrs	r2, r3, #22
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	0418      	lsls	r0, r3, #16
 80013b2:	23ff      	movs	r3, #255	; 0xff
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	4003      	ands	r3, r0
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	431a      	orrs	r2, r3
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b005      	add	sp, #20
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	03ff63ff 	.word	0x03ff63ff

080013d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2241      	movs	r2, #65	; 0x41
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d138      	bne.n	8001460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e032      	b.n	8001462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2241      	movs	r2, #65	; 0x41
 8001408:	2124      	movs	r1, #36	; 0x24
 800140a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4911      	ldr	r1, [pc, #68]	; (800146c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2241      	movs	r2, #65	; 0x41
 8001450:	2120      	movs	r1, #32
 8001452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	e000      	b.n	8001462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001460:	2302      	movs	r3, #2
  }
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	ffffefff 	.word	0xffffefff

08001470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2241      	movs	r2, #65	; 0x41
 800147e:	5c9b      	ldrb	r3, [r3, r2]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b20      	cmp	r3, #32
 8001484:	d139      	bne.n	80014fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001490:	2302      	movs	r3, #2
 8001492:	e033      	b.n	80014fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	2101      	movs	r1, #1
 800149a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2241      	movs	r2, #65	; 0x41
 80014a0:	2124      	movs	r1, #36	; 0x24
 80014a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2101      	movs	r1, #1
 80014b0:	438a      	bics	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2241      	movs	r2, #65	; 0x41
 80014ea:	2120      	movs	r1, #32
 80014ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
  }
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}
 8001504:	fffff0ff 	.word	0xfffff0ff

08001508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001516:	4013      	ands	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d11f      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	0013      	movs	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	189b      	adds	r3, r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4912      	ldr	r1, [pc, #72]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800153a:	0018      	movs	r0, r3
 800153c:	f7fe fdea 	bl	8000114 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001546:	e008      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3b01      	subs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e001      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e009      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	401a      	ands	r2, r3
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	429a      	cmp	r2, r3
 800156a:	d0ed      	beq.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40007000 	.word	0x40007000
 800157c:	fffff9ff 	.word	0xfffff9ff
 8001580:	20000008 	.word	0x20000008
 8001584:	000f4240 	.word	0x000f4240

08001588 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <LL_RCC_GetAPB1Prescaler+0x14>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	23e0      	movs	r3, #224	; 0xe0
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	4013      	ands	r3, r2
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e304      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x1e>
 80015bc:	e07c      	b.n	80016b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	4bc3      	ldr	r3, [pc, #780]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2238      	movs	r2, #56	; 0x38
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c8:	4bc0      	ldr	r3, [pc, #768]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d102      	bne.n	80015de <HAL_RCC_OscConfig+0x3e>
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_OscConfig+0x44>
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d10b      	bne.n	80015fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	4bb9      	ldr	r3, [pc, #740]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	4013      	ands	r3, r2
 80015ee:	d062      	beq.n	80016b6 <HAL_RCC_OscConfig+0x116>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d15e      	bne.n	80016b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e2df      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	429a      	cmp	r2, r3
 8001606:	d107      	bne.n	8001618 <HAL_RCC_OscConfig+0x78>
 8001608:	4bb0      	ldr	r3, [pc, #704]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4baf      	ldr	r3, [pc, #700]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0249      	lsls	r1, r1, #9
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e020      	b.n	800165a <HAL_RCC_OscConfig+0xba>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	23a0      	movs	r3, #160	; 0xa0
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	429a      	cmp	r2, r3
 8001622:	d10e      	bne.n	8001642 <HAL_RCC_OscConfig+0xa2>
 8001624:	4ba9      	ldr	r3, [pc, #676]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4ba8      	ldr	r3, [pc, #672]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	02c9      	lsls	r1, r1, #11
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	4ba6      	ldr	r3, [pc, #664]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4ba5      	ldr	r3, [pc, #660]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0249      	lsls	r1, r1, #9
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0xba>
 8001642:	4ba2      	ldr	r3, [pc, #648]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4ba1      	ldr	r3, [pc, #644]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001648:	49a1      	ldr	r1, [pc, #644]	; (80018d0 <HAL_RCC_OscConfig+0x330>)
 800164a:	400a      	ands	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	4b9f      	ldr	r3, [pc, #636]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001654:	499f      	ldr	r1, [pc, #636]	; (80018d4 <HAL_RCC_OscConfig+0x334>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d014      	beq.n	800168c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff f853 	bl	800070c <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff f84e 	bl	800070c <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e29e      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	4b93      	ldr	r3, [pc, #588]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	029b      	lsls	r3, r3, #10
 8001686:	4013      	ands	r3, r2
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xcc>
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff f83e 	bl	800070c <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff f839 	bl	800070c <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e289      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0xf6>
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_RCC_OscConfig+0x124>
 80016c2:	e099      	b.n	80017f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2238      	movs	r2, #56	; 0x38
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ce:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2203      	movs	r2, #3
 80016d4:	4013      	ands	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x144>
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d002      	beq.n	80016ea <HAL_RCC_OscConfig+0x14a>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d135      	bne.n	8001756 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ea:	4b78      	ldr	r3, [pc, #480]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4013      	ands	r3, r2
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x162>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e25c      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a74      	ldr	r2, [pc, #464]	; (80018d8 <HAL_RCC_OscConfig+0x338>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	021a      	lsls	r2, r3, #8
 8001712:	4b6e      	ldr	r3, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800171e:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0adb      	lsrs	r3, r3, #11
 8001738:	2207      	movs	r2, #7
 800173a:	4013      	ands	r3, r2
 800173c:	4a68      	ldr	r2, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x340>)
 800173e:	40da      	lsrs	r2, r3
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_OscConfig+0x344>)
 8001742:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x348>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f7fe ff85 	bl	8000658 <HAL_InitTick>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d051      	beq.n	80017f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e232      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d030      	beq.n	80017c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800175e:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_RCC_OscConfig+0x33c>)
 8001764:	4013      	ands	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001772:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0049      	lsls	r1, r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7fe ffc4 	bl	800070c <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178a:	f7fe ffbf 	bl	800070c <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e20f      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x338>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	021a      	lsls	r2, r3, #8
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e01b      	b.n	80017f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80017c6:	4949      	ldr	r1, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x34c>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7fe ff9e 	bl	800070c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7fe ff99 	bl	800070c <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1e9      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x236>
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d047      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2238      	movs	r2, #56	; 0x38
 8001808:	4013      	ands	r3, r2
 800180a:	2b18      	cmp	r3, #24
 800180c:	d10a      	bne.n	8001824 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d03c      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f2>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d138      	bne.n	8001892 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e1cb      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800182e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001832:	2101      	movs	r1, #1
 8001834:	430a      	orrs	r2, r1
 8001836:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7fe ff68 	bl	800070c <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001842:	f7fe ff63 	bl	800070c <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1b3      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d0f1      	beq.n	8001842 <HAL_RCC_OscConfig+0x2a2>
 800185e:	e018      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe ff4e 	bl	800070c <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7fe ff49 	bl	800070c <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e199      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	2202      	movs	r2, #2
 800188e:	4013      	ands	r3, r2
 8001890:	d1f1      	bne.n	8001876 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2204      	movs	r2, #4
 8001898:	4013      	ands	r3, r2
 800189a:	d100      	bne.n	800189e <HAL_RCC_OscConfig+0x2fe>
 800189c:	e0c6      	b.n	8001a2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	231f      	movs	r3, #31
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2238      	movs	r2, #56	; 0x38
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d11e      	bne.n	80018f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x32c>)
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d100      	bne.n	80018be <HAL_RCC_OscConfig+0x31e>
 80018bc:	e0b6      	b.n	8001a2c <HAL_RCC_OscConfig+0x48c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d000      	beq.n	80018c8 <HAL_RCC_OscConfig+0x328>
 80018c6:	e0b1      	b.n	8001a2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e177      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	fffeffff 	.word	0xfffeffff
 80018d4:	fffbffff 	.word	0xfffbffff
 80018d8:	ffff80ff 	.word	0xffff80ff
 80018dc:	ffffc7ff 	.word	0xffffc7ff
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000000 	.word	0x20000000
 80018ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018f0:	4bb4      	ldr	r3, [pc, #720]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80018f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	4013      	ands	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x360>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x362>
 8001900:	2300      	movs	r3, #0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d011      	beq.n	800192a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4baf      	ldr	r3, [pc, #700]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800190a:	4bae      	ldr	r3, [pc, #696]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0549      	lsls	r1, r1, #21
 8001910:	430a      	orrs	r2, r1
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
 8001914:	4bab      	ldr	r3, [pc, #684]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	055b      	lsls	r3, r3, #21
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001922:	231f      	movs	r3, #31
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d11a      	bne.n	800196c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4ba3      	ldr	r3, [pc, #652]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0049      	lsls	r1, r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001944:	f7fe fee2 	bl	800070c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7fe fedd 	bl	800070c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e12d      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b99      	ldr	r3, [pc, #612]	; (8001bc8 <HAL_RCC_OscConfig+0x628>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x3e2>
 8001974:	4b93      	ldr	r3, [pc, #588]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x41c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x404>
 800198a:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800198c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198e:	4b8d      	ldr	r3, [pc, #564]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001990:	2104      	movs	r1, #4
 8001992:	430a      	orrs	r2, r1
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001998:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800199a:	4b8a      	ldr	r3, [pc, #552]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x41c>
 80019a4:	4b87      	ldr	r3, [pc, #540]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a8:	4b86      	ldr	r3, [pc, #536]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b0:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b4:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019b6:	2104      	movs	r1, #4
 80019b8:	438a      	bics	r2, r1
 80019ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d014      	beq.n	80019ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7fe fea2 	bl	800070c <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7fe fe9d 	bl	800070c <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x62c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0ec      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e2:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x42e>
 80019ec:	e013      	b.n	8001a16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe fe8d 	bl	800070c <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f6:	e009      	b.n	8001a0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7fe fe88 	bl	800070c <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x62c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0d7      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a16:	231f      	movs	r3, #31
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a24:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a26:	496a      	ldr	r1, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x630>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x496>
 8001a34:	e0c1      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	; 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d100      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4a4>
 8001a42:	e081      	b.n	8001b48 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d156      	bne.n	8001afa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4c:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a52:	4960      	ldr	r1, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7fe fe58 	bl	800070c <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe fe53 	bl	800070c <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0a3      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	049b      	lsls	r3, r3, #18
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x638>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	431a      	orrs	r2, r3
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0449      	lsls	r1, r1, #17
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0549      	lsls	r1, r1, #21
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fe1c 	bl	800070c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe fe17 	bl	800070c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e067      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aec:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x53a>
 8001af8:	e05f      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b00:	4934      	ldr	r1, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x634>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	438a      	bics	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b18:	4930      	ldr	r1, [pc, #192]	; (8001bdc <HAL_RCC_OscConfig+0x63c>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fdf5 	bl	800070c <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe fdf0 	bl	800070c <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e040      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	049b      	lsls	r3, r3, #18
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x588>
 8001b46:	e038      	b.n	8001bba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e033      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x624>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d126      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2270      	movs	r2, #112	; 0x70
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	23fe      	movs	r3, #254	; 0xfe
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d116      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	23f8      	movs	r3, #248	; 0xf8
 8001b8c:	039b      	lsls	r3, r3, #14
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	23e0      	movs	r3, #224	; 0xe0
 8001b9c:	051b      	lsls	r3, r3, #20
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	0f5b      	lsrs	r3, r3, #29
 8001bac:	075a      	lsls	r2, r3, #29
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b008      	add	sp, #32
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	00001388 	.word	0x00001388
 8001bd0:	efffffff 	.word	0xefffffff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	11c1808c 	.word	0x11c1808c
 8001bdc:	eefeffff 	.word	0xeefeffff

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0e9      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d91e      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2207      	movs	r2, #7
 8001c08:	4393      	bics	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c14:	f7fe fd7a 	bl	800070c <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f7fe fd75 	bl	800070c <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a6a      	ldr	r2, [pc, #424]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0ca      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2207      	movs	r2, #7
 8001c38:	4013      	ands	r3, r2
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d006      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c54:	4b60      	ldr	r3, [pc, #384]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5a:	21e0      	movs	r1, #224	; 0xe0
 8001c5c:	01c9      	lsls	r1, r1, #7
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_ClockConfig+0x1fc>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d057      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	4013      	ands	r3, r2
 8001c92:	d12b      	bne.n	8001cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e097      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	049b      	lsls	r3, r3, #18
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d11f      	bne.n	8001cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e08b      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d113      	bne.n	8001cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e07f      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e074      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e06d      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7fe fd04 	bl	800070c <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7fe fcff 	bl	800070c <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e054      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2238      	movs	r2, #56	; 0x38
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1ec      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2207      	movs	r2, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d21e      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2207      	movs	r2, #7
 8001d44:	4393      	bics	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d50:	f7fe fcdc 	bl	800070c <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5a:	f7fe fcd7 	bl	800070c <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e02c      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2204      	movs	r2, #4
 8001d82:	4013      	ands	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_RCC_ClockConfig+0x200>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d9a:	f000 f829 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	0001      	movs	r1, r0
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	220f      	movs	r2, #15
 8001da8:	401a      	ands	r2, r3
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_RCC_ClockConfig+0x204>)
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	58d3      	ldr	r3, [r2, r3]
 8001db0:	221f      	movs	r2, #31
 8001db2:	4013      	ands	r3, r2
 8001db4:	000a      	movs	r2, r1
 8001db6:	40da      	lsrs	r2, r3
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x208>)
 8001dba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_ClockConfig+0x20c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7fe fc49 	bl	8000658 <HAL_InitTick>
 8001dc6:	0003      	movs	r3, r0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b004      	add	sp, #16
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	00001388 	.word	0x00001388
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	fffff0ff 	.word	0xfffff0ff
 8001de0:	ffff8fff 	.word	0xffff8fff
 8001de4:	08004b44 	.word	0x08004b44
 8001de8:	20000008 	.word	0x20000008
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	; 0x38
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d10f      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0adb      	lsrs	r3, r3, #11
 8001e06:	2207      	movs	r2, #7
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	4835      	ldr	r0, [pc, #212]	; (8001eec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e16:	f7fe f97d 	bl	8000114 <__udivsi3>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e05d      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2238      	movs	r2, #56	; 0x38
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e054      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2238      	movs	r2, #56	; 0x38
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d138      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2203      	movs	r2, #3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	2207      	movs	r2, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	3301      	adds	r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e60:	f7fe f958 	bl	8000114 <__udivsi3>
 8001e64:	0003      	movs	r3, r0
 8001e66:	0019      	movs	r1, r3
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	227f      	movs	r2, #127	; 0x7f
 8001e70:	4013      	ands	r3, r2
 8001e72:	434b      	muls	r3, r1
 8001e74:	617b      	str	r3, [r7, #20]
        break;
 8001e76:	e00d      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	481c      	ldr	r0, [pc, #112]	; (8001eec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e7c:	f7fe f94a 	bl	8000114 <__udivsi3>
 8001e80:	0003      	movs	r3, r0
 8001e82:	0019      	movs	r1, r3
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	227f      	movs	r2, #127	; 0x7f
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	434b      	muls	r3, r1
 8001e90:	617b      	str	r3, [r7, #20]
        break;
 8001e92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0f5b      	lsrs	r3, r3, #29
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f7fe f935 	bl	8000114 <__udivsi3>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e015      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2238      	movs	r2, #56	; 0x38
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d103      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2238      	movs	r2, #56	; 0x38
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b18      	cmp	r3, #24
 8001ece:	d103      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ed0:	23fa      	movs	r3, #250	; 0xfa
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e001      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001edc:	693b      	ldr	r3, [r7, #16]
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b006      	add	sp, #24
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200

08001ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f0c:	f7ff fff2 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f10:	0004      	movs	r4, r0
 8001f12:	f7ff fb39 	bl	8001588 <LL_RCC_GetAPB1Prescaler>
 8001f16:	0003      	movs	r3, r0
 8001f18:	0b1a      	lsrs	r2, r3, #12
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	58d3      	ldr	r3, [r2, r3]
 8001f20:	221f      	movs	r2, #31
 8001f22:	4013      	ands	r3, r2
 8001f24:	40dc      	lsrs	r4, r3
 8001f26:	0023      	movs	r3, r4
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	08004b84 	.word	0x08004b84

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f3c:	2313      	movs	r3, #19
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f44:	2312      	movs	r3, #18
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f58:	e0a4      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2311      	movs	r3, #17
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4bc3      	ldr	r3, [pc, #780]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	055b      	lsls	r3, r3, #21
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d111      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4bc0      	ldr	r3, [pc, #768]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f72:	4bbf      	ldr	r3, [pc, #764]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0549      	lsls	r1, r1, #21
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f7c:	4bbc      	ldr	r3, [pc, #752]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	055b      	lsls	r3, r3, #21
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2311      	movs	r3, #17
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f92:	4bb8      	ldr	r3, [pc, #736]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4bb7      	ldr	r3, [pc, #732]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0049      	lsls	r1, r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fbb4 	bl	800070c <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fbaf 	bl	800070c <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d904      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001fb8:	2313      	movs	r3, #19
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	701a      	strb	r2, [r3, #0]
        break;
 8001fc0:	e005      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc2:	4bac      	ldr	r3, [pc, #688]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0ed      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001fce:	2313      	movs	r3, #19
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d154      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd8:	4ba5      	ldr	r3, [pc, #660]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fdc:	23c0      	movs	r3, #192	; 0xc0
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d014      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff4:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	4a9f      	ldr	r2, [pc, #636]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ffe:	4b9c      	ldr	r3, [pc, #624]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002002:	4b9b      	ldr	r3, [pc, #620]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0249      	lsls	r1, r1, #9
 8002008:	430a      	orrs	r2, r1
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800200c:	4b98      	ldr	r3, [pc, #608]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002010:	4b97      	ldr	r3, [pc, #604]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002012:	499a      	ldr	r1, [pc, #616]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002014:	400a      	ands	r2, r1
 8002016:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002018:	4b95      	ldr	r3, [pc, #596]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	d016      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe fb71 	bl	800070c <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202e:	e00c      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe fb6c 	bl	800070c <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	4a91      	ldr	r2, [pc, #580]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d904      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002040:	2313      	movs	r3, #19
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2203      	movs	r2, #3
 8002046:	701a      	strb	r2, [r3, #0]
            break;
 8002048:	e004      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	4b89      	ldr	r3, [pc, #548]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d0ed      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002054:	2313      	movs	r3, #19
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205e:	4b84      	ldr	r3, [pc, #528]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	4a85      	ldr	r2, [pc, #532]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206c:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206e:	430a      	orrs	r2, r1
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c
 8002072:	e00c      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002074:	2312      	movs	r3, #18
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2213      	movs	r2, #19
 800207a:	18ba      	adds	r2, r7, r2
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002082:	2312      	movs	r3, #18
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2213      	movs	r2, #19
 8002088:	18ba      	adds	r2, r7, r2
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208e:	2311      	movs	r3, #17
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b75      	ldr	r3, [pc, #468]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209c:	4b74      	ldr	r3, [pc, #464]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209e:	4979      	ldr	r1, [pc, #484]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ae:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	2203      	movs	r2, #3
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	220c      	movs	r2, #12
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b65      	ldr	r3, [pc, #404]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	4013      	ands	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020ea:	4b61      	ldr	r3, [pc, #388]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210a:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211a:	430a      	orrs	r2, r1
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213a:	430a      	orrs	r2, r1
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	4013      	ands	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002148:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	4a51      	ldr	r2, [pc, #324]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	430a      	orrs	r2, r1
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	01db      	lsls	r3, r3, #7
 8002164:	4013      	ands	r3, r2
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	0899      	lsrs	r1, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002176:	430a      	orrs	r2, r1
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0249      	lsls	r1, r1, #9
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	031b      	lsls	r3, r3, #12
 800219c:	4013      	ands	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	4393      	bics	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	039b      	lsls	r3, r3, #14
 80021bc:	4013      	ands	r3, r2
 80021be:	d016      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	03db      	lsls	r3, r3, #15
 80021dc:	429a      	cmp	r2, r3
 80021de:	d106      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	0449      	lsls	r1, r1, #17
 80021ea:	430a      	orrs	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	03db      	lsls	r3, r3, #15
 80021f6:	4013      	ands	r3, r2
 80021f8:	d016      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220a:	430a      	orrs	r2, r1
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	045b      	lsls	r3, r3, #17
 8002216:	429a      	cmp	r2, r3
 8002218:	d106      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0449      	lsls	r1, r1, #17
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d016      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800223a:	4013      	ands	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	430a      	orrs	r2, r1
 8002246:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0249      	lsls	r1, r1, #9
 800225e:	430a      	orrs	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002262:	2312      	movs	r3, #18
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b006      	add	sp, #24
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	fffffcff 	.word	0xfffffcff
 800227c:	fffeffff 	.word	0xfffeffff
 8002280:	00001388 	.word	0x00001388
 8002284:	efffffff 	.word	0xefffffff
 8002288:	fffff3ff 	.word	0xfffff3ff
 800228c:	fff3ffff 	.word	0xfff3ffff
 8002290:	ffcfffff 	.word	0xffcfffff
 8002294:	ffffcfff 	.word	0xffffcfff
 8002298:	ffbfffff 	.word	0xffbfffff
 800229c:	feffffff 	.word	0xfeffffff
 80022a0:	ffff3fff 	.word	0xffff3fff

080022a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e046      	b.n	8002344 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	589b      	ldr	r3, [r3, r2]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	227c      	movs	r2, #124	; 0x7c
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f002 f956 	bl	800457c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	2124      	movs	r1, #36	; 0x24
 80022d6:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f830 	bl	8002350 <UART_SetConfig>
 80022f0:	0003      	movs	r3, r0
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e024      	b.n	8002344 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f001 f90d 	bl	8003524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	490d      	ldr	r1, [pc, #52]	; (800234c <HAL_UART_Init+0xa8>)
 8002316:	400a      	ands	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	212a      	movs	r1, #42	; 0x2a
 8002326:	438a      	bics	r2, r1
 8002328:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f001 f9a5 	bl	800368c <UART_CheckIdleState>
 8002342:	0003      	movs	r3, r0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}
 800234c:	ffffb7ff 	.word	0xffffb7ff

08002350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	b09f      	sub	sp, #124	; 0x7c
 8002354:	af00      	add	r7, sp, #0
 8002356:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002358:	2300      	movs	r3, #0
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 800235c:	2313      	movs	r3, #19
 800235e:	2258      	movs	r2, #88	; 0x58
 8002360:	18ba      	adds	r2, r7, r2
 8002362:	18d2      	adds	r2, r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002368:	2300      	movs	r3, #0
 800236a:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800236c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	431a      	orrs	r2, r3
 8002376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	431a      	orrs	r2, r3
 800237c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4313      	orrs	r3, r2
 8002382:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 8002384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002386:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238a:	4313      	orrs	r3, r2
 800238c:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4bba      	ldr	r3, [pc, #744]	; (8002680 <UART_SetConfig+0x330>)
 8002396:	401a      	ands	r2, r3
 8002398:	0011      	movs	r1, r2
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4bb6      	ldr	r3, [pc, #728]	; (8002684 <UART_SetConfig+0x334>)
 80023ac:	401a      	ands	r2, r3
 80023ae:	0010      	movs	r0, r2
 80023b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b2:	68d9      	ldr	r1, [r3, #12]
 80023b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	0003      	movs	r3, r0
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4baf      	ldr	r3, [pc, #700]	; (8002688 <UART_SetConfig+0x338>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d004      	beq.n	80023d8 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	4313      	orrs	r3, r2
 80023d6:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4bab      	ldr	r3, [pc, #684]	; (800268c <UART_SetConfig+0x33c>)
 80023e0:	401a      	ands	r2, r3
 80023e2:	0011      	movs	r1, r2
 80023e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ea:	430b      	orrs	r3, r1
 80023ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	230f      	movs	r3, #15
 80023f6:	439a      	bics	r2, r3
 80023f8:	0010      	movs	r0, r2
 80023fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	0003      	movs	r3, r0
 8002404:	430b      	orrs	r3, r1
 8002406:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <UART_SetConfig+0x340>)
 800240e:	429a      	cmp	r2, r3
 8002410:	d12f      	bne.n	8002472 <UART_SetConfig+0x122>
 8002412:	4ba0      	ldr	r3, [pc, #640]	; (8002694 <UART_SetConfig+0x344>)
 8002414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002416:	2303      	movs	r3, #3
 8002418:	4013      	ands	r3, r2
 800241a:	2b01      	cmp	r3, #1
 800241c:	d013      	beq.n	8002446 <UART_SetConfig+0xf6>
 800241e:	d304      	bcc.n	800242a <UART_SetConfig+0xda>
 8002420:	2b02      	cmp	r3, #2
 8002422:	d009      	beq.n	8002438 <UART_SetConfig+0xe8>
 8002424:	2b03      	cmp	r3, #3
 8002426:	d015      	beq.n	8002454 <UART_SetConfig+0x104>
 8002428:	e01b      	b.n	8002462 <UART_SetConfig+0x112>
 800242a:	231b      	movs	r3, #27
 800242c:	2258      	movs	r2, #88	; 0x58
 800242e:	18ba      	adds	r2, r7, r2
 8002430:	18d2      	adds	r2, r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	7013      	strb	r3, [r2, #0]
 8002436:	e0b4      	b.n	80025a2 <UART_SetConfig+0x252>
 8002438:	231b      	movs	r3, #27
 800243a:	2258      	movs	r2, #88	; 0x58
 800243c:	18ba      	adds	r2, r7, r2
 800243e:	18d2      	adds	r2, r2, r3
 8002440:	2302      	movs	r3, #2
 8002442:	7013      	strb	r3, [r2, #0]
 8002444:	e0ad      	b.n	80025a2 <UART_SetConfig+0x252>
 8002446:	231b      	movs	r3, #27
 8002448:	2258      	movs	r2, #88	; 0x58
 800244a:	18ba      	adds	r2, r7, r2
 800244c:	18d2      	adds	r2, r2, r3
 800244e:	2304      	movs	r3, #4
 8002450:	7013      	strb	r3, [r2, #0]
 8002452:	e0a6      	b.n	80025a2 <UART_SetConfig+0x252>
 8002454:	231b      	movs	r3, #27
 8002456:	2258      	movs	r2, #88	; 0x58
 8002458:	18ba      	adds	r2, r7, r2
 800245a:	18d2      	adds	r2, r2, r3
 800245c:	2308      	movs	r3, #8
 800245e:	7013      	strb	r3, [r2, #0]
 8002460:	e09f      	b.n	80025a2 <UART_SetConfig+0x252>
 8002462:	231b      	movs	r3, #27
 8002464:	2258      	movs	r2, #88	; 0x58
 8002466:	18ba      	adds	r2, r7, r2
 8002468:	18d2      	adds	r2, r2, r3
 800246a:	2310      	movs	r3, #16
 800246c:	7013      	strb	r3, [r2, #0]
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	e097      	b.n	80025a2 <UART_SetConfig+0x252>
 8002472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <UART_SetConfig+0x348>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d132      	bne.n	80024e2 <UART_SetConfig+0x192>
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <UART_SetConfig+0x344>)
 800247e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002480:	230c      	movs	r3, #12
 8002482:	4013      	ands	r3, r2
 8002484:	2b04      	cmp	r3, #4
 8002486:	d016      	beq.n	80024b6 <UART_SetConfig+0x166>
 8002488:	d802      	bhi.n	8002490 <UART_SetConfig+0x140>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <UART_SetConfig+0x14a>
 800248e:	e020      	b.n	80024d2 <UART_SetConfig+0x182>
 8002490:	2b08      	cmp	r3, #8
 8002492:	d009      	beq.n	80024a8 <UART_SetConfig+0x158>
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d015      	beq.n	80024c4 <UART_SetConfig+0x174>
 8002498:	e01b      	b.n	80024d2 <UART_SetConfig+0x182>
 800249a:	231b      	movs	r3, #27
 800249c:	2258      	movs	r2, #88	; 0x58
 800249e:	18ba      	adds	r2, r7, r2
 80024a0:	18d2      	adds	r2, r2, r3
 80024a2:	2300      	movs	r3, #0
 80024a4:	7013      	strb	r3, [r2, #0]
 80024a6:	e07c      	b.n	80025a2 <UART_SetConfig+0x252>
 80024a8:	231b      	movs	r3, #27
 80024aa:	2258      	movs	r2, #88	; 0x58
 80024ac:	18ba      	adds	r2, r7, r2
 80024ae:	18d2      	adds	r2, r2, r3
 80024b0:	2302      	movs	r3, #2
 80024b2:	7013      	strb	r3, [r2, #0]
 80024b4:	e075      	b.n	80025a2 <UART_SetConfig+0x252>
 80024b6:	231b      	movs	r3, #27
 80024b8:	2258      	movs	r2, #88	; 0x58
 80024ba:	18ba      	adds	r2, r7, r2
 80024bc:	18d2      	adds	r2, r2, r3
 80024be:	2304      	movs	r3, #4
 80024c0:	7013      	strb	r3, [r2, #0]
 80024c2:	e06e      	b.n	80025a2 <UART_SetConfig+0x252>
 80024c4:	231b      	movs	r3, #27
 80024c6:	2258      	movs	r2, #88	; 0x58
 80024c8:	18ba      	adds	r2, r7, r2
 80024ca:	18d2      	adds	r2, r2, r3
 80024cc:	2308      	movs	r3, #8
 80024ce:	7013      	strb	r3, [r2, #0]
 80024d0:	e067      	b.n	80025a2 <UART_SetConfig+0x252>
 80024d2:	231b      	movs	r3, #27
 80024d4:	2258      	movs	r2, #88	; 0x58
 80024d6:	18ba      	adds	r2, r7, r2
 80024d8:	18d2      	adds	r2, r2, r3
 80024da:	2310      	movs	r3, #16
 80024dc:	7013      	strb	r3, [r2, #0]
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	e05f      	b.n	80025a2 <UART_SetConfig+0x252>
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <UART_SetConfig+0x34c>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <UART_SetConfig+0x1aa>
 80024ec:	231b      	movs	r3, #27
 80024ee:	2258      	movs	r2, #88	; 0x58
 80024f0:	18ba      	adds	r2, r7, r2
 80024f2:	18d2      	adds	r2, r2, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	7013      	strb	r3, [r2, #0]
 80024f8:	e053      	b.n	80025a2 <UART_SetConfig+0x252>
 80024fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <UART_SetConfig+0x350>)
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <UART_SetConfig+0x1c2>
 8002504:	231b      	movs	r3, #27
 8002506:	2258      	movs	r2, #88	; 0x58
 8002508:	18ba      	adds	r2, r7, r2
 800250a:	18d2      	adds	r2, r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	7013      	strb	r3, [r2, #0]
 8002510:	e047      	b.n	80025a2 <UART_SetConfig+0x252>
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <UART_SetConfig+0x338>)
 8002518:	429a      	cmp	r2, r3
 800251a:	d13c      	bne.n	8002596 <UART_SetConfig+0x246>
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <UART_SetConfig+0x344>)
 800251e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	401a      	ands	r2, r3
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	429a      	cmp	r2, r3
 800252c:	d01d      	beq.n	800256a <UART_SetConfig+0x21a>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	429a      	cmp	r2, r3
 8002534:	d802      	bhi.n	800253c <UART_SetConfig+0x1ec>
 8002536:	2a00      	cmp	r2, #0
 8002538:	d009      	beq.n	800254e <UART_SetConfig+0x1fe>
 800253a:	e024      	b.n	8002586 <UART_SetConfig+0x236>
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	429a      	cmp	r2, r3
 8002542:	d00b      	beq.n	800255c <UART_SetConfig+0x20c>
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	429a      	cmp	r2, r3
 800254a:	d015      	beq.n	8002578 <UART_SetConfig+0x228>
 800254c:	e01b      	b.n	8002586 <UART_SetConfig+0x236>
 800254e:	231b      	movs	r3, #27
 8002550:	2258      	movs	r2, #88	; 0x58
 8002552:	18ba      	adds	r2, r7, r2
 8002554:	18d2      	adds	r2, r2, r3
 8002556:	2300      	movs	r3, #0
 8002558:	7013      	strb	r3, [r2, #0]
 800255a:	e022      	b.n	80025a2 <UART_SetConfig+0x252>
 800255c:	231b      	movs	r3, #27
 800255e:	2258      	movs	r2, #88	; 0x58
 8002560:	18ba      	adds	r2, r7, r2
 8002562:	18d2      	adds	r2, r2, r3
 8002564:	2302      	movs	r3, #2
 8002566:	7013      	strb	r3, [r2, #0]
 8002568:	e01b      	b.n	80025a2 <UART_SetConfig+0x252>
 800256a:	231b      	movs	r3, #27
 800256c:	2258      	movs	r2, #88	; 0x58
 800256e:	18ba      	adds	r2, r7, r2
 8002570:	18d2      	adds	r2, r2, r3
 8002572:	2304      	movs	r3, #4
 8002574:	7013      	strb	r3, [r2, #0]
 8002576:	e014      	b.n	80025a2 <UART_SetConfig+0x252>
 8002578:	231b      	movs	r3, #27
 800257a:	2258      	movs	r2, #88	; 0x58
 800257c:	18ba      	adds	r2, r7, r2
 800257e:	18d2      	adds	r2, r2, r3
 8002580:	2308      	movs	r3, #8
 8002582:	7013      	strb	r3, [r2, #0]
 8002584:	e00d      	b.n	80025a2 <UART_SetConfig+0x252>
 8002586:	231b      	movs	r3, #27
 8002588:	2258      	movs	r2, #88	; 0x58
 800258a:	18ba      	adds	r2, r7, r2
 800258c:	18d2      	adds	r2, r2, r3
 800258e:	2310      	movs	r3, #16
 8002590:	7013      	strb	r3, [r2, #0]
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	e005      	b.n	80025a2 <UART_SetConfig+0x252>
 8002596:	231b      	movs	r3, #27
 8002598:	2258      	movs	r2, #88	; 0x58
 800259a:	18ba      	adds	r2, r7, r2
 800259c:	18d2      	adds	r2, r2, r3
 800259e:	2310      	movs	r3, #16
 80025a0:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <UART_SetConfig+0x338>)
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <UART_SetConfig+0x260>
 80025ac:	f000 fbcc 	bl	8002d48 <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025b0:	231b      	movs	r3, #27
 80025b2:	2258      	movs	r2, #88	; 0x58
 80025b4:	4694      	mov	ip, r2
 80025b6:	44bc      	add	ip, r7
 80025b8:	4463      	add	r3, ip
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d100      	bne.n	80025c2 <UART_SetConfig+0x272>
 80025c0:	e070      	b.n	80026a4 <UART_SetConfig+0x354>
 80025c2:	dc02      	bgt.n	80025ca <UART_SetConfig+0x27a>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <UART_SetConfig+0x288>
 80025c8:	e15f      	b.n	800288a <UART_SetConfig+0x53a>
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d100      	bne.n	80025d0 <UART_SetConfig+0x280>
 80025ce:	e0b4      	b.n	800273a <UART_SetConfig+0x3ea>
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d100      	bne.n	80025d6 <UART_SetConfig+0x286>
 80025d4:	e105      	b.n	80027e2 <UART_SetConfig+0x492>
 80025d6:	e158      	b.n	800288a <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80025d8:	f7ff fc96 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 80025dc:	0002      	movs	r2, r0
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d044      	beq.n	8002670 <UART_SetConfig+0x320>
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d03e      	beq.n	800266c <UART_SetConfig+0x31c>
 80025ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d038      	beq.n	8002668 <UART_SetConfig+0x318>
 80025f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d032      	beq.n	8002664 <UART_SetConfig+0x314>
 80025fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2b04      	cmp	r3, #4
 8002604:	d02c      	beq.n	8002660 <UART_SetConfig+0x310>
 8002606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b05      	cmp	r3, #5
 800260c:	d026      	beq.n	800265c <UART_SetConfig+0x30c>
 800260e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b06      	cmp	r3, #6
 8002614:	d020      	beq.n	8002658 <UART_SetConfig+0x308>
 8002616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b07      	cmp	r3, #7
 800261c:	d01a      	beq.n	8002654 <UART_SetConfig+0x304>
 800261e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b08      	cmp	r3, #8
 8002624:	d014      	beq.n	8002650 <UART_SetConfig+0x300>
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b09      	cmp	r3, #9
 800262c:	d00e      	beq.n	800264c <UART_SetConfig+0x2fc>
 800262e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d008      	beq.n	8002648 <UART_SetConfig+0x2f8>
 8002636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b0b      	cmp	r3, #11
 800263c:	d102      	bne.n	8002644 <UART_SetConfig+0x2f4>
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	e016      	b.n	8002672 <UART_SetConfig+0x322>
 8002644:	2301      	movs	r3, #1
 8002646:	e014      	b.n	8002672 <UART_SetConfig+0x322>
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	e012      	b.n	8002672 <UART_SetConfig+0x322>
 800264c:	2340      	movs	r3, #64	; 0x40
 800264e:	e010      	b.n	8002672 <UART_SetConfig+0x322>
 8002650:	2320      	movs	r3, #32
 8002652:	e00e      	b.n	8002672 <UART_SetConfig+0x322>
 8002654:	2310      	movs	r3, #16
 8002656:	e00c      	b.n	8002672 <UART_SetConfig+0x322>
 8002658:	230c      	movs	r3, #12
 800265a:	e00a      	b.n	8002672 <UART_SetConfig+0x322>
 800265c:	230a      	movs	r3, #10
 800265e:	e008      	b.n	8002672 <UART_SetConfig+0x322>
 8002660:	2308      	movs	r3, #8
 8002662:	e006      	b.n	8002672 <UART_SetConfig+0x322>
 8002664:	2306      	movs	r3, #6
 8002666:	e004      	b.n	8002672 <UART_SetConfig+0x322>
 8002668:	2304      	movs	r3, #4
 800266a:	e002      	b.n	8002672 <UART_SetConfig+0x322>
 800266c:	2302      	movs	r3, #2
 800266e:	e000      	b.n	8002672 <UART_SetConfig+0x322>
 8002670:	2301      	movs	r3, #1
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f7fd fd4d 	bl	8000114 <__udivsi3>
 800267a:	0003      	movs	r3, r0
 800267c:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 800267e:	e10b      	b.n	8002898 <UART_SetConfig+0x548>
 8002680:	cfff69f3 	.word	0xcfff69f3
 8002684:	ffffcfff 	.word	0xffffcfff
 8002688:	40008000 	.word	0x40008000
 800268c:	11fff4ff 	.word	0x11fff4ff
 8002690:	40013800 	.word	0x40013800
 8002694:	40021000 	.word	0x40021000
 8002698:	40004400 	.word	0x40004400
 800269c:	40004800 	.word	0x40004800
 80026a0:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80026a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <UART_SetConfig+0x3e4>
 80026ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d03d      	beq.n	8002730 <UART_SetConfig+0x3e0>
 80026b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d037      	beq.n	800272c <UART_SetConfig+0x3dc>
 80026bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d031      	beq.n	8002728 <UART_SetConfig+0x3d8>
 80026c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d02b      	beq.n	8002724 <UART_SetConfig+0x3d4>
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d025      	beq.n	8002720 <UART_SetConfig+0x3d0>
 80026d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d01f      	beq.n	800271c <UART_SetConfig+0x3cc>
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d019      	beq.n	8002718 <UART_SetConfig+0x3c8>
 80026e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d013      	beq.n	8002714 <UART_SetConfig+0x3c4>
 80026ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d00d      	beq.n	8002710 <UART_SetConfig+0x3c0>
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d007      	beq.n	800270c <UART_SetConfig+0x3bc>
 80026fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b0b      	cmp	r3, #11
 8002702:	d101      	bne.n	8002708 <UART_SetConfig+0x3b8>
 8002704:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <UART_SetConfig+0x660>)
 8002706:	e016      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002708:	4baa      	ldr	r3, [pc, #680]	; (80029b4 <UART_SetConfig+0x664>)
 800270a:	e014      	b.n	8002736 <UART_SetConfig+0x3e6>
 800270c:	4baa      	ldr	r3, [pc, #680]	; (80029b8 <UART_SetConfig+0x668>)
 800270e:	e012      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002710:	4baa      	ldr	r3, [pc, #680]	; (80029bc <UART_SetConfig+0x66c>)
 8002712:	e010      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002714:	4baa      	ldr	r3, [pc, #680]	; (80029c0 <UART_SetConfig+0x670>)
 8002716:	e00e      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002718:	4baa      	ldr	r3, [pc, #680]	; (80029c4 <UART_SetConfig+0x674>)
 800271a:	e00c      	b.n	8002736 <UART_SetConfig+0x3e6>
 800271c:	4baa      	ldr	r3, [pc, #680]	; (80029c8 <UART_SetConfig+0x678>)
 800271e:	e00a      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002720:	4baa      	ldr	r3, [pc, #680]	; (80029cc <UART_SetConfig+0x67c>)
 8002722:	e008      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002724:	4baa      	ldr	r3, [pc, #680]	; (80029d0 <UART_SetConfig+0x680>)
 8002726:	e006      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002728:	4baa      	ldr	r3, [pc, #680]	; (80029d4 <UART_SetConfig+0x684>)
 800272a:	e004      	b.n	8002736 <UART_SetConfig+0x3e6>
 800272c:	4baa      	ldr	r3, [pc, #680]	; (80029d8 <UART_SetConfig+0x688>)
 800272e:	e002      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002730:	4baa      	ldr	r3, [pc, #680]	; (80029dc <UART_SetConfig+0x68c>)
 8002732:	e000      	b.n	8002736 <UART_SetConfig+0x3e6>
 8002734:	4b9f      	ldr	r3, [pc, #636]	; (80029b4 <UART_SetConfig+0x664>)
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002738:	e0ae      	b.n	8002898 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800273a:	f7ff fb59 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 800273e:	0002      	movs	r2, r0
 8002740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d044      	beq.n	80027d2 <UART_SetConfig+0x482>
 8002748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b01      	cmp	r3, #1
 800274e:	d03e      	beq.n	80027ce <UART_SetConfig+0x47e>
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b02      	cmp	r3, #2
 8002756:	d038      	beq.n	80027ca <UART_SetConfig+0x47a>
 8002758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b03      	cmp	r3, #3
 800275e:	d032      	beq.n	80027c6 <UART_SetConfig+0x476>
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b04      	cmp	r3, #4
 8002766:	d02c      	beq.n	80027c2 <UART_SetConfig+0x472>
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b05      	cmp	r3, #5
 800276e:	d026      	beq.n	80027be <UART_SetConfig+0x46e>
 8002770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b06      	cmp	r3, #6
 8002776:	d020      	beq.n	80027ba <UART_SetConfig+0x46a>
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b07      	cmp	r3, #7
 800277e:	d01a      	beq.n	80027b6 <UART_SetConfig+0x466>
 8002780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b08      	cmp	r3, #8
 8002786:	d014      	beq.n	80027b2 <UART_SetConfig+0x462>
 8002788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b09      	cmp	r3, #9
 800278e:	d00e      	beq.n	80027ae <UART_SetConfig+0x45e>
 8002790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d008      	beq.n	80027aa <UART_SetConfig+0x45a>
 8002798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b0b      	cmp	r3, #11
 800279e:	d102      	bne.n	80027a6 <UART_SetConfig+0x456>
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	e016      	b.n	80027d4 <UART_SetConfig+0x484>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e014      	b.n	80027d4 <UART_SetConfig+0x484>
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	e012      	b.n	80027d4 <UART_SetConfig+0x484>
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	e010      	b.n	80027d4 <UART_SetConfig+0x484>
 80027b2:	2320      	movs	r3, #32
 80027b4:	e00e      	b.n	80027d4 <UART_SetConfig+0x484>
 80027b6:	2310      	movs	r3, #16
 80027b8:	e00c      	b.n	80027d4 <UART_SetConfig+0x484>
 80027ba:	230c      	movs	r3, #12
 80027bc:	e00a      	b.n	80027d4 <UART_SetConfig+0x484>
 80027be:	230a      	movs	r3, #10
 80027c0:	e008      	b.n	80027d4 <UART_SetConfig+0x484>
 80027c2:	2308      	movs	r3, #8
 80027c4:	e006      	b.n	80027d4 <UART_SetConfig+0x484>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e004      	b.n	80027d4 <UART_SetConfig+0x484>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e002      	b.n	80027d4 <UART_SetConfig+0x484>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e000      	b.n	80027d4 <UART_SetConfig+0x484>
 80027d2:	2301      	movs	r3, #1
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f7fd fc9c 	bl	8000114 <__udivsi3>
 80027dc:	0003      	movs	r3, r0
 80027de:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80027e0:	e05a      	b.n	8002898 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80027e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d04b      	beq.n	8002882 <UART_SetConfig+0x532>
 80027ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d044      	beq.n	800287c <UART_SetConfig+0x52c>
 80027f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d03d      	beq.n	8002876 <UART_SetConfig+0x526>
 80027fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d037      	beq.n	8002872 <UART_SetConfig+0x522>
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b04      	cmp	r3, #4
 8002808:	d030      	beq.n	800286c <UART_SetConfig+0x51c>
 800280a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b05      	cmp	r3, #5
 8002810:	d02a      	beq.n	8002868 <UART_SetConfig+0x518>
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b06      	cmp	r3, #6
 8002818:	d024      	beq.n	8002864 <UART_SetConfig+0x514>
 800281a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2b07      	cmp	r3, #7
 8002820:	d01d      	beq.n	800285e <UART_SetConfig+0x50e>
 8002822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b08      	cmp	r3, #8
 8002828:	d016      	beq.n	8002858 <UART_SetConfig+0x508>
 800282a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b09      	cmp	r3, #9
 8002830:	d00f      	beq.n	8002852 <UART_SetConfig+0x502>
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d008      	beq.n	800284c <UART_SetConfig+0x4fc>
 800283a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b0b      	cmp	r3, #11
 8002840:	d101      	bne.n	8002846 <UART_SetConfig+0x4f6>
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	e01f      	b.n	8002886 <UART_SetConfig+0x536>
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	e01c      	b.n	8002886 <UART_SetConfig+0x536>
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	e019      	b.n	8002886 <UART_SetConfig+0x536>
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	e016      	b.n	8002886 <UART_SetConfig+0x536>
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	e013      	b.n	8002886 <UART_SetConfig+0x536>
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	e010      	b.n	8002886 <UART_SetConfig+0x536>
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <UART_SetConfig+0x690>)
 8002866:	e00e      	b.n	8002886 <UART_SetConfig+0x536>
 8002868:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <UART_SetConfig+0x694>)
 800286a:	e00c      	b.n	8002886 <UART_SetConfig+0x536>
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	015b      	lsls	r3, r3, #5
 8002870:	e009      	b.n	8002886 <UART_SetConfig+0x536>
 8002872:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <UART_SetConfig+0x698>)
 8002874:	e007      	b.n	8002886 <UART_SetConfig+0x536>
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	e004      	b.n	8002886 <UART_SetConfig+0x536>
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	01db      	lsls	r3, r3, #7
 8002880:	e001      	b.n	8002886 <UART_SetConfig+0x536>
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002888:	e006      	b.n	8002898 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 800288a:	2313      	movs	r3, #19
 800288c:	2258      	movs	r2, #88	; 0x58
 800288e:	18ba      	adds	r2, r7, r2
 8002890:	18d2      	adds	r2, r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	7013      	strb	r3, [r2, #0]
        break;
 8002896:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <UART_SetConfig+0x552>
 800289e:	f000 fe09 	bl	80034b4 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	0013      	movs	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	189a      	adds	r2, r3, r2
 80028ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d305      	bcc.n	80028be <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d908      	bls.n	80028d0 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 80028be:	2313      	movs	r3, #19
 80028c0:	2258      	movs	r2, #88	; 0x58
 80028c2:	4694      	mov	ip, r2
 80028c4:	44bc      	add	ip, r7
 80028c6:	4463      	add	r3, ip
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	f000 fdf2 	bl	80034b4 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 80028d0:	231b      	movs	r3, #27
 80028d2:	2258      	movs	r2, #88	; 0x58
 80028d4:	4694      	mov	ip, r2
 80028d6:	44bc      	add	ip, r7
 80028d8:	4463      	add	r3, ip
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d100      	bne.n	80028e2 <UART_SetConfig+0x592>
 80028e0:	e0a9      	b.n	8002a36 <UART_SetConfig+0x6e6>
 80028e2:	dc02      	bgt.n	80028ea <UART_SetConfig+0x59a>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <UART_SetConfig+0x5a8>
 80028e8:	e20f      	b.n	8002d0a <UART_SetConfig+0x9ba>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d100      	bne.n	80028f0 <UART_SetConfig+0x5a0>
 80028ee:	e10f      	b.n	8002b10 <UART_SetConfig+0x7c0>
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d100      	bne.n	80028f6 <UART_SetConfig+0x5a6>
 80028f4:	e192      	b.n	8002c1c <UART_SetConfig+0x8cc>
 80028f6:	e208      	b.n	8002d0a <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028f8:	f7ff fb06 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 80028fc:	0003      	movs	r3, r0
 80028fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002900:	2300      	movs	r3, #0
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d100      	bne.n	800290e <UART_SetConfig+0x5be>
 800290c:	e06e      	b.n	80029ec <UART_SetConfig+0x69c>
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b01      	cmp	r3, #1
 8002914:	d049      	beq.n	80029aa <UART_SetConfig+0x65a>
 8002916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b02      	cmp	r3, #2
 800291c:	d042      	beq.n	80029a4 <UART_SetConfig+0x654>
 800291e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b03      	cmp	r3, #3
 8002924:	d03b      	beq.n	800299e <UART_SetConfig+0x64e>
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b04      	cmp	r3, #4
 800292c:	d034      	beq.n	8002998 <UART_SetConfig+0x648>
 800292e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b05      	cmp	r3, #5
 8002934:	d02d      	beq.n	8002992 <UART_SetConfig+0x642>
 8002936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b06      	cmp	r3, #6
 800293c:	d026      	beq.n	800298c <UART_SetConfig+0x63c>
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b07      	cmp	r3, #7
 8002944:	d01f      	beq.n	8002986 <UART_SetConfig+0x636>
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b08      	cmp	r3, #8
 800294c:	d018      	beq.n	8002980 <UART_SetConfig+0x630>
 800294e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b09      	cmp	r3, #9
 8002954:	d011      	beq.n	800297a <UART_SetConfig+0x62a>
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b0a      	cmp	r3, #10
 800295c:	d00a      	beq.n	8002974 <UART_SetConfig+0x624>
 800295e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b0b      	cmp	r3, #11
 8002964:	d103      	bne.n	800296e <UART_SetConfig+0x61e>
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2400      	movs	r4, #0
 800296c:	e040      	b.n	80029f0 <UART_SetConfig+0x6a0>
 800296e:	2301      	movs	r3, #1
 8002970:	2400      	movs	r4, #0
 8002972:	e03d      	b.n	80029f0 <UART_SetConfig+0x6a0>
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	2400      	movs	r4, #0
 8002978:	e03a      	b.n	80029f0 <UART_SetConfig+0x6a0>
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	2400      	movs	r4, #0
 800297e:	e037      	b.n	80029f0 <UART_SetConfig+0x6a0>
 8002980:	2320      	movs	r3, #32
 8002982:	2400      	movs	r4, #0
 8002984:	e034      	b.n	80029f0 <UART_SetConfig+0x6a0>
 8002986:	2310      	movs	r3, #16
 8002988:	2400      	movs	r4, #0
 800298a:	e031      	b.n	80029f0 <UART_SetConfig+0x6a0>
 800298c:	230c      	movs	r3, #12
 800298e:	2400      	movs	r4, #0
 8002990:	e02e      	b.n	80029f0 <UART_SetConfig+0x6a0>
 8002992:	230a      	movs	r3, #10
 8002994:	2400      	movs	r4, #0
 8002996:	e02b      	b.n	80029f0 <UART_SetConfig+0x6a0>
 8002998:	2308      	movs	r3, #8
 800299a:	2400      	movs	r4, #0
 800299c:	e028      	b.n	80029f0 <UART_SetConfig+0x6a0>
 800299e:	2306      	movs	r3, #6
 80029a0:	2400      	movs	r4, #0
 80029a2:	e025      	b.n	80029f0 <UART_SetConfig+0x6a0>
 80029a4:	2304      	movs	r3, #4
 80029a6:	2400      	movs	r4, #0
 80029a8:	e022      	b.n	80029f0 <UART_SetConfig+0x6a0>
 80029aa:	2302      	movs	r3, #2
 80029ac:	2400      	movs	r4, #0
 80029ae:	e01f      	b.n	80029f0 <UART_SetConfig+0x6a0>
 80029b0:	0000f424 	.word	0x0000f424
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	0001e848 	.word	0x0001e848
 80029bc:	0003d090 	.word	0x0003d090
 80029c0:	0007a120 	.word	0x0007a120
 80029c4:	000f4240 	.word	0x000f4240
 80029c8:	00145855 	.word	0x00145855
 80029cc:	00186a00 	.word	0x00186a00
 80029d0:	001e8480 	.word	0x001e8480
 80029d4:	0028b0aa 	.word	0x0028b0aa
 80029d8:	003d0900 	.word	0x003d0900
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	00000aaa 	.word	0x00000aaa
 80029e4:	00000ccc 	.word	0x00000ccc
 80029e8:	00001555 	.word	0x00001555
 80029ec:	2301      	movs	r3, #1
 80029ee:	2400      	movs	r4, #0
 80029f0:	001a      	movs	r2, r3
 80029f2:	0023      	movs	r3, r4
 80029f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80029f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80029f8:	f7fd fd02 	bl	8000400 <__aeabi_uldivmod>
 80029fc:	0003      	movs	r3, r0
 80029fe:	000c      	movs	r4, r1
 8002a00:	0e1a      	lsrs	r2, r3, #24
 8002a02:	0226      	lsls	r6, r4, #8
 8002a04:	4316      	orrs	r6, r2
 8002a06:	021d      	lsls	r5, r3, #8
 8002a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a10:	2300      	movs	r3, #0
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
 8002a14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a18:	1940      	adds	r0, r0, r5
 8002a1a:	4171      	adcs	r1, r6
 8002a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a22:	2300      	movs	r3, #0
 8002a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	f7fd fce9 	bl	8000400 <__aeabi_uldivmod>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	000c      	movs	r4, r1
 8002a32:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002a34:	e171      	b.n	8002d1a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04f      	beq.n	8002ade <UART_SetConfig+0x78e>
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d048      	beq.n	8002ad8 <UART_SetConfig+0x788>
 8002a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d041      	beq.n	8002ad2 <UART_SetConfig+0x782>
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d03a      	beq.n	8002acc <UART_SetConfig+0x77c>
 8002a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d033      	beq.n	8002ac6 <UART_SetConfig+0x776>
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d02c      	beq.n	8002ac0 <UART_SetConfig+0x770>
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d025      	beq.n	8002aba <UART_SetConfig+0x76a>
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d01e      	beq.n	8002ab4 <UART_SetConfig+0x764>
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d017      	beq.n	8002aae <UART_SetConfig+0x75e>
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d010      	beq.n	8002aa8 <UART_SetConfig+0x758>
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d009      	beq.n	8002aa2 <UART_SetConfig+0x752>
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b0b      	cmp	r3, #11
 8002a94:	d102      	bne.n	8002a9c <UART_SetConfig+0x74c>
 8002a96:	4bba      	ldr	r3, [pc, #744]	; (8002d80 <UART_SetConfig+0xa30>)
 8002a98:	2400      	movs	r4, #0
 8002a9a:	e022      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002a9c:	4bb9      	ldr	r3, [pc, #740]	; (8002d84 <UART_SetConfig+0xa34>)
 8002a9e:	2400      	movs	r4, #0
 8002aa0:	e01f      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002aa2:	4bb9      	ldr	r3, [pc, #740]	; (8002d88 <UART_SetConfig+0xa38>)
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	e01c      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002aa8:	4bb8      	ldr	r3, [pc, #736]	; (8002d8c <UART_SetConfig+0xa3c>)
 8002aaa:	2400      	movs	r4, #0
 8002aac:	e019      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002aae:	4bb8      	ldr	r3, [pc, #736]	; (8002d90 <UART_SetConfig+0xa40>)
 8002ab0:	2400      	movs	r4, #0
 8002ab2:	e016      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ab4:	4bb7      	ldr	r3, [pc, #732]	; (8002d94 <UART_SetConfig+0xa44>)
 8002ab6:	2400      	movs	r4, #0
 8002ab8:	e013      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002aba:	4bb7      	ldr	r3, [pc, #732]	; (8002d98 <UART_SetConfig+0xa48>)
 8002abc:	2400      	movs	r4, #0
 8002abe:	e010      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ac0:	4bb6      	ldr	r3, [pc, #728]	; (8002d9c <UART_SetConfig+0xa4c>)
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	e00d      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ac6:	4bb6      	ldr	r3, [pc, #728]	; (8002da0 <UART_SetConfig+0xa50>)
 8002ac8:	2400      	movs	r4, #0
 8002aca:	e00a      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002acc:	4bb5      	ldr	r3, [pc, #724]	; (8002da4 <UART_SetConfig+0xa54>)
 8002ace:	2400      	movs	r4, #0
 8002ad0:	e007      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ad2:	4bb5      	ldr	r3, [pc, #724]	; (8002da8 <UART_SetConfig+0xa58>)
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	e004      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ad8:	4bb4      	ldr	r3, [pc, #720]	; (8002dac <UART_SetConfig+0xa5c>)
 8002ada:	2400      	movs	r4, #0
 8002adc:	e001      	b.n	8002ae2 <UART_SetConfig+0x792>
 8002ade:	4ba9      	ldr	r3, [pc, #676]	; (8002d84 <UART_SetConfig+0xa34>)
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	0852      	lsrs	r2, r2, #1
 8002ae8:	633a      	str	r2, [r7, #48]	; 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	637a      	str	r2, [r7, #52]	; 0x34
 8002aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002af2:	18c0      	adds	r0, r0, r3
 8002af4:	4161      	adcs	r1, r4
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	f7fd fc7c 	bl	8000400 <__aeabi_uldivmod>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	000c      	movs	r4, r1
 8002b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002b0e:	e104      	b.n	8002d1a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	f7ff f96e 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002b14:	0003      	movs	r3, r0
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d050      	beq.n	8002bc6 <UART_SetConfig+0x876>
 8002b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d049      	beq.n	8002bc0 <UART_SetConfig+0x870>
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d042      	beq.n	8002bba <UART_SetConfig+0x86a>
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d03b      	beq.n	8002bb4 <UART_SetConfig+0x864>
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d034      	beq.n	8002bae <UART_SetConfig+0x85e>
 8002b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d02d      	beq.n	8002ba8 <UART_SetConfig+0x858>
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d026      	beq.n	8002ba2 <UART_SetConfig+0x852>
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2b07      	cmp	r3, #7
 8002b5a:	d01f      	beq.n	8002b9c <UART_SetConfig+0x84c>
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d018      	beq.n	8002b96 <UART_SetConfig+0x846>
 8002b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d011      	beq.n	8002b90 <UART_SetConfig+0x840>
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b0a      	cmp	r3, #10
 8002b72:	d00a      	beq.n	8002b8a <UART_SetConfig+0x83a>
 8002b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2b0b      	cmp	r3, #11
 8002b7a:	d103      	bne.n	8002b84 <UART_SetConfig+0x834>
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2400      	movs	r4, #0
 8002b82:	e022      	b.n	8002bca <UART_SetConfig+0x87a>
 8002b84:	2301      	movs	r3, #1
 8002b86:	2400      	movs	r4, #0
 8002b88:	e01f      	b.n	8002bca <UART_SetConfig+0x87a>
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	2400      	movs	r4, #0
 8002b8e:	e01c      	b.n	8002bca <UART_SetConfig+0x87a>
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	2400      	movs	r4, #0
 8002b94:	e019      	b.n	8002bca <UART_SetConfig+0x87a>
 8002b96:	2320      	movs	r3, #32
 8002b98:	2400      	movs	r4, #0
 8002b9a:	e016      	b.n	8002bca <UART_SetConfig+0x87a>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	2400      	movs	r4, #0
 8002ba0:	e013      	b.n	8002bca <UART_SetConfig+0x87a>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	2400      	movs	r4, #0
 8002ba6:	e010      	b.n	8002bca <UART_SetConfig+0x87a>
 8002ba8:	230a      	movs	r3, #10
 8002baa:	2400      	movs	r4, #0
 8002bac:	e00d      	b.n	8002bca <UART_SetConfig+0x87a>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	e00a      	b.n	8002bca <UART_SetConfig+0x87a>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	e007      	b.n	8002bca <UART_SetConfig+0x87a>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	e004      	b.n	8002bca <UART_SetConfig+0x87a>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	2400      	movs	r4, #0
 8002bc4:	e001      	b.n	8002bca <UART_SetConfig+0x87a>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2400      	movs	r4, #0
 8002bca:	001a      	movs	r2, r3
 8002bcc:	0023      	movs	r3, r4
 8002bce:	6a38      	ldr	r0, [r7, #32]
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	f7fd fc15 	bl	8000400 <__aeabi_uldivmod>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	000c      	movs	r4, r1
 8002bda:	0e1a      	lsrs	r2, r3, #24
 8002bdc:	0221      	lsls	r1, r4, #8
 8002bde:	6579      	str	r1, [r7, #84]	; 0x54
 8002be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be2:	4311      	orrs	r1, r2
 8002be4:	6579      	str	r1, [r7, #84]	; 0x54
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	653b      	str	r3, [r7, #80]	; 0x50
 8002bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	69fc      	ldr	r4, [r7, #28]
 8002bfe:	18c0      	adds	r0, r0, r3
 8002c00:	4161      	adcs	r1, r4
 8002c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f7fd fbf6 	bl	8000400 <__aeabi_uldivmod>
 8002c14:	0003      	movs	r3, r0
 8002c16:	000c      	movs	r4, r1
 8002c18:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002c1a:	e07e      	b.n	8002d1a <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d058      	beq.n	8002cd6 <UART_SetConfig+0x986>
 8002c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d050      	beq.n	8002cce <UART_SetConfig+0x97e>
 8002c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d048      	beq.n	8002cc6 <UART_SetConfig+0x976>
 8002c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d041      	beq.n	8002cc0 <UART_SetConfig+0x970>
 8002c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d039      	beq.n	8002cb8 <UART_SetConfig+0x968>
 8002c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d032      	beq.n	8002cb2 <UART_SetConfig+0x962>
 8002c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d02b      	beq.n	8002cac <UART_SetConfig+0x95c>
 8002c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2b07      	cmp	r3, #7
 8002c5a:	d023      	beq.n	8002ca4 <UART_SetConfig+0x954>
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d01b      	beq.n	8002c9c <UART_SetConfig+0x94c>
 8002c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d013      	beq.n	8002c94 <UART_SetConfig+0x944>
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2b0a      	cmp	r3, #10
 8002c72:	d00b      	beq.n	8002c8c <UART_SetConfig+0x93c>
 8002c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b0b      	cmp	r3, #11
 8002c7a:	d103      	bne.n	8002c84 <UART_SetConfig+0x934>
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	2400      	movs	r4, #0
 8002c82:	e02b      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	2400      	movs	r4, #0
 8002c8a:	e027      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	025b      	lsls	r3, r3, #9
 8002c90:	2400      	movs	r4, #0
 8002c92:	e023      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	2400      	movs	r4, #0
 8002c9a:	e01f      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	02db      	lsls	r3, r3, #11
 8002ca0:	2400      	movs	r4, #0
 8002ca2:	e01b      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	031b      	lsls	r3, r3, #12
 8002ca8:	2400      	movs	r4, #0
 8002caa:	e017      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <UART_SetConfig+0xa60>)
 8002cae:	2400      	movs	r4, #0
 8002cb0:	e014      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <UART_SetConfig+0xa64>)
 8002cb4:	2400      	movs	r4, #0
 8002cb6:	e011      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	035b      	lsls	r3, r3, #13
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	e00d      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <UART_SetConfig+0xa68>)
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	e00a      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	039b      	lsls	r3, r3, #14
 8002cca:	2400      	movs	r4, #0
 8002ccc:	e006      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	03db      	lsls	r3, r3, #15
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	e002      	b.n	8002cdc <UART_SetConfig+0x98c>
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	2400      	movs	r4, #0
 8002cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cde:	6852      	ldr	r2, [r2, #4]
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	60ba      	str	r2, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	68b8      	ldr	r0, [r7, #8]
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	18c0      	adds	r0, r0, r3
 8002cee:	4161      	adcs	r1, r4
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f7fd fb7f 	bl	8000400 <__aeabi_uldivmod>
 8002d02:	0003      	movs	r3, r0
 8002d04:	000c      	movs	r4, r1
 8002d06:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002d08:	e007      	b.n	8002d1a <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8002d0a:	2313      	movs	r3, #19
 8002d0c:	2258      	movs	r2, #88	; 0x58
 8002d0e:	4694      	mov	ip, r2
 8002d10:	44bc      	add	ip, r7
 8002d12:	4463      	add	r3, ip
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
            break;
 8002d18:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <UART_SetConfig+0xa6c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d909      	bls.n	8002d36 <UART_SetConfig+0x9e6>
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d24:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <UART_SetConfig+0xa70>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d805      	bhi.n	8002d36 <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	f000 fbbf 	bl	80034b4 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 8002d36:	2313      	movs	r3, #19
 8002d38:	2258      	movs	r2, #88	; 0x58
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	44bc      	add	ip, r7
 8002d3e:	4463      	add	r3, ip
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	f000 fbb6 	bl	80034b4 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d000      	beq.n	8002d56 <UART_SetConfig+0xa06>
 8002d54:	e1e4      	b.n	8003120 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 8002d56:	231b      	movs	r3, #27
 8002d58:	2258      	movs	r2, #88	; 0x58
 8002d5a:	4694      	mov	ip, r2
 8002d5c:	44bc      	add	ip, r7
 8002d5e:	4463      	add	r3, ip
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d100      	bne.n	8002d68 <UART_SetConfig+0xa18>
 8002d66:	e08e      	b.n	8002e86 <UART_SetConfig+0xb36>
 8002d68:	dc02      	bgt.n	8002d70 <UART_SetConfig+0xa20>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d02a      	beq.n	8002dc4 <UART_SetConfig+0xa74>
 8002d6e:	e1a3      	b.n	80030b8 <UART_SetConfig+0xd68>
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d100      	bne.n	8002d76 <UART_SetConfig+0xa26>
 8002d74:	e0de      	b.n	8002f34 <UART_SetConfig+0xbe4>
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d100      	bne.n	8002d7c <UART_SetConfig+0xa2c>
 8002d7a:	e13c      	b.n	8002ff6 <UART_SetConfig+0xca6>
 8002d7c:	e19c      	b.n	80030b8 <UART_SetConfig+0xd68>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	f4240000 	.word	0xf4240000
 8002d88:	01e84800 	.word	0x01e84800
 8002d8c:	03d09000 	.word	0x03d09000
 8002d90:	07a12000 	.word	0x07a12000
 8002d94:	0f424000 	.word	0x0f424000
 8002d98:	14585500 	.word	0x14585500
 8002d9c:	186a0000 	.word	0x186a0000
 8002da0:	1e848000 	.word	0x1e848000
 8002da4:	28b0aa00 	.word	0x28b0aa00
 8002da8:	3d090000 	.word	0x3d090000
 8002dac:	7a120000 	.word	0x7a120000
 8002db0:	000aaa00 	.word	0x000aaa00
 8002db4:	000ccc00 	.word	0x000ccc00
 8002db8:	00155500 	.word	0x00155500
 8002dbc:	000002ff 	.word	0x000002ff
 8002dc0:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dc4:	f7ff f8a0 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d044      	beq.n	8002e5c <UART_SetConfig+0xb0c>
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d03e      	beq.n	8002e58 <UART_SetConfig+0xb08>
 8002dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d038      	beq.n	8002e54 <UART_SetConfig+0xb04>
 8002de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d032      	beq.n	8002e50 <UART_SetConfig+0xb00>
 8002dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d02c      	beq.n	8002e4c <UART_SetConfig+0xafc>
 8002df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d026      	beq.n	8002e48 <UART_SetConfig+0xaf8>
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d020      	beq.n	8002e44 <UART_SetConfig+0xaf4>
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b07      	cmp	r3, #7
 8002e08:	d01a      	beq.n	8002e40 <UART_SetConfig+0xaf0>
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d014      	beq.n	8002e3c <UART_SetConfig+0xaec>
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d00e      	beq.n	8002e38 <UART_SetConfig+0xae8>
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b0a      	cmp	r3, #10
 8002e20:	d008      	beq.n	8002e34 <UART_SetConfig+0xae4>
 8002e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b0b      	cmp	r3, #11
 8002e28:	d102      	bne.n	8002e30 <UART_SetConfig+0xae0>
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	e016      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e014      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	e012      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e38:	2340      	movs	r3, #64	; 0x40
 8002e3a:	e010      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e00e      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e40:	2310      	movs	r3, #16
 8002e42:	e00c      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e44:	230c      	movs	r3, #12
 8002e46:	e00a      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e48:	230a      	movs	r3, #10
 8002e4a:	e008      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	e006      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e50:	2306      	movs	r3, #6
 8002e52:	e004      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e002      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e000      	b.n	8002e5e <UART_SetConfig+0xb0e>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	0019      	movs	r1, r3
 8002e60:	0010      	movs	r0, r2
 8002e62:	f7fd f957 	bl	8000114 <__udivsi3>
 8002e66:	0003      	movs	r3, r0
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	18d2      	adds	r2, r2, r3
 8002e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0019      	movs	r1, r3
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f7fd f94b 	bl	8000114 <__udivsi3>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002e84:	e120      	b.n	80030c8 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d043      	beq.n	8002f16 <UART_SetConfig+0xbc6>
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d03d      	beq.n	8002f12 <UART_SetConfig+0xbc2>
 8002e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d037      	beq.n	8002f0e <UART_SetConfig+0xbbe>
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d031      	beq.n	8002f0a <UART_SetConfig+0xbba>
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d02b      	beq.n	8002f06 <UART_SetConfig+0xbb6>
 8002eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d025      	beq.n	8002f02 <UART_SetConfig+0xbb2>
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d01f      	beq.n	8002efe <UART_SetConfig+0xbae>
 8002ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b07      	cmp	r3, #7
 8002ec4:	d019      	beq.n	8002efa <UART_SetConfig+0xbaa>
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d013      	beq.n	8002ef6 <UART_SetConfig+0xba6>
 8002ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	d00d      	beq.n	8002ef2 <UART_SetConfig+0xba2>
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b0a      	cmp	r3, #10
 8002edc:	d007      	beq.n	8002eee <UART_SetConfig+0xb9e>
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b0b      	cmp	r3, #11
 8002ee4:	d101      	bne.n	8002eea <UART_SetConfig+0xb9a>
 8002ee6:	4bba      	ldr	r3, [pc, #744]	; (80031d0 <UART_SetConfig+0xe80>)
 8002ee8:	e016      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002eea:	4bba      	ldr	r3, [pc, #744]	; (80031d4 <UART_SetConfig+0xe84>)
 8002eec:	e014      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002eee:	4bba      	ldr	r3, [pc, #744]	; (80031d8 <UART_SetConfig+0xe88>)
 8002ef0:	e012      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002ef2:	4bba      	ldr	r3, [pc, #744]	; (80031dc <UART_SetConfig+0xe8c>)
 8002ef4:	e010      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002ef6:	4bba      	ldr	r3, [pc, #744]	; (80031e0 <UART_SetConfig+0xe90>)
 8002ef8:	e00e      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002efa:	4bba      	ldr	r3, [pc, #744]	; (80031e4 <UART_SetConfig+0xe94>)
 8002efc:	e00c      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002efe:	4bba      	ldr	r3, [pc, #744]	; (80031e8 <UART_SetConfig+0xe98>)
 8002f00:	e00a      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f02:	4bba      	ldr	r3, [pc, #744]	; (80031ec <UART_SetConfig+0xe9c>)
 8002f04:	e008      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f06:	4bba      	ldr	r3, [pc, #744]	; (80031f0 <UART_SetConfig+0xea0>)
 8002f08:	e006      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f0a:	4bba      	ldr	r3, [pc, #744]	; (80031f4 <UART_SetConfig+0xea4>)
 8002f0c:	e004      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f0e:	4bba      	ldr	r3, [pc, #744]	; (80031f8 <UART_SetConfig+0xea8>)
 8002f10:	e002      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f12:	4bba      	ldr	r3, [pc, #744]	; (80031fc <UART_SetConfig+0xeac>)
 8002f14:	e000      	b.n	8002f18 <UART_SetConfig+0xbc8>
 8002f16:	4baf      	ldr	r3, [pc, #700]	; (80031d4 <UART_SetConfig+0xe84>)
 8002f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f1a:	6852      	ldr	r2, [r2, #4]
 8002f1c:	0852      	lsrs	r2, r2, #1
 8002f1e:	189a      	adds	r2, r3, r2
 8002f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0019      	movs	r1, r3
 8002f26:	0010      	movs	r0, r2
 8002f28:	f7fd f8f4 	bl	8000114 <__udivsi3>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002f32:	e0c9      	b.n	80030c8 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f34:	f7fe ff5c 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <UART_SetConfig+0xc7c>
 8002f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d03e      	beq.n	8002fc8 <UART_SetConfig+0xc78>
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d038      	beq.n	8002fc4 <UART_SetConfig+0xc74>
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d032      	beq.n	8002fc0 <UART_SetConfig+0xc70>
 8002f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d02c      	beq.n	8002fbc <UART_SetConfig+0xc6c>
 8002f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d026      	beq.n	8002fb8 <UART_SetConfig+0xc68>
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d020      	beq.n	8002fb4 <UART_SetConfig+0xc64>
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b07      	cmp	r3, #7
 8002f78:	d01a      	beq.n	8002fb0 <UART_SetConfig+0xc60>
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d014      	beq.n	8002fac <UART_SetConfig+0xc5c>
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b09      	cmp	r3, #9
 8002f88:	d00e      	beq.n	8002fa8 <UART_SetConfig+0xc58>
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d008      	beq.n	8002fa4 <UART_SetConfig+0xc54>
 8002f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b0b      	cmp	r3, #11
 8002f98:	d102      	bne.n	8002fa0 <UART_SetConfig+0xc50>
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	e016      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e014      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fa8:	2340      	movs	r3, #64	; 0x40
 8002faa:	e010      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fac:	2320      	movs	r3, #32
 8002fae:	e00e      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	e00c      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	e00a      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fb8:	230a      	movs	r3, #10
 8002fba:	e008      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	e006      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fc0:	2306      	movs	r3, #6
 8002fc2:	e004      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	e002      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e000      	b.n	8002fce <UART_SetConfig+0xc7e>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f7fd f89f 	bl	8000114 <__udivsi3>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	18d2      	adds	r2, r2, r3
 8002fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f893 	bl	8000114 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002ff4:	e068      	b.n	80030c8 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04c      	beq.n	8003098 <UART_SetConfig+0xd48>
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b01      	cmp	r3, #1
 8003004:	d045      	beq.n	8003092 <UART_SetConfig+0xd42>
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b02      	cmp	r3, #2
 800300c:	d03e      	beq.n	800308c <UART_SetConfig+0xd3c>
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b03      	cmp	r3, #3
 8003014:	d038      	beq.n	8003088 <UART_SetConfig+0xd38>
 8003016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b04      	cmp	r3, #4
 800301c:	d031      	beq.n	8003082 <UART_SetConfig+0xd32>
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b05      	cmp	r3, #5
 8003024:	d02b      	beq.n	800307e <UART_SetConfig+0xd2e>
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b06      	cmp	r3, #6
 800302c:	d025      	beq.n	800307a <UART_SetConfig+0xd2a>
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b07      	cmp	r3, #7
 8003034:	d01e      	beq.n	8003074 <UART_SetConfig+0xd24>
 8003036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b08      	cmp	r3, #8
 800303c:	d017      	beq.n	800306e <UART_SetConfig+0xd1e>
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b09      	cmp	r3, #9
 8003044:	d010      	beq.n	8003068 <UART_SetConfig+0xd18>
 8003046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b0a      	cmp	r3, #10
 800304c:	d009      	beq.n	8003062 <UART_SetConfig+0xd12>
 800304e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b0b      	cmp	r3, #11
 8003054:	d102      	bne.n	800305c <UART_SetConfig+0xd0c>
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	e01f      	b.n	800309c <UART_SetConfig+0xd4c>
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	025b      	lsls	r3, r3, #9
 8003060:	e01c      	b.n	800309c <UART_SetConfig+0xd4c>
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	e019      	b.n	800309c <UART_SetConfig+0xd4c>
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	e016      	b.n	800309c <UART_SetConfig+0xd4c>
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	e013      	b.n	800309c <UART_SetConfig+0xd4c>
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	e010      	b.n	800309c <UART_SetConfig+0xd4c>
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <UART_SetConfig+0xeb0>)
 800307c:	e00e      	b.n	800309c <UART_SetConfig+0xd4c>
 800307e:	4b61      	ldr	r3, [pc, #388]	; (8003204 <UART_SetConfig+0xeb4>)
 8003080:	e00c      	b.n	800309c <UART_SetConfig+0xd4c>
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	e009      	b.n	800309c <UART_SetConfig+0xd4c>
 8003088:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <UART_SetConfig+0xeb8>)
 800308a:	e007      	b.n	800309c <UART_SetConfig+0xd4c>
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	e004      	b.n	800309c <UART_SetConfig+0xd4c>
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	e001      	b.n	800309c <UART_SetConfig+0xd4c>
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	025b      	lsls	r3, r3, #9
 800309c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800309e:	6852      	ldr	r2, [r2, #4]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	189a      	adds	r2, r3, r2
 80030a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0019      	movs	r1, r3
 80030aa:	0010      	movs	r0, r2
 80030ac:	f7fd f832 	bl	8000114 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80030b6:	e007      	b.n	80030c8 <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 80030b8:	2313      	movs	r3, #19
 80030ba:	2258      	movs	r2, #88	; 0x58
 80030bc:	4694      	mov	ip, r2
 80030be:	44bc      	add	ip, r7
 80030c0:	4463      	add	r3, ip
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
        break;
 80030c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d920      	bls.n	8003110 <UART_SetConfig+0xdc0>
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <UART_SetConfig+0xebc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d81c      	bhi.n	8003110 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	b29a      	uxth	r2, r3
 80030da:	200a      	movs	r0, #10
 80030dc:	2458      	movs	r4, #88	; 0x58
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	181b      	adds	r3, r3, r0
 80030e2:	210f      	movs	r1, #15
 80030e4:	438a      	bics	r2, r1
 80030e6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2207      	movs	r2, #7
 80030f0:	4013      	ands	r3, r2
 80030f2:	b299      	uxth	r1, r3
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	181b      	adds	r3, r3, r0
 80030f8:	193a      	adds	r2, r7, r4
 80030fa:	1812      	adds	r2, r2, r0
 80030fc:	8812      	ldrh	r2, [r2, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	193a      	adds	r2, r7, r4
 8003108:	1812      	adds	r2, r2, r0
 800310a:	8812      	ldrh	r2, [r2, #0]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	e1d1      	b.n	80034b4 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003110:	2313      	movs	r3, #19
 8003112:	2258      	movs	r2, #88	; 0x58
 8003114:	4694      	mov	ip, r2
 8003116:	44bc      	add	ip, r7
 8003118:	4463      	add	r3, ip
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e1c9      	b.n	80034b4 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8003120:	231b      	movs	r3, #27
 8003122:	2258      	movs	r2, #88	; 0x58
 8003124:	4694      	mov	ip, r2
 8003126:	44bc      	add	ip, r7
 8003128:	4463      	add	r3, ip
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d100      	bne.n	8003132 <UART_SetConfig+0xde2>
 8003130:	e08d      	b.n	800324e <UART_SetConfig+0xefe>
 8003132:	dc02      	bgt.n	800313a <UART_SetConfig+0xdea>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <UART_SetConfig+0xdf8>
 8003138:	e1a1      	b.n	800347e <UART_SetConfig+0x112e>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d100      	bne.n	8003140 <UART_SetConfig+0xdf0>
 800313e:	e0dd      	b.n	80032fc <UART_SetConfig+0xfac>
 8003140:	2b08      	cmp	r3, #8
 8003142:	d100      	bne.n	8003146 <UART_SetConfig+0xdf6>
 8003144:	e13b      	b.n	80033be <UART_SetConfig+0x106e>
 8003146:	e19a      	b.n	800347e <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003148:	f7fe fede 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 800314c:	0002      	movs	r2, r0
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <UART_SetConfig+0xe08>
 8003156:	e065      	b.n	8003224 <UART_SetConfig+0xed4>
 8003158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d100      	bne.n	8003162 <UART_SetConfig+0xe12>
 8003160:	e05e      	b.n	8003220 <UART_SetConfig+0xed0>
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b02      	cmp	r3, #2
 8003168:	d058      	beq.n	800321c <UART_SetConfig+0xecc>
 800316a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b03      	cmp	r3, #3
 8003170:	d052      	beq.n	8003218 <UART_SetConfig+0xec8>
 8003172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b04      	cmp	r3, #4
 8003178:	d04c      	beq.n	8003214 <UART_SetConfig+0xec4>
 800317a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b05      	cmp	r3, #5
 8003180:	d046      	beq.n	8003210 <UART_SetConfig+0xec0>
 8003182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b06      	cmp	r3, #6
 8003188:	d020      	beq.n	80031cc <UART_SetConfig+0xe7c>
 800318a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b07      	cmp	r3, #7
 8003190:	d01a      	beq.n	80031c8 <UART_SetConfig+0xe78>
 8003192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b08      	cmp	r3, #8
 8003198:	d014      	beq.n	80031c4 <UART_SetConfig+0xe74>
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b09      	cmp	r3, #9
 80031a0:	d00e      	beq.n	80031c0 <UART_SetConfig+0xe70>
 80031a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b0a      	cmp	r3, #10
 80031a8:	d008      	beq.n	80031bc <UART_SetConfig+0xe6c>
 80031aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b0b      	cmp	r3, #11
 80031b0:	d102      	bne.n	80031b8 <UART_SetConfig+0xe68>
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	e036      	b.n	8003226 <UART_SetConfig+0xed6>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e034      	b.n	8003226 <UART_SetConfig+0xed6>
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	e032      	b.n	8003226 <UART_SetConfig+0xed6>
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	e030      	b.n	8003226 <UART_SetConfig+0xed6>
 80031c4:	2320      	movs	r3, #32
 80031c6:	e02e      	b.n	8003226 <UART_SetConfig+0xed6>
 80031c8:	2310      	movs	r3, #16
 80031ca:	e02c      	b.n	8003226 <UART_SetConfig+0xed6>
 80031cc:	230c      	movs	r3, #12
 80031ce:	e02a      	b.n	8003226 <UART_SetConfig+0xed6>
 80031d0:	0001e848 	.word	0x0001e848
 80031d4:	01e84800 	.word	0x01e84800
 80031d8:	0003d090 	.word	0x0003d090
 80031dc:	0007a120 	.word	0x0007a120
 80031e0:	000f4240 	.word	0x000f4240
 80031e4:	001e8480 	.word	0x001e8480
 80031e8:	0028b0aa 	.word	0x0028b0aa
 80031ec:	0030d400 	.word	0x0030d400
 80031f0:	003d0900 	.word	0x003d0900
 80031f4:	00516154 	.word	0x00516154
 80031f8:	007a1200 	.word	0x007a1200
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	00001554 	.word	0x00001554
 8003204:	00001998 	.word	0x00001998
 8003208:	00002aaa 	.word	0x00002aaa
 800320c:	0000ffff 	.word	0x0000ffff
 8003210:	230a      	movs	r3, #10
 8003212:	e008      	b.n	8003226 <UART_SetConfig+0xed6>
 8003214:	2308      	movs	r3, #8
 8003216:	e006      	b.n	8003226 <UART_SetConfig+0xed6>
 8003218:	2306      	movs	r3, #6
 800321a:	e004      	b.n	8003226 <UART_SetConfig+0xed6>
 800321c:	2304      	movs	r3, #4
 800321e:	e002      	b.n	8003226 <UART_SetConfig+0xed6>
 8003220:	2302      	movs	r3, #2
 8003222:	e000      	b.n	8003226 <UART_SetConfig+0xed6>
 8003224:	2301      	movs	r3, #1
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f7fc ff73 	bl	8000114 <__udivsi3>
 800322e:	0003      	movs	r3, r0
 8003230:	001a      	movs	r2, r3
 8003232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	18d2      	adds	r2, r2, r3
 800323a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0019      	movs	r1, r3
 8003240:	0010      	movs	r0, r2
 8003242:	f7fc ff67 	bl	8000114 <__udivsi3>
 8003246:	0003      	movs	r3, r0
 8003248:	b29b      	uxth	r3, r3
 800324a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800324c:	e11f      	b.n	800348e <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d043      	beq.n	80032de <UART_SetConfig+0xf8e>
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b01      	cmp	r3, #1
 800325c:	d03d      	beq.n	80032da <UART_SetConfig+0xf8a>
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b02      	cmp	r3, #2
 8003264:	d037      	beq.n	80032d6 <UART_SetConfig+0xf86>
 8003266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b03      	cmp	r3, #3
 800326c:	d031      	beq.n	80032d2 <UART_SetConfig+0xf82>
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b04      	cmp	r3, #4
 8003274:	d02b      	beq.n	80032ce <UART_SetConfig+0xf7e>
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b05      	cmp	r3, #5
 800327c:	d025      	beq.n	80032ca <UART_SetConfig+0xf7a>
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b06      	cmp	r3, #6
 8003284:	d01f      	beq.n	80032c6 <UART_SetConfig+0xf76>
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b07      	cmp	r3, #7
 800328c:	d019      	beq.n	80032c2 <UART_SetConfig+0xf72>
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b08      	cmp	r3, #8
 8003294:	d013      	beq.n	80032be <UART_SetConfig+0xf6e>
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b09      	cmp	r3, #9
 800329c:	d00d      	beq.n	80032ba <UART_SetConfig+0xf6a>
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b0a      	cmp	r3, #10
 80032a4:	d007      	beq.n	80032b6 <UART_SetConfig+0xf66>
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b0b      	cmp	r3, #11
 80032ac:	d101      	bne.n	80032b2 <UART_SetConfig+0xf62>
 80032ae:	4b8d      	ldr	r3, [pc, #564]	; (80034e4 <UART_SetConfig+0x1194>)
 80032b0:	e016      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032b2:	4b8d      	ldr	r3, [pc, #564]	; (80034e8 <UART_SetConfig+0x1198>)
 80032b4:	e014      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <UART_SetConfig+0x119c>)
 80032b8:	e012      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032ba:	4b8d      	ldr	r3, [pc, #564]	; (80034f0 <UART_SetConfig+0x11a0>)
 80032bc:	e010      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032be:	4b8d      	ldr	r3, [pc, #564]	; (80034f4 <UART_SetConfig+0x11a4>)
 80032c0:	e00e      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032c2:	4b8d      	ldr	r3, [pc, #564]	; (80034f8 <UART_SetConfig+0x11a8>)
 80032c4:	e00c      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032c6:	4b8d      	ldr	r3, [pc, #564]	; (80034fc <UART_SetConfig+0x11ac>)
 80032c8:	e00a      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032ca:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <UART_SetConfig+0x11b0>)
 80032cc:	e008      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032ce:	4b8d      	ldr	r3, [pc, #564]	; (8003504 <UART_SetConfig+0x11b4>)
 80032d0:	e006      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032d2:	4b8d      	ldr	r3, [pc, #564]	; (8003508 <UART_SetConfig+0x11b8>)
 80032d4:	e004      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032d6:	4b8d      	ldr	r3, [pc, #564]	; (800350c <UART_SetConfig+0x11bc>)
 80032d8:	e002      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032da:	4b8d      	ldr	r3, [pc, #564]	; (8003510 <UART_SetConfig+0x11c0>)
 80032dc:	e000      	b.n	80032e0 <UART_SetConfig+0xf90>
 80032de:	4b82      	ldr	r3, [pc, #520]	; (80034e8 <UART_SetConfig+0x1198>)
 80032e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032e2:	6852      	ldr	r2, [r2, #4]
 80032e4:	0852      	lsrs	r2, r2, #1
 80032e6:	189a      	adds	r2, r3, r2
 80032e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f7fc ff10 	bl	8000114 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80032fa:	e0c8      	b.n	800348e <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fc:	f7fe fd78 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8003300:	0002      	movs	r2, r0
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d044      	beq.n	8003394 <UART_SetConfig+0x1044>
 800330a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b01      	cmp	r3, #1
 8003310:	d03e      	beq.n	8003390 <UART_SetConfig+0x1040>
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b02      	cmp	r3, #2
 8003318:	d038      	beq.n	800338c <UART_SetConfig+0x103c>
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b03      	cmp	r3, #3
 8003320:	d032      	beq.n	8003388 <UART_SetConfig+0x1038>
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b04      	cmp	r3, #4
 8003328:	d02c      	beq.n	8003384 <UART_SetConfig+0x1034>
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b05      	cmp	r3, #5
 8003330:	d026      	beq.n	8003380 <UART_SetConfig+0x1030>
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b06      	cmp	r3, #6
 8003338:	d020      	beq.n	800337c <UART_SetConfig+0x102c>
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b07      	cmp	r3, #7
 8003340:	d01a      	beq.n	8003378 <UART_SetConfig+0x1028>
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b08      	cmp	r3, #8
 8003348:	d014      	beq.n	8003374 <UART_SetConfig+0x1024>
 800334a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b09      	cmp	r3, #9
 8003350:	d00e      	beq.n	8003370 <UART_SetConfig+0x1020>
 8003352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b0a      	cmp	r3, #10
 8003358:	d008      	beq.n	800336c <UART_SetConfig+0x101c>
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b0b      	cmp	r3, #11
 8003360:	d102      	bne.n	8003368 <UART_SetConfig+0x1018>
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	e016      	b.n	8003396 <UART_SetConfig+0x1046>
 8003368:	2301      	movs	r3, #1
 800336a:	e014      	b.n	8003396 <UART_SetConfig+0x1046>
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	e012      	b.n	8003396 <UART_SetConfig+0x1046>
 8003370:	2340      	movs	r3, #64	; 0x40
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x1046>
 8003374:	2320      	movs	r3, #32
 8003376:	e00e      	b.n	8003396 <UART_SetConfig+0x1046>
 8003378:	2310      	movs	r3, #16
 800337a:	e00c      	b.n	8003396 <UART_SetConfig+0x1046>
 800337c:	230c      	movs	r3, #12
 800337e:	e00a      	b.n	8003396 <UART_SetConfig+0x1046>
 8003380:	230a      	movs	r3, #10
 8003382:	e008      	b.n	8003396 <UART_SetConfig+0x1046>
 8003384:	2308      	movs	r3, #8
 8003386:	e006      	b.n	8003396 <UART_SetConfig+0x1046>
 8003388:	2306      	movs	r3, #6
 800338a:	e004      	b.n	8003396 <UART_SetConfig+0x1046>
 800338c:	2304      	movs	r3, #4
 800338e:	e002      	b.n	8003396 <UART_SetConfig+0x1046>
 8003390:	2302      	movs	r3, #2
 8003392:	e000      	b.n	8003396 <UART_SetConfig+0x1046>
 8003394:	2301      	movs	r3, #1
 8003396:	0019      	movs	r1, r3
 8003398:	0010      	movs	r0, r2
 800339a:	f7fc febb 	bl	8000114 <__udivsi3>
 800339e:	0003      	movs	r3, r0
 80033a0:	001a      	movs	r2, r3
 80033a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f7fc feaf 	bl	8000114 <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033bc:	e067      	b.n	800348e <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04b      	beq.n	800345e <UART_SetConfig+0x110e>
 80033c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d044      	beq.n	8003458 <UART_SetConfig+0x1108>
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d03d      	beq.n	8003452 <UART_SetConfig+0x1102>
 80033d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d037      	beq.n	800344e <UART_SetConfig+0x10fe>
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d030      	beq.n	8003448 <UART_SetConfig+0x10f8>
 80033e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d02a      	beq.n	8003444 <UART_SetConfig+0x10f4>
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d024      	beq.n	8003440 <UART_SetConfig+0x10f0>
 80033f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	d01d      	beq.n	800343a <UART_SetConfig+0x10ea>
 80033fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b08      	cmp	r3, #8
 8003404:	d016      	beq.n	8003434 <UART_SetConfig+0x10e4>
 8003406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b09      	cmp	r3, #9
 800340c:	d00f      	beq.n	800342e <UART_SetConfig+0x10de>
 800340e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b0a      	cmp	r3, #10
 8003414:	d008      	beq.n	8003428 <UART_SetConfig+0x10d8>
 8003416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b0b      	cmp	r3, #11
 800341c:	d101      	bne.n	8003422 <UART_SetConfig+0x10d2>
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	e01f      	b.n	8003462 <UART_SetConfig+0x1112>
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	e01c      	b.n	8003462 <UART_SetConfig+0x1112>
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	e019      	b.n	8003462 <UART_SetConfig+0x1112>
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	e016      	b.n	8003462 <UART_SetConfig+0x1112>
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	e013      	b.n	8003462 <UART_SetConfig+0x1112>
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	e010      	b.n	8003462 <UART_SetConfig+0x1112>
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <UART_SetConfig+0x11c4>)
 8003442:	e00e      	b.n	8003462 <UART_SetConfig+0x1112>
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <UART_SetConfig+0x11c8>)
 8003446:	e00c      	b.n	8003462 <UART_SetConfig+0x1112>
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	e009      	b.n	8003462 <UART_SetConfig+0x1112>
 800344e:	4b33      	ldr	r3, [pc, #204]	; (800351c <UART_SetConfig+0x11cc>)
 8003450:	e007      	b.n	8003462 <UART_SetConfig+0x1112>
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	e004      	b.n	8003462 <UART_SetConfig+0x1112>
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	01db      	lsls	r3, r3, #7
 800345c:	e001      	b.n	8003462 <UART_SetConfig+0x1112>
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003464:	6852      	ldr	r2, [r2, #4]
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	189a      	adds	r2, r3, r2
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0019      	movs	r1, r3
 8003470:	0010      	movs	r0, r2
 8003472:	f7fc fe4f 	bl	8000114 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	b29b      	uxth	r3, r3
 800347a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800347c:	e007      	b.n	800348e <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 800347e:	2313      	movs	r3, #19
 8003480:	2258      	movs	r2, #88	; 0x58
 8003482:	4694      	mov	ip, r2
 8003484:	44bc      	add	ip, r7
 8003486:	4463      	add	r3, ip
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
        break;
 800348c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d908      	bls.n	80034a6 <UART_SetConfig+0x1156>
 8003494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003496:	4a22      	ldr	r2, [pc, #136]	; (8003520 <UART_SetConfig+0x11d0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d804      	bhi.n	80034a6 <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 800349c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e006      	b.n	80034b4 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 80034a6:	2313      	movs	r3, #19
 80034a8:	2258      	movs	r2, #88	; 0x58
 80034aa:	4694      	mov	ip, r2
 80034ac:	44bc      	add	ip, r7
 80034ae:	4463      	add	r3, ip
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b6:	226a      	movs	r2, #106	; 0x6a
 80034b8:	2101      	movs	r1, #1
 80034ba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80034bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034be:	2268      	movs	r2, #104	; 0x68
 80034c0:	2101      	movs	r1, #1
 80034c2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c6:	2200      	movs	r2, #0
 80034c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	2200      	movs	r2, #0
 80034ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80034d0:	2313      	movs	r3, #19
 80034d2:	2258      	movs	r2, #88	; 0x58
 80034d4:	4694      	mov	ip, r2
 80034d6:	44bc      	add	ip, r7
 80034d8:	4463      	add	r3, ip
 80034da:	781b      	ldrb	r3, [r3, #0]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b01f      	add	sp, #124	; 0x7c
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e4:	0000f424 	.word	0x0000f424
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	0001e848 	.word	0x0001e848
 80034f0:	0003d090 	.word	0x0003d090
 80034f4:	0007a120 	.word	0x0007a120
 80034f8:	000f4240 	.word	0x000f4240
 80034fc:	00145855 	.word	0x00145855
 8003500:	00186a00 	.word	0x00186a00
 8003504:	001e8480 	.word	0x001e8480
 8003508:	0028b0aa 	.word	0x0028b0aa
 800350c:	003d0900 	.word	0x003d0900
 8003510:	007a1200 	.word	0x007a1200
 8003514:	00000aaa 	.word	0x00000aaa
 8003518:	00000ccc 	.word	0x00000ccc
 800351c:	00001555 	.word	0x00001555
 8003520:	0000ffff 	.word	0x0000ffff

08003524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <UART_AdvFeatureConfig+0x144>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d00b      	beq.n	8003570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <UART_AdvFeatureConfig+0x148>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2204      	movs	r2, #4
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <UART_AdvFeatureConfig+0x14c>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2208      	movs	r2, #8
 8003598:	4013      	ands	r3, r2
 800359a:	d00b      	beq.n	80035b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a34      	ldr	r2, [pc, #208]	; (8003674 <UART_AdvFeatureConfig+0x150>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	2210      	movs	r2, #16
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <UART_AdvFeatureConfig+0x154>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	2220      	movs	r2, #32
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <UART_AdvFeatureConfig+0x158>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	4013      	ands	r3, r2
 8003600:	d01d      	beq.n	800363e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <UART_AdvFeatureConfig+0x15c>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	035b      	lsls	r3, r3, #13
 8003622:	429a      	cmp	r2, r3
 8003624:	d10b      	bne.n	800363e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <UART_AdvFeatureConfig+0x160>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <UART_AdvFeatureConfig+0x164>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	fffdffff 	.word	0xfffdffff
 800366c:	fffeffff 	.word	0xfffeffff
 8003670:	fffbffff 	.word	0xfffbffff
 8003674:	ffff7fff 	.word	0xffff7fff
 8003678:	ffffefff 	.word	0xffffefff
 800367c:	ffffdfff 	.word	0xffffdfff
 8003680:	ffefffff 	.word	0xffefffff
 8003684:	ff9fffff 	.word	0xff9fffff
 8003688:	fff7ffff 	.word	0xfff7ffff

0800368c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2288      	movs	r2, #136	; 0x88
 8003698:	2100      	movs	r1, #0
 800369a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800369c:	f7fd f836 	bl	800070c <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2208      	movs	r2, #8
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d10d      	bne.n	80036ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	0399      	lsls	r1, r3, #14
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <UART_CheckIdleState+0x90>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	f000 f82d 	bl	8003720 <UART_WaitOnFlagUntilTimeout>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e021      	b.n	8003712 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2204      	movs	r2, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d10d      	bne.n	80036f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	03d9      	lsls	r1, r3, #15
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <UART_CheckIdleState+0x90>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0013      	movs	r3, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	f000 f818 	bl	8003720 <UART_WaitOnFlagUntilTimeout>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d001      	beq.n	80036f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e00c      	b.n	8003712 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	2120      	movs	r1, #32
 80036fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2284      	movs	r2, #132	; 0x84
 8003704:	2120      	movs	r1, #32
 8003706:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	227c      	movs	r2, #124	; 0x7c
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b004      	add	sp, #16
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	01ffffff 	.word	0x01ffffff

08003720 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003730:	e02b      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3301      	adds	r3, #1
 8003736:	d028      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fc ffe8 	bl	800070c <HAL_GetTick>
 800373c:	0002      	movs	r2, r0
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11d      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4916      	ldr	r1, [pc, #88]	; (80037b4 <UART_WaitOnFlagUntilTimeout+0x94>)
 800375a:	400a      	ands	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	438a      	bics	r2, r1
 800376c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	2120      	movs	r1, #32
 8003774:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2284      	movs	r2, #132	; 0x84
 800377a:	2120      	movs	r1, #32
 800377c:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	227c      	movs	r2, #124	; 0x7c
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	425a      	negs	r2, r3
 800379a:	4153      	adcs	r3, r2
 800379c:	b2db      	uxtb	r3, r3
 800379e:	001a      	movs	r2, r3
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d0c4      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b004      	add	sp, #16
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	fffffe5f 	.word	0xfffffe5f

080037b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	227c      	movs	r2, #124	; 0x7c
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_UARTEx_DisableFifoMode+0x16>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e027      	b.n	800381e <HAL_UARTEx_DisableFifoMode+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	227c      	movs	r2, #124	; 0x7c
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	2124      	movs	r1, #36	; 0x24
 80037dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2101      	movs	r1, #1
 80037f2:	438a      	bics	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_UARTEx_DisableFifoMode+0x70>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	2120      	movs	r1, #32
 8003812:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	227c      	movs	r2, #124	; 0x7c
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	dfffffff 	.word	0xdfffffff

0800382c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	227c      	movs	r2, #124	; 0x7c
 800383a:	5c9b      	ldrb	r3, [r3, r2]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e02e      	b.n	80038a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	227c      	movs	r2, #124	; 0x7c
 8003848:	2101      	movs	r1, #1
 800384a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	2124      	movs	r1, #36	; 0x24
 8003852:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	438a      	bics	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	08d9      	lsrs	r1, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f854 	bl	8003930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	2120      	movs	r1, #32
 8003896:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	227c      	movs	r2, #124	; 0x7c
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	227c      	movs	r2, #124	; 0x7c
 80038ba:	5c9b      	ldrb	r3, [r3, r2]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e02f      	b.n	8003924 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	227c      	movs	r2, #124	; 0x7c
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	2124      	movs	r1, #36	; 0x24
 80038d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a0e      	ldr	r2, [pc, #56]	; (800392c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f813 	bl	8003930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	2120      	movs	r1, #32
 8003918:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	227c      	movs	r2, #124	; 0x7c
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bd80      	pop	{r7, pc}
 800392c:	f1ffffff 	.word	0xf1ffffff

08003930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003938:	2314      	movs	r3, #20
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <UARTEx_SetNbDataToProcess+0xcc>)
 800393e:	ca03      	ldmia	r2!, {r0, r1}
 8003940:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003942:	230c      	movs	r3, #12
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <UARTEx_SetNbDataToProcess+0xd0>)
 8003948:	ca03      	ldmia	r2!, {r0, r1}
 800394a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003950:	2b00      	cmp	r3, #0
 8003952:	d108      	bne.n	8003966 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	226a      	movs	r2, #106	; 0x6a
 8003958:	2101      	movs	r1, #1
 800395a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2268      	movs	r2, #104	; 0x68
 8003960:	2101      	movs	r1, #1
 8003962:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003964:	e046      	b.n	80039f4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003966:	261f      	movs	r6, #31
 8003968:	19bb      	adds	r3, r7, r6
 800396a:	2208      	movs	r2, #8
 800396c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800396e:	201e      	movs	r0, #30
 8003970:	183b      	adds	r3, r7, r0
 8003972:	2208      	movs	r2, #8
 8003974:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	0e5b      	lsrs	r3, r3, #25
 800397e:	b2da      	uxtb	r2, r3
 8003980:	241d      	movs	r4, #29
 8003982:	193b      	adds	r3, r7, r4
 8003984:	2107      	movs	r1, #7
 8003986:	400a      	ands	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	0f5b      	lsrs	r3, r3, #29
 8003992:	b2da      	uxtb	r2, r3
 8003994:	251c      	movs	r5, #28
 8003996:	197b      	adds	r3, r7, r5
 8003998:	2107      	movs	r1, #7
 800399a:	400a      	ands	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800399e:	183b      	adds	r3, r7, r0
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	197a      	adds	r2, r7, r5
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	2114      	movs	r1, #20
 80039a8:	1879      	adds	r1, r7, r1
 80039aa:	5c8a      	ldrb	r2, [r1, r2]
 80039ac:	435a      	muls	r2, r3
 80039ae:	0010      	movs	r0, r2
 80039b0:	197b      	adds	r3, r7, r5
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	250c      	movs	r5, #12
 80039b6:	197a      	adds	r2, r7, r5
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	0019      	movs	r1, r3
 80039bc:	f7fc fc34 	bl	8000228 <__divsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	b299      	uxth	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	226a      	movs	r2, #106	; 0x6a
 80039c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80039ca:	19bb      	adds	r3, r7, r6
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	193a      	adds	r2, r7, r4
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	2114      	movs	r1, #20
 80039d4:	1879      	adds	r1, r7, r1
 80039d6:	5c8a      	ldrb	r2, [r1, r2]
 80039d8:	435a      	muls	r2, r3
 80039da:	0010      	movs	r0, r2
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	197a      	adds	r2, r7, r5
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	0019      	movs	r1, r3
 80039e6:	f7fc fc1f 	bl	8000228 <__divsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	b299      	uxth	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2268      	movs	r2, #104	; 0x68
 80039f2:	5299      	strh	r1, [r3, r2]
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b009      	add	sp, #36	; 0x24
 80039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fc:	08004758 	.word	0x08004758
 8003a00:	08004760 	.word	0x08004760

08003a04 <I2CWrite>:
void I2CRead(uint16_t devAddress,uint16_t memAddress, uint8_t *data, uint16_t n){
	HAL_I2C_Mem_Read(&hi2c1, devAddress, memAddress, 2, data, n, 50);
	HAL_Delay(10);
}

void I2CWrite(uint16_t devAddress,uint16_t memAddress, uint8_t *data, uint16_t n){
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af04      	add	r7, sp, #16
 8003a0a:	0004      	movs	r4, r0
 8003a0c:	0008      	movs	r0, r1
 8003a0e:	60ba      	str	r2, [r7, #8]
 8003a10:	0019      	movs	r1, r3
 8003a12:	250e      	movs	r5, #14
 8003a14:	197b      	adds	r3, r7, r5
 8003a16:	1c22      	adds	r2, r4, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	240c      	movs	r4, #12
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	1c02      	adds	r2, r0, #0
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	1dbb      	adds	r3, r7, #6
 8003a24:	1c0a      	adds	r2, r1, #0
 8003a26:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	881a      	ldrh	r2, [r3, #0]
 8003a2c:	197b      	adds	r3, r7, r5
 8003a2e:	8819      	ldrh	r1, [r3, #0]
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <I2CWrite+0x50>)
 8003a32:	2332      	movs	r3, #50	; 0x32
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	1dbb      	adds	r3, r7, #6
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2302      	movs	r3, #2
 8003a42:	f7fd f9bf 	bl	8000dc4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003a46:	200a      	movs	r0, #10
 8003a48:	f7fc fe6a 	bl	8000720 <HAL_Delay>
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}
 8003a54:	2000002c 	.word	0x2000002c

08003a58 <NFC_Delay>:

void NFC_Delay(uint32_t delay){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fc fe5c 	bl	8000720 <HAL_Delay>
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	4cab      	ldr	r4, [pc, #684]	; (8003d20 <main+0x2b0>)
 8003a74:	44a5      	add	sp, r4
 8003a76:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a78:	f7fc fdce 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a7c:	f000 f984 	bl	8003d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a80:	f000 fa7c 	bl	8003f7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003a84:	f000 f9ea 	bl	8003e5c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003a88:	f000 fa28 	bl	8003edc <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003a8c:	f000 f9d8 	bl	8003e40 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer[6];
  buffer[0]= 0x4c;	//L
 8003a90:	21dc      	movs	r1, #220	; 0xdc
 8003a92:	0089      	lsls	r1, r1, #2
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	224c      	movs	r2, #76	; 0x4c
 8003a98:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	224f      	movs	r2, #79	; 0x4f
 8003a9e:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2255      	movs	r2, #85	; 0x55
 8003aa4:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	2249      	movs	r2, #73	; 0x49
 8003aaa:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	2253      	movs	r2, #83	; 0x53
 8003ab0:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	2231      	movs	r2, #49	; 0x31
 8003ab6:	715a      	strb	r2, [r3, #5]
  uint8_t buffer1[6];
  buffer1[0]= 0x48;	//H
 8003ab8:	21da      	movs	r1, #218	; 0xda
 8003aba:	0089      	lsls	r1, r1, #2
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2248      	movs	r2, #72	; 0x48
 8003ac0:	701a      	strb	r2, [r3, #0]
  buffer1[1]= 0x45;	//E
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	2245      	movs	r2, #69	; 0x45
 8003ac6:	705a      	strb	r2, [r3, #1]
  buffer1[2]= 0x4c;	//L
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	224c      	movs	r2, #76	; 0x4c
 8003acc:	709a      	strb	r2, [r3, #2]
  buffer1[3]= 0x4c;	//L
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	224c      	movs	r2, #76	; 0x4c
 8003ad2:	70da      	strb	r2, [r3, #3]
  buffer1[4]= 0x4f;	//O
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	224f      	movs	r2, #79	; 0x4f
 8003ad8:	711a      	strb	r2, [r3, #4]
  buffer1[5]= 0x33;	//3
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2233      	movs	r2, #51	; 0x33
 8003ade:	715a      	strb	r2, [r3, #5]
  uint8_t buffer2[13];
  buffer2[0] = 0x50; //P
 8003ae0:	21d6      	movs	r1, #214	; 0xd6
 8003ae2:	0089      	lsls	r1, r1, #2
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	2250      	movs	r2, #80	; 0x50
 8003ae8:	701a      	strb	r2, [r3, #0]
  buffer2[1] = 0x61; //a
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	2261      	movs	r2, #97	; 0x61
 8003aee:	705a      	strb	r2, [r3, #1]
  buffer2[2] = 0x63; //c
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	2263      	movs	r2, #99	; 0x63
 8003af4:	709a      	strb	r2, [r3, #2]
  buffer2[3] = 0x69; //i
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2269      	movs	r2, #105	; 0x69
 8003afa:	70da      	strb	r2, [r3, #3]
  buffer2[4] = 0x66; //f
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2266      	movs	r2, #102	; 0x66
 8003b00:	711a      	strb	r2, [r3, #4]
  buffer2[5] = 0x69; //i
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2269      	movs	r2, #105	; 0x69
 8003b06:	715a      	strb	r2, [r3, #5]
  buffer2[6] = 0x63; //c
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2263      	movs	r2, #99	; 0x63
 8003b0c:	719a      	strb	r2, [r3, #6]
  buffer2[7] = 0x20; //
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2220      	movs	r2, #32
 8003b12:	71da      	strb	r2, [r3, #7]
  buffer2[8] = 0x6f; //o
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	226f      	movs	r2, #111	; 0x6f
 8003b18:	721a      	strb	r2, [r3, #8]
  buffer2[9] = 0x63; //c
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	2263      	movs	r2, #99	; 0x63
 8003b1e:	725a      	strb	r2, [r3, #9]
  buffer2[10] = 0x65; //e
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2265      	movs	r2, #101	; 0x65
 8003b24:	729a      	strb	r2, [r3, #10]
  buffer2[11] = 0x61; //a
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2261      	movs	r2, #97	; 0x61
 8003b2a:	72da      	strb	r2, [r3, #11]
  buffer2[12] = 0x6e; //n
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	226e      	movs	r2, #110	; 0x6e
 8003b30:	731a      	strb	r2, [r3, #12]
  //uint8_t oldPassword[8] = {0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08};
  uint8_t password[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
 8003b32:	24d4      	movs	r4, #212	; 0xd4
 8003b34:	00a4      	lsls	r4, r4, #2
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f000 fdf5 	bl	800472e <memset>
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	2201      	movs	r2, #1
 8003b48:	71da      	strb	r2, [r3, #7]
  //uint8_t ENDA[3];
  //uint8_t I2CsecurityStatus[1];
  uint8_t data[1];

  //ndef message array - link
  char protocol[20] = "https://www.";
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <main+0x2b4>)
 8003b4c:	24de      	movs	r4, #222	; 0xde
 8003b4e:	00a4      	lsls	r4, r4, #2
 8003b50:	193a      	adds	r2, r7, r4
 8003b52:	18d1      	adds	r1, r2, r3
 8003b54:	4a74      	ldr	r2, [pc, #464]	; (8003d28 <main+0x2b8>)
 8003b56:	000b      	movs	r3, r1
 8003b58:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003b5a:	c361      	stmia	r3!, {r0, r5, r6}
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	230d      	movs	r3, #13
 8003b62:	18cb      	adds	r3, r1, r3
 8003b64:	2207      	movs	r2, #7
 8003b66:	2100      	movs	r1, #0
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 fde0 	bl	800472e <memset>
  char link[30] = "youtube.com";
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <main+0x2bc>)
 8003b70:	193a      	adds	r2, r7, r4
 8003b72:	18d1      	adds	r1, r2, r3
 8003b74:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <main+0x2c0>)
 8003b76:	000b      	movs	r3, r1
 8003b78:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003b7a:	c361      	stmia	r3!, {r0, r5, r6}
 8003b7c:	000b      	movs	r3, r1
 8003b7e:	330c      	adds	r3, #12
 8003b80:	2212      	movs	r2, #18
 8003b82:	2100      	movs	r1, #0
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 fdd2 	bl	800472e <memset>
  char info[30] = "Video Web";
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <main+0x2c4>)
 8003b8c:	193a      	adds	r2, r7, r4
 8003b8e:	18d1      	adds	r1, r2, r3
 8003b90:	4a69      	ldr	r2, [pc, #420]	; (8003d38 <main+0x2c8>)
 8003b92:	000b      	movs	r3, r1
 8003b94:	ca21      	ldmia	r2!, {r0, r5}
 8003b96:	c321      	stmia	r3!, {r0, r5}
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18cb      	adds	r3, r1, r3
 8003ba0:	2214      	movs	r2, #20
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fdc2 	bl	800472e <memset>
  //ndef message array of "file"
  char protocol1[30] = "file://";
 8003baa:	4b64      	ldr	r3, [pc, #400]	; (8003d3c <main+0x2cc>)
 8003bac:	193a      	adds	r2, r7, r4
 8003bae:	18d1      	adds	r1, r2, r3
 8003bb0:	4a63      	ldr	r2, [pc, #396]	; (8003d40 <main+0x2d0>)
 8003bb2:	000b      	movs	r3, r1
 8003bb4:	ca21      	ldmia	r2!, {r0, r5}
 8003bb6:	c321      	stmia	r3!, {r0, r5}
 8003bb8:	000b      	movs	r3, r1
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2216      	movs	r2, #22
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 fdb4 	bl	800472e <memset>
  char link1[150] = "/storage/9016-4EF8/DCIM/Camera/nfc.jpg";
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <main+0x2d4>)
 8003bc8:	193a      	adds	r2, r7, r4
 8003bca:	18d1      	adds	r1, r2, r3
 8003bcc:	4a5e      	ldr	r2, [pc, #376]	; (8003d48 <main+0x2d8>)
 8003bce:	000b      	movs	r3, r1
 8003bd0:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003bd2:	c361      	stmia	r3!, {r0, r5, r6}
 8003bd4:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003bd6:	c361      	stmia	r3!, {r0, r5, r6}
 8003bd8:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003bda:	c361      	stmia	r3!, {r0, r5, r6}
 8003bdc:	8810      	ldrh	r0, [r2, #0]
 8003bde:	8018      	strh	r0, [r3, #0]
 8003be0:	7892      	ldrb	r2, [r2, #2]
 8003be2:	709a      	strb	r2, [r3, #2]
 8003be4:	2327      	movs	r3, #39	; 0x27
 8003be6:	18cb      	adds	r3, r1, r3
 8003be8:	226f      	movs	r2, #111	; 0x6f
 8003bea:	2100      	movs	r1, #0
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fd9e 	bl	800472e <memset>
  char info1[30] = "";
 8003bf2:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <main+0x2dc>)
 8003bf4:	22de      	movs	r2, #222	; 0xde
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	4694      	mov	ip, r2
 8003bfa:	44bc      	add	ip, r7
 8003bfc:	4463      	add	r3, ip
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	3304      	adds	r3, #4
 8003c04:	221a      	movs	r2, #26
 8003c06:	2100      	movs	r1, #0
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 fd90 	bl	800472e <memset>
  //ndef message array of "tel:"
  char protocol2[30] = "tel::";
 8003c0e:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <main+0x2e0>)
 8003c10:	193a      	adds	r2, r7, r4
 8003c12:	18d1      	adds	r1, r2, r3
 8003c14:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <main+0x2e4>)
 8003c16:	000b      	movs	r3, r1
 8003c18:	6810      	ldr	r0, [r2, #0]
 8003c1a:	6018      	str	r0, [r3, #0]
 8003c1c:	8892      	ldrh	r2, [r2, #4]
 8003c1e:	809a      	strh	r2, [r3, #4]
 8003c20:	2306      	movs	r3, #6
 8003c22:	18cb      	adds	r3, r1, r3
 8003c24:	2218      	movs	r2, #24
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 fd80 	bl	800472e <memset>
  char link2[50] = "01121312856";
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <main+0x2e8>)
 8003c30:	193a      	adds	r2, r7, r4
 8003c32:	18d1      	adds	r1, r2, r3
 8003c34:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <main+0x2ec>)
 8003c36:	000b      	movs	r3, r1
 8003c38:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003c3a:	c361      	stmia	r3!, {r0, r5, r6}
 8003c3c:	000b      	movs	r3, r1
 8003c3e:	330c      	adds	r3, #12
 8003c40:	2226      	movs	r2, #38	; 0x26
 8003c42:	2100      	movs	r1, #0
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 fd72 	bl	800472e <memset>
  char info2[30] = "";
 8003c4a:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <main+0x2f0>)
 8003c4c:	22de      	movs	r2, #222	; 0xde
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4694      	mov	ip, r2
 8003c52:	44bc      	add	ip, r7
 8003c54:	4463      	add	r3, ip
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	221a      	movs	r2, #26
 8003c5e:	2100      	movs	r1, #0
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 fd64 	bl	800472e <memset>
  //ndef message array of mailto:
  char email[30] = "kahlok0424@gmail.com";
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <main+0x2f4>)
 8003c68:	193a      	adds	r2, r7, r4
 8003c6a:	18d1      	adds	r1, r2, r3
 8003c6c:	4a3e      	ldr	r2, [pc, #248]	; (8003d68 <main+0x2f8>)
 8003c6e:	000b      	movs	r3, r1
 8003c70:	ca61      	ldmia	r2!, {r0, r5, r6}
 8003c72:	c361      	stmia	r3!, {r0, r5, r6}
 8003c74:	ca21      	ldmia	r2!, {r0, r5}
 8003c76:	c321      	stmia	r3!, {r0, r5}
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	2315      	movs	r3, #21
 8003c7e:	18cb      	adds	r3, r1, r3
 8003c80:	2209      	movs	r2, #9
 8003c82:	2100      	movs	r1, #0
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 fd52 	bl	800472e <memset>
  char subject[10] = "Test";
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <main+0x2fc>)
 8003c8c:	193a      	adds	r2, r7, r4
 8003c8e:	18d1      	adds	r1, r2, r3
 8003c90:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <main+0x300>)
 8003c92:	000b      	movs	r3, r1
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	6018      	str	r0, [r3, #0]
 8003c98:	7912      	ldrb	r2, [r2, #4]
 8003c9a:	711a      	strb	r2, [r3, #4]
 8003c9c:	2305      	movs	r3, #5
 8003c9e:	18cb      	adds	r3, r1, r3
 8003ca0:	2205      	movs	r2, #5
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 fd42 	bl	800472e <memset>
  char body[65] = "hello world we are the world, test sending email with content";
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <main+0x304>)
 8003cac:	0025      	movs	r5, r4
 8003cae:	193a      	adds	r2, r7, r4
 8003cb0:	18d4      	adds	r4, r2, r3
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <main+0x308>)
 8003cb4:	0020      	movs	r0, r4
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	233e      	movs	r3, #62	; 0x3e
 8003cba:	001a      	movs	r2, r3
 8003cbc:	f000 fd2e 	bl	800471c <memcpy>
 8003cc0:	233e      	movs	r3, #62	; 0x3e
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 fd30 	bl	800472e <memset>
  //ndef message array of launch android apps
  char appName[50] = "com.supercell.clashofclans";
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <main+0x30c>)
 8003cd0:	002c      	movs	r4, r5
 8003cd2:	193a      	adds	r2, r7, r4
 8003cd4:	18d1      	adds	r1, r2, r3
 8003cd6:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <main+0x310>)
 8003cd8:	000b      	movs	r3, r1
 8003cda:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003cdc:	c331      	stmia	r3!, {r0, r4, r5}
 8003cde:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ce0:	c331      	stmia	r3!, {r0, r4, r5}
 8003ce2:	8810      	ldrh	r0, [r2, #0]
 8003ce4:	8018      	strh	r0, [r3, #0]
 8003ce6:	7892      	ldrb	r2, [r2, #2]
 8003ce8:	709a      	strb	r2, [r3, #2]
 8003cea:	231b      	movs	r3, #27
 8003cec:	18cb      	adds	r3, r1, r3
 8003cee:	2217      	movs	r2, #23
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 fd1b 	bl	800472e <memset>

  //initNFC(&hi2c1, NFC_USERMEMORY);
  HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,0);
 8003cf8:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <main+0x314>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fc ff6e 	bl	8000be0 <HAL_GPIO_WritePin>
  //i2CWriteProtectUserArea(password, NO_WRITEPROTECT);
  //writeURI(protocol,link,info);
  //writeURI(protocol1,link1,info1);
  //writeURI(protocol2,link2,info2);
  //writeLaunchApp(appName);
  writeMailto(email,subject,body);
 8003d04:	2338      	movs	r3, #56	; 0x38
 8003d06:	18fa      	adds	r2, r7, r3
 8003d08:	237c      	movs	r3, #124	; 0x7c
 8003d0a:	18f9      	adds	r1, r7, r3
 8003d0c:	2388      	movs	r3, #136	; 0x88
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 fb59 	bl	80043c8 <writeMailto>
  //readDatafromMailbox(0x2018,received, 30);
  //NFC04A1_setRFMode(password,RF_ENABLE);
  //enableMailBox(password);
  //configFastTransferMode(password, FTM_ENABLE, 0x00);
  //getMailBoxMessage(received);
  HAL_Delay(50);
 8003d16:	2032      	movs	r0, #50	; 0x32
 8003d18:	f7fc fd02 	bl	8000720 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <main+0x2ac>
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	fffffc84 	.word	0xfffffc84
 8003d24:	fffffebc 	.word	0xfffffebc
 8003d28:	08004768 	.word	0x08004768
 8003d2c:	fffffe9c 	.word	0xfffffe9c
 8003d30:	0800477c 	.word	0x0800477c
 8003d34:	fffffe7c 	.word	0xfffffe7c
 8003d38:	0800479c 	.word	0x0800479c
 8003d3c:	fffffe5c 	.word	0xfffffe5c
 8003d40:	080047bc 	.word	0x080047bc
 8003d44:	fffffdc4 	.word	0xfffffdc4
 8003d48:	080047dc 	.word	0x080047dc
 8003d4c:	fffffda4 	.word	0xfffffda4
 8003d50:	fffffd84 	.word	0xfffffd84
 8003d54:	08004874 	.word	0x08004874
 8003d58:	fffffd50 	.word	0xfffffd50
 8003d5c:	08004894 	.word	0x08004894
 8003d60:	fffffd30 	.word	0xfffffd30
 8003d64:	fffffd10 	.word	0xfffffd10
 8003d68:	080048c8 	.word	0x080048c8
 8003d6c:	fffffd04 	.word	0xfffffd04
 8003d70:	080048e8 	.word	0x080048e8
 8003d74:	fffffcc0 	.word	0xfffffcc0
 8003d78:	080048f4 	.word	0x080048f4
 8003d7c:	fffffc8c 	.word	0xfffffc8c
 8003d80:	08004938 	.word	0x08004938
 8003d84:	50000400 	.word	0x50000400

08003d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b0a1      	sub	sp, #132	; 0x84
 8003d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8e:	2448      	movs	r4, #72	; 0x48
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	0018      	movs	r0, r3
 8003d94:	2338      	movs	r3, #56	; 0x38
 8003d96:	001a      	movs	r2, r3
 8003d98:	2100      	movs	r1, #0
 8003d9a:	f000 fcc8 	bl	800472e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d9e:	2338      	movs	r3, #56	; 0x38
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	0018      	movs	r0, r3
 8003da4:	2310      	movs	r3, #16
 8003da6:	001a      	movs	r2, r3
 8003da8:	2100      	movs	r1, #0
 8003daa:	f000 fcc0 	bl	800472e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	0018      	movs	r0, r3
 8003db2:	2334      	movs	r3, #52	; 0x34
 8003db4:	001a      	movs	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	f000 fcb9 	bl	800472e <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7fd fba1 	bl	8001508 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	22a0      	movs	r2, #160	; 0xa0
 8003dd0:	02d2      	lsls	r2, r2, #11
 8003dd2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fbdf 	bl	80015a0 <HAL_RCC_OscConfig>
 8003de2:	1e03      	subs	r3, r0, #0
 8003de4:	d001      	beq.n	8003dea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003de6:	f000 f955 	bl	8004094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dea:	2138      	movs	r1, #56	; 0x38
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2207      	movs	r2, #7
 8003df0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	2201      	movs	r2, #1
 8003df6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2200      	movs	r2, #0
 8003e02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	2100      	movs	r1, #0
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fd fee9 	bl	8001be0 <HAL_RCC_ClockConfig>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d001      	beq.n	8003e16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003e12:	f000 f93f 	bl	8004094 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	2260      	movs	r2, #96	; 0x60
 8003e1a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7fe f882 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003e34:	f000 f92e 	bl	8004094 <Error_Handler>
  }
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b021      	add	sp, #132	; 0x84
 8003e3e:	bd90      	pop	{r4, r7, pc}

08003e40 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2101      	movs	r1, #1
 8003e48:	2007      	movs	r0, #7
 8003e4a:	f7fc fd33 	bl	80008b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003e4e:	2007      	movs	r0, #7
 8003e50:	f7fc fd45 	bl	80008de <HAL_NVIC_EnableIRQ>
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <MX_I2C1_Init+0x78>)
 8003e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e68:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <MX_I2C1_Init+0x7c>)
 8003e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e72:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7fc fefd 	bl	8000c98 <HAL_I2C_Init>
 8003e9e:	1e03      	subs	r3, r0, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ea2:	f000 f8f7 	bl	8004094 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7fd fa94 	bl	80013d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003eb4:	f000 f8ee 	bl	8004094 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <MX_I2C1_Init+0x74>)
 8003eba:	2100      	movs	r1, #0
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fd fad7 	bl	8001470 <HAL_I2CEx_ConfigDigitalFilter>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ec6:	f000 f8e5 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2000002c 	.word	0x2000002c
 8003ed4:	40005400 	.word	0x40005400
 8003ed8:	2000090e 	.word	0x2000090e

08003edc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003ee2:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <MX_LPUART1_UART_Init+0x98>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <MX_LPUART1_UART_Init+0x9c>)
 8003eea:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	0552      	lsls	r2, r2, #21
 8003ef2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f02:	220c      	movs	r2, #12
 8003f04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003f1e:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fe f9bc 	bl	80022a4 <HAL_UART_Init>
 8003f2c:	1e03      	subs	r3, r0, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f30:	f000 f8b0 	bl	8004094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f36:	2100      	movs	r1, #0
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fc77 	bl	800382c <HAL_UARTEx_SetTxFifoThreshold>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d001      	beq.n	8003f46 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f42:	f000 f8a7 	bl	8004094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f48:	2100      	movs	r1, #0
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fcae 	bl	80038ac <HAL_UARTEx_SetRxFifoThreshold>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f54:	f000 f89e 	bl	8004094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <MX_LPUART1_UART_Init+0x94>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fc2c 	bl	80037b8 <HAL_UARTEx_DisableFifoMode>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f64:	f000 f896 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	20000078 	.word	0x20000078
 8003f74:	40008000 	.word	0x40008000
 8003f78:	00033324 	.word	0x00033324

08003f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
 8003f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f82:	2414      	movs	r4, #20
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	0018      	movs	r0, r3
 8003f88:	2314      	movs	r3, #20
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f000 fbce 	bl	800472e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f92:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f96:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003f98:	2104      	movs	r1, #4
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003faa:	4b37      	ldr	r3, [pc, #220]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	2220      	movs	r2, #32
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <MX_GPIO_Init+0x10c>)
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	00d9      	lsls	r1, r3, #3
 8003ff6:	23a0      	movs	r3, #160	; 0xa0
 8003ff8:	05db      	lsls	r3, r3, #23
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7fc fdef 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <MX_GPIO_Init+0x110>)
 8004004:	2200      	movs	r2, #0
 8004006:	2130      	movs	r1, #48	; 0x30
 8004008:	0018      	movs	r0, r3
 800400a:	f7fc fde9 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_IT_Pin */
  GPIO_InitStruct.Pin = RF_IT_Pin;
 800400e:	193b      	adds	r3, r7, r4
 8004010:	2240      	movs	r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004014:	193b      	adds	r3, r7, r4
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <MX_GPIO_Init+0x114>)
 8004018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	193b      	adds	r3, r7, r4
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RF_IT_GPIO_Port, &GPIO_InitStruct);
 8004020:	193a      	adds	r2, r7, r4
 8004022:	23a0      	movs	r3, #160	; 0xa0
 8004024:	05db      	lsls	r3, r3, #23
 8004026:	0011      	movs	r1, r2
 8004028:	0018      	movs	r0, r3
 800402a:	f7fc fc75 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800402e:	0021      	movs	r1, r4
 8004030:	187b      	adds	r3, r7, r1
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	00d2      	lsls	r2, r2, #3
 8004036:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004038:	187b      	adds	r3, r7, r1
 800403a:	2201      	movs	r2, #1
 800403c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 800404a:	000c      	movs	r4, r1
 800404c:	187a      	adds	r2, r7, r1
 800404e:	23a0      	movs	r3, #160	; 0xa0
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f7fc fc5f 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 800405a:	0021      	movs	r1, r4
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2230      	movs	r2, #48	; 0x30
 8004060:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2201      	movs	r2, #1
 8004066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	187b      	adds	r3, r7, r1
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406e:	187b      	adds	r3, r7, r1
 8004070:	2200      	movs	r2, #0
 8004072:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	187b      	adds	r3, r7, r1
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <MX_GPIO_Init+0x110>)
 8004078:	0019      	movs	r1, r3
 800407a:	0010      	movs	r0, r2
 800407c:	f7fc fc4c 	bl	8000918 <HAL_GPIO_Init>

}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b00b      	add	sp, #44	; 0x2c
 8004086:	bd90      	pop	{r4, r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	50000400 	.word	0x50000400
 8004090:	10210000 	.word	0x10210000

08004094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <writeT5TCCFile>:
#include <string.h>

/*
 * @brief Ndef area has to be multiple of 8bytes
 */
uint16_t writeT5TCCFile(ADDRESSING_MODE address_mode, uint16_t ndef_area){
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	0002      	movs	r2, r0
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	1c0a      	adds	r2, r1, #0
 80040ae:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[4];
	buffer[0] = address_mode;
 80040b0:	230c      	movs	r3, #12
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	1dfa      	adds	r2, r7, #7
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	701a      	strb	r2, [r3, #0]

	if( (ndef_area%8) != 0 || ndef_area > 512){
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	2207      	movs	r2, #7
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <writeT5TCCFile+0x36>
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	881a      	ldrh	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d901      	bls.n	80040d8 <writeT5TCCFile+0x3a>
		return NDEF_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e014      	b.n	8004102 <writeT5TCCFile+0x64>
	}
	else{
		buffer[2] = ndef_area/8;
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	08db      	lsrs	r3, r3, #3
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	210c      	movs	r1, #12
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	709a      	strb	r2, [r3, #2]
		//byte 1 = NFC forum tag type V version , v 1.0
		buffer[1] = NFCT5_VERSION_V1_0;
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	705a      	strb	r2, [r3, #1]
		//byte 2 = additional features, Multiple block read command = 0x01
		buffer[3] = 0x00;
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	2200      	movs	r2, #0
 80040f2:	70da      	strb	r2, [r3, #3]
		writeUserMemory(0x00,buffer,4);
 80040f4:	187b      	adds	r3, r7, r1
 80040f6:	2204      	movs	r2, #4
 80040f8:	0019      	movs	r1, r3
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 f998 	bl	8004430 <writeUserMemory>
		return NDEF_OK;
 8004100:	2300      	movs	r3, #0
	}

}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b004      	add	sp, #16
 8004108:	bd80      	pop	{r7, pc}

0800410a <writeT5TLVBlock>:

uint8_t writeT5TLVBlock(TAG5_TLV type,uint16_t length){
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	0002      	movs	r2, r0
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	1c0a      	adds	r2, r1, #0
 800411a:	801a      	strh	r2, [r3, #0]
	 * L = length field = the length of messages in tag field
	 * V = value of message which is the ndef message
	 */
	uint8_t TLV[4];
	//Tag filed
	TLV[0] = type;
 800411c:	230c      	movs	r3, #12
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	1dfa      	adds	r2, r7, #7
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]

	//length field
	if( length >255){
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d917      	bls.n	800415e <writeT5TLVBlock+0x54>
		TLV[1] = 0xff;
 800412e:	210c      	movs	r1, #12
 8004130:	187b      	adds	r3, r7, r1
 8004132:	22ff      	movs	r2, #255	; 0xff
 8004134:	705a      	strb	r2, [r3, #1]
		TLV[2] = (length & 0xFF00) >> 8;
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29b      	uxth	r3, r3
 800413e:	b2da      	uxtb	r2, r3
 8004140:	187b      	adds	r3, r7, r1
 8004142:	709a      	strb	r2, [r3, #2]
		TLV[3] = length & 0x00FF;
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	187b      	adds	r3, r7, r1
 800414c:	70da      	strb	r2, [r3, #3]
		writeUserMemory(0x04,TLV,4);
 800414e:	187b      	adds	r3, r7, r1
 8004150:	2204      	movs	r2, #4
 8004152:	0019      	movs	r1, r3
 8004154:	2004      	movs	r0, #4
 8004156:	f000 f96b 	bl	8004430 <writeUserMemory>
		return 4;
 800415a:	2304      	movs	r3, #4
 800415c:	e00c      	b.n	8004178 <writeT5TLVBlock+0x6e>
	}else{
		TLV[1] = length;
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	210c      	movs	r1, #12
 8004166:	187b      	adds	r3, r7, r1
 8004168:	705a      	strb	r2, [r3, #1]
		writeUserMemory(0x04,TLV,2);
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2202      	movs	r2, #2
 800416e:	0019      	movs	r1, r3
 8004170:	2004      	movs	r0, #4
 8004172:	f000 f95d 	bl	8004430 <writeUserMemory>
		return 2;
 8004176:	2302      	movs	r3, #2
	}
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}

08004180 <generateMailtoNdef>:
	  }

	 return (uint16_t)index;
}

uint16_t generateMailtoNdef(char *email, char *subject, char *body, uint8_t *ndef){
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]

	char msg1[10] = "subject=";
 800418e:	231c      	movs	r3, #28
 8004190:	18f9      	adds	r1, r7, r3
 8004192:	4a89      	ldr	r2, [pc, #548]	; (80043b8 <generateMailtoNdef+0x238>)
 8004194:	000b      	movs	r3, r1
 8004196:	ca11      	ldmia	r2!, {r0, r4}
 8004198:	c311      	stmia	r3!, {r0, r4}
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	2309      	movs	r3, #9
 80041a0:	2200      	movs	r2, #0
 80041a2:	54ca      	strb	r2, [r1, r3]
	char msg2[8] = "body=";
 80041a4:	2314      	movs	r3, #20
 80041a6:	18f9      	adds	r1, r7, r3
 80041a8:	4a84      	ldr	r2, [pc, #528]	; (80043bc <generateMailtoNdef+0x23c>)
 80041aa:	000b      	movs	r3, r1
 80041ac:	6810      	ldr	r0, [r2, #0]
 80041ae:	6018      	str	r0, [r3, #0]
 80041b0:	8892      	ldrh	r2, [r2, #4]
 80041b2:	809a      	strh	r2, [r3, #4]
 80041b4:	2306      	movs	r3, #6
 80041b6:	2200      	movs	r2, #0
 80041b8:	52ca      	strh	r2, [r1, r3]
	uint32_t uriSize=0, index =0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041be:	2300      	movs	r3, #0
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	 *  RECORD HEADER = FLAGS | TYPE LENGTH | PAYLOAD LENGTH x4 | ID LENGTH | PAYLOAD TYPE | PAYLOAD ID
	 *  FLAGS = MB | ME | CF | SR | ID LENGTH | TNF ( Well Known type = 0x01)
	 *  PAY LOAD TYPE = "U": URI 0x55, "T": test 0x54, "Sp": smart poster 0x5370
	 */

	   uriSize = 8 + strlen(email) + strlen(subject) + strlen(body) + 15;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fb ff9d 	bl	8000104 <strlen>
 80041ca:	0004      	movs	r4, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fb ff98 	bl	8000104 <strlen>
 80041d4:	0003      	movs	r3, r0
 80041d6:	18e4      	adds	r4, r4, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f7fb ff92 	bl	8000104 <strlen>
 80041e0:	0003      	movs	r3, r0
 80041e2:	18e3      	adds	r3, r4, r3
 80041e4:	3317      	adds	r3, #23
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28

	  /* URI header */
	  ndef[index] = 0xc0 | NDEF_TNF_WELL_KNOWN;
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	22c1      	movs	r2, #193	; 0xc1
 80041f0:	701a      	strb	r2, [r3, #0]
	  if( uriSize < 256 ) ndef[index] |= 0x10;           // Set the SR bit
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2bff      	cmp	r3, #255	; 0xff
 80041f6:	d80a      	bhi.n	800420e <generateMailtoNdef+0x8e>
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	18cb      	adds	r3, r1, r3
 8004206:	2110      	movs	r1, #16
 8004208:	430a      	orrs	r2, r1
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
	  index++;
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	3301      	adds	r3, #1
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c

	  ndef[index++] = URI_TYPE_LENGTH;
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
	  if( uriSize > 255 )
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	2bff      	cmp	r3, #255	; 0xff
 8004226:	d923      	bls.n	8004270 <generateMailtoNdef+0xf0>
	  {
	    ndef[index++] = (uriSize & 0xFF000000) >> 24;
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	0e19      	lsrs	r1, r3, #24
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	18d3      	adds	r3, r2, r3
 8004236:	b2ca      	uxtb	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = (uriSize & 0x00FF0000) >> 16;
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	0c19      	lsrs	r1, r3, #16
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	b2ca      	uxtb	r2, r1
 800424a:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = (uriSize & 0x0000FF00) >> 8;
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	0a19      	lsrs	r1, r3, #8
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	18d3      	adds	r3, r2, r3
 800425a:	b2ca      	uxtb	r2, r1
 800425c:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = uriSize & 0x000000FF;
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e007      	b.n	8004280 <generateMailtoNdef+0x100>
	  }
	  else
	  {
		  ndef[index++] = (uint8_t)uriSize;
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
	  }

	  memcpy( &ndef[index], URI_TYPE, URI_TYPE_LENGTH );
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	18d3      	adds	r3, r2, r3
 8004286:	494e      	ldr	r1, [pc, #312]	; (80043c0 <generateMailtoNdef+0x240>)
 8004288:	2201      	movs	r2, #1
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fa46 	bl	800471c <memcpy>
	  index += URI_TYPE_LENGTH;
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	3301      	adds	r3, #1
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c

	  ndef[index++] = 0x00;
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	18d3      	adds	r3, r2, r3
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
	  //the URI identification code of mailto:
	  memcpy( &ndef[index], URI_0x06_STRING, strlen(URI_0x06_STRING) );
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	4946      	ldr	r1, [pc, #280]	; (80043c4 <generateMailtoNdef+0x244>)
 80042ac:	2207      	movs	r2, #7
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 fa34 	bl	800471c <memcpy>
	  index += strlen(URI_0x06_STRING);
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	3307      	adds	r3, #7
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	  memcpy( &ndef[index], email, strlen(email) );
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	18d4      	adds	r4, r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7fb ff1e 	bl	8000104 <strlen>
 80042c8:	0002      	movs	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	0019      	movs	r1, r3
 80042ce:	0020      	movs	r0, r4
 80042d0:	f000 fa24 	bl	800471c <memcpy>
	  index += strlen(email);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fb ff14 	bl	8000104 <strlen>
 80042dc:	0002      	movs	r2, r0
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //begin of subject message
	  ndef[index++] = 0x3f; //"?"
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	223f      	movs	r2, #63	; 0x3f
 80042f0:	701a      	strb	r2, [r3, #0]
	  memcpy( &ndef[index], msg1, strlen(msg1));
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	18d4      	adds	r4, r2, r3
 80042f8:	251c      	movs	r5, #28
 80042fa:	197b      	adds	r3, r7, r5
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fb ff01 	bl	8000104 <strlen>
 8004302:	0002      	movs	r2, r0
 8004304:	197b      	adds	r3, r7, r5
 8004306:	0019      	movs	r1, r3
 8004308:	0020      	movs	r0, r4
 800430a:	f000 fa07 	bl	800471c <memcpy>
	  index += strlen(msg1);
 800430e:	197b      	adds	r3, r7, r5
 8004310:	0018      	movs	r0, r3
 8004312:	f7fb fef7 	bl	8000104 <strlen>
 8004316:	0002      	movs	r2, r0
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	189b      	adds	r3, r3, r2
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  memcpy( &ndef[index], subject, strlen(subject));
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	18d4      	adds	r4, r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	0018      	movs	r0, r3
 8004328:	f7fb feec 	bl	8000104 <strlen>
 800432c:	0002      	movs	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0019      	movs	r1, r3
 8004332:	0020      	movs	r0, r4
 8004334:	f000 f9f2 	bl	800471c <memcpy>
	  index += strlen(subject);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	0018      	movs	r0, r3
 800433c:	f7fb fee2 	bl	8000104 <strlen>
 8004340:	0002      	movs	r2, r0
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	189b      	adds	r3, r3, r2
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Begin of body message
	  ndef[index++] = 0x26;  //"&"
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	18d3      	adds	r3, r2, r3
 8004352:	2226      	movs	r2, #38	; 0x26
 8004354:	701a      	strb	r2, [r3, #0]
	  memcpy( &ndef[index], msg2, strlen(msg2));
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	18d4      	adds	r4, r2, r3
 800435c:	2514      	movs	r5, #20
 800435e:	197b      	adds	r3, r7, r5
 8004360:	0018      	movs	r0, r3
 8004362:	f7fb fecf 	bl	8000104 <strlen>
 8004366:	0002      	movs	r2, r0
 8004368:	197b      	adds	r3, r7, r5
 800436a:	0019      	movs	r1, r3
 800436c:	0020      	movs	r0, r4
 800436e:	f000 f9d5 	bl	800471c <memcpy>
	  index += strlen(msg2);
 8004372:	197b      	adds	r3, r7, r5
 8004374:	0018      	movs	r0, r3
 8004376:	f7fb fec5 	bl	8000104 <strlen>
 800437a:	0002      	movs	r2, r0
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	189b      	adds	r3, r3, r2
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
	  memcpy( &ndef[index], body, strlen(body));
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	18d4      	adds	r4, r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0018      	movs	r0, r3
 800438c:	f7fb feba 	bl	8000104 <strlen>
 8004390:	0002      	movs	r2, r0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0019      	movs	r1, r3
 8004396:	0020      	movs	r0, r4
 8004398:	f000 f9c0 	bl	800471c <memcpy>
	  index += strlen(body);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fb feb0 	bl	8000104 <strlen>
 80043a4:	0002      	movs	r2, r0
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	189b      	adds	r3, r3, r2
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	 return (uint16_t)index;
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	b29b      	uxth	r3, r3
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b00c      	add	sp, #48	; 0x30
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	08004988 	.word	0x08004988
 80043bc:	08004994 	.word	0x08004994
 80043c0:	08004970 	.word	0x08004970
 80043c4:	0800497c 	.word	0x0800497c

080043c8 <writeMailto>:
	size = generateUriNdef(protocol,link,tittle,ndef);
	offset= writeT5TLVBlock(NFC_TAG5_TLV_NDEF_MSG,size);
	writeUserMemory((0x04+offset), ndef, size);
}

void writeMailto(char *email, char *subject, char *body){
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b0c5      	sub	sp, #276	; 0x114
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]

	uint8_t ndef[250];
	uint16_t size;
	uint8_t offset;

	writeT5TCCFile(ONE_BYTE_ADDRESSING, 512);
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	0019      	movs	r1, r3
 80043da:	20e1      	movs	r0, #225	; 0xe1
 80043dc:	f7ff fe5f 	bl	800409e <writeT5TCCFile>
	size = generateMailtoNdef(email,subject,body,ndef);
 80043e0:	2587      	movs	r5, #135	; 0x87
 80043e2:	006d      	lsls	r5, r5, #1
 80043e4:	197c      	adds	r4, r7, r5
 80043e6:	2610      	movs	r6, #16
 80043e8:	19bb      	adds	r3, r7, r6
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fec6 	bl	8004180 <generateMailtoNdef>
 80043f4:	0003      	movs	r3, r0
 80043f6:	8023      	strh	r3, [r4, #0]
	offset= writeT5TLVBlock(NFC_TAG5_TLV_NDEF_MSG,size);
 80043f8:	230e      	movs	r3, #14
 80043fa:	33ff      	adds	r3, #255	; 0xff
 80043fc:	18fc      	adds	r4, r7, r3
 80043fe:	197b      	adds	r3, r7, r5
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	0019      	movs	r1, r3
 8004404:	2003      	movs	r0, #3
 8004406:	f7ff fe80 	bl	800410a <writeT5TLVBlock>
 800440a:	0003      	movs	r3, r0
 800440c:	7023      	strb	r3, [r4, #0]
	writeUserMemory((0x04+offset), ndef, size);
 800440e:	230e      	movs	r3, #14
 8004410:	33ff      	adds	r3, #255	; 0xff
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	3304      	adds	r3, #4
 800441a:	b298      	uxth	r0, r3
 800441c:	197b      	adds	r3, r7, r5
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	19bb      	adds	r3, r7, r6
 8004422:	0019      	movs	r1, r3
 8004424:	f000 f804 	bl	8004430 <writeUserMemory>
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b045      	add	sp, #276	; 0x114
 800442e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004430 <writeUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to write
 * @param number of bytes to write
 */
void writeUserMemory(uint16_t address, uint8_t *data, uint16_t n){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6039      	str	r1, [r7, #0]
 8004438:	0011      	movs	r1, r2
 800443a:	1dbb      	adds	r3, r7, #6
 800443c:	1c02      	adds	r2, r0, #0
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	1c0a      	adds	r2, r1, #0
 8004444:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < n;i++){
		temp[i] = data+i;
	}*/

		if(n>=60){
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	2b3b      	cmp	r3, #59	; 0x3b
 800444c:	d918      	bls.n	8004480 <writeUserMemory+0x50>
			I2CWrite(NFC_USERMEMORY, address, data, 60);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	1dbb      	adds	r3, r7, #6
 8004452:	8819      	ldrh	r1, [r3, #0]
 8004454:	233c      	movs	r3, #60	; 0x3c
 8004456:	20a6      	movs	r0, #166	; 0xa6
 8004458:	f7ff fad4 	bl	8003a04 <I2CWrite>
			NFC_Delay(100);
 800445c:	2064      	movs	r0, #100	; 0x64
 800445e:	f7ff fafb 	bl	8003a58 <NFC_Delay>
			I2CWrite(NFC_USERMEMORY, address+60, data+60, (n-60));
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	333c      	adds	r3, #60	; 0x3c
 8004468:	b299      	uxth	r1, r3
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	333c      	adds	r3, #60	; 0x3c
 800446e:	001a      	movs	r2, r3
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	3b3c      	subs	r3, #60	; 0x3c
 8004476:	b29b      	uxth	r3, r3
 8004478:	20a6      	movs	r0, #166	; 0xa6
 800447a:	f7ff fac3 	bl	8003a04 <I2CWrite>
		}else{
			I2CWrite(NFC_USERMEMORY, address, data, n);
		}
}
 800447e:	e008      	b.n	8004492 <writeUserMemory+0x62>
			I2CWrite(NFC_USERMEMORY, address, data, n);
 8004480:	1d3b      	adds	r3, r7, #4
 8004482:	8818      	ldrh	r0, [r3, #0]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	1dbb      	adds	r3, r7, #6
 8004488:	8819      	ldrh	r1, [r3, #0]
 800448a:	0003      	movs	r3, r0
 800448c:	20a6      	movs	r0, #166	; 0xa6
 800448e:	f7ff fab9 	bl	8003a04 <I2CWrite>
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b002      	add	sp, #8
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_MspInit+0x44>)
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_MspInit+0x44>)
 80044a8:	2101      	movs	r1, #1
 80044aa:	430a      	orrs	r2, r1
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_MspInit+0x44>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2201      	movs	r2, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_MspInit+0x44>)
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_MspInit+0x44>)
 80044c0:	2180      	movs	r1, #128	; 0x80
 80044c2:	0549      	lsls	r1, r1, #21
 80044c4:	430a      	orrs	r2, r1
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_MspInit+0x44>)
 80044ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	055b      	lsls	r3, r3, #21
 80044d0:	4013      	ands	r3, r2
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	2314      	movs	r3, #20
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	0018      	movs	r0, r3
 80044f2:	2314      	movs	r3, #20
 80044f4:	001a      	movs	r2, r3
 80044f6:	2100      	movs	r1, #0
 80044f8:	f000 f919 	bl	800472e <memset>
  if(hi2c->Instance==I2C1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_I2C_MspInit+0x8c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d130      	bne.n	8004568 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_I2C_MspInit+0x90>)
 8004508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_I2C_MspInit+0x90>)
 800450c:	2102      	movs	r1, #2
 800450e:	430a      	orrs	r2, r1
 8004510:	635a      	str	r2, [r3, #52]	; 0x34
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_I2C_MspInit+0x90>)
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	2202      	movs	r2, #2
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800451e:	2114      	movs	r1, #20
 8004520:	187b      	adds	r3, r7, r1
 8004522:	22c0      	movs	r2, #192	; 0xc0
 8004524:	0092      	lsls	r2, r2, #2
 8004526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004528:	187b      	adds	r3, r7, r1
 800452a:	2212      	movs	r2, #18
 800452c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2201      	movs	r2, #1
 8004532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800453a:	187b      	adds	r3, r7, r1
 800453c:	2206      	movs	r2, #6
 800453e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004540:	187b      	adds	r3, r7, r1
 8004542:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <HAL_I2C_MspInit+0x94>)
 8004544:	0019      	movs	r1, r3
 8004546:	0010      	movs	r0, r2
 8004548:	f7fc f9e6 	bl	8000918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_I2C_MspInit+0x90>)
 800454e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_I2C_MspInit+0x90>)
 8004552:	2180      	movs	r1, #128	; 0x80
 8004554:	0389      	lsls	r1, r1, #14
 8004556:	430a      	orrs	r2, r1
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_I2C_MspInit+0x90>)
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	039b      	lsls	r3, r3, #14
 8004562:	4013      	ands	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b00a      	add	sp, #40	; 0x28
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40005400 	.word	0x40005400
 8004574:	40021000 	.word	0x40021000
 8004578:	50000400 	.word	0x50000400

0800457c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	2314      	movs	r3, #20
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	0018      	movs	r0, r3
 800458a:	2314      	movs	r3, #20
 800458c:	001a      	movs	r2, r3
 800458e:	2100      	movs	r1, #0
 8004590:	f000 f8cd 	bl	800472e <memset>
  if(huart->Instance==LPUART1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_UART_MspInit+0x8c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d130      	bne.n	8004600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_UART_MspInit+0x90>)
 80045a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_UART_MspInit+0x90>)
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	0349      	lsls	r1, r1, #13
 80045a8:	430a      	orrs	r2, r1
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80045ac:	4b17      	ldr	r3, [pc, #92]	; (800460c <HAL_UART_MspInit+0x90>)
 80045ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	035b      	lsls	r3, r3, #13
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <HAL_UART_MspInit+0x90>)
 80045bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_UART_MspInit+0x90>)
 80045c0:	2101      	movs	r1, #1
 80045c2:	430a      	orrs	r2, r1
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_UART_MspInit+0x90>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	2201      	movs	r2, #1
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80045d2:	2114      	movs	r1, #20
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	220c      	movs	r2, #12
 80045d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	2202      	movs	r2, #2
 80045de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	2200      	movs	r2, #0
 80045ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	2206      	movs	r2, #6
 80045f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f2:	187a      	adds	r2, r7, r1
 80045f4:	23a0      	movs	r3, #160	; 0xa0
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fc f98c 	bl	8000918 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b00a      	add	sp, #40	; 0x28
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40008000 	.word	0x40008000
 800460c:	40021000 	.word	0x40021000

08004610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800461e:	e7fe      	b.n	800461e <HardFault_Handler+0x4>

08004620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004638:	f7fc f858 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0c0      	sub	sp, #256	; 0x100
 8004648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint8_t buffer[256];
	//getMailBoxMessage(buffer);
	HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,1);
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <EXTI4_15_IRQHandler+0x20>)
 800464c:	2201      	movs	r2, #1
 800464e:	2110      	movs	r1, #16
 8004650:	0018      	movs	r0, r3
 8004652:	f7fc fac5 	bl	8000be0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004656:	2040      	movs	r0, #64	; 0x40
 8004658:	f7fc fae0 	bl	8000c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b040      	add	sp, #256	; 0x100
 8004662:	bd80      	pop	{r7, pc}
 8004664:	50000400 	.word	0x50000400

08004668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <SystemInit+0x14>)
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	0512      	lsls	r2, r2, #20
 8004672:	609a      	str	r2, [r3, #8]
#endif
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004680:	480d      	ldr	r0, [pc, #52]	; (80046b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004682:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004684:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004686:	e003      	b.n	8004690 <LoopCopyDataInit>

08004688 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800468a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800468c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800468e:	3104      	adds	r1, #4

08004690 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004690:	480b      	ldr	r0, [pc, #44]	; (80046c0 <LoopForever+0xa>)
  ldr r3, =_edata
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <LoopForever+0xe>)
  adds r2, r0, r1
 8004694:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004696:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004698:	d3f6      	bcc.n	8004688 <CopyDataInit>
  ldr r2, =_sbss
 800469a:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <LoopForever+0x12>)
  b LoopFillZerobss
 800469c:	e002      	b.n	80046a4 <LoopFillZerobss>

0800469e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800469e:	2300      	movs	r3, #0
  str  r3, [r2]
 80046a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a2:	3204      	adds	r2, #4

080046a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <LoopForever+0x16>)
  cmp r2, r3
 80046a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80046a8:	d3f9      	bcc.n	800469e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80046aa:	f7ff ffdd 	bl	8004668 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80046ae:	f000 f811 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046b2:	f7ff f9dd 	bl	8003a70 <main>

080046b6 <LoopForever>:

LoopForever:
    b LoopForever
 80046b6:	e7fe      	b.n	80046b6 <LoopForever>
  ldr   r0, =_estack
 80046b8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80046bc:	08004bb4 	.word	0x08004bb4
  ldr r0, =_sdata
 80046c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80046c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80046c8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80046cc:	20000104 	.word	0x20000104

080046d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046d0:	e7fe      	b.n	80046d0 <ADC1_COMP_IRQHandler>
	...

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	2600      	movs	r6, #0
 80046d8:	4d0c      	ldr	r5, [pc, #48]	; (800470c <__libc_init_array+0x38>)
 80046da:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	2600      	movs	r6, #0
 80046e6:	f000 f82b 	bl	8004740 <_init>
 80046ea:	4d0a      	ldr	r5, [pc, #40]	; (8004714 <__libc_init_array+0x40>)
 80046ec:	4c0a      	ldr	r4, [pc, #40]	; (8004718 <__libc_init_array+0x44>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	00b3      	lsls	r3, r6, #2
 80046fa:	58eb      	ldr	r3, [r5, r3]
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	00b3      	lsls	r3, r6, #2
 8004704:	58eb      	ldr	r3, [r5, r3]
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08004bac 	.word	0x08004bac
 8004710:	08004bac 	.word	0x08004bac
 8004714:	08004bac 	.word	0x08004bac
 8004718:	08004bb0 	.word	0x08004bb0

0800471c <memcpy>:
 800471c:	2300      	movs	r3, #0
 800471e:	b510      	push	{r4, lr}
 8004720:	429a      	cmp	r2, r3
 8004722:	d100      	bne.n	8004726 <memcpy+0xa>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	5ccc      	ldrb	r4, [r1, r3]
 8004728:	54c4      	strb	r4, [r0, r3]
 800472a:	3301      	adds	r3, #1
 800472c:	e7f8      	b.n	8004720 <memcpy+0x4>

0800472e <memset>:
 800472e:	0003      	movs	r3, r0
 8004730:	1812      	adds	r2, r2, r0
 8004732:	4293      	cmp	r3, r2
 8004734:	d100      	bne.n	8004738 <memset+0xa>
 8004736:	4770      	bx	lr
 8004738:	7019      	strb	r1, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	e7f9      	b.n	8004732 <memset+0x4>
	...

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
