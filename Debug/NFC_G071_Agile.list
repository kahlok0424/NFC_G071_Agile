
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004cf4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c454  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f2a  00000000  00000000  0002c488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002efd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bf3  00000000  00000000  0002fae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abbb  00000000  00000000  000466d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ecb6  00000000  00000000  0005128e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dff44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  000dffc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c50 	.word	0x08004c50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004c50 	.word	0x08004c50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f004 f9c4 	bl	80049c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f935 	bl	80008ee <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f904 	bl	80008a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d004      	beq.n	8000734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_Delay+0x40>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	f7ff ffe1 	bl	80006fc <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8f7      	bhi.n	8000736 <HAL_Delay+0x26>
  {
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000004 	.word	0x20000004

08000754 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	001a      	movs	r2, r3
 8000766:	231f      	movs	r3, #31
 8000768:	401a      	ands	r2, r3
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <NVIC_EnableIRQ+0x28>)
 800076c:	2101      	movs	r1, #1
 800076e:	4091      	lsls	r1, r2
 8000770:	000a      	movs	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	e000e100 	.word	0xe000e100

08000780 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b7f      	cmp	r3, #127	; 0x7f
 8000794:	d932      	bls.n	80007fc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000796:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <NVIC_SetPriority+0xd4>)
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	0019      	movs	r1, r3
 800079e:	230f      	movs	r3, #15
 80007a0:	400b      	ands	r3, r1
 80007a2:	3b08      	subs	r3, #8
 80007a4:	089b      	lsrs	r3, r3, #2
 80007a6:	3306      	adds	r3, #6
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	18d3      	adds	r3, r2, r3
 80007ac:	3304      	adds	r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1dfa      	adds	r2, r7, #7
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	0011      	movs	r1, r2
 80007b6:	2203      	movs	r2, #3
 80007b8:	400a      	ands	r2, r1
 80007ba:	00d2      	lsls	r2, r2, #3
 80007bc:	21ff      	movs	r1, #255	; 0xff
 80007be:	4091      	lsls	r1, r2
 80007c0:	000a      	movs	r2, r1
 80007c2:	43d2      	mvns	r2, r2
 80007c4:	401a      	ands	r2, r3
 80007c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	401a      	ands	r2, r3
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0018      	movs	r0, r3
 80007d6:	2303      	movs	r3, #3
 80007d8:	4003      	ands	r3, r0
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007de:	481d      	ldr	r0, [pc, #116]	; (8000854 <NVIC_SetPriority+0xd4>)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001c      	movs	r4, r3
 80007e6:	230f      	movs	r3, #15
 80007e8:	4023      	ands	r3, r4
 80007ea:	3b08      	subs	r3, #8
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	3306      	adds	r3, #6
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	18c3      	adds	r3, r0, r3
 80007f6:	3304      	adds	r3, #4
 80007f8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fa:	e027      	b.n	800084c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	089b      	lsrs	r3, r3, #2
 8000806:	33c0      	adds	r3, #192	; 0xc0
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	589b      	ldr	r3, [r3, r2]
 800080c:	1dfa      	adds	r2, r7, #7
 800080e:	7812      	ldrb	r2, [r2, #0]
 8000810:	0011      	movs	r1, r2
 8000812:	2203      	movs	r2, #3
 8000814:	400a      	ands	r2, r1
 8000816:	00d2      	lsls	r2, r2, #3
 8000818:	21ff      	movs	r1, #255	; 0xff
 800081a:	4091      	lsls	r1, r2
 800081c:	000a      	movs	r2, r1
 800081e:	43d2      	mvns	r2, r2
 8000820:	401a      	ands	r2, r3
 8000822:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	401a      	ands	r2, r3
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	0018      	movs	r0, r3
 8000832:	2303      	movs	r3, #3
 8000834:	4003      	ands	r3, r0
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <NVIC_SetPriority+0xd8>)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	430a      	orrs	r2, r1
 8000846:	33c0      	adds	r3, #192	; 0xc0
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	501a      	str	r2, [r3, r0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b003      	add	sp, #12
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	e000e100 	.word	0xe000e100

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a0c      	ldr	r2, [pc, #48]	; (800089c <SysTick_Config+0x40>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d901      	bls.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e010      	b.n	8000894 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <SysTick_Config+0x44>)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	3a01      	subs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	2301      	movs	r3, #1
 800087c:	425b      	negs	r3, r3
 800087e:	2103      	movs	r1, #3
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ff7d 	bl	8000780 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SysTick_Config+0x44>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x44>)
 800088e:	2207      	movs	r2, #7
 8000890:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000892:	2300      	movs	r3, #0
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	00ffffff 	.word	0x00ffffff
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	210f      	movs	r1, #15
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <NVIC_SetPriority>
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	0002      	movs	r2, r0
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ff37 	bl	8000754 <NVIC_EnableIRQ>
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ffaf 	bl	800085c <SysTick_Config>
 80008fe:	0003      	movs	r3, r0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000916:	e147      	b.n	8000ba8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2101      	movs	r1, #1
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	4091      	lsls	r1, r2
 8000922:	000a      	movs	r2, r1
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d100      	bne.n	8000930 <HAL_GPIO_Init+0x28>
 800092e:	e138      	b.n	8000ba2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x38>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d123      	bne.n	8000988 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	58d3      	ldr	r3, [r2, r3]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2207      	movs	r2, #7
 8000952:	4013      	ands	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	43da      	mvns	r2, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	2107      	movs	r1, #7
 800096c:	400b      	ands	r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	409a      	lsls	r2, r3
 8000972:	0013      	movs	r3, r2
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	6939      	ldr	r1, [r7, #16]
 8000986:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	409a      	lsls	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	43da      	mvns	r2, r3
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2203      	movs	r2, #3
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d00b      	beq.n	80009dc <HAL_GPIO_Init+0xd4>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d007      	beq.n	80009dc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d0:	2b11      	cmp	r3, #17
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b12      	cmp	r3, #18
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	055b      	lsls	r3, r3, #21
 8000a76:	4013      	ands	r3, r2
 8000a78:	d100      	bne.n	8000a7c <HAL_GPIO_Init+0x174>
 8000a7a:	e092      	b.n	8000ba2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a7c:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3318      	adds	r3, #24
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	589b      	ldr	r3, [r3, r2]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	220f      	movs	r2, #15
 8000a94:	409a      	lsls	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x1ca>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x1c6>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x1c2>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a43      	ldr	r2, [pc, #268]	; (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x1be>
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x1cc>
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x1cc>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x1cc>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x1cc>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	400a      	ands	r2, r1
 8000ada:	00d2      	lsls	r2, r2, #3
 8000adc:	4093      	lsls	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ae4:	4936      	ldr	r1, [pc, #216]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3318      	adds	r3, #24
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	58d3      	ldr	r3, [r2, r3]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	025b      	lsls	r3, r3, #9
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b18:	4929      	ldr	r1, [pc, #164]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b20:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b22:	2384      	movs	r3, #132	; 0x84
 8000b24:	58d3      	ldr	r3, [r2, r3]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	029b      	lsls	r3, r3, #10
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b46:	491e      	ldr	r1, [pc, #120]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b48:	2284      	movs	r2, #132	; 0x84
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	035b      	lsls	r3, r3, #13
 8000b66:	4013      	ands	r3, r2
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43da      	mvns	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	039b      	lsls	r3, r3, #14
 8000b90:	4013      	ands	r3, r2
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1e13      	subs	r3, r2, #0
 8000bb2:	d000      	beq.n	8000bb6 <HAL_GPIO_Init+0x2ae>
 8000bb4:	e6b0      	b.n	8000918 <HAL_GPIO_Init+0x10>
  }
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	50000400 	.word	0x50000400
 8000bc8:	50000800 	.word	0x50000800
 8000bcc:	50000c00 	.word	0x50000c00

08000bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	0008      	movs	r0, r1
 8000bda:	0011      	movs	r1, r2
 8000bdc:	1cbb      	adds	r3, r7, #2
 8000bde:	1c02      	adds	r2, r0, #0
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	1c7b      	adds	r3, r7, #1
 8000be4:	1c0a      	adds	r2, r1, #0
 8000be6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000be8:	1c7b      	adds	r3, r7, #1
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf0:	1cbb      	adds	r3, r7, #2
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf8:	e003      	b.n	8000c02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfa:	1cbb      	adds	r3, r7, #2
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	1dba      	adds	r2, r7, #6
 8000c1e:	8812      	ldrh	r2, [r2, #0]
 8000c20:	4013      	ands	r3, r2
 8000c22:	d008      	beq.n	8000c36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c26:	1dba      	adds	r2, r7, #6
 8000c28:	8812      	ldrh	r2, [r2, #0]
 8000c2a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 f815 	bl	8000c60 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	1dba      	adds	r2, r7, #6
 8000c3c:	8812      	ldrh	r2, [r2, #0]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d008      	beq.n	8000c54 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c44:	1dba      	adds	r2, r7, #6
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 f810 	bl	8000c74 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021800 	.word	0x40021800

08000c60 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e082      	b.n	8000da0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2241      	movs	r2, #65	; 0x41
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d107      	bne.n	8000cb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	2100      	movs	r1, #0
 8000cac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f003 fea9 	bl	8004a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2241      	movs	r2, #65	; 0x41
 8000cba:	2124      	movs	r1, #36	; 0x24
 8000cbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	438a      	bics	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4934      	ldr	r1, [pc, #208]	; (8000da8 <HAL_I2C_Init+0x120>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4931      	ldr	r1, [pc, #196]	; (8000dac <HAL_I2C_Init+0x124>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d108      	bne.n	8000d06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0209      	lsls	r1, r1, #8
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	e007      	b.n	8000d16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2184      	movs	r1, #132	; 0x84
 8000d10:	0209      	lsls	r1, r1, #8
 8000d12:	430a      	orrs	r2, r1
 8000d14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d104      	bne.n	8000d28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	491f      	ldr	r1, [pc, #124]	; (8000db0 <HAL_I2C_Init+0x128>)
 8000d34:	430a      	orrs	r2, r1
 8000d36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	491a      	ldr	r1, [pc, #104]	; (8000dac <HAL_I2C_Init+0x124>)
 8000d44:	400a      	ands	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	0011      	movs	r1, r2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	021a      	lsls	r2, r3, #8
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69d9      	ldr	r1, [r3, #28]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2241      	movs	r2, #65	; 0x41
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2242      	movs	r2, #66	; 0x42
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	f0ffffff 	.word	0xf0ffffff
 8000dac:	ffff7fff 	.word	0xffff7fff
 8000db0:	02008000 	.word	0x02008000

08000db4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	000c      	movs	r4, r1
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	1c22      	adds	r2, r4, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	2308      	movs	r3, #8
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	1c02      	adds	r2, r0, #0
 8000dd0:	801a      	strh	r2, [r3, #0]
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	1c0a      	adds	r2, r1, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2241      	movs	r2, #65	; 0x41
 8000ddc:	5c9b      	ldrb	r3, [r3, r2]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	d000      	beq.n	8000de6 <HAL_I2C_Mem_Write+0x32>
 8000de4:	e10c      	b.n	8001000 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_I2C_Mem_Write+0x42>
 8000dec:	232c      	movs	r3, #44	; 0x2c
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0ff      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	5c9b      	ldrb	r3, [r3, r2]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_I2C_Mem_Write+0x5c>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e0f8      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2240      	movs	r2, #64	; 0x40
 8000e14:	2101      	movs	r1, #1
 8000e16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e18:	f7ff fc70 	bl	80006fc <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	0219      	lsls	r1, r3, #8
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2319      	movs	r3, #25
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f000 fb0b 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0e3      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2241      	movs	r2, #65	; 0x41
 8000e3e:	2121      	movs	r1, #33	; 0x21
 8000e40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2242      	movs	r2, #66	; 0x42
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	222c      	movs	r2, #44	; 0x2c
 8000e5a:	18ba      	adds	r2, r7, r2
 8000e5c:	8812      	ldrh	r2, [r2, #0]
 8000e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	881c      	ldrh	r4, [r3, #0]
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	230a      	movs	r3, #10
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	8819      	ldrh	r1, [r3, #0]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	0023      	movs	r3, r4
 8000e82:	f000 f9f9 	bl	8001278 <I2C_RequestMemoryWrite>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2240      	movs	r2, #64	; 0x40
 8000e8e:	2100      	movs	r1, #0
 8000e90:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0b5      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	2bff      	cmp	r3, #255	; 0xff
 8000e9e:	d911      	bls.n	8000ec4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	22ff      	movs	r2, #255	; 0xff
 8000ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	045c      	lsls	r4, r3, #17
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	8819      	ldrh	r1, [r3, #0]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	0023      	movs	r3, r4
 8000ebe:	f000 fbe3 	bl	8001688 <I2C_TransferConfig>
 8000ec2:	e012      	b.n	8000eea <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	049c      	lsls	r4, r3, #18
 8000ed8:	230a      	movs	r3, #10
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	8819      	ldrh	r1, [r3, #0]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	0023      	movs	r3, r4
 8000ee6:	f000 fbcf 	bl	8001688 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fae8 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e081      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d03a      	beq.n	8000fae <HAL_I2C_Mem_Write+0x1fa>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d136      	bne.n	8000fae <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	0013      	movs	r3, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	f000 fa7b 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e053      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2bff      	cmp	r3, #255	; 0xff
 8000f62:	d911      	bls.n	8000f88 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	045c      	lsls	r4, r3, #17
 8000f74:	230a      	movs	r3, #10
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	8819      	ldrh	r1, [r3, #0]
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	0023      	movs	r3, r4
 8000f82:	f000 fb81 	bl	8001688 <I2C_TransferConfig>
 8000f86:	e012      	b.n	8000fae <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	049c      	lsls	r4, r3, #18
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	0023      	movs	r3, r4
 8000faa:	f000 fb6d 	bl	8001688 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d198      	bne.n	8000eea <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fac0 	bl	8001544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e01a      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	490b      	ldr	r1, [pc, #44]	; (800100c <HAL_I2C_Mem_Write+0x258>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2241      	movs	r2, #65	; 0x41
 8000fe8:	2120      	movs	r1, #32
 8000fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2242      	movs	r2, #66	; 0x42
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e000      	b.n	8001002 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001000:	2302      	movs	r3, #2
  }
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b007      	add	sp, #28
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	fe00e800 	.word	0xfe00e800

08001010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af02      	add	r7, sp, #8
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	000c      	movs	r4, r1
 800101a:	0010      	movs	r0, r2
 800101c:	0019      	movs	r1, r3
 800101e:	230a      	movs	r3, #10
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	1c22      	adds	r2, r4, #0
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	2308      	movs	r3, #8
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	1dbb      	adds	r3, r7, #6
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2241      	movs	r2, #65	; 0x41
 8001038:	5c9b      	ldrb	r3, [r3, r2]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b20      	cmp	r3, #32
 800103e:	d000      	beq.n	8001042 <HAL_I2C_Mem_Read+0x32>
 8001040:	e110      	b.n	8001264 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_I2C_Mem_Read+0x42>
 8001048:	232c      	movs	r3, #44	; 0x2c
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d105      	bne.n	800105e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e103      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2240      	movs	r2, #64	; 0x40
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_I2C_Mem_Read+0x5c>
 8001068:	2302      	movs	r3, #2
 800106a:	e0fc      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001074:	f7ff fb42 	bl	80006fc <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	0219      	lsls	r1, r3, #8
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2319      	movs	r3, #25
 8001088:	2201      	movs	r2, #1
 800108a:	f000 f9dd 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0e7      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2241      	movs	r2, #65	; 0x41
 800109a:	2122      	movs	r1, #34	; 0x22
 800109c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2242      	movs	r2, #66	; 0x42
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	222c      	movs	r2, #44	; 0x2c
 80010b6:	18ba      	adds	r2, r7, r2
 80010b8:	8812      	ldrh	r2, [r2, #0]
 80010ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	881c      	ldrh	r4, [r3, #0]
 80010c6:	2308      	movs	r3, #8
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	230a      	movs	r3, #10
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	8819      	ldrh	r1, [r3, #0]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	0023      	movs	r3, r4
 80010de:	f000 f92f 	bl	8001340 <I2C_RequestMemoryRead>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0b9      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d911      	bls.n	8001120 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001106:	b2da      	uxtb	r2, r3
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	045c      	lsls	r4, r3, #17
 800110c:	230a      	movs	r3, #10
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	8819      	ldrh	r1, [r3, #0]
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	4b56      	ldr	r3, [pc, #344]	; (8001270 <HAL_I2C_Mem_Read+0x260>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	0023      	movs	r3, r4
 800111a:	f000 fab5 	bl	8001688 <I2C_TransferConfig>
 800111e:	e012      	b.n	8001146 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001124:	b29a      	uxth	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112e:	b2da      	uxtb	r2, r3
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	049c      	lsls	r4, r3, #18
 8001134:	230a      	movs	r3, #10
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	8819      	ldrh	r1, [r3, #0]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_I2C_Mem_Read+0x260>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	0023      	movs	r3, r4
 8001142:	f000 faa1 	bl	8001688 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	0013      	movs	r3, r2
 8001150:	2200      	movs	r2, #0
 8001152:	2104      	movs	r1, #4
 8001154:	f000 f978 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e082      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117c:	3b01      	subs	r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001188:	b29b      	uxth	r3, r3
 800118a:	3b01      	subs	r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001196:	b29b      	uxth	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03a      	beq.n	8001212 <HAL_I2C_Mem_Read+0x202>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d136      	bne.n	8001212 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	0013      	movs	r3, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	f000 f949 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e053      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2bff      	cmp	r3, #255	; 0xff
 80011c6:	d911      	bls.n	80011ec <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	045c      	lsls	r4, r3, #17
 80011d8:	230a      	movs	r3, #10
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	8819      	ldrh	r1, [r3, #0]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	0023      	movs	r3, r4
 80011e6:	f000 fa4f 	bl	8001688 <I2C_TransferConfig>
 80011ea:	e012      	b.n	8001212 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	049c      	lsls	r4, r3, #18
 8001200:	230a      	movs	r3, #10
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	8819      	ldrh	r1, [r3, #0]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	0023      	movs	r3, r4
 800120e:	f000 fa3b 	bl	8001688 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d194      	bne.n	8001146 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f98e 	bl	8001544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e01a      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2220      	movs	r2, #32
 8001236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <HAL_I2C_Mem_Read+0x264>)
 8001244:	400a      	ands	r2, r1
 8001246:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2241      	movs	r2, #65	; 0x41
 800124c:	2120      	movs	r1, #32
 800124e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2242      	movs	r2, #66	; 0x42
 8001254:	2100      	movs	r1, #0
 8001256:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	2100      	movs	r1, #0
 800125e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001264:	2302      	movs	r3, #2
  }
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b007      	add	sp, #28
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	80002400 	.word	0x80002400
 8001274:	fe00e800 	.word	0xfe00e800

08001278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	000c      	movs	r4, r1
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	250a      	movs	r5, #10
 8001288:	197b      	adds	r3, r7, r5
 800128a:	1c22      	adds	r2, r4, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	2308      	movs	r3, #8
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	1c02      	adds	r2, r0, #0
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	1dbb      	adds	r3, r7, #6
 8001298:	1c0a      	adds	r2, r1, #0
 800129a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	045c      	lsls	r4, r3, #17
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	8819      	ldrh	r1, [r3, #0]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <I2C_RequestMemoryWrite+0xc4>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	0023      	movs	r3, r4
 80012b2:	f000 f9e9 	bl	8001688 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f902 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d001      	beq.n	80012ca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e033      	b.n	8001332 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012ca:	1dbb      	adds	r3, r7, #6
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d107      	bne.n	80012e2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012d2:	2308      	movs	r3, #8
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
 80012e0:	e019      	b.n	8001316 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012e2:	2308      	movs	r3, #8
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f6:	6a39      	ldr	r1, [r7, #32]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f8e3 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e014      	b.n	8001332 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001308:	2308      	movs	r3, #8
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001316:	6a3a      	ldr	r2, [r7, #32]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	0013      	movs	r3, r2
 8001320:	2200      	movs	r2, #0
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	f000 f890 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	0018      	movs	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bdb0      	pop	{r4, r5, r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	80002000 	.word	0x80002000

08001340 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	000c      	movs	r4, r1
 800134a:	0010      	movs	r0, r2
 800134c:	0019      	movs	r1, r3
 800134e:	250a      	movs	r5, #10
 8001350:	197b      	adds	r3, r7, r5
 8001352:	1c22      	adds	r2, r4, #0
 8001354:	801a      	strh	r2, [r3, #0]
 8001356:	2308      	movs	r3, #8
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	1c02      	adds	r2, r0, #0
 800135c:	801a      	strh	r2, [r3, #0]
 800135e:	1dbb      	adds	r3, r7, #6
 8001360:	1c0a      	adds	r2, r1, #0
 8001362:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	197b      	adds	r3, r7, r5
 800136c:	8819      	ldrh	r1, [r3, #0]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <I2C_RequestMemoryRead+0xc0>)
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	f000 f987 	bl	8001688 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0018      	movs	r0, r3
 8001382:	f000 f8a0 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e033      	b.n	80013f6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d107      	bne.n	80013a6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001396:	2308      	movs	r3, #8
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
 80013a4:	e019      	b.n	80013da <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013a6:	2308      	movs	r3, #8
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ba:	6a39      	ldr	r1, [r7, #32]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f881 	bl	80014c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e014      	b.n	80013f6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013cc:	2308      	movs	r3, #8
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013da:	6a3a      	ldr	r2, [r7, #32]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	0013      	movs	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	f000 f82e 	bl	8001448 <I2C_WaitOnFlagUntilTimeout>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bdb0      	pop	{r4, r5, r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	80002000 	.word	0x80002000

08001404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d103      	bne.n	8001422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	2b01      	cmp	r3, #1
 800142e:	d007      	beq.n	8001440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	619a      	str	r2, [r3, #24]
  }
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001458:	e021      	b.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	d01e      	beq.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001460:	f7ff f94c 	bl	80006fc <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d302      	bcc.n	8001476 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d113      	bne.n	800149e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	2220      	movs	r2, #32
 800147c:	431a      	orrs	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2241      	movs	r2, #65	; 0x41
 8001486:	2120      	movs	r1, #32
 8001488:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2242      	movs	r2, #66	; 0x42
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4013      	ands	r3, r2
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	425a      	negs	r2, r3
 80014ae:	4153      	adcs	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	001a      	movs	r2, r3
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d0ce      	beq.n	800145a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014d2:	e02b      	b.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f86e 	bl	80015bc <I2C_IsAcknowledgeFailed>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e029      	b.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	d01e      	beq.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ee:	f7ff f905 	bl	80006fc <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d302      	bcc.n	8001504 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d113      	bne.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	2220      	movs	r2, #32
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2120      	movs	r1, #32
 8001516:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2242      	movs	r2, #66	; 0x42
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e007      	b.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d1cc      	bne.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}

08001544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001550:	e028      	b.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f82f 	bl	80015bc <I2C_IsAcknowledgeFailed>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e026      	b.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001566:	f7ff f8c9 	bl	80006fc <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d302      	bcc.n	800157c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d113      	bne.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	2220      	movs	r2, #32
 8001582:	431a      	orrs	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2241      	movs	r2, #65	; 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2242      	movs	r2, #66	; 0x42
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e007      	b.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2220      	movs	r2, #32
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d1cf      	bne.n	8001552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2210      	movs	r2, #16
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d151      	bne.n	800167a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015d6:	e021      	b.n	800161c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	d01e      	beq.n	800161c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015de:	f7ff f88d 	bl	80006fc <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d302      	bcc.n	80015f4 <I2C_IsAcknowledgeFailed+0x38>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d113      	bne.n	800161c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	2220      	movs	r2, #32
 80015fa:	431a      	orrs	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2241      	movs	r2, #65	; 0x41
 8001604:	2120      	movs	r1, #32
 8001606:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2242      	movs	r2, #66	; 0x42
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e02f      	b.n	800167c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2220      	movs	r2, #32
 8001624:	4013      	ands	r3, r2
 8001626:	2b20      	cmp	r3, #32
 8001628:	d1d6      	bne.n	80015d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fee1 	bl	8001404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <I2C_IsAcknowledgeFailed+0xc8>)
 800164e:	400a      	ands	r2, r1
 8001650:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	2204      	movs	r2, #4
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2241      	movs	r2, #65	; 0x41
 8001662:	2120      	movs	r1, #32
 8001664:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2242      	movs	r2, #66	; 0x42
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	fe00e800 	.word	0xfe00e800

08001688 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	0008      	movs	r0, r1
 8001692:	0011      	movs	r1, r2
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	240a      	movs	r4, #10
 8001698:	193b      	adds	r3, r7, r4
 800169a:	1c02      	adds	r2, r0, #0
 800169c:	801a      	strh	r2, [r3, #0]
 800169e:	2009      	movs	r0, #9
 80016a0:	183b      	adds	r3, r7, r0
 80016a2:	1c0a      	adds	r2, r1, #0
 80016a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	0d51      	lsrs	r1, r2, #21
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	00d2      	lsls	r2, r2, #3
 80016b4:	400a      	ands	r2, r1
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <I2C_TransferConfig+0x68>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	43d2      	mvns	r2, r2
 80016bc:	401a      	ands	r2, r3
 80016be:	0011      	movs	r1, r2
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	059b      	lsls	r3, r3, #22
 80016c6:	0d9a      	lsrs	r2, r3, #22
 80016c8:	183b      	adds	r3, r7, r0
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	0418      	lsls	r0, r3, #16
 80016ce:	23ff      	movs	r3, #255	; 0xff
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	4003      	ands	r3, r0
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	431a      	orrs	r2, r3
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b005      	add	sp, #20
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	03ff63ff 	.word	0x03ff63ff

080016f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2241      	movs	r2, #65	; 0x41
 8001702:	5c9b      	ldrb	r3, [r3, r2]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	d138      	bne.n	800177c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001714:	2302      	movs	r3, #2
 8001716:	e032      	b.n	800177e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	2101      	movs	r1, #1
 800171e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2241      	movs	r2, #65	; 0x41
 8001724:	2124      	movs	r1, #36	; 0x24
 8001726:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4911      	ldr	r1, [pc, #68]	; (8001788 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2241      	movs	r2, #65	; 0x41
 800176c:	2120      	movs	r1, #32
 800176e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
  }
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	ffffefff 	.word	0xffffefff

0800178c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2241      	movs	r2, #65	; 0x41
 800179a:	5c9b      	ldrb	r3, [r3, r2]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d139      	bne.n	8001816 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e033      	b.n	8001818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2241      	movs	r2, #65	; 0x41
 80017bc:	2124      	movs	r1, #36	; 0x24
 80017be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	438a      	bics	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2241      	movs	r2, #65	; 0x41
 8001806:	2120      	movs	r1, #32
 8001808:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	2100      	movs	r1, #0
 8001810:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
  }
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b004      	add	sp, #16
 800181e:	bd80      	pop	{r7, pc}
 8001820:	fffff0ff 	.word	0xfffff0ff

08001824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001832:	4013      	ands	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d11f      	bne.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	0013      	movs	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	189b      	adds	r3, r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4912      	ldr	r1, [pc, #72]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc54 	bl	8000104 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001862:	e008      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3b01      	subs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e001      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e009      	b.n	800188a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	401a      	ands	r2, r3
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	429a      	cmp	r2, r3
 8001886:	d0ed      	beq.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40007000 	.word	0x40007000
 8001898:	fffff9ff 	.word	0xfffff9ff
 800189c:	20000008 	.word	0x20000008
 80018a0:	000f4240 	.word	0x000f4240

080018a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	23e0      	movs	r3, #224	; 0xe0
 80018ae:	01db      	lsls	r3, r3, #7
 80018b0:	4013      	ands	r3, r2
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e304      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x1e>
 80018d8:	e07c      	b.n	80019d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4bc3      	ldr	r3, [pc, #780]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2238      	movs	r2, #56	; 0x38
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e4:	4bc0      	ldr	r3, [pc, #768]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_OscConfig+0x3e>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_OscConfig+0x44>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4bb9      	ldr	r3, [pc, #740]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	4013      	ands	r3, r2
 800190a:	d062      	beq.n	80019d2 <HAL_RCC_OscConfig+0x116>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d15e      	bne.n	80019d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e2df      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x78>
 8001924:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4baf      	ldr	r3, [pc, #700]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0249      	lsls	r1, r1, #9
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e020      	b.n	8001976 <HAL_RCC_OscConfig+0xba>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	23a0      	movs	r3, #160	; 0xa0
 800193a:	02db      	lsls	r3, r3, #11
 800193c:	429a      	cmp	r2, r3
 800193e:	d10e      	bne.n	800195e <HAL_RCC_OscConfig+0xa2>
 8001940:	4ba9      	ldr	r3, [pc, #676]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4ba8      	ldr	r3, [pc, #672]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	02c9      	lsls	r1, r1, #11
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	4ba6      	ldr	r3, [pc, #664]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4ba5      	ldr	r3, [pc, #660]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0249      	lsls	r1, r1, #9
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0xba>
 800195e:	4ba2      	ldr	r3, [pc, #648]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4ba1      	ldr	r3, [pc, #644]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001964:	49a1      	ldr	r1, [pc, #644]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001966:	400a      	ands	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4b9f      	ldr	r3, [pc, #636]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b9e      	ldr	r3, [pc, #632]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001970:	499f      	ldr	r1, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x334>)
 8001972:	400a      	ands	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d014      	beq.n	80019a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7fe febd 	bl	80006fc <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7fe feb8 	bl	80006fc <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e29e      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199a:	4b93      	ldr	r3, [pc, #588]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	029b      	lsls	r3, r3, #10
 80019a2:	4013      	ands	r3, r2
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xcc>
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7fe fea8 	bl	80006fc <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b2:	f7fe fea3 	bl	80006fc <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e289      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c4:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	029b      	lsls	r3, r3, #10
 80019cc:	4013      	ands	r3, r2
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0xf6>
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_RCC_OscConfig+0x124>
 80019de:	e099      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e0:	4b81      	ldr	r3, [pc, #516]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2238      	movs	r2, #56	; 0x38
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ea:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x144>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d002      	beq.n	8001a06 <HAL_RCC_OscConfig+0x14a>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d135      	bne.n	8001a72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x162>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e25c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a74      	ldr	r2, [pc, #464]	; (8001bf4 <HAL_RCC_OscConfig+0x338>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	021a      	lsls	r2, r3, #8
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a3a:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a4e:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0adb      	lsrs	r3, r3, #11
 8001a54:	2207      	movs	r2, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	4a68      	ldr	r2, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x340>)
 8001a5a:	40da      	lsrs	r2, r3
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x344>)
 8001a5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x348>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fdef 	bl	8000648 <HAL_InitTick>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d051      	beq.n	8001b12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e232      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	0049      	lsls	r1, r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fe2e 	bl	80006fc <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fe29 	bl	80006fc <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e20f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a4a      	ldr	r2, [pc, #296]	; (8001bf4 <HAL_RCC_OscConfig+0x338>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	021a      	lsls	r2, r3, #8
 8001ad4:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	4949      	ldr	r1, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x34c>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fe08 	bl	80006fc <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7fe fe03 	bl	80006fc <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1e9      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x236>
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d047      	beq.n	8001bae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2238      	movs	r2, #56	; 0x38
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b18      	cmp	r3, #24
 8001b28:	d10a      	bne.n	8001b40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d03c      	beq.n	8001bae <HAL_RCC_OscConfig+0x2f2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d138      	bne.n	8001bae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e1cb      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d019      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7fe fdd2 	bl	80006fc <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7fe fdcd 	bl	80006fc <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1b3      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d0f1      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2a2>
 8001b7a:	e018      	b.n	8001bae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	438a      	bics	r2, r1
 8001b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7fe fdb8 	bl	80006fc <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7fe fdb3 	bl	80006fc <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e199      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f1      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x2fe>
 8001bb8:	e0c6      	b.n	8001d48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	231f      	movs	r3, #31
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2238      	movs	r2, #56	; 0x38
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d11e      	bne.n	8001c0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x31e>
 8001bd8:	e0b6      	b.n	8001d48 <HAL_RCC_OscConfig+0x48c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d000      	beq.n	8001be4 <HAL_RCC_OscConfig+0x328>
 8001be2:	e0b1      	b.n	8001d48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e177      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	fffeffff 	.word	0xfffeffff
 8001bf0:	fffbffff 	.word	0xfffbffff
 8001bf4:	ffff80ff 	.word	0xffff80ff
 8001bf8:	ffffc7ff 	.word	0xffffc7ff
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000000 	.word	0x20000000
 8001c08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c0c:	4bb4      	ldr	r3, [pc, #720]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	4013      	ands	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x360>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x362>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d011      	beq.n	8001c46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4baf      	ldr	r3, [pc, #700]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c26:	4bae      	ldr	r3, [pc, #696]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0549      	lsls	r1, r1, #21
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c30:	4bab      	ldr	r3, [pc, #684]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c3e:	231f      	movs	r3, #31
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c46:	4ba7      	ldr	r3, [pc, #668]	; (8001ee4 <HAL_RCC_OscConfig+0x628>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d11a      	bne.n	8001c88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c52:	4ba4      	ldr	r3, [pc, #656]	; (8001ee4 <HAL_RCC_OscConfig+0x628>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4ba3      	ldr	r3, [pc, #652]	; (8001ee4 <HAL_RCC_OscConfig+0x628>)
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0049      	lsls	r1, r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c60:	f7fe fd4c 	bl	80006fc <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7fe fd47 	bl	80006fc <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e12d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b99      	ldr	r3, [pc, #612]	; (8001ee4 <HAL_RCC_OscConfig+0x628>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3e2>
 8001c90:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x404>
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001caa:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cac:	2104      	movs	r1, #4
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb6:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc4:	4b86      	ldr	r3, [pc, #536]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	438a      	bics	r2, r1
 8001cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd0:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d014      	beq.n	8001d0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fd0c 	bl	80006fc <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7fe fd07 	bl	80006fc <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x62c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0ec      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x42e>
 8001d08:	e013      	b.n	8001d32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fcf7 	bl	80006fc <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d12:	e009      	b.n	8001d28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7fe fcf2 	bl	80006fc <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	4a72      	ldr	r2, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x62c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0d7      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d32:	231f      	movs	r3, #31
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d42:	496a      	ldr	r1, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x630>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x496>
 8001d50:	e0c1      	b.n	8001ed6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2238      	movs	r2, #56	; 0x38
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d100      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4a4>
 8001d5e:	e081      	b.n	8001e64 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d156      	bne.n	8001e16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d6e:	4960      	ldr	r1, [pc, #384]	; (8001ef0 <HAL_RCC_OscConfig+0x634>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fcc2 	bl	80006fc <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe fcbd 	bl	80006fc <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0a3      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	049b      	lsls	r3, r3, #18
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_RCC_OscConfig+0x638>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0449      	lsls	r1, r1, #17
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dde:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe fc86 	bl	80006fc <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fc81 	bl	80006fc <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e067      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	049b      	lsls	r3, r3, #18
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x53a>
 8001e14:	e05f      	b.n	8001ed6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e1c:	4934      	ldr	r1, [pc, #208]	; (8001ef0 <HAL_RCC_OscConfig+0x634>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e28:	2103      	movs	r1, #3
 8001e2a:	438a      	bics	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e34:	4930      	ldr	r1, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x63c>)
 8001e36:	400a      	ands	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fc5f 	bl	80006fc <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fc5a 	bl	80006fc <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e040      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	049b      	lsls	r3, r3, #18
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x588>
 8001e62:	e038      	b.n	8001ed6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e033      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x624>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d126      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2270      	movs	r2, #112	; 0x70
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	23fe      	movs	r3, #254	; 0xfe
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d116      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	23f8      	movs	r3, #248	; 0xf8
 8001ea8:	039b      	lsls	r3, r3, #14
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	23e0      	movs	r3, #224	; 0xe0
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	0f5b      	lsrs	r3, r3, #29
 8001ec8:	075a      	lsls	r2, r3, #29
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b008      	add	sp, #32
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	00001388 	.word	0x00001388
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	feffffff 	.word	0xfeffffff
 8001ef4:	11c1808c 	.word	0x11c1808c
 8001ef8:	eefeffff 	.word	0xeefeffff

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e9      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d91e      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b73      	ldr	r3, [pc, #460]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2207      	movs	r2, #7
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b70      	ldr	r3, [pc, #448]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fbe4 	bl	80006fc <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe fbdf 	bl	80006fc <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0ca      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d015      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d006      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f70:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f76:	21e0      	movs	r1, #224	; 0xe0
 8001f78:	01c9      	lsls	r1, r1, #7
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_ClockConfig+0x1fc>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d057      	beq.n	800204c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d12b      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e097      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	049b      	lsls	r3, r3, #18
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d11f      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e08b      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d113      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e07f      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fec:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e074      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06d      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2207      	movs	r2, #7
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7fe fb6e 	bl	80006fc <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	e009      	b.n	800203a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7fe fb69 	bl	80006fc <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e054      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2238      	movs	r2, #56	; 0x38
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2207      	movs	r2, #7
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d21e      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2207      	movs	r2, #7
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800206c:	f7fe fb46 	bl	80006fc <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002074:	e009      	b.n	800208a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002076:	f7fe fb41 	bl	80006fc <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_RCC_ClockConfig+0x1f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e02c      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	4013      	ands	r3, r2
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <HAL_RCC_ClockConfig+0x200>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020b6:	f000 f829 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020ba:	0001      	movs	r1, r0
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x1f8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	220f      	movs	r2, #15
 80020c4:	401a      	ands	r2, r3
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x204>)
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	58d3      	ldr	r3, [r2, r3]
 80020cc:	221f      	movs	r2, #31
 80020ce:	4013      	ands	r3, r2
 80020d0:	000a      	movs	r2, r1
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x208>)
 80020d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x20c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe fab3 	bl	8000648 <HAL_InitTick>
 80020e2:	0003      	movs	r3, r0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40022000 	.word	0x40022000
 80020f0:	00001388 	.word	0x00001388
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffff0ff 	.word	0xfffff0ff
 80020fc:	ffff8fff 	.word	0xffff8fff
 8002100:	08004c78 	.word	0x08004c78
 8002104:	20000008 	.word	0x20000008
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2238      	movs	r2, #56	; 0x38
 8002118:	4013      	ands	r3, r2
 800211a:	d10f      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0adb      	lsrs	r3, r3, #11
 8002122:	2207      	movs	r2, #7
 8002124:	4013      	ands	r3, r2
 8002126:	2201      	movs	r2, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	0013      	movs	r3, r2
 800212c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	4835      	ldr	r0, [pc, #212]	; (8002208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002132:	f7fd ffe7 	bl	8000104 <__udivsi3>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e05d      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	2b08      	cmp	r3, #8
 8002146:	d102      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_GetSysClockFreq+0x100>)
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e054      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	4013      	ands	r3, r2
 8002156:	2b10      	cmp	r3, #16
 8002158:	d138      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2203      	movs	r2, #3
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <HAL_RCC_GetSysClockFreq+0x100>)
 800217c:	f7fd ffc2 	bl	8000104 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	0019      	movs	r1, r3
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	227f      	movs	r2, #127	; 0x7f
 800218c:	4013      	ands	r3, r2
 800218e:	434b      	muls	r3, r1
 8002190:	617b      	str	r3, [r7, #20]
        break;
 8002192:	e00d      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	481c      	ldr	r0, [pc, #112]	; (8002208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002198:	f7fd ffb4 	bl	8000104 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	0019      	movs	r1, r3
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	227f      	movs	r2, #127	; 0x7f
 80021a8:	4013      	ands	r3, r2
 80021aa:	434b      	muls	r3, r1
 80021ac:	617b      	str	r3, [r7, #20]
        break;
 80021ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0f5b      	lsrs	r3, r3, #29
 80021b6:	2207      	movs	r2, #7
 80021b8:	4013      	ands	r3, r2
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7fd ff9f 	bl	8000104 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	e015      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d103      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2238      	movs	r2, #56	; 0x38
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d103      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	e001      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021f8:	693b      	ldr	r3, [r7, #16]
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b006      	add	sp, #24
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40021000 	.word	0x40021000
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b02      	ldr	r3, [pc, #8]	; (8002220 <HAL_RCC_GetHCLKFreq+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000008 	.word	0x20000008

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002228:	f7ff fff2 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800222c:	0004      	movs	r4, r0
 800222e:	f7ff fb39 	bl	80018a4 <LL_RCC_GetAPB1Prescaler>
 8002232:	0003      	movs	r3, r0
 8002234:	0b1a      	lsrs	r2, r3, #12
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	58d3      	ldr	r3, [r2, r3]
 800223c:	221f      	movs	r2, #31
 800223e:	4013      	ands	r3, r2
 8002240:	40dc      	lsrs	r4, r3
 8002242:	0023      	movs	r3, r4
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bdb0      	pop	{r4, r5, r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	08004cb8 	.word	0x08004cb8

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002258:	2313      	movs	r3, #19
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2312      	movs	r3, #18
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	029b      	lsls	r3, r3, #10
 8002270:	4013      	ands	r3, r2
 8002272:	d100      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002274:	e0a4      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2311      	movs	r3, #17
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4bc3      	ldr	r3, [pc, #780]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	055b      	lsls	r3, r3, #21
 8002286:	4013      	ands	r3, r2
 8002288:	d111      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4bc0      	ldr	r3, [pc, #768]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228e:	4bbf      	ldr	r3, [pc, #764]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	0549      	lsls	r1, r1, #21
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
 8002298:	4bbc      	ldr	r3, [pc, #752]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2311      	movs	r3, #17
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ae:	4bb8      	ldr	r3, [pc, #736]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4bb7      	ldr	r3, [pc, #732]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0049      	lsls	r1, r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fa1e 	bl	80006fc <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c4:	e00b      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7fe fa19 	bl	80006fc <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d904      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80022d4:	2313      	movs	r3, #19
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2203      	movs	r2, #3
 80022da:	701a      	strb	r2, [r3, #0]
        break;
 80022dc:	e005      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022de:	4bac      	ldr	r3, [pc, #688]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0ed      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80022ea:	2313      	movs	r3, #19
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d154      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f4:	4ba5      	ldr	r3, [pc, #660]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	d014      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	4a9f      	ldr	r2, [pc, #636]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002316:	4013      	ands	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800231a:	4b9c      	ldr	r3, [pc, #624]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800231e:	4b9b      	ldr	r3, [pc, #620]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0249      	lsls	r1, r1, #9
 8002324:	430a      	orrs	r2, r1
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002328:	4b98      	ldr	r3, [pc, #608]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232c:	4b97      	ldr	r3, [pc, #604]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	499a      	ldr	r1, [pc, #616]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002330:	400a      	ands	r2, r1
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002334:	4b95      	ldr	r3, [pc, #596]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2201      	movs	r2, #1
 800233e:	4013      	ands	r3, r2
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe f9db 	bl	80006fc <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	e00c      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe f9d6 	bl	80006fc <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	4a91      	ldr	r2, [pc, #580]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d904      	bls.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800235c:	2313      	movs	r3, #19
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2203      	movs	r2, #3
 8002362:	701a      	strb	r2, [r3, #0]
            break;
 8002364:	e004      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d0ed      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002370:	2313      	movs	r3, #19
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	4a85      	ldr	r2, [pc, #532]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002380:	4013      	ands	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238a:	430a      	orrs	r2, r1
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
 800238e:	e00c      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002390:	2312      	movs	r3, #18
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2213      	movs	r2, #19
 8002396:	18ba      	adds	r2, r7, r2
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e005      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239e:	2312      	movs	r3, #18
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2213      	movs	r2, #19
 80023a4:	18ba      	adds	r2, r7, r2
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023aa:	2311      	movs	r3, #17
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b8:	4b74      	ldr	r3, [pc, #464]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ba:	4979      	ldr	r1, [pc, #484]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023bc:	400a      	ands	r2, r1
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ca:	4b70      	ldr	r3, [pc, #448]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	2203      	movs	r2, #3
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	220c      	movs	r2, #12
 80023ee:	4393      	bics	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2220      	movs	r2, #32
 8002402:	4013      	ands	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002406:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002416:	430a      	orrs	r2, r1
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002426:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	4a5f      	ldr	r2, [pc, #380]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	430a      	orrs	r2, r1
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	4013      	ands	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002474:	430a      	orrs	r2, r1
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4013      	ands	r3, r2
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	0899      	lsrs	r1, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0249      	lsls	r1, r1, #9
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	031b      	lsls	r3, r3, #12
 80024b8:	4013      	ands	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	4393      	bics	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	039b      	lsls	r3, r3, #14
 80024d8:	4013      	ands	r3, r2
 80024da:	d016      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ea:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ec:	430a      	orrs	r2, r1
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	03db      	lsls	r3, r3, #15
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	0449      	lsls	r1, r1, #17
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	03db      	lsls	r3, r3, #15
 8002512:	4013      	ands	r3, r2
 8002514:	d016      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	430a      	orrs	r2, r1
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	045b      	lsls	r3, r3, #17
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0449      	lsls	r1, r1, #17
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4013      	ands	r3, r2
 800254e:	d016      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	430a      	orrs	r2, r1
 8002562:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0249      	lsls	r1, r1, #9
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800257e:	2312      	movs	r3, #18
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b006      	add	sp, #24
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	fffffcff 	.word	0xfffffcff
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	00001388 	.word	0x00001388
 80025a0:	efffffff 	.word	0xefffffff
 80025a4:	fffff3ff 	.word	0xfffff3ff
 80025a8:	fff3ffff 	.word	0xfff3ffff
 80025ac:	ffcfffff 	.word	0xffcfffff
 80025b0:	ffffcfff 	.word	0xffffcfff
 80025b4:	ffbfffff 	.word	0xffbfffff
 80025b8:	feffffff 	.word	0xfeffffff
 80025bc:	ffff3fff 	.word	0xffff3fff

080025c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e046      	b.n	8002660 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	589b      	ldr	r3, [r3, r2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	227c      	movs	r2, #124	; 0x7c
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f002 fa5a 	bl	8004aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	2124      	movs	r1, #36	; 0x24
 80025f2:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	438a      	bics	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f830 	bl	800266c <UART_SetConfig>
 800260c:	0003      	movs	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e024      	b.n	8002660 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f001 f90d 	bl	8003840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	490d      	ldr	r1, [pc, #52]	; (8002668 <HAL_UART_Init+0xa8>)
 8002632:	400a      	ands	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	212a      	movs	r1, #42	; 0x2a
 8002642:	438a      	bics	r2, r1
 8002644:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f001 f9a5 	bl	80039a8 <UART_CheckIdleState>
 800265e:	0003      	movs	r3, r0
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	ffffb7ff 	.word	0xffffb7ff

0800266c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	b09f      	sub	sp, #124	; 0x7c
 8002670:	af00      	add	r7, sp, #0
 8002672:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002674:	2300      	movs	r3, #0
 8002676:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002678:	2313      	movs	r3, #19
 800267a:	2258      	movs	r2, #88	; 0x58
 800267c:	18ba      	adds	r2, r7, r2
 800267e:	18d2      	adds	r2, r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002684:	2300      	movs	r3, #0
 8002686:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4313      	orrs	r3, r2
 800269e:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 80026a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a6:	4313      	orrs	r3, r2
 80026a8:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4bba      	ldr	r3, [pc, #744]	; (800299c <UART_SetConfig+0x330>)
 80026b2:	401a      	ands	r2, r3
 80026b4:	0011      	movs	r1, r2
 80026b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026bc:	430b      	orrs	r3, r1
 80026be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4bb6      	ldr	r3, [pc, #728]	; (80029a0 <UART_SetConfig+0x334>)
 80026c8:	401a      	ands	r2, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	0003      	movs	r3, r0
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4baf      	ldr	r3, [pc, #700]	; (80029a4 <UART_SetConfig+0x338>)
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d004      	beq.n	80026f4 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f0:	4313      	orrs	r3, r2
 80026f2:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4bab      	ldr	r3, [pc, #684]	; (80029a8 <UART_SetConfig+0x33c>)
 80026fc:	401a      	ands	r2, r3
 80026fe:	0011      	movs	r1, r2
 8002700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002706:	430b      	orrs	r3, r1
 8002708:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800270a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	230f      	movs	r3, #15
 8002712:	439a      	bics	r2, r3
 8002714:	0010      	movs	r0, r2
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	0003      	movs	r3, r0
 8002720:	430b      	orrs	r3, r1
 8002722:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <UART_SetConfig+0x340>)
 800272a:	429a      	cmp	r2, r3
 800272c:	d12f      	bne.n	800278e <UART_SetConfig+0x122>
 800272e:	4ba0      	ldr	r3, [pc, #640]	; (80029b0 <UART_SetConfig+0x344>)
 8002730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002732:	2303      	movs	r3, #3
 8002734:	4013      	ands	r3, r2
 8002736:	2b01      	cmp	r3, #1
 8002738:	d013      	beq.n	8002762 <UART_SetConfig+0xf6>
 800273a:	d304      	bcc.n	8002746 <UART_SetConfig+0xda>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d009      	beq.n	8002754 <UART_SetConfig+0xe8>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d015      	beq.n	8002770 <UART_SetConfig+0x104>
 8002744:	e01b      	b.n	800277e <UART_SetConfig+0x112>
 8002746:	231b      	movs	r3, #27
 8002748:	2258      	movs	r2, #88	; 0x58
 800274a:	18ba      	adds	r2, r7, r2
 800274c:	18d2      	adds	r2, r2, r3
 800274e:	2300      	movs	r3, #0
 8002750:	7013      	strb	r3, [r2, #0]
 8002752:	e0b4      	b.n	80028be <UART_SetConfig+0x252>
 8002754:	231b      	movs	r3, #27
 8002756:	2258      	movs	r2, #88	; 0x58
 8002758:	18ba      	adds	r2, r7, r2
 800275a:	18d2      	adds	r2, r2, r3
 800275c:	2302      	movs	r3, #2
 800275e:	7013      	strb	r3, [r2, #0]
 8002760:	e0ad      	b.n	80028be <UART_SetConfig+0x252>
 8002762:	231b      	movs	r3, #27
 8002764:	2258      	movs	r2, #88	; 0x58
 8002766:	18ba      	adds	r2, r7, r2
 8002768:	18d2      	adds	r2, r2, r3
 800276a:	2304      	movs	r3, #4
 800276c:	7013      	strb	r3, [r2, #0]
 800276e:	e0a6      	b.n	80028be <UART_SetConfig+0x252>
 8002770:	231b      	movs	r3, #27
 8002772:	2258      	movs	r2, #88	; 0x58
 8002774:	18ba      	adds	r2, r7, r2
 8002776:	18d2      	adds	r2, r2, r3
 8002778:	2308      	movs	r3, #8
 800277a:	7013      	strb	r3, [r2, #0]
 800277c:	e09f      	b.n	80028be <UART_SetConfig+0x252>
 800277e:	231b      	movs	r3, #27
 8002780:	2258      	movs	r2, #88	; 0x58
 8002782:	18ba      	adds	r2, r7, r2
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	7013      	strb	r3, [r2, #0]
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	e097      	b.n	80028be <UART_SetConfig+0x252>
 800278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <UART_SetConfig+0x348>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d132      	bne.n	80027fe <UART_SetConfig+0x192>
 8002798:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <UART_SetConfig+0x344>)
 800279a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800279c:	230c      	movs	r3, #12
 800279e:	4013      	ands	r3, r2
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d016      	beq.n	80027d2 <UART_SetConfig+0x166>
 80027a4:	d802      	bhi.n	80027ac <UART_SetConfig+0x140>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <UART_SetConfig+0x14a>
 80027aa:	e020      	b.n	80027ee <UART_SetConfig+0x182>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d009      	beq.n	80027c4 <UART_SetConfig+0x158>
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	d015      	beq.n	80027e0 <UART_SetConfig+0x174>
 80027b4:	e01b      	b.n	80027ee <UART_SetConfig+0x182>
 80027b6:	231b      	movs	r3, #27
 80027b8:	2258      	movs	r2, #88	; 0x58
 80027ba:	18ba      	adds	r2, r7, r2
 80027bc:	18d2      	adds	r2, r2, r3
 80027be:	2300      	movs	r3, #0
 80027c0:	7013      	strb	r3, [r2, #0]
 80027c2:	e07c      	b.n	80028be <UART_SetConfig+0x252>
 80027c4:	231b      	movs	r3, #27
 80027c6:	2258      	movs	r2, #88	; 0x58
 80027c8:	18ba      	adds	r2, r7, r2
 80027ca:	18d2      	adds	r2, r2, r3
 80027cc:	2302      	movs	r3, #2
 80027ce:	7013      	strb	r3, [r2, #0]
 80027d0:	e075      	b.n	80028be <UART_SetConfig+0x252>
 80027d2:	231b      	movs	r3, #27
 80027d4:	2258      	movs	r2, #88	; 0x58
 80027d6:	18ba      	adds	r2, r7, r2
 80027d8:	18d2      	adds	r2, r2, r3
 80027da:	2304      	movs	r3, #4
 80027dc:	7013      	strb	r3, [r2, #0]
 80027de:	e06e      	b.n	80028be <UART_SetConfig+0x252>
 80027e0:	231b      	movs	r3, #27
 80027e2:	2258      	movs	r2, #88	; 0x58
 80027e4:	18ba      	adds	r2, r7, r2
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	2308      	movs	r3, #8
 80027ea:	7013      	strb	r3, [r2, #0]
 80027ec:	e067      	b.n	80028be <UART_SetConfig+0x252>
 80027ee:	231b      	movs	r3, #27
 80027f0:	2258      	movs	r2, #88	; 0x58
 80027f2:	18ba      	adds	r2, r7, r2
 80027f4:	18d2      	adds	r2, r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	7013      	strb	r3, [r2, #0]
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	e05f      	b.n	80028be <UART_SetConfig+0x252>
 80027fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <UART_SetConfig+0x34c>)
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <UART_SetConfig+0x1aa>
 8002808:	231b      	movs	r3, #27
 800280a:	2258      	movs	r2, #88	; 0x58
 800280c:	18ba      	adds	r2, r7, r2
 800280e:	18d2      	adds	r2, r2, r3
 8002810:	2300      	movs	r3, #0
 8002812:	7013      	strb	r3, [r2, #0]
 8002814:	e053      	b.n	80028be <UART_SetConfig+0x252>
 8002816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b68      	ldr	r3, [pc, #416]	; (80029bc <UART_SetConfig+0x350>)
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <UART_SetConfig+0x1c2>
 8002820:	231b      	movs	r3, #27
 8002822:	2258      	movs	r2, #88	; 0x58
 8002824:	18ba      	adds	r2, r7, r2
 8002826:	18d2      	adds	r2, r2, r3
 8002828:	2300      	movs	r3, #0
 800282a:	7013      	strb	r3, [r2, #0]
 800282c:	e047      	b.n	80028be <UART_SetConfig+0x252>
 800282e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <UART_SetConfig+0x338>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d13c      	bne.n	80028b2 <UART_SetConfig+0x246>
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <UART_SetConfig+0x344>)
 800283a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283c:	23c0      	movs	r3, #192	; 0xc0
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	401a      	ands	r2, r3
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	429a      	cmp	r2, r3
 8002848:	d01d      	beq.n	8002886 <UART_SetConfig+0x21a>
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	429a      	cmp	r2, r3
 8002850:	d802      	bhi.n	8002858 <UART_SetConfig+0x1ec>
 8002852:	2a00      	cmp	r2, #0
 8002854:	d009      	beq.n	800286a <UART_SetConfig+0x1fe>
 8002856:	e024      	b.n	80028a2 <UART_SetConfig+0x236>
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	429a      	cmp	r2, r3
 800285e:	d00b      	beq.n	8002878 <UART_SetConfig+0x20c>
 8002860:	23c0      	movs	r3, #192	; 0xc0
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	429a      	cmp	r2, r3
 8002866:	d015      	beq.n	8002894 <UART_SetConfig+0x228>
 8002868:	e01b      	b.n	80028a2 <UART_SetConfig+0x236>
 800286a:	231b      	movs	r3, #27
 800286c:	2258      	movs	r2, #88	; 0x58
 800286e:	18ba      	adds	r2, r7, r2
 8002870:	18d2      	adds	r2, r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	7013      	strb	r3, [r2, #0]
 8002876:	e022      	b.n	80028be <UART_SetConfig+0x252>
 8002878:	231b      	movs	r3, #27
 800287a:	2258      	movs	r2, #88	; 0x58
 800287c:	18ba      	adds	r2, r7, r2
 800287e:	18d2      	adds	r2, r2, r3
 8002880:	2302      	movs	r3, #2
 8002882:	7013      	strb	r3, [r2, #0]
 8002884:	e01b      	b.n	80028be <UART_SetConfig+0x252>
 8002886:	231b      	movs	r3, #27
 8002888:	2258      	movs	r2, #88	; 0x58
 800288a:	18ba      	adds	r2, r7, r2
 800288c:	18d2      	adds	r2, r2, r3
 800288e:	2304      	movs	r3, #4
 8002890:	7013      	strb	r3, [r2, #0]
 8002892:	e014      	b.n	80028be <UART_SetConfig+0x252>
 8002894:	231b      	movs	r3, #27
 8002896:	2258      	movs	r2, #88	; 0x58
 8002898:	18ba      	adds	r2, r7, r2
 800289a:	18d2      	adds	r2, r2, r3
 800289c:	2308      	movs	r3, #8
 800289e:	7013      	strb	r3, [r2, #0]
 80028a0:	e00d      	b.n	80028be <UART_SetConfig+0x252>
 80028a2:	231b      	movs	r3, #27
 80028a4:	2258      	movs	r2, #88	; 0x58
 80028a6:	18ba      	adds	r2, r7, r2
 80028a8:	18d2      	adds	r2, r2, r3
 80028aa:	2310      	movs	r3, #16
 80028ac:	7013      	strb	r3, [r2, #0]
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	e005      	b.n	80028be <UART_SetConfig+0x252>
 80028b2:	231b      	movs	r3, #27
 80028b4:	2258      	movs	r2, #88	; 0x58
 80028b6:	18ba      	adds	r2, r7, r2
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	2310      	movs	r3, #16
 80028bc:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <UART_SetConfig+0x338>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <UART_SetConfig+0x260>
 80028c8:	f000 fbcc 	bl	8003064 <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028cc:	231b      	movs	r3, #27
 80028ce:	2258      	movs	r2, #88	; 0x58
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d100      	bne.n	80028de <UART_SetConfig+0x272>
 80028dc:	e070      	b.n	80029c0 <UART_SetConfig+0x354>
 80028de:	dc02      	bgt.n	80028e6 <UART_SetConfig+0x27a>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <UART_SetConfig+0x288>
 80028e4:	e15f      	b.n	8002ba6 <UART_SetConfig+0x53a>
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d100      	bne.n	80028ec <UART_SetConfig+0x280>
 80028ea:	e0b4      	b.n	8002a56 <UART_SetConfig+0x3ea>
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d100      	bne.n	80028f2 <UART_SetConfig+0x286>
 80028f0:	e105      	b.n	8002afe <UART_SetConfig+0x492>
 80028f2:	e158      	b.n	8002ba6 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028f4:	f7ff fc96 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80028f8:	0002      	movs	r2, r0
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <UART_SetConfig+0x320>
 8002902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b01      	cmp	r3, #1
 8002908:	d03e      	beq.n	8002988 <UART_SetConfig+0x31c>
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b02      	cmp	r3, #2
 8002910:	d038      	beq.n	8002984 <UART_SetConfig+0x318>
 8002912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b03      	cmp	r3, #3
 8002918:	d032      	beq.n	8002980 <UART_SetConfig+0x314>
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d02c      	beq.n	800297c <UART_SetConfig+0x310>
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b05      	cmp	r3, #5
 8002928:	d026      	beq.n	8002978 <UART_SetConfig+0x30c>
 800292a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2b06      	cmp	r3, #6
 8002930:	d020      	beq.n	8002974 <UART_SetConfig+0x308>
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b07      	cmp	r3, #7
 8002938:	d01a      	beq.n	8002970 <UART_SetConfig+0x304>
 800293a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b08      	cmp	r3, #8
 8002940:	d014      	beq.n	800296c <UART_SetConfig+0x300>
 8002942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b09      	cmp	r3, #9
 8002948:	d00e      	beq.n	8002968 <UART_SetConfig+0x2fc>
 800294a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b0a      	cmp	r3, #10
 8002950:	d008      	beq.n	8002964 <UART_SetConfig+0x2f8>
 8002952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b0b      	cmp	r3, #11
 8002958:	d102      	bne.n	8002960 <UART_SetConfig+0x2f4>
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	e016      	b.n	800298e <UART_SetConfig+0x322>
 8002960:	2301      	movs	r3, #1
 8002962:	e014      	b.n	800298e <UART_SetConfig+0x322>
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	e012      	b.n	800298e <UART_SetConfig+0x322>
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	e010      	b.n	800298e <UART_SetConfig+0x322>
 800296c:	2320      	movs	r3, #32
 800296e:	e00e      	b.n	800298e <UART_SetConfig+0x322>
 8002970:	2310      	movs	r3, #16
 8002972:	e00c      	b.n	800298e <UART_SetConfig+0x322>
 8002974:	230c      	movs	r3, #12
 8002976:	e00a      	b.n	800298e <UART_SetConfig+0x322>
 8002978:	230a      	movs	r3, #10
 800297a:	e008      	b.n	800298e <UART_SetConfig+0x322>
 800297c:	2308      	movs	r3, #8
 800297e:	e006      	b.n	800298e <UART_SetConfig+0x322>
 8002980:	2306      	movs	r3, #6
 8002982:	e004      	b.n	800298e <UART_SetConfig+0x322>
 8002984:	2304      	movs	r3, #4
 8002986:	e002      	b.n	800298e <UART_SetConfig+0x322>
 8002988:	2302      	movs	r3, #2
 800298a:	e000      	b.n	800298e <UART_SetConfig+0x322>
 800298c:	2301      	movs	r3, #1
 800298e:	0019      	movs	r1, r3
 8002990:	0010      	movs	r0, r2
 8002992:	f7fd fbb7 	bl	8000104 <__udivsi3>
 8002996:	0003      	movs	r3, r0
 8002998:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 800299a:	e10b      	b.n	8002bb4 <UART_SetConfig+0x548>
 800299c:	cfff69f3 	.word	0xcfff69f3
 80029a0:	ffffcfff 	.word	0xffffcfff
 80029a4:	40008000 	.word	0x40008000
 80029a8:	11fff4ff 	.word	0x11fff4ff
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40004400 	.word	0x40004400
 80029b8:	40004800 	.word	0x40004800
 80029bc:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d043      	beq.n	8002a50 <UART_SetConfig+0x3e4>
 80029c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d03d      	beq.n	8002a4c <UART_SetConfig+0x3e0>
 80029d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d037      	beq.n	8002a48 <UART_SetConfig+0x3dc>
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d031      	beq.n	8002a44 <UART_SetConfig+0x3d8>
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d02b      	beq.n	8002a40 <UART_SetConfig+0x3d4>
 80029e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d025      	beq.n	8002a3c <UART_SetConfig+0x3d0>
 80029f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d01f      	beq.n	8002a38 <UART_SetConfig+0x3cc>
 80029f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b07      	cmp	r3, #7
 80029fe:	d019      	beq.n	8002a34 <UART_SetConfig+0x3c8>
 8002a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d013      	beq.n	8002a30 <UART_SetConfig+0x3c4>
 8002a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b09      	cmp	r3, #9
 8002a0e:	d00d      	beq.n	8002a2c <UART_SetConfig+0x3c0>
 8002a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b0a      	cmp	r3, #10
 8002a16:	d007      	beq.n	8002a28 <UART_SetConfig+0x3bc>
 8002a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b0b      	cmp	r3, #11
 8002a1e:	d101      	bne.n	8002a24 <UART_SetConfig+0x3b8>
 8002a20:	4baa      	ldr	r3, [pc, #680]	; (8002ccc <UART_SetConfig+0x660>)
 8002a22:	e016      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a24:	4baa      	ldr	r3, [pc, #680]	; (8002cd0 <UART_SetConfig+0x664>)
 8002a26:	e014      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a28:	4baa      	ldr	r3, [pc, #680]	; (8002cd4 <UART_SetConfig+0x668>)
 8002a2a:	e012      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a2c:	4baa      	ldr	r3, [pc, #680]	; (8002cd8 <UART_SetConfig+0x66c>)
 8002a2e:	e010      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a30:	4baa      	ldr	r3, [pc, #680]	; (8002cdc <UART_SetConfig+0x670>)
 8002a32:	e00e      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a34:	4baa      	ldr	r3, [pc, #680]	; (8002ce0 <UART_SetConfig+0x674>)
 8002a36:	e00c      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a38:	4baa      	ldr	r3, [pc, #680]	; (8002ce4 <UART_SetConfig+0x678>)
 8002a3a:	e00a      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a3c:	4baa      	ldr	r3, [pc, #680]	; (8002ce8 <UART_SetConfig+0x67c>)
 8002a3e:	e008      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a40:	4baa      	ldr	r3, [pc, #680]	; (8002cec <UART_SetConfig+0x680>)
 8002a42:	e006      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a44:	4baa      	ldr	r3, [pc, #680]	; (8002cf0 <UART_SetConfig+0x684>)
 8002a46:	e004      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a48:	4baa      	ldr	r3, [pc, #680]	; (8002cf4 <UART_SetConfig+0x688>)
 8002a4a:	e002      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a4c:	4baa      	ldr	r3, [pc, #680]	; (8002cf8 <UART_SetConfig+0x68c>)
 8002a4e:	e000      	b.n	8002a52 <UART_SetConfig+0x3e6>
 8002a50:	4b9f      	ldr	r3, [pc, #636]	; (8002cd0 <UART_SetConfig+0x664>)
 8002a52:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002a54:	e0ae      	b.n	8002bb4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a56:	f7ff fb59 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d044      	beq.n	8002aee <UART_SetConfig+0x482>
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d03e      	beq.n	8002aea <UART_SetConfig+0x47e>
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d038      	beq.n	8002ae6 <UART_SetConfig+0x47a>
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d032      	beq.n	8002ae2 <UART_SetConfig+0x476>
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d02c      	beq.n	8002ade <UART_SetConfig+0x472>
 8002a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d026      	beq.n	8002ada <UART_SetConfig+0x46e>
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d020      	beq.n	8002ad6 <UART_SetConfig+0x46a>
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d01a      	beq.n	8002ad2 <UART_SetConfig+0x466>
 8002a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d014      	beq.n	8002ace <UART_SetConfig+0x462>
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d00e      	beq.n	8002aca <UART_SetConfig+0x45e>
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b0a      	cmp	r3, #10
 8002ab2:	d008      	beq.n	8002ac6 <UART_SetConfig+0x45a>
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b0b      	cmp	r3, #11
 8002aba:	d102      	bne.n	8002ac2 <UART_SetConfig+0x456>
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	e016      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e014      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	e012      	b.n	8002af0 <UART_SetConfig+0x484>
 8002aca:	2340      	movs	r3, #64	; 0x40
 8002acc:	e010      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e00e      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	e00c      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	e00a      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ada:	230a      	movs	r3, #10
 8002adc:	e008      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e006      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	e004      	b.n	8002af0 <UART_SetConfig+0x484>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e002      	b.n	8002af0 <UART_SetConfig+0x484>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e000      	b.n	8002af0 <UART_SetConfig+0x484>
 8002aee:	2301      	movs	r3, #1
 8002af0:	0019      	movs	r1, r3
 8002af2:	0010      	movs	r0, r2
 8002af4:	f7fd fb06 	bl	8000104 <__udivsi3>
 8002af8:	0003      	movs	r3, r0
 8002afa:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002afc:	e05a      	b.n	8002bb4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04b      	beq.n	8002b9e <UART_SetConfig+0x532>
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d044      	beq.n	8002b98 <UART_SetConfig+0x52c>
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d03d      	beq.n	8002b92 <UART_SetConfig+0x526>
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d037      	beq.n	8002b8e <UART_SetConfig+0x522>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d030      	beq.n	8002b88 <UART_SetConfig+0x51c>
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d02a      	beq.n	8002b84 <UART_SetConfig+0x518>
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d024      	beq.n	8002b80 <UART_SetConfig+0x514>
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b07      	cmp	r3, #7
 8002b3c:	d01d      	beq.n	8002b7a <UART_SetConfig+0x50e>
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d016      	beq.n	8002b74 <UART_SetConfig+0x508>
 8002b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	d00f      	beq.n	8002b6e <UART_SetConfig+0x502>
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	d008      	beq.n	8002b68 <UART_SetConfig+0x4fc>
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b0b      	cmp	r3, #11
 8002b5c:	d101      	bne.n	8002b62 <UART_SetConfig+0x4f6>
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	e01f      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	e01c      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	e019      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	e016      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	e013      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	e010      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b80:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <UART_SetConfig+0x690>)
 8002b82:	e00e      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b84:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <UART_SetConfig+0x694>)
 8002b86:	e00c      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	e009      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <UART_SetConfig+0x698>)
 8002b90:	e007      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	e004      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	01db      	lsls	r3, r3, #7
 8002b9c:	e001      	b.n	8002ba2 <UART_SetConfig+0x536>
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002ba4:	e006      	b.n	8002bb4 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002ba6:	2313      	movs	r3, #19
 8002ba8:	2258      	movs	r2, #88	; 0x58
 8002baa:	18ba      	adds	r2, r7, r2
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	2301      	movs	r3, #1
 8002bb0:	7013      	strb	r3, [r2, #0]
        break;
 8002bb2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <UART_SetConfig+0x552>
 8002bba:	f000 fe09 	bl	80037d0 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	189a      	adds	r2, r3, r2
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d305      	bcc.n	8002bda <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d908      	bls.n	8002bec <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002bda:	2313      	movs	r3, #19
 8002bdc:	2258      	movs	r2, #88	; 0x58
 8002bde:	4694      	mov	ip, r2
 8002be0:	44bc      	add	ip, r7
 8002be2:	4463      	add	r3, ip
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	f000 fdf2 	bl	80037d0 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002bec:	231b      	movs	r3, #27
 8002bee:	2258      	movs	r2, #88	; 0x58
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	44bc      	add	ip, r7
 8002bf4:	4463      	add	r3, ip
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d100      	bne.n	8002bfe <UART_SetConfig+0x592>
 8002bfc:	e0a9      	b.n	8002d52 <UART_SetConfig+0x6e6>
 8002bfe:	dc02      	bgt.n	8002c06 <UART_SetConfig+0x59a>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <UART_SetConfig+0x5a8>
 8002c04:	e20f      	b.n	8003026 <UART_SetConfig+0x9ba>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d100      	bne.n	8002c0c <UART_SetConfig+0x5a0>
 8002c0a:	e10f      	b.n	8002e2c <UART_SetConfig+0x7c0>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d100      	bne.n	8002c12 <UART_SetConfig+0x5a6>
 8002c10:	e192      	b.n	8002f38 <UART_SetConfig+0x8cc>
 8002c12:	e208      	b.n	8003026 <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c14:	f7ff fb06 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d100      	bne.n	8002c2a <UART_SetConfig+0x5be>
 8002c28:	e06e      	b.n	8002d08 <UART_SetConfig+0x69c>
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d049      	beq.n	8002cc6 <UART_SetConfig+0x65a>
 8002c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d042      	beq.n	8002cc0 <UART_SetConfig+0x654>
 8002c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d03b      	beq.n	8002cba <UART_SetConfig+0x64e>
 8002c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d034      	beq.n	8002cb4 <UART_SetConfig+0x648>
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d02d      	beq.n	8002cae <UART_SetConfig+0x642>
 8002c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d026      	beq.n	8002ca8 <UART_SetConfig+0x63c>
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b07      	cmp	r3, #7
 8002c60:	d01f      	beq.n	8002ca2 <UART_SetConfig+0x636>
 8002c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d018      	beq.n	8002c9c <UART_SetConfig+0x630>
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	d011      	beq.n	8002c96 <UART_SetConfig+0x62a>
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d00a      	beq.n	8002c90 <UART_SetConfig+0x624>
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b0b      	cmp	r3, #11
 8002c80:	d103      	bne.n	8002c8a <UART_SetConfig+0x61e>
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2400      	movs	r4, #0
 8002c88:	e040      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	2400      	movs	r4, #0
 8002c8e:	e03d      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	2400      	movs	r4, #0
 8002c94:	e03a      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002c96:	2340      	movs	r3, #64	; 0x40
 8002c98:	2400      	movs	r4, #0
 8002c9a:	e037      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	e034      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	2400      	movs	r4, #0
 8002ca6:	e031      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002ca8:	230c      	movs	r3, #12
 8002caa:	2400      	movs	r4, #0
 8002cac:	e02e      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002cae:	230a      	movs	r3, #10
 8002cb0:	2400      	movs	r4, #0
 8002cb2:	e02b      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	2400      	movs	r4, #0
 8002cb8:	e028      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	e025      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	e022      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	2400      	movs	r4, #0
 8002cca:	e01f      	b.n	8002d0c <UART_SetConfig+0x6a0>
 8002ccc:	0000f424 	.word	0x0000f424
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	0001e848 	.word	0x0001e848
 8002cd8:	0003d090 	.word	0x0003d090
 8002cdc:	0007a120 	.word	0x0007a120
 8002ce0:	000f4240 	.word	0x000f4240
 8002ce4:	00145855 	.word	0x00145855
 8002ce8:	00186a00 	.word	0x00186a00
 8002cec:	001e8480 	.word	0x001e8480
 8002cf0:	0028b0aa 	.word	0x0028b0aa
 8002cf4:	003d0900 	.word	0x003d0900
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	00000aaa 	.word	0x00000aaa
 8002d00:	00000ccc 	.word	0x00000ccc
 8002d04:	00001555 	.word	0x00001555
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	0023      	movs	r3, r4
 8002d10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d14:	f7fd fb6c 	bl	80003f0 <__aeabi_uldivmod>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	0e1a      	lsrs	r2, r3, #24
 8002d1e:	0226      	lsls	r6, r4, #8
 8002d20:	4316      	orrs	r6, r2
 8002d22:	021d      	lsls	r5, r3, #8
 8002d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d34:	1940      	adds	r0, r0, r5
 8002d36:	4171      	adcs	r1, r6
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d3e:	2300      	movs	r3, #0
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	f7fd fb53 	bl	80003f0 <__aeabi_uldivmod>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	000c      	movs	r4, r1
 8002d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002d50:	e171      	b.n	8003036 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04f      	beq.n	8002dfa <UART_SetConfig+0x78e>
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d048      	beq.n	8002df4 <UART_SetConfig+0x788>
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d041      	beq.n	8002dee <UART_SetConfig+0x782>
 8002d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d03a      	beq.n	8002de8 <UART_SetConfig+0x77c>
 8002d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d033      	beq.n	8002de2 <UART_SetConfig+0x776>
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d02c      	beq.n	8002ddc <UART_SetConfig+0x770>
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d025      	beq.n	8002dd6 <UART_SetConfig+0x76a>
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b07      	cmp	r3, #7
 8002d90:	d01e      	beq.n	8002dd0 <UART_SetConfig+0x764>
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d017      	beq.n	8002dca <UART_SetConfig+0x75e>
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d010      	beq.n	8002dc4 <UART_SetConfig+0x758>
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b0a      	cmp	r3, #10
 8002da8:	d009      	beq.n	8002dbe <UART_SetConfig+0x752>
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b0b      	cmp	r3, #11
 8002db0:	d102      	bne.n	8002db8 <UART_SetConfig+0x74c>
 8002db2:	4bba      	ldr	r3, [pc, #744]	; (800309c <UART_SetConfig+0xa30>)
 8002db4:	2400      	movs	r4, #0
 8002db6:	e022      	b.n	8002dfe <UART_SetConfig+0x792>
 8002db8:	4bb9      	ldr	r3, [pc, #740]	; (80030a0 <UART_SetConfig+0xa34>)
 8002dba:	2400      	movs	r4, #0
 8002dbc:	e01f      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dbe:	4bb9      	ldr	r3, [pc, #740]	; (80030a4 <UART_SetConfig+0xa38>)
 8002dc0:	2400      	movs	r4, #0
 8002dc2:	e01c      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dc4:	4bb8      	ldr	r3, [pc, #736]	; (80030a8 <UART_SetConfig+0xa3c>)
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	e019      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dca:	4bb8      	ldr	r3, [pc, #736]	; (80030ac <UART_SetConfig+0xa40>)
 8002dcc:	2400      	movs	r4, #0
 8002dce:	e016      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dd0:	4bb7      	ldr	r3, [pc, #732]	; (80030b0 <UART_SetConfig+0xa44>)
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	e013      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dd6:	4bb7      	ldr	r3, [pc, #732]	; (80030b4 <UART_SetConfig+0xa48>)
 8002dd8:	2400      	movs	r4, #0
 8002dda:	e010      	b.n	8002dfe <UART_SetConfig+0x792>
 8002ddc:	4bb6      	ldr	r3, [pc, #728]	; (80030b8 <UART_SetConfig+0xa4c>)
 8002dde:	2400      	movs	r4, #0
 8002de0:	e00d      	b.n	8002dfe <UART_SetConfig+0x792>
 8002de2:	4bb6      	ldr	r3, [pc, #728]	; (80030bc <UART_SetConfig+0xa50>)
 8002de4:	2400      	movs	r4, #0
 8002de6:	e00a      	b.n	8002dfe <UART_SetConfig+0x792>
 8002de8:	4bb5      	ldr	r3, [pc, #724]	; (80030c0 <UART_SetConfig+0xa54>)
 8002dea:	2400      	movs	r4, #0
 8002dec:	e007      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dee:	4bb5      	ldr	r3, [pc, #724]	; (80030c4 <UART_SetConfig+0xa58>)
 8002df0:	2400      	movs	r4, #0
 8002df2:	e004      	b.n	8002dfe <UART_SetConfig+0x792>
 8002df4:	4bb4      	ldr	r3, [pc, #720]	; (80030c8 <UART_SetConfig+0xa5c>)
 8002df6:	2400      	movs	r4, #0
 8002df8:	e001      	b.n	8002dfe <UART_SetConfig+0x792>
 8002dfa:	4ba9      	ldr	r3, [pc, #676]	; (80030a0 <UART_SetConfig+0xa34>)
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e00:	6852      	ldr	r2, [r2, #4]
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	633a      	str	r2, [r7, #48]	; 0x30
 8002e06:	2200      	movs	r2, #0
 8002e08:	637a      	str	r2, [r7, #52]	; 0x34
 8002e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e0e:	18c0      	adds	r0, r0, r3
 8002e10:	4161      	adcs	r1, r4
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	f7fd fae6 	bl	80003f0 <__aeabi_uldivmod>
 8002e24:	0003      	movs	r3, r0
 8002e26:	000c      	movs	r4, r1
 8002e28:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002e2a:	e104      	b.n	8003036 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2c:	f7ff f96e 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8002e30:	0003      	movs	r3, r0
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d050      	beq.n	8002ee2 <UART_SetConfig+0x876>
 8002e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d049      	beq.n	8002edc <UART_SetConfig+0x870>
 8002e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d042      	beq.n	8002ed6 <UART_SetConfig+0x86a>
 8002e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d03b      	beq.n	8002ed0 <UART_SetConfig+0x864>
 8002e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d034      	beq.n	8002eca <UART_SetConfig+0x85e>
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d02d      	beq.n	8002ec4 <UART_SetConfig+0x858>
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d026      	beq.n	8002ebe <UART_SetConfig+0x852>
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b07      	cmp	r3, #7
 8002e76:	d01f      	beq.n	8002eb8 <UART_SetConfig+0x84c>
 8002e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d018      	beq.n	8002eb2 <UART_SetConfig+0x846>
 8002e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d011      	beq.n	8002eac <UART_SetConfig+0x840>
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b0a      	cmp	r3, #10
 8002e8e:	d00a      	beq.n	8002ea6 <UART_SetConfig+0x83a>
 8002e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b0b      	cmp	r3, #11
 8002e96:	d103      	bne.n	8002ea0 <UART_SetConfig+0x834>
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	e022      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	e01f      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	e01c      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002eac:	2340      	movs	r3, #64	; 0x40
 8002eae:	2400      	movs	r4, #0
 8002eb0:	e019      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	2400      	movs	r4, #0
 8002eb6:	e016      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	2400      	movs	r4, #0
 8002ebc:	e013      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	2400      	movs	r4, #0
 8002ec2:	e010      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	2400      	movs	r4, #0
 8002ec8:	e00d      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	2400      	movs	r4, #0
 8002ece:	e00a      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ed0:	2306      	movs	r3, #6
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	e007      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	2400      	movs	r4, #0
 8002eda:	e004      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002edc:	2302      	movs	r3, #2
 8002ede:	2400      	movs	r4, #0
 8002ee0:	e001      	b.n	8002ee6 <UART_SetConfig+0x87a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	0023      	movs	r3, r4
 8002eea:	6a38      	ldr	r0, [r7, #32]
 8002eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eee:	f7fd fa7f 	bl	80003f0 <__aeabi_uldivmod>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	000c      	movs	r4, r1
 8002ef6:	0e1a      	lsrs	r2, r3, #24
 8002ef8:	0221      	lsls	r1, r4, #8
 8002efa:	6579      	str	r1, [r7, #84]	; 0x54
 8002efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002efe:	4311      	orrs	r1, r2
 8002f00:	6579      	str	r1, [r7, #84]	; 0x54
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	653b      	str	r3, [r7, #80]	; 0x50
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	69fc      	ldr	r4, [r7, #28]
 8002f1a:	18c0      	adds	r0, r0, r3
 8002f1c:	4161      	adcs	r1, r4
 8002f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f7fd fa60 	bl	80003f0 <__aeabi_uldivmod>
 8002f30:	0003      	movs	r3, r0
 8002f32:	000c      	movs	r4, r1
 8002f34:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002f36:	e07e      	b.n	8003036 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d058      	beq.n	8002ff2 <UART_SetConfig+0x986>
 8002f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d050      	beq.n	8002fea <UART_SetConfig+0x97e>
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d048      	beq.n	8002fe2 <UART_SetConfig+0x976>
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d041      	beq.n	8002fdc <UART_SetConfig+0x970>
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d039      	beq.n	8002fd4 <UART_SetConfig+0x968>
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d032      	beq.n	8002fce <UART_SetConfig+0x962>
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d02b      	beq.n	8002fc8 <UART_SetConfig+0x95c>
 8002f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b07      	cmp	r3, #7
 8002f76:	d023      	beq.n	8002fc0 <UART_SetConfig+0x954>
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d01b      	beq.n	8002fb8 <UART_SetConfig+0x94c>
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b09      	cmp	r3, #9
 8002f86:	d013      	beq.n	8002fb0 <UART_SetConfig+0x944>
 8002f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2b0a      	cmp	r3, #10
 8002f8e:	d00b      	beq.n	8002fa8 <UART_SetConfig+0x93c>
 8002f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b0b      	cmp	r3, #11
 8002f96:	d103      	bne.n	8002fa0 <UART_SetConfig+0x934>
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	2400      	movs	r4, #0
 8002f9e:	e02b      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	2400      	movs	r4, #0
 8002fa6:	e027      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	2400      	movs	r4, #0
 8002fae:	e023      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	e01f      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	02db      	lsls	r3, r3, #11
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	e01b      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	031b      	lsls	r3, r3, #12
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	e017      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <UART_SetConfig+0xa60>)
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e014      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fce:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <UART_SetConfig+0xa64>)
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	e011      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	035b      	lsls	r3, r3, #13
 8002fd8:	2400      	movs	r4, #0
 8002fda:	e00d      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <UART_SetConfig+0xa68>)
 8002fde:	2400      	movs	r4, #0
 8002fe0:	e00a      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	039b      	lsls	r3, r3, #14
 8002fe6:	2400      	movs	r4, #0
 8002fe8:	e006      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	03db      	lsls	r3, r3, #15
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e002      	b.n	8002ff8 <UART_SetConfig+0x98c>
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	2400      	movs	r4, #0
 8002ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	0852      	lsrs	r2, r2, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	2200      	movs	r2, #0
 8003002:	60fa      	str	r2, [r7, #12]
 8003004:	68b8      	ldr	r0, [r7, #8]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	18c0      	adds	r0, r0, r3
 800300a:	4161      	adcs	r1, r4
 800300c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f7fd f9e9 	bl	80003f0 <__aeabi_uldivmod>
 800301e:	0003      	movs	r3, r0
 8003020:	000c      	movs	r4, r1
 8003022:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8003024:	e007      	b.n	8003036 <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8003026:	2313      	movs	r3, #19
 8003028:	2258      	movs	r2, #88	; 0x58
 800302a:	4694      	mov	ip, r2
 800302c:	44bc      	add	ip, r7
 800302e:	4463      	add	r3, ip
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
            break;
 8003034:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <UART_SetConfig+0xa6c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d909      	bls.n	8003052 <UART_SetConfig+0x9e6>
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <UART_SetConfig+0xa70>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d805      	bhi.n	8003052 <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 8003046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	f000 fbbf 	bl	80037d0 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 8003052:	2313      	movs	r3, #19
 8003054:	2258      	movs	r2, #88	; 0x58
 8003056:	4694      	mov	ip, r2
 8003058:	44bc      	add	ip, r7
 800305a:	4463      	add	r3, ip
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	f000 fbb6 	bl	80037d0 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	429a      	cmp	r2, r3
 800306e:	d000      	beq.n	8003072 <UART_SetConfig+0xa06>
 8003070:	e1e4      	b.n	800343c <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 8003072:	231b      	movs	r3, #27
 8003074:	2258      	movs	r2, #88	; 0x58
 8003076:	4694      	mov	ip, r2
 8003078:	44bc      	add	ip, r7
 800307a:	4463      	add	r3, ip
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d100      	bne.n	8003084 <UART_SetConfig+0xa18>
 8003082:	e08e      	b.n	80031a2 <UART_SetConfig+0xb36>
 8003084:	dc02      	bgt.n	800308c <UART_SetConfig+0xa20>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02a      	beq.n	80030e0 <UART_SetConfig+0xa74>
 800308a:	e1a3      	b.n	80033d4 <UART_SetConfig+0xd68>
 800308c:	2b04      	cmp	r3, #4
 800308e:	d100      	bne.n	8003092 <UART_SetConfig+0xa26>
 8003090:	e0de      	b.n	8003250 <UART_SetConfig+0xbe4>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d100      	bne.n	8003098 <UART_SetConfig+0xa2c>
 8003096:	e13c      	b.n	8003312 <UART_SetConfig+0xca6>
 8003098:	e19c      	b.n	80033d4 <UART_SetConfig+0xd68>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	f4240000 	.word	0xf4240000
 80030a4:	01e84800 	.word	0x01e84800
 80030a8:	03d09000 	.word	0x03d09000
 80030ac:	07a12000 	.word	0x07a12000
 80030b0:	0f424000 	.word	0x0f424000
 80030b4:	14585500 	.word	0x14585500
 80030b8:	186a0000 	.word	0x186a0000
 80030bc:	1e848000 	.word	0x1e848000
 80030c0:	28b0aa00 	.word	0x28b0aa00
 80030c4:	3d090000 	.word	0x3d090000
 80030c8:	7a120000 	.word	0x7a120000
 80030cc:	000aaa00 	.word	0x000aaa00
 80030d0:	000ccc00 	.word	0x000ccc00
 80030d4:	00155500 	.word	0x00155500
 80030d8:	000002ff 	.word	0x000002ff
 80030dc:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e0:	f7ff f8a0 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80030e4:	0002      	movs	r2, r0
 80030e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <UART_SetConfig+0xb0c>
 80030ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d03e      	beq.n	8003174 <UART_SetConfig+0xb08>
 80030f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d038      	beq.n	8003170 <UART_SetConfig+0xb04>
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b03      	cmp	r3, #3
 8003104:	d032      	beq.n	800316c <UART_SetConfig+0xb00>
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b04      	cmp	r3, #4
 800310c:	d02c      	beq.n	8003168 <UART_SetConfig+0xafc>
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b05      	cmp	r3, #5
 8003114:	d026      	beq.n	8003164 <UART_SetConfig+0xaf8>
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b06      	cmp	r3, #6
 800311c:	d020      	beq.n	8003160 <UART_SetConfig+0xaf4>
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b07      	cmp	r3, #7
 8003124:	d01a      	beq.n	800315c <UART_SetConfig+0xaf0>
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b08      	cmp	r3, #8
 800312c:	d014      	beq.n	8003158 <UART_SetConfig+0xaec>
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b09      	cmp	r3, #9
 8003134:	d00e      	beq.n	8003154 <UART_SetConfig+0xae8>
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d008      	beq.n	8003150 <UART_SetConfig+0xae4>
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b0b      	cmp	r3, #11
 8003144:	d102      	bne.n	800314c <UART_SetConfig+0xae0>
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	e016      	b.n	800317a <UART_SetConfig+0xb0e>
 800314c:	2301      	movs	r3, #1
 800314e:	e014      	b.n	800317a <UART_SetConfig+0xb0e>
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	e012      	b.n	800317a <UART_SetConfig+0xb0e>
 8003154:	2340      	movs	r3, #64	; 0x40
 8003156:	e010      	b.n	800317a <UART_SetConfig+0xb0e>
 8003158:	2320      	movs	r3, #32
 800315a:	e00e      	b.n	800317a <UART_SetConfig+0xb0e>
 800315c:	2310      	movs	r3, #16
 800315e:	e00c      	b.n	800317a <UART_SetConfig+0xb0e>
 8003160:	230c      	movs	r3, #12
 8003162:	e00a      	b.n	800317a <UART_SetConfig+0xb0e>
 8003164:	230a      	movs	r3, #10
 8003166:	e008      	b.n	800317a <UART_SetConfig+0xb0e>
 8003168:	2308      	movs	r3, #8
 800316a:	e006      	b.n	800317a <UART_SetConfig+0xb0e>
 800316c:	2306      	movs	r3, #6
 800316e:	e004      	b.n	800317a <UART_SetConfig+0xb0e>
 8003170:	2304      	movs	r3, #4
 8003172:	e002      	b.n	800317a <UART_SetConfig+0xb0e>
 8003174:	2302      	movs	r3, #2
 8003176:	e000      	b.n	800317a <UART_SetConfig+0xb0e>
 8003178:	2301      	movs	r3, #1
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f7fc ffc1 	bl	8000104 <__udivsi3>
 8003182:	0003      	movs	r3, r0
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	18d2      	adds	r2, r2, r3
 800318e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0019      	movs	r1, r3
 8003194:	0010      	movs	r0, r2
 8003196:	f7fc ffb5 	bl	8000104 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	b29b      	uxth	r3, r3
 800319e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80031a0:	e120      	b.n	80033e4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d043      	beq.n	8003232 <UART_SetConfig+0xbc6>
 80031aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d03d      	beq.n	800322e <UART_SetConfig+0xbc2>
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d037      	beq.n	800322a <UART_SetConfig+0xbbe>
 80031ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d031      	beq.n	8003226 <UART_SetConfig+0xbba>
 80031c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d02b      	beq.n	8003222 <UART_SetConfig+0xbb6>
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d025      	beq.n	800321e <UART_SetConfig+0xbb2>
 80031d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d01f      	beq.n	800321a <UART_SetConfig+0xbae>
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b07      	cmp	r3, #7
 80031e0:	d019      	beq.n	8003216 <UART_SetConfig+0xbaa>
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d013      	beq.n	8003212 <UART_SetConfig+0xba6>
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	d00d      	beq.n	800320e <UART_SetConfig+0xba2>
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d007      	beq.n	800320a <UART_SetConfig+0xb9e>
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b0b      	cmp	r3, #11
 8003200:	d101      	bne.n	8003206 <UART_SetConfig+0xb9a>
 8003202:	4bba      	ldr	r3, [pc, #744]	; (80034ec <UART_SetConfig+0xe80>)
 8003204:	e016      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003206:	4bba      	ldr	r3, [pc, #744]	; (80034f0 <UART_SetConfig+0xe84>)
 8003208:	e014      	b.n	8003234 <UART_SetConfig+0xbc8>
 800320a:	4bba      	ldr	r3, [pc, #744]	; (80034f4 <UART_SetConfig+0xe88>)
 800320c:	e012      	b.n	8003234 <UART_SetConfig+0xbc8>
 800320e:	4bba      	ldr	r3, [pc, #744]	; (80034f8 <UART_SetConfig+0xe8c>)
 8003210:	e010      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003212:	4bba      	ldr	r3, [pc, #744]	; (80034fc <UART_SetConfig+0xe90>)
 8003214:	e00e      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003216:	4bba      	ldr	r3, [pc, #744]	; (8003500 <UART_SetConfig+0xe94>)
 8003218:	e00c      	b.n	8003234 <UART_SetConfig+0xbc8>
 800321a:	4bba      	ldr	r3, [pc, #744]	; (8003504 <UART_SetConfig+0xe98>)
 800321c:	e00a      	b.n	8003234 <UART_SetConfig+0xbc8>
 800321e:	4bba      	ldr	r3, [pc, #744]	; (8003508 <UART_SetConfig+0xe9c>)
 8003220:	e008      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003222:	4bba      	ldr	r3, [pc, #744]	; (800350c <UART_SetConfig+0xea0>)
 8003224:	e006      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003226:	4bba      	ldr	r3, [pc, #744]	; (8003510 <UART_SetConfig+0xea4>)
 8003228:	e004      	b.n	8003234 <UART_SetConfig+0xbc8>
 800322a:	4bba      	ldr	r3, [pc, #744]	; (8003514 <UART_SetConfig+0xea8>)
 800322c:	e002      	b.n	8003234 <UART_SetConfig+0xbc8>
 800322e:	4bba      	ldr	r3, [pc, #744]	; (8003518 <UART_SetConfig+0xeac>)
 8003230:	e000      	b.n	8003234 <UART_SetConfig+0xbc8>
 8003232:	4baf      	ldr	r3, [pc, #700]	; (80034f0 <UART_SetConfig+0xe84>)
 8003234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003236:	6852      	ldr	r2, [r2, #4]
 8003238:	0852      	lsrs	r2, r2, #1
 800323a:	189a      	adds	r2, r3, r2
 800323c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0019      	movs	r1, r3
 8003242:	0010      	movs	r0, r2
 8003244:	f7fc ff5e 	bl	8000104 <__udivsi3>
 8003248:	0003      	movs	r3, r0
 800324a:	b29b      	uxth	r3, r3
 800324c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800324e:	e0c9      	b.n	80033e4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003250:	f7fe ff5c 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003254:	0002      	movs	r2, r0
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <UART_SetConfig+0xc7c>
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b01      	cmp	r3, #1
 8003264:	d03e      	beq.n	80032e4 <UART_SetConfig+0xc78>
 8003266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b02      	cmp	r3, #2
 800326c:	d038      	beq.n	80032e0 <UART_SetConfig+0xc74>
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b03      	cmp	r3, #3
 8003274:	d032      	beq.n	80032dc <UART_SetConfig+0xc70>
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b04      	cmp	r3, #4
 800327c:	d02c      	beq.n	80032d8 <UART_SetConfig+0xc6c>
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b05      	cmp	r3, #5
 8003284:	d026      	beq.n	80032d4 <UART_SetConfig+0xc68>
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b06      	cmp	r3, #6
 800328c:	d020      	beq.n	80032d0 <UART_SetConfig+0xc64>
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b07      	cmp	r3, #7
 8003294:	d01a      	beq.n	80032cc <UART_SetConfig+0xc60>
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b08      	cmp	r3, #8
 800329c:	d014      	beq.n	80032c8 <UART_SetConfig+0xc5c>
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b09      	cmp	r3, #9
 80032a4:	d00e      	beq.n	80032c4 <UART_SetConfig+0xc58>
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d008      	beq.n	80032c0 <UART_SetConfig+0xc54>
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b0b      	cmp	r3, #11
 80032b4:	d102      	bne.n	80032bc <UART_SetConfig+0xc50>
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	e016      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032bc:	2301      	movs	r3, #1
 80032be:	e014      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	e012      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	e010      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032c8:	2320      	movs	r3, #32
 80032ca:	e00e      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032cc:	2310      	movs	r3, #16
 80032ce:	e00c      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032d0:	230c      	movs	r3, #12
 80032d2:	e00a      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032d4:	230a      	movs	r3, #10
 80032d6:	e008      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032d8:	2308      	movs	r3, #8
 80032da:	e006      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032dc:	2306      	movs	r3, #6
 80032de:	e004      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e002      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e000      	b.n	80032ea <UART_SetConfig+0xc7e>
 80032e8:	2301      	movs	r3, #1
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f7fc ff09 	bl	8000104 <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	005a      	lsls	r2, r3, #1
 80032f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	18d2      	adds	r2, r2, r3
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0019      	movs	r1, r3
 8003304:	0010      	movs	r0, r2
 8003306:	f7fc fefd 	bl	8000104 <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	b29b      	uxth	r3, r3
 800330e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003310:	e068      	b.n	80033e4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04c      	beq.n	80033b4 <UART_SetConfig+0xd48>
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b01      	cmp	r3, #1
 8003320:	d045      	beq.n	80033ae <UART_SetConfig+0xd42>
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b02      	cmp	r3, #2
 8003328:	d03e      	beq.n	80033a8 <UART_SetConfig+0xd3c>
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b03      	cmp	r3, #3
 8003330:	d038      	beq.n	80033a4 <UART_SetConfig+0xd38>
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b04      	cmp	r3, #4
 8003338:	d031      	beq.n	800339e <UART_SetConfig+0xd32>
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b05      	cmp	r3, #5
 8003340:	d02b      	beq.n	800339a <UART_SetConfig+0xd2e>
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b06      	cmp	r3, #6
 8003348:	d025      	beq.n	8003396 <UART_SetConfig+0xd2a>
 800334a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b07      	cmp	r3, #7
 8003350:	d01e      	beq.n	8003390 <UART_SetConfig+0xd24>
 8003352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b08      	cmp	r3, #8
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0xd1e>
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b09      	cmp	r3, #9
 8003360:	d010      	beq.n	8003384 <UART_SetConfig+0xd18>
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b0a      	cmp	r3, #10
 8003368:	d009      	beq.n	800337e <UART_SetConfig+0xd12>
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b0b      	cmp	r3, #11
 8003370:	d102      	bne.n	8003378 <UART_SetConfig+0xd0c>
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	e01f      	b.n	80033b8 <UART_SetConfig+0xd4c>
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	e01c      	b.n	80033b8 <UART_SetConfig+0xd4c>
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	e019      	b.n	80033b8 <UART_SetConfig+0xd4c>
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	e016      	b.n	80033b8 <UART_SetConfig+0xd4c>
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	e013      	b.n	80033b8 <UART_SetConfig+0xd4c>
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	e010      	b.n	80033b8 <UART_SetConfig+0xd4c>
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <UART_SetConfig+0xeb0>)
 8003398:	e00e      	b.n	80033b8 <UART_SetConfig+0xd4c>
 800339a:	4b61      	ldr	r3, [pc, #388]	; (8003520 <UART_SetConfig+0xeb4>)
 800339c:	e00c      	b.n	80033b8 <UART_SetConfig+0xd4c>
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	e009      	b.n	80033b8 <UART_SetConfig+0xd4c>
 80033a4:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <UART_SetConfig+0xeb8>)
 80033a6:	e007      	b.n	80033b8 <UART_SetConfig+0xd4c>
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	01db      	lsls	r3, r3, #7
 80033ac:	e004      	b.n	80033b8 <UART_SetConfig+0xd4c>
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	e001      	b.n	80033b8 <UART_SetConfig+0xd4c>
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ba:	6852      	ldr	r2, [r2, #4]
 80033bc:	0852      	lsrs	r2, r2, #1
 80033be:	189a      	adds	r2, r3, r2
 80033c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0019      	movs	r1, r3
 80033c6:	0010      	movs	r0, r2
 80033c8:	f7fc fe9c 	bl	8000104 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033d2:	e007      	b.n	80033e4 <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 80033d4:	2313      	movs	r3, #19
 80033d6:	2258      	movs	r2, #88	; 0x58
 80033d8:	4694      	mov	ip, r2
 80033da:	44bc      	add	ip, r7
 80033dc:	4463      	add	r3, ip
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
        break;
 80033e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d920      	bls.n	800342c <UART_SetConfig+0xdc0>
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	4a4e      	ldr	r2, [pc, #312]	; (8003528 <UART_SetConfig+0xebc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d81c      	bhi.n	800342c <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	200a      	movs	r0, #10
 80033f8:	2458      	movs	r4, #88	; 0x58
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	181b      	adds	r3, r3, r0
 80033fe:	210f      	movs	r1, #15
 8003400:	438a      	bics	r2, r1
 8003402:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	2207      	movs	r2, #7
 800340c:	4013      	ands	r3, r2
 800340e:	b299      	uxth	r1, r3
 8003410:	193b      	adds	r3, r7, r4
 8003412:	181b      	adds	r3, r3, r0
 8003414:	193a      	adds	r2, r7, r4
 8003416:	1812      	adds	r2, r2, r0
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	193a      	adds	r2, r7, r4
 8003424:	1812      	adds	r2, r2, r0
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e1d1      	b.n	80037d0 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 800342c:	2313      	movs	r3, #19
 800342e:	2258      	movs	r2, #88	; 0x58
 8003430:	4694      	mov	ip, r2
 8003432:	44bc      	add	ip, r7
 8003434:	4463      	add	r3, ip
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e1c9      	b.n	80037d0 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 800343c:	231b      	movs	r3, #27
 800343e:	2258      	movs	r2, #88	; 0x58
 8003440:	4694      	mov	ip, r2
 8003442:	44bc      	add	ip, r7
 8003444:	4463      	add	r3, ip
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d100      	bne.n	800344e <UART_SetConfig+0xde2>
 800344c:	e08d      	b.n	800356a <UART_SetConfig+0xefe>
 800344e:	dc02      	bgt.n	8003456 <UART_SetConfig+0xdea>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <UART_SetConfig+0xdf8>
 8003454:	e1a1      	b.n	800379a <UART_SetConfig+0x112e>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d100      	bne.n	800345c <UART_SetConfig+0xdf0>
 800345a:	e0dd      	b.n	8003618 <UART_SetConfig+0xfac>
 800345c:	2b08      	cmp	r3, #8
 800345e:	d100      	bne.n	8003462 <UART_SetConfig+0xdf6>
 8003460:	e13b      	b.n	80036da <UART_SetConfig+0x106e>
 8003462:	e19a      	b.n	800379a <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	f7fe fede 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003468:	0002      	movs	r2, r0
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d100      	bne.n	8003474 <UART_SetConfig+0xe08>
 8003472:	e065      	b.n	8003540 <UART_SetConfig+0xed4>
 8003474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b01      	cmp	r3, #1
 800347a:	d100      	bne.n	800347e <UART_SetConfig+0xe12>
 800347c:	e05e      	b.n	800353c <UART_SetConfig+0xed0>
 800347e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b02      	cmp	r3, #2
 8003484:	d058      	beq.n	8003538 <UART_SetConfig+0xecc>
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b03      	cmp	r3, #3
 800348c:	d052      	beq.n	8003534 <UART_SetConfig+0xec8>
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b04      	cmp	r3, #4
 8003494:	d04c      	beq.n	8003530 <UART_SetConfig+0xec4>
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b05      	cmp	r3, #5
 800349c:	d046      	beq.n	800352c <UART_SetConfig+0xec0>
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d020      	beq.n	80034e8 <UART_SetConfig+0xe7c>
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	d01a      	beq.n	80034e4 <UART_SetConfig+0xe78>
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d014      	beq.n	80034e0 <UART_SetConfig+0xe74>
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	d00e      	beq.n	80034dc <UART_SetConfig+0xe70>
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b0a      	cmp	r3, #10
 80034c4:	d008      	beq.n	80034d8 <UART_SetConfig+0xe6c>
 80034c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b0b      	cmp	r3, #11
 80034cc:	d102      	bne.n	80034d4 <UART_SetConfig+0xe68>
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	e036      	b.n	8003542 <UART_SetConfig+0xed6>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e034      	b.n	8003542 <UART_SetConfig+0xed6>
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	e032      	b.n	8003542 <UART_SetConfig+0xed6>
 80034dc:	2340      	movs	r3, #64	; 0x40
 80034de:	e030      	b.n	8003542 <UART_SetConfig+0xed6>
 80034e0:	2320      	movs	r3, #32
 80034e2:	e02e      	b.n	8003542 <UART_SetConfig+0xed6>
 80034e4:	2310      	movs	r3, #16
 80034e6:	e02c      	b.n	8003542 <UART_SetConfig+0xed6>
 80034e8:	230c      	movs	r3, #12
 80034ea:	e02a      	b.n	8003542 <UART_SetConfig+0xed6>
 80034ec:	0001e848 	.word	0x0001e848
 80034f0:	01e84800 	.word	0x01e84800
 80034f4:	0003d090 	.word	0x0003d090
 80034f8:	0007a120 	.word	0x0007a120
 80034fc:	000f4240 	.word	0x000f4240
 8003500:	001e8480 	.word	0x001e8480
 8003504:	0028b0aa 	.word	0x0028b0aa
 8003508:	0030d400 	.word	0x0030d400
 800350c:	003d0900 	.word	0x003d0900
 8003510:	00516154 	.word	0x00516154
 8003514:	007a1200 	.word	0x007a1200
 8003518:	00f42400 	.word	0x00f42400
 800351c:	00001554 	.word	0x00001554
 8003520:	00001998 	.word	0x00001998
 8003524:	00002aaa 	.word	0x00002aaa
 8003528:	0000ffff 	.word	0x0000ffff
 800352c:	230a      	movs	r3, #10
 800352e:	e008      	b.n	8003542 <UART_SetConfig+0xed6>
 8003530:	2308      	movs	r3, #8
 8003532:	e006      	b.n	8003542 <UART_SetConfig+0xed6>
 8003534:	2306      	movs	r3, #6
 8003536:	e004      	b.n	8003542 <UART_SetConfig+0xed6>
 8003538:	2304      	movs	r3, #4
 800353a:	e002      	b.n	8003542 <UART_SetConfig+0xed6>
 800353c:	2302      	movs	r3, #2
 800353e:	e000      	b.n	8003542 <UART_SetConfig+0xed6>
 8003540:	2301      	movs	r3, #1
 8003542:	0019      	movs	r1, r3
 8003544:	0010      	movs	r0, r2
 8003546:	f7fc fddd 	bl	8000104 <__udivsi3>
 800354a:	0003      	movs	r3, r0
 800354c:	001a      	movs	r2, r3
 800354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	18d2      	adds	r2, r2, r3
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	0019      	movs	r1, r3
 800355c:	0010      	movs	r0, r2
 800355e:	f7fc fdd1 	bl	8000104 <__udivsi3>
 8003562:	0003      	movs	r3, r0
 8003564:	b29b      	uxth	r3, r3
 8003566:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003568:	e11f      	b.n	80037aa <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d043      	beq.n	80035fa <UART_SetConfig+0xf8e>
 8003572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b01      	cmp	r3, #1
 8003578:	d03d      	beq.n	80035f6 <UART_SetConfig+0xf8a>
 800357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b02      	cmp	r3, #2
 8003580:	d037      	beq.n	80035f2 <UART_SetConfig+0xf86>
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b03      	cmp	r3, #3
 8003588:	d031      	beq.n	80035ee <UART_SetConfig+0xf82>
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b04      	cmp	r3, #4
 8003590:	d02b      	beq.n	80035ea <UART_SetConfig+0xf7e>
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b05      	cmp	r3, #5
 8003598:	d025      	beq.n	80035e6 <UART_SetConfig+0xf7a>
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d01f      	beq.n	80035e2 <UART_SetConfig+0xf76>
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d019      	beq.n	80035de <UART_SetConfig+0xf72>
 80035aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d013      	beq.n	80035da <UART_SetConfig+0xf6e>
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	d00d      	beq.n	80035d6 <UART_SetConfig+0xf6a>
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b0a      	cmp	r3, #10
 80035c0:	d007      	beq.n	80035d2 <UART_SetConfig+0xf66>
 80035c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b0b      	cmp	r3, #11
 80035c8:	d101      	bne.n	80035ce <UART_SetConfig+0xf62>
 80035ca:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <UART_SetConfig+0x1194>)
 80035cc:	e016      	b.n	80035fc <UART_SetConfig+0xf90>
 80035ce:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <UART_SetConfig+0x1198>)
 80035d0:	e014      	b.n	80035fc <UART_SetConfig+0xf90>
 80035d2:	4b8d      	ldr	r3, [pc, #564]	; (8003808 <UART_SetConfig+0x119c>)
 80035d4:	e012      	b.n	80035fc <UART_SetConfig+0xf90>
 80035d6:	4b8d      	ldr	r3, [pc, #564]	; (800380c <UART_SetConfig+0x11a0>)
 80035d8:	e010      	b.n	80035fc <UART_SetConfig+0xf90>
 80035da:	4b8d      	ldr	r3, [pc, #564]	; (8003810 <UART_SetConfig+0x11a4>)
 80035dc:	e00e      	b.n	80035fc <UART_SetConfig+0xf90>
 80035de:	4b8d      	ldr	r3, [pc, #564]	; (8003814 <UART_SetConfig+0x11a8>)
 80035e0:	e00c      	b.n	80035fc <UART_SetConfig+0xf90>
 80035e2:	4b8d      	ldr	r3, [pc, #564]	; (8003818 <UART_SetConfig+0x11ac>)
 80035e4:	e00a      	b.n	80035fc <UART_SetConfig+0xf90>
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <UART_SetConfig+0x11b0>)
 80035e8:	e008      	b.n	80035fc <UART_SetConfig+0xf90>
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <UART_SetConfig+0x11b4>)
 80035ec:	e006      	b.n	80035fc <UART_SetConfig+0xf90>
 80035ee:	4b8d      	ldr	r3, [pc, #564]	; (8003824 <UART_SetConfig+0x11b8>)
 80035f0:	e004      	b.n	80035fc <UART_SetConfig+0xf90>
 80035f2:	4b8d      	ldr	r3, [pc, #564]	; (8003828 <UART_SetConfig+0x11bc>)
 80035f4:	e002      	b.n	80035fc <UART_SetConfig+0xf90>
 80035f6:	4b8d      	ldr	r3, [pc, #564]	; (800382c <UART_SetConfig+0x11c0>)
 80035f8:	e000      	b.n	80035fc <UART_SetConfig+0xf90>
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <UART_SetConfig+0x1198>)
 80035fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035fe:	6852      	ldr	r2, [r2, #4]
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	189a      	adds	r2, r3, r2
 8003604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0019      	movs	r1, r3
 800360a:	0010      	movs	r0, r2
 800360c:	f7fc fd7a 	bl	8000104 <__udivsi3>
 8003610:	0003      	movs	r3, r0
 8003612:	b29b      	uxth	r3, r3
 8003614:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003616:	e0c8      	b.n	80037aa <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003618:	f7fe fd78 	bl	800210c <HAL_RCC_GetSysClockFreq>
 800361c:	0002      	movs	r2, r0
 800361e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <UART_SetConfig+0x1044>
 8003626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b01      	cmp	r3, #1
 800362c:	d03e      	beq.n	80036ac <UART_SetConfig+0x1040>
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b02      	cmp	r3, #2
 8003634:	d038      	beq.n	80036a8 <UART_SetConfig+0x103c>
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b03      	cmp	r3, #3
 800363c:	d032      	beq.n	80036a4 <UART_SetConfig+0x1038>
 800363e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b04      	cmp	r3, #4
 8003644:	d02c      	beq.n	80036a0 <UART_SetConfig+0x1034>
 8003646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b05      	cmp	r3, #5
 800364c:	d026      	beq.n	800369c <UART_SetConfig+0x1030>
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b06      	cmp	r3, #6
 8003654:	d020      	beq.n	8003698 <UART_SetConfig+0x102c>
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b07      	cmp	r3, #7
 800365c:	d01a      	beq.n	8003694 <UART_SetConfig+0x1028>
 800365e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b08      	cmp	r3, #8
 8003664:	d014      	beq.n	8003690 <UART_SetConfig+0x1024>
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b09      	cmp	r3, #9
 800366c:	d00e      	beq.n	800368c <UART_SetConfig+0x1020>
 800366e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d008      	beq.n	8003688 <UART_SetConfig+0x101c>
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b0b      	cmp	r3, #11
 800367c:	d102      	bne.n	8003684 <UART_SetConfig+0x1018>
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	e016      	b.n	80036b2 <UART_SetConfig+0x1046>
 8003684:	2301      	movs	r3, #1
 8003686:	e014      	b.n	80036b2 <UART_SetConfig+0x1046>
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	e012      	b.n	80036b2 <UART_SetConfig+0x1046>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x1046>
 8003690:	2320      	movs	r3, #32
 8003692:	e00e      	b.n	80036b2 <UART_SetConfig+0x1046>
 8003694:	2310      	movs	r3, #16
 8003696:	e00c      	b.n	80036b2 <UART_SetConfig+0x1046>
 8003698:	230c      	movs	r3, #12
 800369a:	e00a      	b.n	80036b2 <UART_SetConfig+0x1046>
 800369c:	230a      	movs	r3, #10
 800369e:	e008      	b.n	80036b2 <UART_SetConfig+0x1046>
 80036a0:	2308      	movs	r3, #8
 80036a2:	e006      	b.n	80036b2 <UART_SetConfig+0x1046>
 80036a4:	2306      	movs	r3, #6
 80036a6:	e004      	b.n	80036b2 <UART_SetConfig+0x1046>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e002      	b.n	80036b2 <UART_SetConfig+0x1046>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e000      	b.n	80036b2 <UART_SetConfig+0x1046>
 80036b0:	2301      	movs	r3, #1
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f7fc fd25 	bl	8000104 <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	001a      	movs	r2, r3
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	18d2      	adds	r2, r2, r3
 80036c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0019      	movs	r1, r3
 80036cc:	0010      	movs	r0, r2
 80036ce:	f7fc fd19 	bl	8000104 <__udivsi3>
 80036d2:	0003      	movs	r3, r0
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80036d8:	e067      	b.n	80037aa <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04b      	beq.n	800377a <UART_SetConfig+0x110e>
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d044      	beq.n	8003774 <UART_SetConfig+0x1108>
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d03d      	beq.n	800376e <UART_SetConfig+0x1102>
 80036f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d037      	beq.n	800376a <UART_SetConfig+0x10fe>
 80036fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d030      	beq.n	8003764 <UART_SetConfig+0x10f8>
 8003702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b05      	cmp	r3, #5
 8003708:	d02a      	beq.n	8003760 <UART_SetConfig+0x10f4>
 800370a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b06      	cmp	r3, #6
 8003710:	d024      	beq.n	800375c <UART_SetConfig+0x10f0>
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b07      	cmp	r3, #7
 8003718:	d01d      	beq.n	8003756 <UART_SetConfig+0x10ea>
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b08      	cmp	r3, #8
 8003720:	d016      	beq.n	8003750 <UART_SetConfig+0x10e4>
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b09      	cmp	r3, #9
 8003728:	d00f      	beq.n	800374a <UART_SetConfig+0x10de>
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b0a      	cmp	r3, #10
 8003730:	d008      	beq.n	8003744 <UART_SetConfig+0x10d8>
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2b0b      	cmp	r3, #11
 8003738:	d101      	bne.n	800373e <UART_SetConfig+0x10d2>
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	e01f      	b.n	800377e <UART_SetConfig+0x1112>
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	e01c      	b.n	800377e <UART_SetConfig+0x1112>
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	e019      	b.n	800377e <UART_SetConfig+0x1112>
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	e016      	b.n	800377e <UART_SetConfig+0x1112>
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	e013      	b.n	800377e <UART_SetConfig+0x1112>
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x1112>
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <UART_SetConfig+0x11c4>)
 800375e:	e00e      	b.n	800377e <UART_SetConfig+0x1112>
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <UART_SetConfig+0x11c8>)
 8003762:	e00c      	b.n	800377e <UART_SetConfig+0x1112>
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	e009      	b.n	800377e <UART_SetConfig+0x1112>
 800376a:	4b33      	ldr	r3, [pc, #204]	; (8003838 <UART_SetConfig+0x11cc>)
 800376c:	e007      	b.n	800377e <UART_SetConfig+0x1112>
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	e004      	b.n	800377e <UART_SetConfig+0x1112>
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	e001      	b.n	800377e <UART_SetConfig+0x1112>
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003780:	6852      	ldr	r2, [r2, #4]
 8003782:	0852      	lsrs	r2, r2, #1
 8003784:	189a      	adds	r2, r3, r2
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	0019      	movs	r1, r3
 800378c:	0010      	movs	r0, r2
 800378e:	f7fc fcb9 	bl	8000104 <__udivsi3>
 8003792:	0003      	movs	r3, r0
 8003794:	b29b      	uxth	r3, r3
 8003796:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003798:	e007      	b.n	80037aa <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 800379a:	2313      	movs	r3, #19
 800379c:	2258      	movs	r2, #88	; 0x58
 800379e:	4694      	mov	ip, r2
 80037a0:	44bc      	add	ip, r7
 80037a2:	4463      	add	r3, ip
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
        break;
 80037a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d908      	bls.n	80037c2 <UART_SetConfig+0x1156>
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <UART_SetConfig+0x11d0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d804      	bhi.n	80037c2 <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 80037b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e006      	b.n	80037d0 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 80037c2:	2313      	movs	r3, #19
 80037c4:	2258      	movs	r2, #88	; 0x58
 80037c6:	4694      	mov	ip, r2
 80037c8:	44bc      	add	ip, r7
 80037ca:	4463      	add	r3, ip
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d2:	226a      	movs	r2, #106	; 0x6a
 80037d4:	2101      	movs	r1, #1
 80037d6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037da:	2268      	movs	r2, #104	; 0x68
 80037dc:	2101      	movs	r1, #1
 80037de:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e2:	2200      	movs	r2, #0
 80037e4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80037e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e8:	2200      	movs	r2, #0
 80037ea:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80037ec:	2313      	movs	r3, #19
 80037ee:	2258      	movs	r2, #88	; 0x58
 80037f0:	4694      	mov	ip, r2
 80037f2:	44bc      	add	ip, r7
 80037f4:	4463      	add	r3, ip
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b01f      	add	sp, #124	; 0x7c
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003800:	0000f424 	.word	0x0000f424
 8003804:	00f42400 	.word	0x00f42400
 8003808:	0001e848 	.word	0x0001e848
 800380c:	0003d090 	.word	0x0003d090
 8003810:	0007a120 	.word	0x0007a120
 8003814:	000f4240 	.word	0x000f4240
 8003818:	00145855 	.word	0x00145855
 800381c:	00186a00 	.word	0x00186a00
 8003820:	001e8480 	.word	0x001e8480
 8003824:	0028b0aa 	.word	0x0028b0aa
 8003828:	003d0900 	.word	0x003d0900
 800382c:	007a1200 	.word	0x007a1200
 8003830:	00000aaa 	.word	0x00000aaa
 8003834:	00000ccc 	.word	0x00000ccc
 8003838:	00001555 	.word	0x00001555
 800383c:	0000ffff 	.word	0x0000ffff

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2201      	movs	r2, #1
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <UART_AdvFeatureConfig+0x144>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	2202      	movs	r2, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a43      	ldr	r2, [pc, #268]	; (8003988 <UART_AdvFeatureConfig+0x148>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	2204      	movs	r2, #4
 8003892:	4013      	ands	r3, r2
 8003894:	d00b      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <UART_AdvFeatureConfig+0x14c>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	2208      	movs	r2, #8
 80038b4:	4013      	ands	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <UART_AdvFeatureConfig+0x150>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	2210      	movs	r2, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <UART_AdvFeatureConfig+0x154>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	2220      	movs	r2, #32
 80038f8:	4013      	ands	r3, r2
 80038fa:	d00b      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <UART_AdvFeatureConfig+0x158>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	4013      	ands	r3, r2
 800391c:	d01d      	beq.n	800395a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <UART_AdvFeatureConfig+0x15c>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	035b      	lsls	r3, r3, #13
 800393e:	429a      	cmp	r2, r3
 8003940:	d10b      	bne.n	800395a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <UART_AdvFeatureConfig+0x160>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <UART_AdvFeatureConfig+0x164>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffdffff 	.word	0xfffdffff
 8003988:	fffeffff 	.word	0xfffeffff
 800398c:	fffbffff 	.word	0xfffbffff
 8003990:	ffff7fff 	.word	0xffff7fff
 8003994:	ffffefff 	.word	0xffffefff
 8003998:	ffffdfff 	.word	0xffffdfff
 800399c:	ffefffff 	.word	0xffefffff
 80039a0:	ff9fffff 	.word	0xff9fffff
 80039a4:	fff7ffff 	.word	0xfff7ffff

080039a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2288      	movs	r2, #136	; 0x88
 80039b4:	2100      	movs	r1, #0
 80039b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039b8:	f7fc fea0 	bl	80006fc <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d10d      	bne.n	80039ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	0399      	lsls	r1, r3, #14
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <UART_CheckIdleState+0x90>)
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	0013      	movs	r3, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	f000 f82d 	bl	8003a3c <UART_WaitOnFlagUntilTimeout>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e021      	b.n	8003a2e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2204      	movs	r2, #4
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d10d      	bne.n	8003a14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	03d9      	lsls	r1, r3, #15
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <UART_CheckIdleState+0x90>)
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	0013      	movs	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	f000 f818 	bl	8003a3c <UART_WaitOnFlagUntilTimeout>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d001      	beq.n	8003a14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e00c      	b.n	8003a2e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	2120      	movs	r1, #32
 8003a1a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	2120      	movs	r1, #32
 8003a22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	227c      	movs	r2, #124	; 0x7c
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	01ffffff 	.word	0x01ffffff

08003a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4c:	e02b      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	3301      	adds	r3, #1
 8003a52:	d028      	beq.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7fc fe52 	bl	80006fc <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	438a      	bics	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	2120      	movs	r1, #32
 8003a90:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2284      	movs	r2, #132	; 0x84
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	227c      	movs	r2, #124	; 0x7c
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e00f      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	425a      	negs	r2, r3
 8003ab6:	4153      	adcs	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	001a      	movs	r2, r3
 8003abc:	1dfb      	adds	r3, r7, #7
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0c4      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	fffffe5f 	.word	0xfffffe5f

08003ad4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	227c      	movs	r2, #124	; 0x7c
 8003ae0:	5c9b      	ldrb	r3, [r3, r2]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UARTEx_DisableFifoMode+0x16>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e027      	b.n	8003b3a <HAL_UARTEx_DisableFifoMode+0x66>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	227c      	movs	r2, #124	; 0x7c
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	2124      	movs	r1, #36	; 0x24
 8003af8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	438a      	bics	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	2120      	movs	r1, #32
 8003b2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	227c      	movs	r2, #124	; 0x7c
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	dfffffff 	.word	0xdfffffff

08003b48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	227c      	movs	r2, #124	; 0x7c
 8003b56:	5c9b      	ldrb	r3, [r3, r2]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e02e      	b.n	8003bbe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	227c      	movs	r2, #124	; 0x7c
 8003b64:	2101      	movs	r1, #1
 8003b66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	2124      	movs	r1, #36	; 0x24
 8003b6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	08d9      	lsrs	r1, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f854 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	227c      	movs	r2, #124	; 0x7c
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	227c      	movs	r2, #124	; 0x7c
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e02f      	b.n	8003c40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	227c      	movs	r2, #124	; 0x7c
 8003be4:	2101      	movs	r1, #1
 8003be6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	2124      	movs	r1, #36	; 0x24
 8003bee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	438a      	bics	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 f813 	bl	8003c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	2120      	movs	r1, #32
 8003c34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	227c      	movs	r2, #124	; 0x7c
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	f1ffffff 	.word	0xf1ffffff

08003c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003c54:	2314      	movs	r3, #20
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <UARTEx_SetNbDataToProcess+0xcc>)
 8003c5a:	ca03      	ldmia	r2!, {r0, r1}
 8003c5c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003c5e:	230c      	movs	r3, #12
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	4a2e      	ldr	r2, [pc, #184]	; (8003d1c <UARTEx_SetNbDataToProcess+0xd0>)
 8003c64:	ca03      	ldmia	r2!, {r0, r1}
 8003c66:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	226a      	movs	r2, #106	; 0x6a
 8003c74:	2101      	movs	r1, #1
 8003c76:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2268      	movs	r2, #104	; 0x68
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c80:	e046      	b.n	8003d10 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c82:	261f      	movs	r6, #31
 8003c84:	19bb      	adds	r3, r7, r6
 8003c86:	2208      	movs	r2, #8
 8003c88:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c8a:	201e      	movs	r0, #30
 8003c8c:	183b      	adds	r3, r7, r0
 8003c8e:	2208      	movs	r2, #8
 8003c90:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	0e5b      	lsrs	r3, r3, #25
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	241d      	movs	r4, #29
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	2107      	movs	r1, #7
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	0f5b      	lsrs	r3, r3, #29
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	251c      	movs	r5, #28
 8003cb2:	197b      	adds	r3, r7, r5
 8003cb4:	2107      	movs	r1, #7
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	197a      	adds	r2, r7, r5
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	2114      	movs	r1, #20
 8003cc4:	1879      	adds	r1, r7, r1
 8003cc6:	5c8a      	ldrb	r2, [r1, r2]
 8003cc8:	435a      	muls	r2, r3
 8003cca:	0010      	movs	r0, r2
 8003ccc:	197b      	adds	r3, r7, r5
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	250c      	movs	r5, #12
 8003cd2:	197a      	adds	r2, r7, r5
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	f7fc fa9e 	bl	8000218 <__divsi3>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	226a      	movs	r2, #106	; 0x6a
 8003ce4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003ce6:	19bb      	adds	r3, r7, r6
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	193a      	adds	r2, r7, r4
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	2114      	movs	r1, #20
 8003cf0:	1879      	adds	r1, r7, r1
 8003cf2:	5c8a      	ldrb	r2, [r1, r2]
 8003cf4:	435a      	muls	r2, r3
 8003cf6:	0010      	movs	r0, r2
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	197a      	adds	r2, r7, r5
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	0019      	movs	r1, r3
 8003d02:	f7fc fa89 	bl	8000218 <__divsi3>
 8003d06:	0003      	movs	r3, r0
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2268      	movs	r2, #104	; 0x68
 8003d0e:	5299      	strh	r1, [r3, r2]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b009      	add	sp, #36	; 0x24
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d18:	08004c68 	.word	0x08004c68
 8003d1c:	08004c70 	.word	0x08004c70

08003d20 <I2CRead>:

#include "main.h"
#include "i2c.h"
//#include "stm32g0xx_hal.h"

void I2CRead(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003d20:	b5b0      	push	{r4, r5, r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af04      	add	r7, sp, #16
 8003d26:	60ba      	str	r2, [r7, #8]
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	250e      	movs	r5, #14
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	1c02      	adds	r2, r0, #0
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	200c      	movs	r0, #12
 8003d34:	183b      	adds	r3, r7, r0
 8003d36:	1c0a      	adds	r2, r1, #0
 8003d38:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	183a      	adds	r2, r7, r0
 8003d40:	8814      	ldrh	r4, [r2, #0]
 8003d42:	197a      	adds	r2, r7, r5
 8003d44:	8811      	ldrh	r1, [r2, #0]
 8003d46:	4808      	ldr	r0, [pc, #32]	; (8003d68 <I2CRead+0x48>)
 8003d48:	2232      	movs	r2, #50	; 0x32
 8003d4a:	9202      	str	r2, [sp, #8]
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2302      	movs	r3, #2
 8003d54:	0022      	movs	r2, r4
 8003d56:	f7fd f95b 	bl	8001010 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003d5a:	200a      	movs	r0, #10
 8003d5c:	f7fc fcd8 	bl	8000710 <HAL_Delay>
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b004      	add	sp, #16
 8003d66:	bdb0      	pop	{r4, r5, r7, pc}
 8003d68:	2000002c 	.word	0x2000002c

08003d6c <I2CWrite>:

void I2CWrite(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af04      	add	r7, sp, #16
 8003d72:	60ba      	str	r2, [r7, #8]
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	250e      	movs	r5, #14
 8003d78:	197b      	adds	r3, r7, r5
 8003d7a:	1c02      	adds	r2, r0, #0
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	200c      	movs	r0, #12
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	1c0a      	adds	r2, r1, #0
 8003d84:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	183a      	adds	r2, r7, r0
 8003d8c:	8814      	ldrh	r4, [r2, #0]
 8003d8e:	197a      	adds	r2, r7, r5
 8003d90:	8811      	ldrh	r1, [r2, #0]
 8003d92:	4808      	ldr	r0, [pc, #32]	; (8003db4 <I2CWrite+0x48>)
 8003d94:	2232      	movs	r2, #50	; 0x32
 8003d96:	9202      	str	r2, [sp, #8]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2302      	movs	r3, #2
 8003da0:	0022      	movs	r2, r4
 8003da2:	f7fd f807 	bl	8000db4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003da6:	200a      	movs	r0, #10
 8003da8:	f7fc fcb2 	bl	8000710 <HAL_Delay>
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bdb0      	pop	{r4, r5, r7, pc}
 8003db4:	2000002c 	.word	0x2000002c

08003db8 <NFC_Delay>:

void NFC_Delay(uint32_t delay){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fc fca4 	bl	8000710 <HAL_Delay>
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	b0db      	sub	sp, #364	; 0x16c
 8003dd4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dd6:	f7fc fc17 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dda:	f000 f8dd 	bl	8003f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dde:	f000 f9d5 	bl	800418c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003de2:	f000 f943 	bl	800406c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003de6:	f000 f981 	bl	80040ec <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003dea:	f000 f931 	bl	8004050 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer[6];
  buffer[0]= 0x4c;	//L
 8003dee:	21ac      	movs	r1, #172	; 0xac
 8003df0:	0049      	lsls	r1, r1, #1
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	224c      	movs	r2, #76	; 0x4c
 8003df6:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	224f      	movs	r2, #79	; 0x4f
 8003dfc:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2255      	movs	r2, #85	; 0x55
 8003e02:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	2249      	movs	r2, #73	; 0x49
 8003e08:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	2253      	movs	r2, #83	; 0x53
 8003e0e:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	2231      	movs	r2, #49	; 0x31
 8003e14:	715a      	strb	r2, [r3, #5]
  uint8_t buffer1[6];
  buffer1[0]= 0x48;	//H
 8003e16:	26a8      	movs	r6, #168	; 0xa8
 8003e18:	0076      	lsls	r6, r6, #1
 8003e1a:	19bb      	adds	r3, r7, r6
 8003e1c:	2248      	movs	r2, #72	; 0x48
 8003e1e:	701a      	strb	r2, [r3, #0]
  buffer1[1]= 0x45;	//E
 8003e20:	19bb      	adds	r3, r7, r6
 8003e22:	2245      	movs	r2, #69	; 0x45
 8003e24:	705a      	strb	r2, [r3, #1]
  buffer1[2]= 0x4c;	//L
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	224c      	movs	r2, #76	; 0x4c
 8003e2a:	709a      	strb	r2, [r3, #2]
  buffer1[3]= 0x4c;	//L
 8003e2c:	19bb      	adds	r3, r7, r6
 8003e2e:	224c      	movs	r2, #76	; 0x4c
 8003e30:	70da      	strb	r2, [r3, #3]
  buffer1[4]= 0x4f;	//O
 8003e32:	19bb      	adds	r3, r7, r6
 8003e34:	224f      	movs	r2, #79	; 0x4f
 8003e36:	711a      	strb	r2, [r3, #4]
  buffer1[5]= 0x33;	//3
 8003e38:	19bb      	adds	r3, r7, r6
 8003e3a:	2233      	movs	r2, #51	; 0x33
 8003e3c:	715a      	strb	r2, [r3, #5]
  uint8_t buffer2[13];
  buffer2[0] = 0x50; //P
 8003e3e:	24a0      	movs	r4, #160	; 0xa0
 8003e40:	0064      	lsls	r4, r4, #1
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2250      	movs	r2, #80	; 0x50
 8003e46:	701a      	strb	r2, [r3, #0]
  buffer2[1] = 0x61; //a
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	2261      	movs	r2, #97	; 0x61
 8003e4c:	705a      	strb	r2, [r3, #1]
  buffer2[2] = 0x63; //c
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	2263      	movs	r2, #99	; 0x63
 8003e52:	709a      	strb	r2, [r3, #2]
  buffer2[3] = 0x69; //i
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2269      	movs	r2, #105	; 0x69
 8003e58:	70da      	strb	r2, [r3, #3]
  buffer2[4] = 0x66; //f
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	2266      	movs	r2, #102	; 0x66
 8003e5e:	711a      	strb	r2, [r3, #4]
  buffer2[5] = 0x69; //i
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	2269      	movs	r2, #105	; 0x69
 8003e64:	715a      	strb	r2, [r3, #5]
  buffer2[6] = 0x63; //c
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	2263      	movs	r2, #99	; 0x63
 8003e6a:	719a      	strb	r2, [r3, #6]
  buffer2[7] = 0x20; //
 8003e6c:	193b      	adds	r3, r7, r4
 8003e6e:	2220      	movs	r2, #32
 8003e70:	71da      	strb	r2, [r3, #7]
  buffer2[8] = 0x6f; //o
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	226f      	movs	r2, #111	; 0x6f
 8003e76:	721a      	strb	r2, [r3, #8]
  buffer2[9] = 0x63; //c
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	2263      	movs	r2, #99	; 0x63
 8003e7c:	725a      	strb	r2, [r3, #9]
  buffer2[10] = 0x65; //e
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	2265      	movs	r2, #101	; 0x65
 8003e82:	729a      	strb	r2, [r3, #10]
  buffer2[11] = 0x61; //a
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	2261      	movs	r2, #97	; 0x61
 8003e88:	72da      	strb	r2, [r3, #11]
  buffer2[12] = 0x6e; //n
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	226e      	movs	r2, #110	; 0x6e
 8003e8e:	731a      	strb	r2, [r3, #12]
  //uint8_t oldPassword[8] = {0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08};
  uint8_t password[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
 8003e90:	259c      	movs	r5, #156	; 0x9c
 8003e92:	006d      	lsls	r5, r5, #1
 8003e94:	197b      	adds	r3, r7, r5
 8003e96:	0018      	movs	r0, r3
 8003e98:	2308      	movs	r3, #8
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f000 fecf 	bl	8004c40 <memset>
 8003ea2:	197b      	adds	r3, r7, r5
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	71da      	strb	r2, [r3, #7]
  uint8_t area2data[5];
  uint8_t area3data[5];
  uint8_t area4data[5];

  //initNFC(&hi2c1, NFC_USERMEMORY);
  HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,0);
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <main+0x1bc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2110      	movs	r1, #16
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7fc fe8e 	bl	8000bd0 <HAL_GPIO_WritePin>
  disableMailBox(password);
 8003eb4:	197b      	adds	r3, r7, r5
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 fc6a 	bl	8004790 <disableMailBox>
  setDefaultArea(password);
 8003ebc:	197b      	adds	r3, r7, r5
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 faf2 	bl	80044a8 <setDefaultArea>
  i2CWriteProtectUserArea(password, NO_WRITEPROTECT);
 8003ec4:	197b      	adds	r3, r7, r5
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 fbfd 	bl	80046c8 <i2CWriteProtectUserArea>
  writeT5TCCFile(ONE_BYTE_ADDRESSING);
 8003ece:	20e1      	movs	r0, #225	; 0xe1
 8003ed0:	f000 f9ed 	bl	80042ae <writeT5TCCFile>
  setArea(password, 4,NA,NA);
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4259      	negs	r1, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	425a      	negs	r2, r3
 8003edc:	1978      	adds	r0, r7, r5
 8003ede:	000b      	movs	r3, r1
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	f000 fb2b 	bl	800453c <setArea>
  setArea(password, 2,4,6);
 8003ee6:	1978      	adds	r0, r7, r5
 8003ee8:	2306      	movs	r3, #6
 8003eea:	2204      	movs	r2, #4
 8003eec:	2102      	movs	r1, #2
 8003eee:	f000 fb25 	bl	800453c <setArea>
  rfWriteProtectUserArea(password,RFAREA_WRITEFORBIDDEN,RFAREA_NOPROTECT,RFAREA_WRITEPROTECT,RFAREA_WRITEPROTECT);
 8003ef2:	1978      	adds	r0, r7, r5
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2304      	movs	r3, #4
 8003efa:	2200      	movs	r2, #0
 8003efc:	210c      	movs	r1, #12
 8003efe:	f000 fbff 	bl	8004700 <rfWriteProtectUserArea>
  i2CWriteProtectUserArea(password, AREA1_WRITEPROTECT|AREA2_WRITEPROTECT);
 8003f02:	197b      	adds	r3, r7, r5
 8003f04:	2105      	movs	r1, #5
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 fbde 	bl	80046c8 <i2CWriteProtectUserArea>
  readSystemMemory(I2CSS, data,1);
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2201      	movs	r2, #1
 8003f12:	0019      	movs	r1, r3
 8003f14:	200b      	movs	r0, #11
 8003f16:	f000 fa55 	bl	80043c4 <readSystemMemory>
  //configFastTransferMode(password, FTM_ENABLE, 0x00);
  //writeDatatoMailbox(buffer2,13);
  readDatafromMailbox(0x2008,received,30);
 8003f1a:	2338      	movs	r3, #56	; 0x38
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	481c      	ldr	r0, [pc, #112]	; (8003f90 <main+0x1c0>)
 8003f20:	221e      	movs	r2, #30
 8003f22:	0019      	movs	r1, r3
 8003f24:	f000 fc94 	bl	8004850 <readDatafromMailbox>
  resetMailBox();
 8003f28:	f000 fc52 	bl	80047d0 <resetMailBox>
  readDatafromMailbox(0x2008,received, 30);
 8003f2c:	2338      	movs	r3, #56	; 0x38
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	4817      	ldr	r0, [pc, #92]	; (8003f90 <main+0x1c0>)
 8003f32:	221e      	movs	r2, #30
 8003f34:	0019      	movs	r1, r3
 8003f36:	f000 fc8b 	bl	8004850 <readDatafromMailbox>
  writeDatatoMailbox(buffer2,13);
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	210d      	movs	r1, #13
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fc62 	bl	8004808 <writeDatatoMailbox>
  writeDatatoMailbox(buffer1,5);
 8003f44:	19bb      	adds	r3, r7, r6
 8003f46:	2105      	movs	r1, #5
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 fc5d 	bl	8004808 <writeDatatoMailbox>
  getMailBoxMessage(received);
 8003f4e:	2338      	movs	r3, #56	; 0x38
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 fca0 	bl	8004898 <getMailBoxMessage>
  //readDatafromMailbox(0x2018,received, 30);
  //NFC04A1_setRFMode(password,RF_ENABLE);
  //enableMailBox(password);
  //configFastTransferMode(password, FTM_ENABLE, 0x00);
  //getMailBoxMessage(received);
  HAL_Delay(50);
 8003f58:	2032      	movs	r0, #50	; 0x32
 8003f5a:	f7fc fbd9 	bl	8000710 <HAL_Delay>
  enableInterrupt(password);
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 fce1 	bl	8004928 <enableInterrupt>
  configureInterrupt(password,RF_PUT_MSG_EN|GPO_EN);
 8003f66:	197b      	adds	r3, r7, r5
 8003f68:	2190      	movs	r1, #144	; 0x90
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fcfb 	bl	8004966 <configureInterrupt>
  writeSystemMemory(I2CSS,password, 0x00);
 8003f70:	197b      	adds	r3, r7, r5
 8003f72:	2200      	movs	r2, #0
 8003f74:	0019      	movs	r1, r3
 8003f76:	200b      	movs	r0, #11
 8003f78:	f000 fa39 	bl	80043ee <writeSystemMemory>
  I2CRead(NFC_USERMEMORY, MB_LEN_DYN,test2,1);
 8003f7c:	232c      	movs	r3, #44	; 0x2c
 8003f7e:	18fa      	adds	r2, r7, r3
 8003f80:	4904      	ldr	r1, [pc, #16]	; (8003f94 <main+0x1c4>)
 8003f82:	2301      	movs	r3, #1
 8003f84:	20a6      	movs	r0, #166	; 0xa6
 8003f86:	f7ff fecb 	bl	8003d20 <I2CRead>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f8a:	e7fe      	b.n	8003f8a <main+0x1ba>
 8003f8c:	50000400 	.word	0x50000400
 8003f90:	00002008 	.word	0x00002008
 8003f94:	00002007 	.word	0x00002007

08003f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b0a1      	sub	sp, #132	; 0x84
 8003f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f9e:	2448      	movs	r4, #72	; 0x48
 8003fa0:	193b      	adds	r3, r7, r4
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	2338      	movs	r3, #56	; 0x38
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f000 fe49 	bl	8004c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fae:	2338      	movs	r3, #56	; 0x38
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f000 fe41 	bl	8004c40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	2334      	movs	r3, #52	; 0x34
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f000 fe3a 	bl	8004c40 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7fd fc27 	bl	8001824 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fd6:	193b      	adds	r3, r7, r4
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003fdc:	193b      	adds	r3, r7, r4
 8003fde:	22a0      	movs	r2, #160	; 0xa0
 8003fe0:	02d2      	lsls	r2, r2, #11
 8003fe2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7fd fc65 	bl	80018bc <HAL_RCC_OscConfig>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d001      	beq.n	8003ffa <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003ff6:	f000 f955 	bl	80042a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ffa:	2138      	movs	r1, #56	; 0x38
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2207      	movs	r2, #7
 8004000:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2201      	movs	r2, #1
 8004006:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004008:	187b      	adds	r3, r7, r1
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004014:	187b      	adds	r3, r7, r1
 8004016:	2100      	movs	r1, #0
 8004018:	0018      	movs	r0, r3
 800401a:	f7fd ff6f 	bl	8001efc <HAL_RCC_ClockConfig>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d001      	beq.n	8004026 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004022:	f000 f93f 	bl	80042a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	2260      	movs	r2, #96	; 0x60
 800402a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	0018      	movs	r0, r3
 800403c:	f7fe f908 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8004044:	f000 f92e 	bl	80042a4 <Error_Handler>
  }
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b021      	add	sp, #132	; 0x84
 800404e:	bd90      	pop	{r4, r7, pc}

08004050 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2101      	movs	r1, #1
 8004058:	2007      	movs	r0, #7
 800405a:	f7fc fc23 	bl	80008a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800405e:	2007      	movs	r0, #7
 8004060:	f7fc fc35 	bl	80008ce <HAL_NVIC_EnableIRQ>
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <MX_I2C1_Init+0x78>)
 8004074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <MX_I2C1_Init+0x7c>)
 800407a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <MX_I2C1_Init+0x74>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004084:	2201      	movs	r2, #1
 8004086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <MX_I2C1_Init+0x74>)
 800408a:	2200      	movs	r2, #0
 800408c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004090:	2200      	movs	r2, #0
 8004092:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004096:	2200      	movs	r2, #0
 8004098:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_I2C1_Init+0x74>)
 800409c:	2200      	movs	r2, #0
 800409e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fc fded 	bl	8000c88 <HAL_I2C_Init>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d001      	beq.n	80040b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040b2:	f000 f8f7 	bl	80042a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040b8:	2100      	movs	r1, #0
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7fd fb1a 	bl	80016f4 <HAL_I2CEx_ConfigAnalogFilter>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d001      	beq.n	80040c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040c4:	f000 f8ee 	bl	80042a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040ca:	2100      	movs	r1, #0
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fd fb5d 	bl	800178c <HAL_I2CEx_ConfigDigitalFilter>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040d6:	f000 f8e5 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2000002c 	.word	0x2000002c
 80040e4:	40005400 	.word	0x40005400
 80040e8:	2000090e 	.word	0x2000090e

080040ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 80040f2:	4a24      	ldr	r2, [pc, #144]	; (8004184 <MX_LPUART1_UART_Init+0x98>)
 80040f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 80040f8:	4a23      	ldr	r2, [pc, #140]	; (8004188 <MX_LPUART1_UART_Init+0x9c>)
 80040fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	0552      	lsls	r2, r2, #21
 8004102:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004104:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004112:	220c      	movs	r2, #12
 8004114:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 800411e:	2200      	movs	r2, #0
 8004120:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004124:	2200      	movs	r2, #0
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 800412a:	2200      	movs	r2, #0
 800412c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004130:	2200      	movs	r2, #0
 8004132:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004136:	0018      	movs	r0, r3
 8004138:	f7fe fa42 	bl	80025c0 <HAL_UART_Init>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004140:	f000 f8b0 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004146:	2100      	movs	r1, #0
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff fcfd 	bl	8003b48 <HAL_UARTEx_SetTxFifoThreshold>
 800414e:	1e03      	subs	r3, r0, #0
 8004150:	d001      	beq.n	8004156 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004152:	f000 f8a7 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 8004158:	2100      	movs	r1, #0
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fd34 	bl	8003bc8 <HAL_UARTEx_SetRxFifoThreshold>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d001      	beq.n	8004168 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004164:	f000 f89e 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <MX_LPUART1_UART_Init+0x94>)
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff fcb2 	bl	8003ad4 <HAL_UARTEx_DisableFifoMode>
 8004170:	1e03      	subs	r3, r0, #0
 8004172:	d001      	beq.n	8004178 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004174:	f000 f896 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	20000078 	.word	0x20000078
 8004184:	40008000 	.word	0x40008000
 8004188:	00033324 	.word	0x00033324

0800418c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b08b      	sub	sp, #44	; 0x2c
 8004190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004192:	2414      	movs	r4, #20
 8004194:	193b      	adds	r3, r7, r4
 8004196:	0018      	movs	r0, r3
 8004198:	2314      	movs	r3, #20
 800419a:	001a      	movs	r2, r3
 800419c:	2100      	movs	r1, #0
 800419e:	f000 fd4f 	bl	8004c40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a2:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041a8:	2104      	movs	r1, #4
 80041aa:	430a      	orrs	r2, r1
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34
 80041ae:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	2204      	movs	r2, #4
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041c0:	2120      	movs	r1, #32
 80041c2:	430a      	orrs	r2, r1
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34
 80041c6:	4b34      	ldr	r3, [pc, #208]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	2220      	movs	r2, #32
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	4b30      	ldr	r3, [pc, #192]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041d8:	2101      	movs	r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041f0:	2102      	movs	r1, #2
 80041f2:	430a      	orrs	r2, r1
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <MX_GPIO_Init+0x10c>)
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	2202      	movs	r2, #2
 80041fc:	4013      	ands	r3, r2
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	00d9      	lsls	r1, r3, #3
 8004206:	23a0      	movs	r3, #160	; 0xa0
 8004208:	05db      	lsls	r3, r3, #23
 800420a:	2200      	movs	r2, #0
 800420c:	0018      	movs	r0, r3
 800420e:	f7fc fcdf 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <MX_GPIO_Init+0x110>)
 8004214:	2200      	movs	r2, #0
 8004216:	2130      	movs	r1, #48	; 0x30
 8004218:	0018      	movs	r0, r3
 800421a:	f7fc fcd9 	bl	8000bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_IT_Pin */
  GPIO_InitStruct.Pin = RF_IT_Pin;
 800421e:	193b      	adds	r3, r7, r4
 8004220:	2240      	movs	r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004224:	193b      	adds	r3, r7, r4
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <MX_GPIO_Init+0x114>)
 8004228:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	193b      	adds	r3, r7, r4
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RF_IT_GPIO_Port, &GPIO_InitStruct);
 8004230:	193a      	adds	r2, r7, r4
 8004232:	23a0      	movs	r3, #160	; 0xa0
 8004234:	05db      	lsls	r3, r3, #23
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f7fc fb65 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800423e:	0021      	movs	r1, r4
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	00d2      	lsls	r2, r2, #3
 8004246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2201      	movs	r2, #1
 800424c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004254:	187b      	adds	r3, r7, r1
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 800425a:	000c      	movs	r4, r1
 800425c:	187a      	adds	r2, r7, r1
 800425e:	23a0      	movs	r3, #160	; 0xa0
 8004260:	05db      	lsls	r3, r3, #23
 8004262:	0011      	movs	r1, r2
 8004264:	0018      	movs	r0, r3
 8004266:	f7fc fb4f 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 800426a:	0021      	movs	r1, r4
 800426c:	187b      	adds	r3, r7, r1
 800426e:	2230      	movs	r2, #48	; 0x30
 8004270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004272:	187b      	adds	r3, r7, r1
 8004274:	2201      	movs	r2, #1
 8004276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	187b      	adds	r3, r7, r1
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2200      	movs	r2, #0
 8004282:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004284:	187b      	adds	r3, r7, r1
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <MX_GPIO_Init+0x110>)
 8004288:	0019      	movs	r1, r3
 800428a:	0010      	movs	r0, r2
 800428c:	f7fc fb3c 	bl	8000908 <HAL_GPIO_Init>

}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b00b      	add	sp, #44	; 0x2c
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	50000400 	.word	0x50000400
 80042a0:	10210000 	.word	0x10210000

080042a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <writeT5TCCFile>:
 */
#include "ndef.h"
#include "nfc.h"


void writeT5TCCFile(ADDRESSING_MODE address_mode){
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	0002      	movs	r2, r0
 80042b6:	1dfb      	adds	r3, r7, #7
 80042b8:	701a      	strb	r2, [r3, #0]

	int count;
	uint8_t buffer[10];
	buffer[0] = address_mode;
 80042ba:	210c      	movs	r1, #12
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	1dfa      	adds	r2, r7, #7
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x45;
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2245      	movs	r2, #69	; 0x45
 80042c8:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0x40;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	709a      	strb	r2, [r3, #2]
	buffer[3] = 0x01;
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	2201      	movs	r2, #1
 80042d4:	70da      	strb	r2, [r3, #3]
	writeUserMemory(0x00,buffer,4);
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	2204      	movs	r2, #4
 80042da:	0019      	movs	r1, r3
 80042dc:	2000      	movs	r0, #0
 80042de:	f000 f8b9 	bl	8004454 <writeUserMemory>
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b006      	add	sp, #24
 80042e8:	bd80      	pop	{r7, pc}

080042ea <unlockI2CSecurity>:

/**
 * @description present the i2c password and unlock i2c security session
 * @param password
 */
void unlockI2CSecurity(uint8_t *password){
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08a      	sub	sp, #40	; 0x28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
		for( i = 0; i < 8; i++){
			pass[i] = password[i];
		}
		pass[8] = PRESENTPASS;
	}*/
	for(int i = 0; i < 8; i++){
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	e00c      	b.n	8004312 <unlockI2CSecurity+0x28>
		pass[i] = password[i];
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	7819      	ldrb	r1, [r3, #0]
 8004300:	230c      	movs	r3, #12
 8004302:	18fa      	adds	r2, r7, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	18d3      	adds	r3, r2, r3
 8004308:	1c0a      	adds	r2, r1, #0
 800430a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	3301      	adds	r3, #1
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	2b07      	cmp	r3, #7
 8004316:	ddef      	ble.n	80042f8 <unlockI2CSecurity+0xe>
	}
	pass[8] = PRESENTPASS;
 8004318:	230c      	movs	r3, #12
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2209      	movs	r2, #9
 800431e:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 8004320:	2300      	movs	r3, #0
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	e00b      	b.n	800433e <unlockI2CSecurity+0x54>
		pass[i+9] = password[i];
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	18d2      	adds	r2, r2, r3
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	3309      	adds	r3, #9
 8004330:	7811      	ldrb	r1, [r2, #0]
 8004332:	220c      	movs	r2, #12
 8004334:	18ba      	adds	r2, r7, r2
 8004336:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	3301      	adds	r3, #1
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	2b07      	cmp	r3, #7
 8004342:	ddf0      	ble.n	8004326 <unlockI2CSecurity+0x3c>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, pass,17); //present i2c password
 8004344:	230c      	movs	r3, #12
 8004346:	18fa      	adds	r2, r7, r3
 8004348:	2390      	movs	r3, #144	; 0x90
 800434a:	0119      	lsls	r1, r3, #4
 800434c:	2311      	movs	r3, #17
 800434e:	20ae      	movs	r0, #174	; 0xae
 8004350:	f7ff fd0c 	bl	8003d6c <I2CWrite>
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b00a      	add	sp, #40	; 0x28
 800435a:	bd80      	pop	{r7, pc}

0800435c <lockI2CSecurity>:

/**
 * @description lock the i2c security session by presenting a wrong password
 * @param device address
 */
void lockI2CSecurity(){
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0

	uint8_t WrongPass[17];

	for(int i = 0; i < 8; i++){
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e00b      	b.n	8004380 <lockI2CSecurity+0x24>
		WrongPass[i] = i+1;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	3301      	adds	r3, #1
 800436e:	b2d9      	uxtb	r1, r3
 8004370:	1d3a      	adds	r2, r7, #4
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b07      	cmp	r3, #7
 8004384:	ddf0      	ble.n	8004368 <lockI2CSecurity+0xc>
	}
	WrongPass[8] = PRESENTPASS;
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	2209      	movs	r2, #9
 800438a:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e00a      	b.n	80043a8 <lockI2CSecurity+0x4c>
		WrongPass[i+9] = i+3;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	3309      	adds	r3, #9
 800439a:	3203      	adds	r2, #3
 800439c:	b2d1      	uxtb	r1, r2
 800439e:	1d3a      	adds	r2, r7, #4
 80043a0:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	ddf1      	ble.n	8004392 <lockI2CSecurity+0x36>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, WrongPass,17); //present wrong i2c password
 80043ae:	1d3a      	adds	r2, r7, #4
 80043b0:	2390      	movs	r3, #144	; 0x90
 80043b2:	0119      	lsls	r1, r3, #4
 80043b4:	2311      	movs	r3, #17
 80043b6:	20ae      	movs	r0, #174	; 0xae
 80043b8:	f7ff fcd8 	bl	8003d6c <I2CWrite>
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b008      	add	sp, #32
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <readSystemMemory>:
 * @description read the value of register into the buffer
 * @param register address
 * @param buffer
 * @param number of bytes to read
 */
void readSystemMemory(uint16_t regAddress, uint8_t *buffer,int n){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	210e      	movs	r1, #14
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	1c02      	adds	r2, r0, #0
 80043d4:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_SYSTEMMEMORY, regAddress, buffer, n);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	8819      	ldrh	r1, [r3, #0]
 80043de:	0003      	movs	r3, r0
 80043e0:	20ae      	movs	r0, #174	; 0xae
 80043e2:	f7ff fc9d 	bl	8003d20 <I2CRead>
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}

080043ee <writeSystemMemory>:
/**
 * @description write data into the system static register
 * @param register address
 * @param data to write
 */
void writeSystemMemory(uint16_t regAddress, uint8_t *password, uint8_t data){
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	0011      	movs	r1, r2
 80043f8:	1dbb      	adds	r3, r7, #6
 80043fa:	1c02      	adds	r2, r0, #0
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	1d7b      	adds	r3, r7, #5
 8004400:	1c0a      	adds	r2, r1, #0
 8004402:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[1];
	buffer[0] = data;
 8004404:	240c      	movs	r4, #12
 8004406:	193b      	adds	r3, r7, r4
 8004408:	1d7a      	adds	r2, r7, #5
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff ff6a 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY, regAddress, buffer, 1);
 8004416:	193a      	adds	r2, r7, r4
 8004418:	1dbb      	adds	r3, r7, #6
 800441a:	8819      	ldrh	r1, [r3, #0]
 800441c:	2301      	movs	r3, #1
 800441e:	20ae      	movs	r0, #174	; 0xae
 8004420:	f7ff fca4 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 8004424:	f7ff ff9a 	bl	800435c <lockI2CSecurity>
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b005      	add	sp, #20
 800442e:	bd90      	pop	{r4, r7, pc}

08004430 <readDynamicReg>:
/**
 * @description read the value of dynamic register into the buffer
 * @param register address
 * @param buffer
 */
void readDynamicReg(uint16_t regAddress, uint8_t *buffer){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	0002      	movs	r2, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	1dbb      	adds	r3, r7, #6
 800443c:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_DYNAMICMEMORY, regAddress, buffer, 1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	1dbb      	adds	r3, r7, #6
 8004442:	8819      	ldrh	r1, [r3, #0]
 8004444:	2301      	movs	r3, #1
 8004446:	20a6      	movs	r0, #166	; 0xa6
 8004448:	f7ff fc6a 	bl	8003d20 <I2CRead>
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <writeUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to write
 * @param number of bytes to write
 */
void writeUserMemory(uint16_t address, uint8_t *data, int n){
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	210e      	movs	r1, #14
 8004460:	187b      	adds	r3, r7, r1
 8004462:	1c02      	adds	r2, r0, #0
 8004464:	801a      	strh	r2, [r3, #0]

		I2CWrite(NFC_USERMEMORY, address, data, n);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	187b      	adds	r3, r7, r1
 800446c:	8819      	ldrh	r1, [r3, #0]
 800446e:	0003      	movs	r3, r0
 8004470:	20a6      	movs	r0, #166	; 0xa6
 8004472:	f7ff fc7b 	bl	8003d6c <I2CWrite>
		//waiting to implement
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}

0800447e <readUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to read
 * @param number of bytes to read
 */
void readUserMemory(uint16_t address, uint8_t *data, int n){
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	210e      	movs	r1, #14
 800448a:	187b      	adds	r3, r7, r1
 800448c:	1c02      	adds	r2, r0, #0
 800448e:	801a      	strh	r2, [r3, #0]

		I2CRead(NFC_USERMEMORY, address, data, n);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	187b      	adds	r3, r7, r1
 8004496:	8819      	ldrh	r1, [r3, #0]
 8004498:	0003      	movs	r3, r0
 800449a:	20a6      	movs	r0, #166	; 0xa6
 800449c:	f7ff fc40 	bl	8003d20 <I2CRead>
		//waiting to implement
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <setDefaultArea>:

/**
 * @brief configure the user memory into 1 area and the area cover all user memory (default setting)
 * @param password to unlock I2C security
 */
void setDefaultArea(uint8_t *password){
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

	uint8_t temp[1];
	temp[0] = 0xf;
 80044b0:	240c      	movs	r4, #12
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	220f      	movs	r2, #15
 80044b6:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff ff15 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA3, temp, 1);
 80044c0:	193a      	adds	r2, r7, r4
 80044c2:	2301      	movs	r3, #1
 80044c4:	2109      	movs	r1, #9
 80044c6:	20ae      	movs	r0, #174	; 0xae
 80044c8:	f7ff fc50 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA2, temp, 1);
 80044cc:	193a      	adds	r2, r7, r4
 80044ce:	2301      	movs	r3, #1
 80044d0:	2107      	movs	r1, #7
 80044d2:	20ae      	movs	r0, #174	; 0xae
 80044d4:	f7ff fc4a 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA1, temp, 1);
 80044d8:	193a      	adds	r2, r7, r4
 80044da:	2301      	movs	r3, #1
 80044dc:	2105      	movs	r1, #5
 80044de:	20ae      	movs	r0, #174	; 0xae
 80044e0:	f7ff fc44 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 80044e4:	f7ff ff3a 	bl	800435c <lockI2CSecurity>
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b005      	add	sp, #20
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <validateArea>:
	else{
		setDefaultArea(password);
	}
}

int validateArea(uint8_t area1, uint8_t area2, uint8_t area3){
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0004      	movs	r4, r0
 80044f8:	0008      	movs	r0, r1
 80044fa:	0011      	movs	r1, r2
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	1c22      	adds	r2, r4, #0
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	1dbb      	adds	r3, r7, #6
 8004504:	1c02      	adds	r2, r0, #0
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	1d7b      	adds	r3, r7, #5
 800450a:	1c0a      	adds	r2, r1, #0
 800450c:	701a      	strb	r2, [r3, #0]

	uint8_t total;
	total = area1 + area2 + area3;
 800450e:	1dfa      	adds	r2, r7, #7
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	b2d9      	uxtb	r1, r3
 800451a:	200f      	movs	r0, #15
 800451c:	183b      	adds	r3, r7, r0
 800451e:	1d7a      	adds	r2, r7, #5
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	188a      	adds	r2, r1, r2
 8004524:	701a      	strb	r2, [r3, #0]

		if(total > 16){
 8004526:	183b      	adds	r3, r7, r0
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b10      	cmp	r3, #16
 800452c:	d901      	bls.n	8004532 <validateArea+0x42>
			return 0;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <validateArea+0x44>
		}else{
			return 1;
 8004532:	2301      	movs	r3, #1
		}
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b005      	add	sp, #20
 800453a:	bd90      	pop	{r4, r7, pc}

0800453c <setArea>:
 * @brief Example to specify 2 areas with first area 5 blocks and second area 3 blocks. #setArea(5,3,NA,NA);
 * @brief Specify "NA" in the parameter to indicate no area is allocated or needed.
 * @brief Total number of block in all areas has to be 16 and the last area cannot be specify, it will be allocated with the remaining user memory by default.
 * @param size of area 1, area 2 and area 3 in integer, size of area 4 is the remaining user memory
 */
void setArea(uint8_t *password, int area1, int area2, int area3){
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]

	uint8_t areas[3];

	if(area1 != 0 && area2 != 0 && area3 != 0){
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d100      	bne.n	8004552 <setArea+0x16>
 8004550:	e091      	b.n	8004676 <setArea+0x13a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d100      	bne.n	800455a <setArea+0x1e>
 8004558:	e08d      	b.n	8004676 <setArea+0x13a>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d100      	bne.n	8004562 <setArea+0x26>
 8004560:	e089      	b.n	8004676 <setArea+0x13a>

		if (area1 == NA){
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3301      	adds	r3, #1
 8004566:	d10a      	bne.n	800457e <setArea+0x42>
			areas[0] = 0xf;
 8004568:	2114      	movs	r1, #20
 800456a:	187b      	adds	r3, r7, r1
 800456c:	220f      	movs	r2, #15
 800456e:	701a      	strb	r2, [r3, #0]
			areas[1] = 0xf;
 8004570:	187b      	adds	r3, r7, r1
 8004572:	220f      	movs	r2, #15
 8004574:	705a      	strb	r2, [r3, #1]
			areas[2] = 0xf;
 8004576:	187b      	adds	r3, r7, r1
 8004578:	220f      	movs	r2, #15
 800457a:	709a      	strb	r2, [r3, #2]
		if (area1 == NA){
 800457c:	e085      	b.n	800468a <setArea+0x14e>
		}else if( area2 == NA && validateArea(area1,0,0) ){
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3301      	adds	r3, #1
 8004582:	d116      	bne.n	80045b2 <setArea+0x76>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff ffaf 	bl	80044f0 <validateArea>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d00d      	beq.n	80045b2 <setArea+0x76>
			areas[0] = (area1)-1;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	2114      	movs	r1, #20
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	701a      	strb	r2, [r3, #0]
			areas[1] = 0xf;
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	220f      	movs	r2, #15
 80045a8:	705a      	strb	r2, [r3, #1]
			areas[2] = 0xf;
 80045aa:	187b      	adds	r3, r7, r1
 80045ac:	220f      	movs	r2, #15
 80045ae:	709a      	strb	r2, [r3, #2]
 80045b0:	e060      	b.n	8004674 <setArea+0x138>
		}else if(area3 == NA && validateArea(area1, area2,0) ){
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	d11e      	bne.n	80045f6 <setArea+0xba>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	b2d1      	uxtb	r1, r2
 80045c0:	2200      	movs	r2, #0
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7ff ff94 	bl	80044f0 <validateArea>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d014      	beq.n	80045f6 <setArea+0xba>
			areas[0] = (area1)-1;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	2114      	movs	r1, #20
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	701a      	strb	r2, [r3, #0]
			areas[1] = (area2+area1)-1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	705a      	strb	r2, [r3, #1]
			areas[2] = 0xf;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	220f      	movs	r2, #15
 80045f2:	709a      	strb	r2, [r3, #2]
 80045f4:	e03e      	b.n	8004674 <setArea+0x138>
		}else if(area1 != NA && area2 != NA && area3 != NA && validateArea(area1,area2,area3)){
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	d030      	beq.n	800465e <setArea+0x122>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3301      	adds	r3, #1
 8004600:	d02d      	beq.n	800465e <setArea+0x122>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	d02a      	beq.n	800465e <setArea+0x122>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	b2d1      	uxtb	r1, r2
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff ff6b 	bl	80044f0 <validateArea>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d01f      	beq.n	800465e <setArea+0x122>
			areas[0] = (area1)-1;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	2114      	movs	r1, #20
 8004628:	187b      	adds	r3, r7, r1
 800462a:	701a      	strb	r2, [r3, #0]
			areas[1] = (area2+area1)-1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	18d3      	adds	r3, r2, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	187b      	adds	r3, r7, r1
 800463e:	705a      	strb	r2, [r3, #1]
			areas[2] = (area3+area2+area1)-1;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	18d3      	adds	r3, r2, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	187b      	adds	r3, r7, r1
 800465a:	709a      	strb	r2, [r3, #2]
 800465c:	e00a      	b.n	8004674 <setArea+0x138>
		}else{
			areas[0] = 0xf;
 800465e:	2114      	movs	r1, #20
 8004660:	187b      	adds	r3, r7, r1
 8004662:	220f      	movs	r2, #15
 8004664:	701a      	strb	r2, [r3, #0]
			areas[1] = 0xf;
 8004666:	187b      	adds	r3, r7, r1
 8004668:	220f      	movs	r2, #15
 800466a:	705a      	strb	r2, [r3, #1]
			areas[2] = 0xf;
 800466c:	187b      	adds	r3, r7, r1
 800466e:	220f      	movs	r2, #15
 8004670:	709a      	strb	r2, [r3, #2]
		if (area1 == NA){
 8004672:	e00a      	b.n	800468a <setArea+0x14e>
 8004674:	e009      	b.n	800468a <setArea+0x14e>
		}
	}else{
		areas[0] = 0xf;
 8004676:	2114      	movs	r1, #20
 8004678:	187b      	adds	r3, r7, r1
 800467a:	220f      	movs	r2, #15
 800467c:	701a      	strb	r2, [r3, #0]
		areas[1] = 0xf;
 800467e:	187b      	adds	r3, r7, r1
 8004680:	220f      	movs	r2, #15
 8004682:	705a      	strb	r2, [r3, #1]
		areas[2] = 0xf;
 8004684:	187b      	adds	r3, r7, r1
 8004686:	220f      	movs	r2, #15
 8004688:	709a      	strb	r2, [r3, #2]
	}

	unlockI2CSecurity(password);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fe2c 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA1, areas, 1);
 8004692:	2414      	movs	r4, #20
 8004694:	193a      	adds	r2, r7, r4
 8004696:	2301      	movs	r3, #1
 8004698:	2105      	movs	r1, #5
 800469a:	20ae      	movs	r0, #174	; 0xae
 800469c:	f7ff fb66 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA2, areas+1, 1);
 80046a0:	193a      	adds	r2, r7, r4
 80046a2:	3201      	adds	r2, #1
 80046a4:	2301      	movs	r3, #1
 80046a6:	2107      	movs	r1, #7
 80046a8:	20ae      	movs	r0, #174	; 0xae
 80046aa:	f7ff fb5f 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA3, areas+2, 1);
 80046ae:	193a      	adds	r2, r7, r4
 80046b0:	3202      	adds	r2, #2
 80046b2:	2301      	movs	r3, #1
 80046b4:	2109      	movs	r1, #9
 80046b6:	20ae      	movs	r0, #174	; 0xae
 80046b8:	f7ff fb58 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 80046bc:	f7ff fe4e 	bl	800435c <lockI2CSecurity>
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b007      	add	sp, #28
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <i2CWriteProtectUserArea>:

void i2CWriteProtectUserArea(uint8_t *password, I2CWRITEPROTECT area){
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	000a      	movs	r2, r1
 80046d2:	1cfb      	adds	r3, r7, #3
 80046d4:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	//temp[0] = (area1 | area2 | area3 | area4 );
	temp[0] = area;
 80046d6:	240c      	movs	r4, #12
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	1cfa      	adds	r2, r7, #3
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	701a      	strb	r2, [r3, #0]
	unlockI2CSecurity(password);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f7ff fe01 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,I2CSS, temp, 1);
 80046e8:	193a      	adds	r2, r7, r4
 80046ea:	2301      	movs	r3, #1
 80046ec:	210b      	movs	r1, #11
 80046ee:	20ae      	movs	r0, #174	; 0xae
 80046f0:	f7ff fb3c 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 80046f4:	f7ff fe32 	bl	800435c <lockI2CSecurity>
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b005      	add	sp, #20
 80046fe:	bd90      	pop	{r4, r7, pc}

08004700 <rfWriteProtectUserArea>:

void rfWriteProtectUserArea(uint8_t *password, RFWRITEPROTECT area1, RFWRITEPROTECT area2, RFWRITEPROTECT area3, RFWRITEPROTECT area4){
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	000c      	movs	r4, r1
 800470a:	0010      	movs	r0, r2
 800470c:	0019      	movs	r1, r3
 800470e:	1cfb      	adds	r3, r7, #3
 8004710:	1c22      	adds	r2, r4, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	1cbb      	adds	r3, r7, #2
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	1c7b      	adds	r3, r7, #1
 800471c:	1c0a      	adds	r2, r1, #0
 800471e:	701a      	strb	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = area1;
 8004720:	240c      	movs	r4, #12
 8004722:	193b      	adds	r3, r7, r4
 8004724:	1cfa      	adds	r2, r7, #3
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]
	temp[1] = area2;
 800472a:	193b      	adds	r3, r7, r4
 800472c:	1cba      	adds	r2, r7, #2
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	705a      	strb	r2, [r3, #1]
	temp[2] = area3;
 8004732:	193b      	adds	r3, r7, r4
 8004734:	1c7a      	adds	r2, r7, #1
 8004736:	7812      	ldrb	r2, [r2, #0]
 8004738:	709a      	strb	r2, [r3, #2]
	temp[3] = area4;
 800473a:	193b      	adds	r3, r7, r4
 800473c:	2220      	movs	r2, #32
 800473e:	18ba      	adds	r2, r7, r2
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	70da      	strb	r2, [r3, #3]
	unlockI2CSecurity(password);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff fdcf 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,RFA1SS, temp, 1);
 800474c:	193a      	adds	r2, r7, r4
 800474e:	2301      	movs	r3, #1
 8004750:	2104      	movs	r1, #4
 8004752:	20ae      	movs	r0, #174	; 0xae
 8004754:	f7ff fb0a 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,RFA2SS, temp+1, 1);
 8004758:	193a      	adds	r2, r7, r4
 800475a:	3201      	adds	r2, #1
 800475c:	2301      	movs	r3, #1
 800475e:	2106      	movs	r1, #6
 8004760:	20ae      	movs	r0, #174	; 0xae
 8004762:	f7ff fb03 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,RFA3SS, temp+2, 1);
 8004766:	193a      	adds	r2, r7, r4
 8004768:	3202      	adds	r2, #2
 800476a:	2301      	movs	r3, #1
 800476c:	2108      	movs	r1, #8
 800476e:	20ae      	movs	r0, #174	; 0xae
 8004770:	f7ff fafc 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,RFA4SS, temp+3, 1);
 8004774:	193a      	adds	r2, r7, r4
 8004776:	3203      	adds	r2, #3
 8004778:	2301      	movs	r3, #1
 800477a:	210a      	movs	r1, #10
 800477c:	20ae      	movs	r0, #174	; 0xae
 800477e:	f7ff faf5 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 8004782:	f7ff fdeb 	bl	800435c <lockI2CSecurity>
}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b005      	add	sp, #20
 800478c:	bd90      	pop	{r4, r7, pc}
	...

08004790 <disableMailBox>:
	I2CWrite(NFC_SYSTEMMEMORY,MB_MODE, temp, 1);
	lockI2CSecurity();
	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp, 1);
}

void disableMailBox(uint8_t *password){
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	uint8_t temp[1];
	temp[0] = 0x0;
 8004798:	240c      	movs	r4, #12
 800479a:	193b      	adds	r3, r7, r4
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f7ff fda1 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,MB_MODE, temp, 1);
 80047a8:	193a      	adds	r2, r7, r4
 80047aa:	2301      	movs	r3, #1
 80047ac:	210d      	movs	r1, #13
 80047ae:	20ae      	movs	r0, #174	; 0xae
 80047b0:	f7ff fadc 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 80047b4:	f7ff fdd2 	bl	800435c <lockI2CSecurity>
	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp, 1);
 80047b8:	193a      	adds	r2, r7, r4
 80047ba:	4904      	ldr	r1, [pc, #16]	; (80047cc <disableMailBox+0x3c>)
 80047bc:	2301      	movs	r3, #1
 80047be:	20a6      	movs	r0, #166	; 0xa6
 80047c0:	f7ff fad4 	bl	8003d6c <I2CWrite>
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b005      	add	sp, #20
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	00002006 	.word	0x00002006

080047d0 <resetMailBox>:
	unlockI2CSecurity(password);
	I2CWrite(NFC_SYSTEMMEMORY,MB_WDG, temp, 1);
	lockI2CSecurity();
}

void resetMailBox(){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0

	uint8_t temp[2] = {0x00,0x01};
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	2201      	movs	r2, #1
 80047e0:	705a      	strb	r2, [r3, #1]

	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp, 1);
 80047e2:	1d3a      	adds	r2, r7, #4
 80047e4:	4907      	ldr	r1, [pc, #28]	; (8004804 <resetMailBox+0x34>)
 80047e6:	2301      	movs	r3, #1
 80047e8:	20a6      	movs	r0, #166	; 0xa6
 80047ea:	f7ff fabf 	bl	8003d6c <I2CWrite>
	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp+1, 1);
 80047ee:	1d3a      	adds	r2, r7, #4
 80047f0:	3201      	adds	r2, #1
 80047f2:	4904      	ldr	r1, [pc, #16]	; (8004804 <resetMailBox+0x34>)
 80047f4:	2301      	movs	r3, #1
 80047f6:	20a6      	movs	r0, #166	; 0xa6
 80047f8:	f7ff fab8 	bl	8003d6c <I2CWrite>
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	46bd      	mov	sp, r7
 8004800:	b002      	add	sp, #8
 8004802:	bd80      	pop	{r7, pc}
 8004804:	00002006 	.word	0x00002006

08004808 <writeDatatoMailbox>:
		NFC_Delay(100);
	}
	readDynamicReg(MB_LEN_DYN,temp+1);
}

void writeDatatoMailbox(uint8_t *data, int n){
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]

	uint8_t MBstatus[1];

	getMailBoxStatus(MBstatus);
 8004812:	240c      	movs	r4, #12
 8004814:	193b      	adds	r3, r7, r4
 8004816:	0018      	movs	r0, r3
 8004818:	f000 f82e 	bl	8004878 <getMailBoxStatus>
	if( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 800481c:	193b      	adds	r3, r7, r4
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	001a      	movs	r2, r3
 8004822:	2304      	movs	r3, #4
 8004824:	4013      	ands	r3, r2
 8004826:	d10c      	bne.n	8004842 <writeDatatoMailbox+0x3a>
 8004828:	230c      	movs	r3, #12
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	001a      	movs	r2, r3
 8004830:	2302      	movs	r3, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d105      	bne.n	8004842 <writeDatatoMailbox+0x3a>
		I2CWrite(NFC_DYNAMICMEMORY, NFC_MAILBOX, data, n);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4904      	ldr	r1, [pc, #16]	; (800484c <writeDatatoMailbox+0x44>)
 800483c:	20a6      	movs	r0, #166	; 0xa6
 800483e:	f7ff fa95 	bl	8003d6c <I2CWrite>
	}else{

	}
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b005      	add	sp, #20
 8004848:	bd90      	pop	{r4, r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	00002008 	.word	0x00002008

08004850 <readDatafromMailbox>:

/**
 * Mail box address is only between 0x2008 to 0x2107
 */
void readDatafromMailbox(uint16_t address, uint8_t *data, int n){
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	240e      	movs	r4, #14
 800485c:	193b      	adds	r3, r7, r4
 800485e:	1c02      	adds	r2, r0, #0
 8004860:	801a      	strh	r2, [r3, #0]

	readUserMemory(address, data, n);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	193b      	adds	r3, r7, r4
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff fe07 	bl	800447e <readUserMemory>
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b005      	add	sp, #20
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <getMailBoxStatus>:

void getMailBoxStatus(uint8_t *status){
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	I2CRead(NFC_DYNAMICMEMORY, MB_CTRL_DYN, status, 1);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4904      	ldr	r1, [pc, #16]	; (8004894 <getMailBoxStatus+0x1c>)
 8004884:	2301      	movs	r3, #1
 8004886:	20a6      	movs	r0, #166	; 0xa6
 8004888:	f7ff fa4a 	bl	8003d20 <I2CRead>
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b002      	add	sp, #8
 8004892:	bd80      	pop	{r7, pc}
 8004894:	00002006 	.word	0x00002006

08004898 <getMailBoxMessage>:

void getMailBoxMessage(uint8_t *data){
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	uint8_t temp[1];
	uint8_t MBstatus[1];

	getMailBoxStatus(MBstatus);
 80048a0:	2308      	movs	r3, #8
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff ffe7 	bl	8004878 <getMailBoxStatus>
	while( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 80048aa:	e009      	b.n	80048c0 <getMailBoxMessage+0x28>
		getMailBoxStatus(MBstatus);
 80048ac:	2308      	movs	r3, #8
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff ffe1 	bl	8004878 <getMailBoxStatus>
		NFC_Delay(500);
 80048b6:	23fa      	movs	r3, #250	; 0xfa
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7ff fa7c 	bl	8003db8 <NFC_Delay>
	while( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 80048c0:	2308      	movs	r3, #8
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	001a      	movs	r2, r3
 80048c8:	2304      	movs	r3, #4
 80048ca:	4013      	ands	r3, r2
 80048cc:	d106      	bne.n	80048dc <getMailBoxMessage+0x44>
 80048ce:	2308      	movs	r3, #8
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	001a      	movs	r2, r3
 80048d6:	2302      	movs	r3, #2
 80048d8:	4013      	ands	r3, r2
 80048da:	d0e7      	beq.n	80048ac <getMailBoxMessage+0x14>
	}
	if((MBstatus[0] & RF_PUT_MESSAGE_MASK) || (MBstatus[0] & HOST_PUT_MESSAGE_MASK)){
 80048dc:	2308      	movs	r3, #8
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	001a      	movs	r2, r3
 80048e4:	2304      	movs	r3, #4
 80048e6:	4013      	ands	r3, r2
 80048e8:	d106      	bne.n	80048f8 <getMailBoxMessage+0x60>
 80048ea:	2308      	movs	r3, #8
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	001a      	movs	r2, r3
 80048f2:	2302      	movs	r3, #2
 80048f4:	4013      	ands	r3, r2
 80048f6:	d00e      	beq.n	8004916 <getMailBoxMessage+0x7e>
		readDynamicReg(MB_LEN_DYN,temp);
 80048f8:	240c      	movs	r4, #12
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <getMailBoxMessage+0x88>)
 80048fe:	0019      	movs	r1, r3
 8004900:	0010      	movs	r0, r2
 8004902:	f7ff fd95 	bl	8004430 <readDynamicReg>
		readUserMemory(NFC_MAILBOX,data,(temp[0])+1);
 8004906:	193b      	adds	r3, r7, r4
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4805      	ldr	r0, [pc, #20]	; (8004924 <getMailBoxMessage+0x8c>)
 8004910:	0019      	movs	r1, r3
 8004912:	f7ff fdb4 	bl	800447e <readUserMemory>
	}
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b005      	add	sp, #20
 800491c:	bd90      	pop	{r4, r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	00002007 	.word	0x00002007
 8004924:	00002008 	.word	0x00002008

08004928 <enableInterrupt>:

void enableInterrupt(uint8_t *password){
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

	uint8_t temp[1];
	temp[0] = GPO_EN;
 8004930:	240c      	movs	r4, #12
 8004932:	193b      	adds	r3, r7, r4
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f7ff fcd5 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,GPO, temp, 1);
 8004940:	193a      	adds	r2, r7, r4
 8004942:	2301      	movs	r3, #1
 8004944:	2100      	movs	r1, #0
 8004946:	20ae      	movs	r0, #174	; 0xae
 8004948:	f7ff fa10 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 800494c:	f7ff fd06 	bl	800435c <lockI2CSecurity>
	I2CWrite(NFC_DYNAMICMEMORY,GPO_CTRL_DYN, temp, 1);
 8004950:	193a      	adds	r2, r7, r4
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	0199      	lsls	r1, r3, #6
 8004956:	2301      	movs	r3, #1
 8004958:	20a6      	movs	r0, #166	; 0xa6
 800495a:	f7ff fa07 	bl	8003d6c <I2CWrite>
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b005      	add	sp, #20
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <configureInterrupt>:
	I2CWrite(NFC_SYSTEMMEMORY,GPO, temp, 1);
	lockI2CSecurity();
	I2CWrite(NFC_DYNAMICMEMORY,GPO_CTRL_DYN, temp, 1);
}

void configureInterrupt(uint8_t *password, INTERRUPT_MODE mode){
 8004966:	b590      	push	{r4, r7, lr}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	000a      	movs	r2, r1
 8004970:	1cfb      	adds	r3, r7, #3
 8004972:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	temp[0] = 0;
 8004974:	210c      	movs	r1, #12
 8004976:	187b      	adds	r3, r7, r1
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

	I2CRead(NFC_SYSTEMMEMORY,GPO, temp, 1);
 800497c:	000c      	movs	r4, r1
 800497e:	187a      	adds	r2, r7, r1
 8004980:	2301      	movs	r3, #1
 8004982:	2100      	movs	r1, #0
 8004984:	20ae      	movs	r0, #174	; 0xae
 8004986:	f7ff f9cb 	bl	8003d20 <I2CRead>
	//temp[0] = mode1 | mode2 | mode3 | mode4 | mode5 | mode6 | mode7 | temp[0];
	temp[0] = mode | temp[0];
 800498a:	0021      	movs	r1, r4
 800498c:	187b      	adds	r3, r7, r1
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	1cfb      	adds	r3, r7, #3
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	b2da      	uxtb	r2, r3
 8004998:	000c      	movs	r4, r1
 800499a:	187b      	adds	r3, r7, r1
 800499c:	701a      	strb	r2, [r3, #0]
	unlockI2CSecurity(password);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fca2 	bl	80042ea <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,GPO, temp, 1);
 80049a6:	0021      	movs	r1, r4
 80049a8:	187a      	adds	r2, r7, r1
 80049aa:	2301      	movs	r3, #1
 80049ac:	2100      	movs	r1, #0
 80049ae:	20ae      	movs	r0, #174	; 0xae
 80049b0:	f7ff f9dc 	bl	8003d6c <I2CWrite>
	lockI2CSecurity();
 80049b4:	f7ff fcd2 	bl	800435c <lockI2CSecurity>
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b005      	add	sp, #20
 80049be:	bd90      	pop	{r4, r7, pc}

080049c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <HAL_MspInit+0x44>)
 80049c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_MspInit+0x44>)
 80049cc:	2101      	movs	r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <HAL_MspInit+0x44>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2201      	movs	r2, #1
 80049d8:	4013      	ands	r3, r2
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_MspInit+0x44>)
 80049e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <HAL_MspInit+0x44>)
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	0549      	lsls	r1, r1, #21
 80049e8:	430a      	orrs	r2, r1
 80049ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_MspInit+0x44>)
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	055b      	lsls	r3, r3, #21
 80049f4:	4013      	ands	r3, r2
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b002      	add	sp, #8
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	2314      	movs	r3, #20
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	0018      	movs	r0, r3
 8004a16:	2314      	movs	r3, #20
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f000 f910 	bl	8004c40 <memset>
  if(hi2c->Instance==I2C1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_I2C_MspInit+0x8c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d130      	bne.n	8004a8c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a30:	2102      	movs	r1, #2
 8004a32:	430a      	orrs	r2, r1
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34
 8004a36:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a42:	2114      	movs	r1, #20
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	22c0      	movs	r2, #192	; 0xc0
 8004a48:	0092      	lsls	r2, r2, #2
 8004a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	2212      	movs	r2, #18
 8004a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a52:	187b      	adds	r3, r7, r1
 8004a54:	2201      	movs	r2, #1
 8004a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	2206      	movs	r2, #6
 8004a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <HAL_I2C_MspInit+0x94>)
 8004a68:	0019      	movs	r1, r3
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	f7fb ff4c 	bl	8000908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	0389      	lsls	r1, r1, #14
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_I2C_MspInit+0x90>)
 8004a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	039b      	lsls	r3, r3, #14
 8004a86:	4013      	ands	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b00a      	add	sp, #40	; 0x28
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40005400 	.word	0x40005400
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	50000400 	.word	0x50000400

08004aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	2314      	movs	r3, #20
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	0018      	movs	r0, r3
 8004aae:	2314      	movs	r3, #20
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f000 f8c4 	bl	8004c40 <memset>
  if(huart->Instance==LPUART1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_UART_MspInit+0x8c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d130      	bne.n	8004b24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	0349      	lsls	r1, r1, #13
 8004acc:	430a      	orrs	r2, r1
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	035b      	lsls	r3, r3, #13
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ade:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_UART_MspInit+0x90>)
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	2201      	movs	r2, #1
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8004af6:	2114      	movs	r1, #20
 8004af8:	187b      	adds	r3, r7, r1
 8004afa:	220c      	movs	r2, #12
 8004afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	2202      	movs	r2, #2
 8004b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	2206      	movs	r2, #6
 8004b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b16:	187a      	adds	r2, r7, r1
 8004b18:	23a0      	movs	r3, #160	; 0xa0
 8004b1a:	05db      	lsls	r3, r3, #23
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fb fef2 	bl	8000908 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b00a      	add	sp, #40	; 0x28
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40008000 	.word	0x40008000
 8004b30:	40021000 	.word	0x40021000

08004b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b42:	e7fe      	b.n	8004b42 <HardFault_Handler+0x4>

08004b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b48:	46c0      	nop			; (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b5c:	f7fb fdbe 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b0c0      	sub	sp, #256	; 0x100
 8004b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint8_t buffer[256];
	//getMailBoxMessage(buffer);
	HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,1);
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <EXTI4_15_IRQHandler+0x20>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	2110      	movs	r1, #16
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7fc f82b 	bl	8000bd0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004b7a:	2040      	movs	r0, #64	; 0x40
 8004b7c:	f7fc f846 	bl	8000c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b040      	add	sp, #256	; 0x100
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	50000400 	.word	0x50000400

08004b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <SystemInit+0x14>)
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	0512      	lsls	r2, r2, #20
 8004b96:	609a      	str	r2, [r3, #8]
#endif
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ba4:	480d      	ldr	r0, [pc, #52]	; (8004bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ba6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004baa:	e003      	b.n	8004bb4 <LoopCopyDataInit>

08004bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004bb2:	3104      	adds	r1, #4

08004bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004bb4:	480b      	ldr	r0, [pc, #44]	; (8004be4 <LoopForever+0xa>)
  ldr r3, =_edata
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <LoopForever+0xe>)
  adds r2, r0, r1
 8004bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004bbc:	d3f6      	bcc.n	8004bac <CopyDataInit>
  ldr r2, =_sbss
 8004bbe:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <LoopForever+0x12>)
  b LoopFillZerobss
 8004bc0:	e002      	b.n	8004bc8 <LoopFillZerobss>

08004bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004bc2:	2300      	movs	r3, #0
  str  r3, [r2]
 8004bc4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc6:	3204      	adds	r2, #4

08004bc8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <LoopForever+0x16>)
  cmp r2, r3
 8004bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004bcc:	d3f9      	bcc.n	8004bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004bce:	f7ff ffdd 	bl	8004b8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004bd2:	f000 f811 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bd6:	f7ff f8fb 	bl	8003dd0 <main>

08004bda <LoopForever>:

LoopForever:
    b LoopForever
 8004bda:	e7fe      	b.n	8004bda <LoopForever>
  ldr   r0, =_estack
 8004bdc:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004be0:	08004ce8 	.word	0x08004ce8
  ldr r0, =_sdata
 8004be4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004bec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8004bf0:	20000104 	.word	0x20000104

08004bf4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bf4:	e7fe      	b.n	8004bf4 <ADC1_COMP_IRQHandler>
	...

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	4d0c      	ldr	r5, [pc, #48]	; (8004c30 <__libc_init_array+0x38>)
 8004bfe:	4c0d      	ldr	r4, [pc, #52]	; (8004c34 <__libc_init_array+0x3c>)
 8004c00:	1b64      	subs	r4, r4, r5
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	42a6      	cmp	r6, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	2600      	movs	r6, #0
 8004c0a:	f000 f821 	bl	8004c50 <_init>
 8004c0e:	4d0a      	ldr	r5, [pc, #40]	; (8004c38 <__libc_init_array+0x40>)
 8004c10:	4c0a      	ldr	r4, [pc, #40]	; (8004c3c <__libc_init_array+0x44>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	42a6      	cmp	r6, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	00b3      	lsls	r3, r6, #2
 8004c1e:	58eb      	ldr	r3, [r5, r3]
 8004c20:	4798      	blx	r3
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	00b3      	lsls	r3, r6, #2
 8004c28:	58eb      	ldr	r3, [r5, r3]
 8004c2a:	4798      	blx	r3
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	08004ce0 	.word	0x08004ce0
 8004c34:	08004ce0 	.word	0x08004ce0
 8004c38:	08004ce0 	.word	0x08004ce0
 8004c3c:	08004ce4 	.word	0x08004ce4

08004c40 <memset>:
 8004c40:	0003      	movs	r3, r0
 8004c42:	1812      	adds	r2, r2, r0
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d100      	bne.n	8004c4a <memset+0xa>
 8004c48:	4770      	bx	lr
 8004c4a:	7019      	strb	r1, [r3, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e7f9      	b.n	8004c44 <memset+0x4>

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
