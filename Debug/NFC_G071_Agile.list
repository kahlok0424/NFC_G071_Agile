
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004880  08004880  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004888  08004888  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800489c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800489c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b873  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce2  00000000  00000000  0002b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  0002d590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016964  00000000  00000000  0002ea98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a146  00000000  00000000  000453fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e656  00000000  00000000  0004f542  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddb98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  000ddc14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047f8 	.word	0x080047f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080047f8 	.word	0x080047f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 ffaa 	bl	800458c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f90f 	bl	80008a2 <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8ee 	bl	8000878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d004      	beq.n	8000734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_Delay+0x40>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	f7ff ffe1 	bl	80006fc <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8f7      	bhi.n	8000736 <HAL_Delay+0x26>
  {
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000004 	.word	0x20000004

08000754 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b7f      	cmp	r3, #127	; 0x7f
 8000768:	d932      	bls.n	80007d0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076a:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <NVIC_SetPriority+0xd4>)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	0019      	movs	r1, r3
 8000772:	230f      	movs	r3, #15
 8000774:	400b      	ands	r3, r1
 8000776:	3b08      	subs	r3, #8
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	3306      	adds	r3, #6
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	18d3      	adds	r3, r2, r3
 8000780:	3304      	adds	r3, #4
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	1dfa      	adds	r2, r7, #7
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	0011      	movs	r1, r2
 800078a:	2203      	movs	r2, #3
 800078c:	400a      	ands	r2, r1
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	21ff      	movs	r1, #255	; 0xff
 8000792:	4091      	lsls	r1, r2
 8000794:	000a      	movs	r2, r1
 8000796:	43d2      	mvns	r2, r2
 8000798:	401a      	ands	r2, r3
 800079a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	019b      	lsls	r3, r3, #6
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	401a      	ands	r2, r3
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	0018      	movs	r0, r3
 80007aa:	2303      	movs	r3, #3
 80007ac:	4003      	ands	r3, r0
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <NVIC_SetPriority+0xd4>)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001c      	movs	r4, r3
 80007ba:	230f      	movs	r3, #15
 80007bc:	4023      	ands	r3, r4
 80007be:	3b08      	subs	r3, #8
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	3306      	adds	r3, #6
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	18c3      	adds	r3, r0, r3
 80007ca:	3304      	adds	r3, #4
 80007cc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ce:	e027      	b.n	8000820 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <NVIC_SetPriority+0xd8>)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	33c0      	adds	r3, #192	; 0xc0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	589b      	ldr	r3, [r3, r2]
 80007e0:	1dfa      	adds	r2, r7, #7
 80007e2:	7812      	ldrb	r2, [r2, #0]
 80007e4:	0011      	movs	r1, r2
 80007e6:	2203      	movs	r2, #3
 80007e8:	400a      	ands	r2, r1
 80007ea:	00d2      	lsls	r2, r2, #3
 80007ec:	21ff      	movs	r1, #255	; 0xff
 80007ee:	4091      	lsls	r1, r2
 80007f0:	000a      	movs	r2, r1
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	401a      	ands	r2, r3
 80007f6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	019b      	lsls	r3, r3, #6
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	401a      	ands	r2, r3
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	2303      	movs	r3, #3
 8000808:	4003      	ands	r3, r0
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <NVIC_SetPriority+0xd8>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	33c0      	adds	r3, #192	; 0xc0
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	501a      	str	r2, [r3, r0]
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b003      	add	sp, #12
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	e000e100 	.word	0xe000e100

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <SysTick_Config+0x40>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d901      	bls.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e010      	b.n	8000868 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SysTick_Config+0x44>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	3a01      	subs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	2103      	movs	r1, #3
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff7d 	bl	8000754 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SysTick_Config+0x44>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x44>)
 8000862:	2207      	movs	r2, #7
 8000864:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000866:	2300      	movs	r3, #0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	00ffffff 	.word	0x00ffffff
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	210f      	movs	r1, #15
 8000884:	187b      	adds	r3, r7, r1
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	187b      	adds	r3, r7, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <NVIC_SetPriority>
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ffbf 	bl	8000830 <SysTick_Config>
 80008b2:	0003      	movs	r3, r0
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e147      	b.n	8000b5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	4091      	lsls	r1, r2
 80008d6:	000a      	movs	r2, r1
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <HAL_GPIO_Init+0x28>
 80008e2:	e138      	b.n	8000b56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d003      	beq.n	80008f4 <HAL_GPIO_Init+0x38>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	d123      	bne.n	800093c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	58d3      	ldr	r3, [r2, r3]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2207      	movs	r2, #7
 8000906:	4013      	ands	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	409a      	lsls	r2, r3
 800090e:	0013      	movs	r3, r2
 8000910:	43da      	mvns	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2107      	movs	r1, #7
 8000920:	400b      	ands	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	409a      	lsls	r2, r3
 8000926:	0013      	movs	r3, r2
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	409a      	lsls	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	43da      	mvns	r2, r3
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d00b      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d007      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000984:	2b11      	cmp	r3, #17
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d130      	bne.n	80009f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	2203      	movs	r2, #3
 800099c:	409a      	lsls	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	43da      	mvns	r2, r3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	409a      	lsls	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009c6:	2201      	movs	r2, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	2201      	movs	r2, #1
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	055b      	lsls	r3, r3, #21
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_GPIO_Init+0x174>
 8000a2e:	e092      	b.n	8000b56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a30:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3318      	adds	r3, #24
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	589b      	ldr	r3, [r3, r2]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2203      	movs	r2, #3
 8000a42:	4013      	ands	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	220f      	movs	r2, #15
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	43da      	mvns	r2, r3
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0x1ca>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <HAL_GPIO_Init+0x2bc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_GPIO_Init+0x1c6>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a44      	ldr	r2, [pc, #272]	; (8000b7c <HAL_GPIO_Init+0x2c0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x1c2>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a43      	ldr	r2, [pc, #268]	; (8000b80 <HAL_GPIO_Init+0x2c4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_GPIO_Init+0x1be>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a86:	2300      	movs	r3, #0
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	4093      	lsls	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a98:	4936      	ldr	r1, [pc, #216]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3318      	adds	r3, #24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	58d3      	ldr	r3, [r2, r3]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000acc:	4929      	ldr	r1, [pc, #164]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	2384      	movs	r3, #132	; 0x84
 8000ad8:	58d3      	ldr	r3, [r2, r3]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	029b      	lsls	r3, r3, #10
 8000aee:	4013      	ands	r3, r2
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afa:	491e      	ldr	r1, [pc, #120]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000afc:	2284      	movs	r2, #132	; 0x84
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	035b      	lsls	r3, r3, #13
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	039b      	lsls	r3, r3, #14
 8000b44:	4013      	ands	r3, r2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	40da      	lsrs	r2, r3
 8000b64:	1e13      	subs	r3, r2, #0
 8000b66:	d000      	beq.n	8000b6a <HAL_GPIO_Init+0x2ae>
 8000b68:	e6b0      	b.n	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b006      	add	sp, #24
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021800 	.word	0x40021800
 8000b78:	50000400 	.word	0x50000400
 8000b7c:	50000800 	.word	0x50000800
 8000b80:	50000c00 	.word	0x50000c00

08000b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	1cbb      	adds	r3, r7, #2
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	801a      	strh	r2, [r3, #0]
 8000b96:	1c7b      	adds	r3, r7, #1
 8000b98:	1c0a      	adds	r2, r1, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	1c7b      	adds	r3, r7, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d004      	beq.n	8000bae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bac:	e003      	b.n	8000bb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bae:	1cbb      	adds	r3, r7, #2
 8000bb0:	881a      	ldrh	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e082      	b.n	8000cd8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2241      	movs	r2, #65	; 0x41
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	2100      	movs	r1, #0
 8000be4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f003 fcf3 	bl	80045d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2241      	movs	r2, #65	; 0x41
 8000bf2:	2124      	movs	r1, #36	; 0x24
 8000bf4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	438a      	bics	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <HAL_I2C_Init+0x120>)
 8000c10:	400a      	ands	r2, r1
 8000c12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4931      	ldr	r1, [pc, #196]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d108      	bne.n	8000c3e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0209      	lsls	r1, r1, #8
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	e007      	b.n	8000c4e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2184      	movs	r1, #132	; 0x84
 8000c48:	0209      	lsls	r1, r1, #8
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d104      	bne.n	8000c60 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <HAL_I2C_Init+0x128>)
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	491a      	ldr	r1, [pc, #104]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	021a      	lsls	r2, r3, #8
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69d9      	ldr	r1, [r3, #28]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2241      	movs	r2, #65	; 0x41
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2242      	movs	r2, #66	; 0x42
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	f0ffffff 	.word	0xf0ffffff
 8000ce4:	ffff7fff 	.word	0xffff7fff
 8000ce8:	02008000 	.word	0x02008000

08000cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0010      	movs	r0, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	1c22      	adds	r2, r4, #0
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	2308      	movs	r3, #8
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	1c0a      	adds	r2, r1, #0
 8000d0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2241      	movs	r2, #65	; 0x41
 8000d14:	5c9b      	ldrb	r3, [r3, r2]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b20      	cmp	r3, #32
 8000d1a:	d000      	beq.n	8000d1e <HAL_I2C_Mem_Write+0x32>
 8000d1c:	e10c      	b.n	8000f38 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <HAL_I2C_Mem_Write+0x42>
 8000d24:	232c      	movs	r3, #44	; 0x2c
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0ff      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <HAL_I2C_Mem_Write+0x5c>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e0f8      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d50:	f7ff fcd4 	bl	80006fc <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	0219      	lsls	r1, r3, #8
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2319      	movs	r3, #25
 8000d64:	2201      	movs	r2, #1
 8000d66:	f000 fc25 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e0e3      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2241      	movs	r2, #65	; 0x41
 8000d76:	2121      	movs	r1, #33	; 0x21
 8000d78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2242      	movs	r2, #66	; 0x42
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	222c      	movs	r2, #44	; 0x2c
 8000d92:	18ba      	adds	r2, r7, r2
 8000d94:	8812      	ldrh	r2, [r2, #0]
 8000d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	881c      	ldrh	r4, [r3, #0]
 8000da2:	2308      	movs	r3, #8
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	230a      	movs	r3, #10
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	8819      	ldrh	r1, [r3, #0]
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	0023      	movs	r3, r4
 8000dba:	f000 fb13 	bl	80013e4 <I2C_RequestMemoryWrite>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0b5      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	2bff      	cmp	r3, #255	; 0xff
 8000dd6:	d911      	bls.n	8000dfc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045c      	lsls	r4, r3, #17
 8000de8:	230a      	movs	r3, #10
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	8819      	ldrh	r1, [r3, #0]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	0023      	movs	r3, r4
 8000df6:	f000 fcfd 	bl	80017f4 <I2C_TransferConfig>
 8000dfa:	e012      	b.n	8000e22 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	049c      	lsls	r4, r3, #18
 8000e10:	230a      	movs	r3, #10
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	8819      	ldrh	r1, [r3, #0]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	0023      	movs	r3, r4
 8000e1e:	f000 fce9 	bl	80017f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fc02 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e081      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03a      	beq.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d136      	bne.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	0013      	movs	r3, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	f000 fb95 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e053      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d911      	bls.n	8000ec0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	045c      	lsls	r4, r3, #17
 8000eac:	230a      	movs	r3, #10
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	8819      	ldrh	r1, [r3, #0]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	0023      	movs	r3, r4
 8000eba:	f000 fc9b 	bl	80017f4 <I2C_TransferConfig>
 8000ebe:	e012      	b.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	049c      	lsls	r4, r3, #18
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	0023      	movs	r3, r4
 8000ee2:	f000 fc87 	bl	80017f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d198      	bne.n	8000e22 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fbda 	bl	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e01a      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	490b      	ldr	r1, [pc, #44]	; (8000f44 <HAL_I2C_Mem_Write+0x258>)
 8000f18:	400a      	ands	r2, r1
 8000f1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2241      	movs	r2, #65	; 0x41
 8000f20:	2120      	movs	r1, #32
 8000f22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2242      	movs	r2, #66	; 0x42
 8000f28:	2100      	movs	r1, #0
 8000f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	2100      	movs	r1, #0
 8000f32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e000      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8000f38:	2302      	movs	r3, #2
  }
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b007      	add	sp, #28
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fe00e800 	.word	0xfe00e800

08000f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	000c      	movs	r4, r1
 8000f52:	0010      	movs	r0, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	230a      	movs	r3, #10
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	1c22      	adds	r2, r4, #0
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	2308      	movs	r3, #8
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2241      	movs	r2, #65	; 0x41
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b20      	cmp	r3, #32
 8000f76:	d000      	beq.n	8000f7a <HAL_I2C_Mem_Read+0x32>
 8000f78:	e110      	b.n	800119c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <HAL_I2C_Mem_Read+0x42>
 8000f80:	232c      	movs	r3, #44	; 0x2c
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e103      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	5c9b      	ldrb	r3, [r3, r2]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_I2C_Mem_Read+0x5c>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e0fc      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2240      	movs	r2, #64	; 0x40
 8000fa8:	2101      	movs	r1, #1
 8000faa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fac:	f7ff fba6 	bl	80006fc <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	0219      	lsls	r1, r3, #8
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2319      	movs	r3, #25
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f000 faf7 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0e7      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2241      	movs	r2, #65	; 0x41
 8000fd2:	2122      	movs	r1, #34	; 0x22
 8000fd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2242      	movs	r2, #66	; 0x42
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	222c      	movs	r2, #44	; 0x2c
 8000fee:	18ba      	adds	r2, r7, r2
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ffa:	1dbb      	adds	r3, r7, #6
 8000ffc:	881c      	ldrh	r4, [r3, #0]
 8000ffe:	2308      	movs	r3, #8
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	230a      	movs	r3, #10
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	8819      	ldrh	r1, [r3, #0]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	0023      	movs	r3, r4
 8001016:	f000 fa49 	bl	80014ac <I2C_RequestMemoryRead>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d005      	beq.n	800102a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0b9      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102e:	b29b      	uxth	r3, r3
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d911      	bls.n	8001058 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103e:	b2da      	uxtb	r2, r3
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	045c      	lsls	r4, r3, #17
 8001044:	230a      	movs	r3, #10
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	8819      	ldrh	r1, [r3, #0]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_I2C_Mem_Read+0x260>)
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	0023      	movs	r3, r4
 8001052:	f000 fbcf 	bl	80017f4 <I2C_TransferConfig>
 8001056:	e012      	b.n	800107e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001066:	b2da      	uxtb	r2, r3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	049c      	lsls	r4, r3, #18
 800106c:	230a      	movs	r3, #10
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <HAL_I2C_Mem_Read+0x260>)
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	0023      	movs	r3, r4
 800107a:	f000 fbbb 	bl	80017f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800107e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	0013      	movs	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	2104      	movs	r1, #4
 800108c:	f000 fa92 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e082      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03a      	beq.n	800114a <HAL_I2C_Mem_Read+0x202>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d136      	bne.n	800114a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	0013      	movs	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	f000 fa63 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e053      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d911      	bls.n	8001124 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	b2da      	uxtb	r2, r3
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	045c      	lsls	r4, r3, #17
 8001110:	230a      	movs	r3, #10
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	8819      	ldrh	r1, [r3, #0]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	2300      	movs	r3, #0
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	0023      	movs	r3, r4
 800111e:	f000 fb69 	bl	80017f4 <I2C_TransferConfig>
 8001122:	e012      	b.n	800114a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001128:	b29a      	uxth	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001132:	b2da      	uxtb	r2, r3
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	049c      	lsls	r4, r3, #18
 8001138:	230a      	movs	r3, #10
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	0023      	movs	r3, r4
 8001146:	f000 fb55 	bl	80017f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d194      	bne.n	800107e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 faa8 	bl	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e01a      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2220      	movs	r2, #32
 800116e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	490c      	ldr	r1, [pc, #48]	; (80011ac <HAL_I2C_Mem_Read+0x264>)
 800117c:	400a      	ands	r2, r1
 800117e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2241      	movs	r2, #65	; 0x41
 8001184:	2120      	movs	r1, #32
 8001186:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2242      	movs	r2, #66	; 0x42
 800118c:	2100      	movs	r1, #0
 800118e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800119c:	2302      	movs	r3, #2
  }
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b007      	add	sp, #28
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	80002400 	.word	0x80002400
 80011ac:	fe00e800 	.word	0xfe00e800

080011b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	230a      	movs	r3, #10
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	1c0a      	adds	r2, r1, #0
 80011c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2241      	movs	r2, #65	; 0x41
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d000      	beq.n	80011d6 <HAL_I2C_IsDeviceReady+0x26>
 80011d4:	e0fe      	b.n	80013d4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	401a      	ands	r2, r3
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d101      	bne.n	80011ee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80011ea:	2302      	movs	r3, #2
 80011ec:	e0f3      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	5c9b      	ldrb	r3, [r3, r2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_I2C_IsDeviceReady+0x4c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e0ec      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	2101      	movs	r1, #1
 8001202:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2241      	movs	r2, #65	; 0x41
 8001208:	2124      	movs	r1, #36	; 0x24
 800120a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <HAL_I2C_IsDeviceReady+0x7a>
 800121a:	230a      	movs	r3, #10
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	059b      	lsls	r3, r3, #22
 8001222:	0d9b      	lsrs	r3, r3, #22
 8001224:	4a6e      	ldr	r2, [pc, #440]	; (80013e0 <HAL_I2C_IsDeviceReady+0x230>)
 8001226:	431a      	orrs	r2, r3
 8001228:	e007      	b.n	800123a <HAL_I2C_IsDeviceReady+0x8a>
 800122a:	230a      	movs	r3, #10
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	059b      	lsls	r3, r3, #22
 8001232:	0d9b      	lsrs	r3, r3, #22
 8001234:	22a0      	movs	r2, #160	; 0xa0
 8001236:	0192      	lsls	r2, r2, #6
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fa5c 	bl	80006fc <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2220      	movs	r2, #32
 8001250:	4013      	ands	r3, r2
 8001252:	3b20      	subs	r3, #32
 8001254:	425a      	negs	r2, r3
 8001256:	4153      	adcs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	231f      	movs	r3, #31
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2210      	movs	r2, #16
 8001268:	4013      	ands	r3, r2
 800126a:	3b10      	subs	r3, #16
 800126c:	425a      	negs	r2, r3
 800126e:	4153      	adcs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	231e      	movs	r3, #30
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001278:	e035      	b.n	80012e6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	d01a      	beq.n	80012b6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001280:	f7ff fa3c 	bl	80006fc <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d302      	bcc.n	8001296 <HAL_I2C_IsDeviceReady+0xe6>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2241      	movs	r2, #65	; 0x41
 800129a:	2120      	movs	r1, #32
 800129c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	2220      	movs	r2, #32
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	2100      	movs	r1, #0
 80012b0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e08f      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2220      	movs	r2, #32
 80012be:	4013      	ands	r3, r2
 80012c0:	3b20      	subs	r3, #32
 80012c2:	425a      	negs	r2, r3
 80012c4:	4153      	adcs	r3, r2
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	231f      	movs	r3, #31
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2210      	movs	r2, #16
 80012d6:	4013      	ands	r3, r2
 80012d8:	3b10      	subs	r3, #16
 80012da:	425a      	negs	r2, r3
 80012dc:	4153      	adcs	r3, r2
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	231e      	movs	r3, #30
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012e6:	231f      	movs	r3, #31
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <HAL_I2C_IsDeviceReady+0x14a>
 80012f0:	231e      	movs	r3, #30
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0bf      	beq.n	800127a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2210      	movs	r2, #16
 8001302:	4013      	ands	r3, r2
 8001304:	2b10      	cmp	r3, #16
 8001306:	d01a      	beq.n	800133e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	0013      	movs	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	f000 f94d 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e059      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2241      	movs	r2, #65	; 0x41
 800132e:	2120      	movs	r1, #32
 8001330:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	2100      	movs	r1, #0
 8001338:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e04b      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	0013      	movs	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	2120      	movs	r1, #32
 800134c:	f000 f932 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e03e      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2210      	movs	r2, #16
 800135e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2220      	movs	r2, #32
 8001366:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d119      	bne.n	80013a4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	01c9      	lsls	r1, r1, #7
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	0013      	movs	r3, r2
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	f000 f910 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e01c      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2220      	movs	r2, #32
 80013a2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d900      	bls.n	80013b4 <HAL_I2C_IsDeviceReady+0x204>
 80013b2:	e72e      	b.n	8001212 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2241      	movs	r2, #65	; 0x41
 80013b8:	2120      	movs	r1, #32
 80013ba:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	2220      	movs	r2, #32
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80013d4:	2302      	movs	r3, #2
  }
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b008      	add	sp, #32
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	02002000 	.word	0x02002000

080013e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	000c      	movs	r4, r1
 80013ee:	0010      	movs	r0, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	250a      	movs	r5, #10
 80013f4:	197b      	adds	r3, r7, r5
 80013f6:	1c22      	adds	r2, r4, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	2308      	movs	r3, #8
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	1c02      	adds	r2, r0, #0
 8001400:	801a      	strh	r2, [r3, #0]
 8001402:	1dbb      	adds	r3, r7, #6
 8001404:	1c0a      	adds	r2, r1, #0
 8001406:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	045c      	lsls	r4, r3, #17
 8001412:	197b      	adds	r3, r7, r5
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <I2C_RequestMemoryWrite+0xc4>)
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	0023      	movs	r3, r4
 800141e:	f000 f9e9 	bl	80017f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0018      	movs	r0, r3
 800142a:	f000 f902 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e033      	b.n	800149e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800143e:	2308      	movs	r3, #8
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
 800144c:	e019      	b.n	8001482 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800144e:	2308      	movs	r3, #8
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	6a39      	ldr	r1, [r7, #32]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f8e3 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e014      	b.n	800149e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001474:	2308      	movs	r3, #8
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	0013      	movs	r3, r2
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	f000 f890 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b004      	add	sp, #16
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	80002000 	.word	0x80002000

080014ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	000c      	movs	r4, r1
 80014b6:	0010      	movs	r0, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	250a      	movs	r5, #10
 80014bc:	197b      	adds	r3, r7, r5
 80014be:	1c22      	adds	r2, r4, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	2308      	movs	r3, #8
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	1dbb      	adds	r3, r7, #6
 80014cc:	1c0a      	adds	r2, r1, #0
 80014ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	197b      	adds	r3, r7, r5
 80014d8:	8819      	ldrh	r1, [r3, #0]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <I2C_RequestMemoryRead+0xc0>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f000 f987 	bl	80017f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	6a39      	ldr	r1, [r7, #32]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 f8a0 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e033      	b.n	8001562 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001502:	2308      	movs	r3, #8
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
 8001510:	e019      	b.n	8001546 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001512:	2308      	movs	r3, #8
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2da      	uxtb	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f881 	bl	8001632 <I2C_WaitOnTXISFlagUntilTimeout>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e014      	b.n	8001562 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001538:	2308      	movs	r3, #8
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	0013      	movs	r3, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	f000 f82e 	bl	80015b4 <I2C_WaitOnFlagUntilTimeout>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	80002000 	.word	0x80002000

08001570 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d103      	bne.n	800158e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	2b01      	cmp	r3, #1
 800159a:	d007      	beq.n	80015ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	619a      	str	r2, [r3, #24]
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c4:	e021      	b.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	d01e      	beq.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015cc:	f7ff f896 	bl	80006fc <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d302      	bcc.n	80015e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	2220      	movs	r2, #32
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2241      	movs	r2, #65	; 0x41
 80015f2:	2120      	movs	r1, #32
 80015f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2242      	movs	r2, #66	; 0x42
 80015fa:	2100      	movs	r1, #0
 80015fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	4013      	ands	r3, r2
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	425a      	negs	r2, r3
 800161a:	4153      	adcs	r3, r2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	001a      	movs	r2, r3
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d0ce      	beq.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}

08001632 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800163e:	e02b      	b.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	0018      	movs	r0, r3
 8001648:	f000 f86e 	bl	8001728 <I2C_IsAcknowledgeFailed>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e029      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	d01e      	beq.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff f84f 	bl	80006fc <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d113      	bne.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	2220      	movs	r2, #32
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2241      	movs	r2, #65	; 0x41
 8001680:	2120      	movs	r1, #32
 8001682:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2242      	movs	r2, #66	; 0x42
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e007      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d1cc      	bne.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016bc:	e028      	b.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f82f 	bl	8001728 <I2C_IsAcknowledgeFailed>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e026      	b.n	8001720 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d2:	f7ff f813 	bl	80006fc <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d302      	bcc.n	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d113      	bne.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	2220      	movs	r2, #32
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2241      	movs	r2, #65	; 0x41
 80016f8:	2120      	movs	r1, #32
 80016fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2242      	movs	r2, #66	; 0x42
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	2100      	movs	r1, #0
 800170a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2220      	movs	r2, #32
 8001718:	4013      	ands	r3, r2
 800171a:	2b20      	cmp	r3, #32
 800171c:	d1cf      	bne.n	80016be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2210      	movs	r2, #16
 800173c:	4013      	ands	r3, r2
 800173e:	2b10      	cmp	r3, #16
 8001740:	d151      	bne.n	80017e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001742:	e021      	b.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3301      	adds	r3, #1
 8001748:	d01e      	beq.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7fe ffd7 	bl	80006fc <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_IsAcknowledgeFailed+0x38>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	2220      	movs	r2, #32
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2242      	movs	r2, #66	; 0x42
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e02f      	b.n	80017e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2220      	movs	r2, #32
 8001790:	4013      	ands	r3, r2
 8001792:	2b20      	cmp	r3, #32
 8001794:	d1d6      	bne.n	8001744 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2220      	movs	r2, #32
 80017a4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fee1 	bl	8001570 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	490d      	ldr	r1, [pc, #52]	; (80017f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	2204      	movs	r2, #4
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2241      	movs	r2, #65	; 0x41
 80017ce:	2120      	movs	r1, #32
 80017d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2242      	movs	r2, #66	; 0x42
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	2100      	movs	r1, #0
 80017e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	fe00e800 	.word	0xfe00e800

080017f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	0008      	movs	r0, r1
 80017fe:	0011      	movs	r1, r2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	240a      	movs	r4, #10
 8001804:	193b      	adds	r3, r7, r4
 8001806:	1c02      	adds	r2, r0, #0
 8001808:	801a      	strh	r2, [r3, #0]
 800180a:	2009      	movs	r0, #9
 800180c:	183b      	adds	r3, r7, r0
 800180e:	1c0a      	adds	r2, r1, #0
 8001810:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	0d51      	lsrs	r1, r2, #21
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	400a      	ands	r2, r1
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <I2C_TransferConfig+0x68>)
 8001824:	430a      	orrs	r2, r1
 8001826:	43d2      	mvns	r2, r2
 8001828:	401a      	ands	r2, r3
 800182a:	0011      	movs	r1, r2
 800182c:	193b      	adds	r3, r7, r4
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	059b      	lsls	r3, r3, #22
 8001832:	0d9a      	lsrs	r2, r3, #22
 8001834:	183b      	adds	r3, r7, r0
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	0418      	lsls	r0, r3, #16
 800183a:	23ff      	movs	r3, #255	; 0xff
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	4003      	ands	r3, r0
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	431a      	orrs	r2, r3
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b005      	add	sp, #20
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	03ff63ff 	.word	0x03ff63ff

08001860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2241      	movs	r2, #65	; 0x41
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d138      	bne.n	80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001880:	2302      	movs	r3, #2
 8001882:	e032      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2241      	movs	r2, #65	; 0x41
 8001890:	2124      	movs	r1, #36	; 0x24
 8001892:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4911      	ldr	r1, [pc, #68]	; (80018f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2101      	movs	r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2241      	movs	r2, #65	; 0x41
 80018d8:	2120      	movs	r1, #32
 80018da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	2100      	movs	r1, #0
 80018e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
  }
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	ffffefff 	.word	0xffffefff

080018f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2241      	movs	r2, #65	; 0x41
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	d139      	bne.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001918:	2302      	movs	r3, #2
 800191a:	e033      	b.n	8001984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2241      	movs	r2, #65	; 0x41
 8001928:	2124      	movs	r1, #36	; 0x24
 800192a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2241      	movs	r2, #65	; 0x41
 8001972:	2120      	movs	r1, #32
 8001974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b004      	add	sp, #16
 800198a:	bd80      	pop	{r7, pc}
 800198c:	fffff0ff 	.word	0xfffff0ff

08001990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800199e:	4013      	ands	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d11f      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	0013      	movs	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	189b      	adds	r3, r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4912      	ldr	r1, [pc, #72]	; (8001a0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7fe fb9e 	bl	8000104 <__udivsi3>
 80019c8:	0003      	movs	r3, r0
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ce:	e008      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e001      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e009      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	401a      	ands	r2, r3
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0ed      	beq.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b004      	add	sp, #16
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40007000 	.word	0x40007000
 8001a04:	fffff9ff 	.word	0xfffff9ff
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	000f4240 	.word	0x000f4240

08001a10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	23e0      	movs	r3, #224	; 0xe0
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4013      	ands	r3, r2
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e304      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d100      	bne.n	8001a46 <HAL_RCC_OscConfig+0x1e>
 8001a44:	e07c      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4bc3      	ldr	r3, [pc, #780]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2238      	movs	r2, #56	; 0x38
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4bc0      	ldr	r3, [pc, #768]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3e>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4bb9      	ldr	r3, [pc, #740]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d062      	beq.n	8001b3e <HAL_RCC_OscConfig+0x116>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d15e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e2df      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
 8001a90:	4bb0      	ldr	r3, [pc, #704]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4baf      	ldr	r3, [pc, #700]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0249      	lsls	r1, r1, #9
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e020      	b.n	8001ae2 <HAL_RCC_OscConfig+0xba>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	23a0      	movs	r3, #160	; 0xa0
 8001aa6:	02db      	lsls	r3, r3, #11
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10e      	bne.n	8001aca <HAL_RCC_OscConfig+0xa2>
 8001aac:	4ba9      	ldr	r3, [pc, #676]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4ba8      	ldr	r3, [pc, #672]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	02c9      	lsls	r1, r1, #11
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4ba6      	ldr	r3, [pc, #664]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4ba5      	ldr	r3, [pc, #660]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0249      	lsls	r1, r1, #9
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0xba>
 8001aca:	4ba2      	ldr	r3, [pc, #648]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	49a1      	ldr	r1, [pc, #644]	; (8001d58 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	4b9f      	ldr	r3, [pc, #636]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	499f      	ldr	r1, [pc, #636]	; (8001d5c <HAL_RCC_OscConfig+0x334>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d014      	beq.n	8001b14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe fe07 	bl	80006fc <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7fe fe02 	bl	80006fc <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e29e      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b06:	4b93      	ldr	r3, [pc, #588]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001b12:	e015      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7fe fdf2 	bl	80006fc <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7fe fded 	bl	80006fc <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e289      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0xf6>
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x124>
 8001b4a:	e099      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2238      	movs	r2, #56	; 0x38
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d102      	bne.n	8001b6c <HAL_RCC_OscConfig+0x144>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d002      	beq.n	8001b72 <HAL_RCC_OscConfig+0x14a>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d135      	bne.n	8001bde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x162>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e25c      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a74      	ldr	r2, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x338>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6e      	ldr	r2, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x33c>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0adb      	lsrs	r3, r3, #11
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a68      	ldr	r2, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x340>)
 8001bc6:	40da      	lsrs	r2, r3
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x344>)
 8001bca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x348>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7fe fd39 	bl	8000648 <HAL_InitTick>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d051      	beq.n	8001c7e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e232      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d030      	beq.n	8001c48 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5e      	ldr	r2, [pc, #376]	; (8001d64 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0049      	lsls	r1, r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe fd78 	bl	80006fc <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7fe fd73 	bl	80006fc <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e20f      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	; (8001d60 <HAL_RCC_OscConfig+0x338>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	021a      	lsls	r2, r3, #8
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e01b      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	4949      	ldr	r1, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x34c>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7fe fd52 	bl	80006fc <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7fe fd4d 	bl	80006fc <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1e9      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c70:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x236>
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d047      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	; 0x38
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b18      	cmp	r3, #24
 8001c94:	d10a      	bne.n	8001cac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d03c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d138      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e1cb      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d019      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fd1c 	bl	80006fc <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7fe fd17 	bl	80006fc <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1b3      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d0f1      	beq.n	8001cca <HAL_RCC_OscConfig+0x2a2>
 8001ce6:	e018      	b.n	8001d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fd02 	bl	80006fc <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7fe fcfd 	bl	80006fc <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e199      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f1      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2fe>
 8001d24:	e0c6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	231f      	movs	r3, #31
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2238      	movs	r2, #56	; 0x38
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d11e      	bne.n	8001d78 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d100      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31e>
 8001d44:	e0b6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d000      	beq.n	8001d50 <HAL_RCC_OscConfig+0x328>
 8001d4e:	e0b1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e177      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	fffeffff 	.word	0xfffeffff
 8001d5c:	fffbffff 	.word	0xfffbffff
 8001d60:	ffff80ff 	.word	0xffff80ff
 8001d64:	ffffc7ff 	.word	0xffffc7ff
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
 8001d74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d78:	4bb4      	ldr	r3, [pc, #720]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	055b      	lsls	r3, r3, #21
 8001d80:	4013      	ands	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x360>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x362>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d011      	beq.n	8001db2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4baf      	ldr	r3, [pc, #700]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	4bae      	ldr	r3, [pc, #696]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0549      	lsls	r1, r1, #21
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9c:	4bab      	ldr	r3, [pc, #684]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001daa:	231f      	movs	r3, #31
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	4ba7      	ldr	r3, [pc, #668]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d11a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbe:	4ba4      	ldr	r3, [pc, #656]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4ba3      	ldr	r3, [pc, #652]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0049      	lsls	r1, r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fc96 	bl	80006fc <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7fe fc91 	bl	80006fc <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e12d      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	4b99      	ldr	r3, [pc, #612]	; (8002050 <HAL_RCC_OscConfig+0x628>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3e2>
 8001dfc:	4b93      	ldr	r3, [pc, #588]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x404>
 8001e12:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e16:	4b8d      	ldr	r3, [pc, #564]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e18:	2104      	movs	r1, #4
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	4b8a      	ldr	r3, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e2c:	4b87      	ldr	r3, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e30:	4b86      	ldr	r3, [pc, #536]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3c:	4b83      	ldr	r3, [pc, #524]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	438a      	bics	r2, r1
 8001e42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fc56 	bl	80006fc <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fc51 	bl	80006fc <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a7c      	ldr	r2, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x62c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0ec      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x42e>
 8001e74:	e013      	b.n	8001e9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fc41 	bl	80006fc <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7e:	e009      	b.n	8001e94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7fe fc3c 	bl	80006fc <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	4a72      	ldr	r2, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x62c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0d7      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e9e:	231f      	movs	r3, #31
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001eae:	496a      	ldr	r1, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x630>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <HAL_RCC_OscConfig+0x496>
 8001ebc:	e0c1      	b.n	8002042 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	; 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d100      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4a4>
 8001eca:	e081      	b.n	8001fd0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d156      	bne.n	8001f82 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001eda:	4960      	ldr	r1, [pc, #384]	; (800205c <HAL_RCC_OscConfig+0x634>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fc0c 	bl	80006fc <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7fe fc07 	bl	80006fc <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0a3      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	049b      	lsls	r3, r3, #18
 8001f04:	4013      	ands	r3, r2
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_RCC_OscConfig+0x638>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	431a      	orrs	r2, r3
 8001f36:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0449      	lsls	r1, r1, #17
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fbd0 	bl	80006fc <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fbcb 	bl	80006fc <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e067      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	049b      	lsls	r3, r3, #18
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x53a>
 8001f80:	e05f      	b.n	8002042 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f88:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_RCC_OscConfig+0x634>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f94:	2103      	movs	r1, #3
 8001f96:	438a      	bics	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001fa0:	4930      	ldr	r1, [pc, #192]	; (8002064 <HAL_RCC_OscConfig+0x63c>)
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fba9 	bl	80006fc <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fba4 	bl	80006fc <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e040      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	049b      	lsls	r3, r3, #18
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x588>
 8001fce:	e038      	b.n	8002042 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e033      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x624>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d126      	bne.n	800203e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2270      	movs	r2, #112	; 0x70
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11f      	bne.n	800203e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	23fe      	movs	r3, #254	; 0xfe
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	23f8      	movs	r3, #248	; 0xf8
 8002014:	039b      	lsls	r3, r3, #14
 8002016:	401a      	ands	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d10e      	bne.n	800203e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	23e0      	movs	r3, #224	; 0xe0
 8002024:	051b      	lsls	r3, r3, #20
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0f5b      	lsrs	r3, r3, #29
 8002034:	075a      	lsls	r2, r3, #29
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b008      	add	sp, #32
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	00001388 	.word	0x00001388
 8002058:	efffffff 	.word	0xefffffff
 800205c:	feffffff 	.word	0xfeffffff
 8002060:	11c1808c 	.word	0x11c1808c
 8002064:	eefeffff 	.word	0xeefeffff

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0e9      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d91e      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7fe fb2e 	bl	80006fc <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a6:	f7fe fb29 	bl	80006fc <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0ca      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2204      	movs	r2, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	d006      	beq.n	80020ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020dc:	4b60      	ldr	r3, [pc, #384]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	21e0      	movs	r1, #224	; 0xe0
 80020e4:	01c9      	lsls	r1, r1, #7
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_ClockConfig+0x1fc>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4013      	ands	r3, r2
 8002106:	d057      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d12b      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e097      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002128:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	049b      	lsls	r3, r3, #18
 8002130:	4013      	ands	r3, r2
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e08b      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4013      	ands	r3, r2
 800214a:	d113      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e07f      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d108      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e074      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e06d      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2207      	movs	r2, #7
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe fab8 	bl	80006fc <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe fab3 	bl	80006fc <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e054      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2238      	movs	r2, #56	; 0x38
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2207      	movs	r2, #7
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d21e      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2207      	movs	r2, #7
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fa90 	bl	80006fc <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe fa8b 	bl	80006fc <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e02c      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_RCC_ClockConfig+0x200>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002222:	f000 f829 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002226:	0001      	movs	r1, r0
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	220f      	movs	r2, #15
 8002230:	401a      	ands	r2, r3
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x204>)
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	58d3      	ldr	r3, [r2, r3]
 8002238:	221f      	movs	r2, #31
 800223a:	4013      	ands	r3, r2
 800223c:	000a      	movs	r2, r1
 800223e:	40da      	lsrs	r2, r3
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x208>)
 8002242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x20c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe f9fd 	bl	8000648 <HAL_InitTick>
 800224e:	0003      	movs	r3, r0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40022000 	.word	0x40022000
 800225c:	00001388 	.word	0x00001388
 8002260:	40021000 	.word	0x40021000
 8002264:	fffff0ff 	.word	0xfffff0ff
 8002268:	ffff8fff 	.word	0xffff8fff
 800226c:	08004820 	.word	0x08004820
 8002270:	20000008 	.word	0x20000008
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2238      	movs	r2, #56	; 0x38
 8002284:	4013      	ands	r3, r2
 8002286:	d10f      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0adb      	lsrs	r3, r3, #11
 800228e:	2207      	movs	r2, #7
 8002290:	4013      	ands	r3, r2
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	4835      	ldr	r0, [pc, #212]	; (8002374 <HAL_RCC_GetSysClockFreq+0xfc>)
 800229e:	f7fd ff31 	bl	8000104 <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e05d      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2238      	movs	r2, #56	; 0x38
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_GetSysClockFreq+0x100>)
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e054      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2238      	movs	r2, #56	; 0x38
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d138      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2203      	movs	r2, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	3301      	adds	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d10d      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4824      	ldr	r0, [pc, #144]	; (8002378 <HAL_RCC_GetSysClockFreq+0x100>)
 80022e8:	f7fd ff0c 	bl	8000104 <__udivsi3>
 80022ec:	0003      	movs	r3, r0
 80022ee:	0019      	movs	r1, r3
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	227f      	movs	r2, #127	; 0x7f
 80022f8:	4013      	ands	r3, r2
 80022fa:	434b      	muls	r3, r1
 80022fc:	617b      	str	r3, [r7, #20]
        break;
 80022fe:	e00d      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002304:	f7fd fefe 	bl	8000104 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	0019      	movs	r1, r3
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	227f      	movs	r2, #127	; 0x7f
 8002314:	4013      	ands	r3, r2
 8002316:	434b      	muls	r3, r1
 8002318:	617b      	str	r3, [r7, #20]
        break;
 800231a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0f5b      	lsrs	r3, r3, #29
 8002322:	2207      	movs	r2, #7
 8002324:	4013      	ands	r3, r2
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f7fd fee9 	bl	8000104 <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e015      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2238      	movs	r2, #56	; 0x38
 800233e:	4013      	ands	r3, r2
 8002340:	2b20      	cmp	r3, #32
 8002342:	d103      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2238      	movs	r2, #56	; 0x38
 8002352:	4013      	ands	r3, r2
 8002354:	2b18      	cmp	r3, #24
 8002356:	d103      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002358:	23fa      	movs	r3, #250	; 0xfa
 800235a:	01db      	lsls	r3, r3, #7
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e001      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002364:	693b      	ldr	r3, [r7, #16]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b006      	add	sp, #24
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40021000 	.word	0x40021000
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200

0800237c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_RCC_GetHCLKFreq+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	20000008 	.word	0x20000008

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002394:	f7ff fff2 	bl	800237c <HAL_RCC_GetHCLKFreq>
 8002398:	0004      	movs	r4, r0
 800239a:	f7ff fb39 	bl	8001a10 <LL_RCC_GetAPB1Prescaler>
 800239e:	0003      	movs	r3, r0
 80023a0:	0b1a      	lsrs	r2, r3, #12
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	58d3      	ldr	r3, [r2, r3]
 80023a8:	221f      	movs	r2, #31
 80023aa:	4013      	ands	r3, r2
 80023ac:	40dc      	lsrs	r4, r3
 80023ae:	0023      	movs	r3, r4
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bdb0      	pop	{r4, r5, r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	08004860 	.word	0x08004860

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023c4:	2313      	movs	r3, #19
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023cc:	2312      	movs	r3, #18
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	d100      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023e0:	e0a4      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2311      	movs	r3, #17
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4bc3      	ldr	r3, [pc, #780]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	055b      	lsls	r3, r3, #21
 80023f2:	4013      	ands	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4bc0      	ldr	r3, [pc, #768]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	4bbf      	ldr	r3, [pc, #764]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0549      	lsls	r1, r1, #21
 8002400:	430a      	orrs	r2, r1
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
 8002404:	4bbc      	ldr	r3, [pc, #752]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2311      	movs	r3, #17
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241a:	4bb8      	ldr	r3, [pc, #736]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4bb7      	ldr	r3, [pc, #732]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	0049      	lsls	r1, r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002428:	f7fe f968 	bl	80006fc <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002430:	e00b      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe f963 	bl	80006fc <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d904      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002440:	2313      	movs	r3, #19
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2203      	movs	r2, #3
 8002446:	701a      	strb	r2, [r3, #0]
        break;
 8002448:	e005      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800244a:	4bac      	ldr	r3, [pc, #688]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4013      	ands	r3, r2
 8002454:	d0ed      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002456:	2313      	movs	r3, #19
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d154      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002460:	4ba5      	ldr	r3, [pc, #660]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4013      	ands	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d019      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d014      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247c:	4b9e      	ldr	r3, [pc, #632]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	4a9f      	ldr	r2, [pc, #636]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002482:	4013      	ands	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002486:	4b9c      	ldr	r3, [pc, #624]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800248a:	4b9b      	ldr	r3, [pc, #620]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	0249      	lsls	r1, r1, #9
 8002490:	430a      	orrs	r2, r1
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002494:	4b98      	ldr	r3, [pc, #608]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002498:	4b97      	ldr	r3, [pc, #604]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249a:	499a      	ldr	r1, [pc, #616]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800249c:	400a      	ands	r2, r1
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a0:	4b95      	ldr	r3, [pc, #596]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	d016      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe f925 	bl	80006fc <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	e00c      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe f920 	bl	80006fc <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	4a91      	ldr	r2, [pc, #580]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d904      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80024c8:	2313      	movs	r3, #19
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2203      	movs	r2, #3
 80024ce:	701a      	strb	r2, [r3, #0]
            break;
 80024d0:	e004      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d0ed      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80024dc:	2313      	movs	r3, #19
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	4a85      	ldr	r2, [pc, #532]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024fa:	e00c      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024fc:	2312      	movs	r3, #18
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2213      	movs	r2, #19
 8002502:	18ba      	adds	r2, r7, r2
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e005      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250a:	2312      	movs	r3, #18
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2213      	movs	r2, #19
 8002510:	18ba      	adds	r2, r7, r2
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002516:	2311      	movs	r3, #17
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002524:	4b74      	ldr	r3, [pc, #464]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	4979      	ldr	r1, [pc, #484]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002528:	400a      	ands	r2, r1
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	2203      	movs	r2, #3
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002546:	430a      	orrs	r2, r1
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	220c      	movs	r2, #12
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	430a      	orrs	r2, r1
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002572:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	4a66      	ldr	r2, [pc, #408]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002582:	430a      	orrs	r2, r1
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002592:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4013      	ands	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4013      	ands	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d0:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	4013      	ands	r3, r2
 80025ee:	d015      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	0899      	lsrs	r1, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0249      	lsls	r1, r1, #9
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	4013      	ands	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	4393      	bics	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002638:	430a      	orrs	r2, r1
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	039b      	lsls	r3, r3, #14
 8002644:	4013      	ands	r3, r2
 8002646:	d016      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	4a34      	ldr	r2, [pc, #208]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800264e:	4013      	ands	r3, r2
 8002650:	0019      	movs	r1, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002658:	430a      	orrs	r2, r1
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	03db      	lsls	r3, r3, #15
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	0449      	lsls	r1, r1, #17
 8002672:	430a      	orrs	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	03db      	lsls	r3, r3, #15
 800267e:	4013      	ands	r3, r2
 8002680:	d016      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002692:	430a      	orrs	r2, r1
 8002694:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	045b      	lsls	r3, r3, #17
 800269e:	429a      	cmp	r2, r3
 80026a0:	d106      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0449      	lsls	r1, r1, #17
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4013      	ands	r3, r2
 80026ba:	d016      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0249      	lsls	r1, r1, #9
 80026e6:	430a      	orrs	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80026ea:	2312      	movs	r3, #18
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	781b      	ldrb	r3, [r3, #0]
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b006      	add	sp, #24
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	fffffcff 	.word	0xfffffcff
 8002704:	fffeffff 	.word	0xfffeffff
 8002708:	00001388 	.word	0x00001388
 800270c:	efffffff 	.word	0xefffffff
 8002710:	fffff3ff 	.word	0xfffff3ff
 8002714:	fff3ffff 	.word	0xfff3ffff
 8002718:	ffcfffff 	.word	0xffcfffff
 800271c:	ffffcfff 	.word	0xffffcfff
 8002720:	ffbfffff 	.word	0xffbfffff
 8002724:	feffffff 	.word	0xfeffffff
 8002728:	ffff3fff 	.word	0xffff3fff

0800272c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e046      	b.n	80027cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	589b      	ldr	r3, [r3, r2]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	227c      	movs	r2, #124	; 0x7c
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0018      	movs	r0, r3
 8002754:	f001 ff8a 	bl	800466c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	2124      	movs	r1, #36	; 0x24
 800275e:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	438a      	bics	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f830 	bl	80027d8 <UART_SetConfig>
 8002778:	0003      	movs	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e024      	b.n	80027cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f001 f90d 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	490d      	ldr	r1, [pc, #52]	; (80027d4 <HAL_UART_Init+0xa8>)
 800279e:	400a      	ands	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	212a      	movs	r1, #42	; 0x2a
 80027ae:	438a      	bics	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 f9a5 	bl	8003b14 <UART_CheckIdleState>
 80027ca:	0003      	movs	r3, r0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffffb7ff 	.word	0xffffb7ff

080027d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027da:	b09f      	sub	sp, #124	; 0x7c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e4:	2313      	movs	r3, #19
 80027e6:	2258      	movs	r2, #88	; 0x58
 80027e8:	18ba      	adds	r2, r7, r2
 80027ea:	18d2      	adds	r2, r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
 8002804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4313      	orrs	r3, r2
 800280a:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002812:	4313      	orrs	r3, r2
 8002814:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4bba      	ldr	r3, [pc, #744]	; (8002b08 <UART_SetConfig+0x330>)
 800281e:	401a      	ands	r2, r3
 8002820:	0011      	movs	r1, r2
 8002822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002828:	430b      	orrs	r3, r1
 800282a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4bb6      	ldr	r3, [pc, #728]	; (8002b0c <UART_SetConfig+0x334>)
 8002834:	401a      	ands	r2, r3
 8002836:	0010      	movs	r0, r2
 8002838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	0003      	movs	r3, r0
 8002842:	430b      	orrs	r3, r1
 8002844:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800284c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4baf      	ldr	r3, [pc, #700]	; (8002b10 <UART_SetConfig+0x338>)
 8002852:	429a      	cmp	r2, r3
 8002854:	d004      	beq.n	8002860 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	4313      	orrs	r3, r2
 800285e:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	4bab      	ldr	r3, [pc, #684]	; (8002b14 <UART_SetConfig+0x33c>)
 8002868:	401a      	ands	r2, r3
 800286a:	0011      	movs	r1, r2
 800286c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002872:	430b      	orrs	r3, r1
 8002874:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	230f      	movs	r3, #15
 800287e:	439a      	bics	r2, r3
 8002880:	0010      	movs	r0, r2
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	0003      	movs	r3, r0
 800288c:	430b      	orrs	r3, r1
 800288e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <UART_SetConfig+0x340>)
 8002896:	429a      	cmp	r2, r3
 8002898:	d12f      	bne.n	80028fa <UART_SetConfig+0x122>
 800289a:	4ba0      	ldr	r3, [pc, #640]	; (8002b1c <UART_SetConfig+0x344>)
 800289c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800289e:	2303      	movs	r3, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d013      	beq.n	80028ce <UART_SetConfig+0xf6>
 80028a6:	d304      	bcc.n	80028b2 <UART_SetConfig+0xda>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d009      	beq.n	80028c0 <UART_SetConfig+0xe8>
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d015      	beq.n	80028dc <UART_SetConfig+0x104>
 80028b0:	e01b      	b.n	80028ea <UART_SetConfig+0x112>
 80028b2:	231b      	movs	r3, #27
 80028b4:	2258      	movs	r2, #88	; 0x58
 80028b6:	18ba      	adds	r2, r7, r2
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	7013      	strb	r3, [r2, #0]
 80028be:	e0b4      	b.n	8002a2a <UART_SetConfig+0x252>
 80028c0:	231b      	movs	r3, #27
 80028c2:	2258      	movs	r2, #88	; 0x58
 80028c4:	18ba      	adds	r2, r7, r2
 80028c6:	18d2      	adds	r2, r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	7013      	strb	r3, [r2, #0]
 80028cc:	e0ad      	b.n	8002a2a <UART_SetConfig+0x252>
 80028ce:	231b      	movs	r3, #27
 80028d0:	2258      	movs	r2, #88	; 0x58
 80028d2:	18ba      	adds	r2, r7, r2
 80028d4:	18d2      	adds	r2, r2, r3
 80028d6:	2304      	movs	r3, #4
 80028d8:	7013      	strb	r3, [r2, #0]
 80028da:	e0a6      	b.n	8002a2a <UART_SetConfig+0x252>
 80028dc:	231b      	movs	r3, #27
 80028de:	2258      	movs	r2, #88	; 0x58
 80028e0:	18ba      	adds	r2, r7, r2
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	2308      	movs	r3, #8
 80028e6:	7013      	strb	r3, [r2, #0]
 80028e8:	e09f      	b.n	8002a2a <UART_SetConfig+0x252>
 80028ea:	231b      	movs	r3, #27
 80028ec:	2258      	movs	r2, #88	; 0x58
 80028ee:	18ba      	adds	r2, r7, r2
 80028f0:	18d2      	adds	r2, r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	7013      	strb	r3, [r2, #0]
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	e097      	b.n	8002a2a <UART_SetConfig+0x252>
 80028fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <UART_SetConfig+0x348>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d132      	bne.n	800296a <UART_SetConfig+0x192>
 8002904:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <UART_SetConfig+0x344>)
 8002906:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002908:	230c      	movs	r3, #12
 800290a:	4013      	ands	r3, r2
 800290c:	2b04      	cmp	r3, #4
 800290e:	d016      	beq.n	800293e <UART_SetConfig+0x166>
 8002910:	d802      	bhi.n	8002918 <UART_SetConfig+0x140>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <UART_SetConfig+0x14a>
 8002916:	e020      	b.n	800295a <UART_SetConfig+0x182>
 8002918:	2b08      	cmp	r3, #8
 800291a:	d009      	beq.n	8002930 <UART_SetConfig+0x158>
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d015      	beq.n	800294c <UART_SetConfig+0x174>
 8002920:	e01b      	b.n	800295a <UART_SetConfig+0x182>
 8002922:	231b      	movs	r3, #27
 8002924:	2258      	movs	r2, #88	; 0x58
 8002926:	18ba      	adds	r2, r7, r2
 8002928:	18d2      	adds	r2, r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	7013      	strb	r3, [r2, #0]
 800292e:	e07c      	b.n	8002a2a <UART_SetConfig+0x252>
 8002930:	231b      	movs	r3, #27
 8002932:	2258      	movs	r2, #88	; 0x58
 8002934:	18ba      	adds	r2, r7, r2
 8002936:	18d2      	adds	r2, r2, r3
 8002938:	2302      	movs	r3, #2
 800293a:	7013      	strb	r3, [r2, #0]
 800293c:	e075      	b.n	8002a2a <UART_SetConfig+0x252>
 800293e:	231b      	movs	r3, #27
 8002940:	2258      	movs	r2, #88	; 0x58
 8002942:	18ba      	adds	r2, r7, r2
 8002944:	18d2      	adds	r2, r2, r3
 8002946:	2304      	movs	r3, #4
 8002948:	7013      	strb	r3, [r2, #0]
 800294a:	e06e      	b.n	8002a2a <UART_SetConfig+0x252>
 800294c:	231b      	movs	r3, #27
 800294e:	2258      	movs	r2, #88	; 0x58
 8002950:	18ba      	adds	r2, r7, r2
 8002952:	18d2      	adds	r2, r2, r3
 8002954:	2308      	movs	r3, #8
 8002956:	7013      	strb	r3, [r2, #0]
 8002958:	e067      	b.n	8002a2a <UART_SetConfig+0x252>
 800295a:	231b      	movs	r3, #27
 800295c:	2258      	movs	r2, #88	; 0x58
 800295e:	18ba      	adds	r2, r7, r2
 8002960:	18d2      	adds	r2, r2, r3
 8002962:	2310      	movs	r3, #16
 8002964:	7013      	strb	r3, [r2, #0]
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	e05f      	b.n	8002a2a <UART_SetConfig+0x252>
 800296a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <UART_SetConfig+0x34c>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <UART_SetConfig+0x1aa>
 8002974:	231b      	movs	r3, #27
 8002976:	2258      	movs	r2, #88	; 0x58
 8002978:	18ba      	adds	r2, r7, r2
 800297a:	18d2      	adds	r2, r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	7013      	strb	r3, [r2, #0]
 8002980:	e053      	b.n	8002a2a <UART_SetConfig+0x252>
 8002982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <UART_SetConfig+0x350>)
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <UART_SetConfig+0x1c2>
 800298c:	231b      	movs	r3, #27
 800298e:	2258      	movs	r2, #88	; 0x58
 8002990:	18ba      	adds	r2, r7, r2
 8002992:	18d2      	adds	r2, r2, r3
 8002994:	2300      	movs	r3, #0
 8002996:	7013      	strb	r3, [r2, #0]
 8002998:	e047      	b.n	8002a2a <UART_SetConfig+0x252>
 800299a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <UART_SetConfig+0x338>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d13c      	bne.n	8002a1e <UART_SetConfig+0x246>
 80029a4:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <UART_SetConfig+0x344>)
 80029a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	401a      	ands	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d01d      	beq.n	80029f2 <UART_SetConfig+0x21a>
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d802      	bhi.n	80029c4 <UART_SetConfig+0x1ec>
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d009      	beq.n	80029d6 <UART_SetConfig+0x1fe>
 80029c2:	e024      	b.n	8002a0e <UART_SetConfig+0x236>
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d00b      	beq.n	80029e4 <UART_SetConfig+0x20c>
 80029cc:	23c0      	movs	r3, #192	; 0xc0
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d015      	beq.n	8002a00 <UART_SetConfig+0x228>
 80029d4:	e01b      	b.n	8002a0e <UART_SetConfig+0x236>
 80029d6:	231b      	movs	r3, #27
 80029d8:	2258      	movs	r2, #88	; 0x58
 80029da:	18ba      	adds	r2, r7, r2
 80029dc:	18d2      	adds	r2, r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	7013      	strb	r3, [r2, #0]
 80029e2:	e022      	b.n	8002a2a <UART_SetConfig+0x252>
 80029e4:	231b      	movs	r3, #27
 80029e6:	2258      	movs	r2, #88	; 0x58
 80029e8:	18ba      	adds	r2, r7, r2
 80029ea:	18d2      	adds	r2, r2, r3
 80029ec:	2302      	movs	r3, #2
 80029ee:	7013      	strb	r3, [r2, #0]
 80029f0:	e01b      	b.n	8002a2a <UART_SetConfig+0x252>
 80029f2:	231b      	movs	r3, #27
 80029f4:	2258      	movs	r2, #88	; 0x58
 80029f6:	18ba      	adds	r2, r7, r2
 80029f8:	18d2      	adds	r2, r2, r3
 80029fa:	2304      	movs	r3, #4
 80029fc:	7013      	strb	r3, [r2, #0]
 80029fe:	e014      	b.n	8002a2a <UART_SetConfig+0x252>
 8002a00:	231b      	movs	r3, #27
 8002a02:	2258      	movs	r2, #88	; 0x58
 8002a04:	18ba      	adds	r2, r7, r2
 8002a06:	18d2      	adds	r2, r2, r3
 8002a08:	2308      	movs	r3, #8
 8002a0a:	7013      	strb	r3, [r2, #0]
 8002a0c:	e00d      	b.n	8002a2a <UART_SetConfig+0x252>
 8002a0e:	231b      	movs	r3, #27
 8002a10:	2258      	movs	r2, #88	; 0x58
 8002a12:	18ba      	adds	r2, r7, r2
 8002a14:	18d2      	adds	r2, r2, r3
 8002a16:	2310      	movs	r3, #16
 8002a18:	7013      	strb	r3, [r2, #0]
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	e005      	b.n	8002a2a <UART_SetConfig+0x252>
 8002a1e:	231b      	movs	r3, #27
 8002a20:	2258      	movs	r2, #88	; 0x58
 8002a22:	18ba      	adds	r2, r7, r2
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	2310      	movs	r3, #16
 8002a28:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <UART_SetConfig+0x338>)
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <UART_SetConfig+0x260>
 8002a34:	f000 fbcc 	bl	80031d0 <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2258      	movs	r2, #88	; 0x58
 8002a3c:	4694      	mov	ip, r2
 8002a3e:	44bc      	add	ip, r7
 8002a40:	4463      	add	r3, ip
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d100      	bne.n	8002a4a <UART_SetConfig+0x272>
 8002a48:	e070      	b.n	8002b2c <UART_SetConfig+0x354>
 8002a4a:	dc02      	bgt.n	8002a52 <UART_SetConfig+0x27a>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <UART_SetConfig+0x288>
 8002a50:	e15f      	b.n	8002d12 <UART_SetConfig+0x53a>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d100      	bne.n	8002a58 <UART_SetConfig+0x280>
 8002a56:	e0b4      	b.n	8002bc2 <UART_SetConfig+0x3ea>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d100      	bne.n	8002a5e <UART_SetConfig+0x286>
 8002a5c:	e105      	b.n	8002c6a <UART_SetConfig+0x492>
 8002a5e:	e158      	b.n	8002d12 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a60:	f7ff fc96 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8002a64:	0002      	movs	r2, r0
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d044      	beq.n	8002af8 <UART_SetConfig+0x320>
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d03e      	beq.n	8002af4 <UART_SetConfig+0x31c>
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d038      	beq.n	8002af0 <UART_SetConfig+0x318>
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d032      	beq.n	8002aec <UART_SetConfig+0x314>
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d02c      	beq.n	8002ae8 <UART_SetConfig+0x310>
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d026      	beq.n	8002ae4 <UART_SetConfig+0x30c>
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d020      	beq.n	8002ae0 <UART_SetConfig+0x308>
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d01a      	beq.n	8002adc <UART_SetConfig+0x304>
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d014      	beq.n	8002ad8 <UART_SetConfig+0x300>
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	d00e      	beq.n	8002ad4 <UART_SetConfig+0x2fc>
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b0a      	cmp	r3, #10
 8002abc:	d008      	beq.n	8002ad0 <UART_SetConfig+0x2f8>
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b0b      	cmp	r3, #11
 8002ac4:	d102      	bne.n	8002acc <UART_SetConfig+0x2f4>
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	e016      	b.n	8002afa <UART_SetConfig+0x322>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e014      	b.n	8002afa <UART_SetConfig+0x322>
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	e012      	b.n	8002afa <UART_SetConfig+0x322>
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	e010      	b.n	8002afa <UART_SetConfig+0x322>
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e00e      	b.n	8002afa <UART_SetConfig+0x322>
 8002adc:	2310      	movs	r3, #16
 8002ade:	e00c      	b.n	8002afa <UART_SetConfig+0x322>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	e00a      	b.n	8002afa <UART_SetConfig+0x322>
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	e008      	b.n	8002afa <UART_SetConfig+0x322>
 8002ae8:	2308      	movs	r3, #8
 8002aea:	e006      	b.n	8002afa <UART_SetConfig+0x322>
 8002aec:	2306      	movs	r3, #6
 8002aee:	e004      	b.n	8002afa <UART_SetConfig+0x322>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e002      	b.n	8002afa <UART_SetConfig+0x322>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e000      	b.n	8002afa <UART_SetConfig+0x322>
 8002af8:	2301      	movs	r3, #1
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f7fd fb01 	bl	8000104 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002b06:	e10b      	b.n	8002d20 <UART_SetConfig+0x548>
 8002b08:	cfff69f3 	.word	0xcfff69f3
 8002b0c:	ffffcfff 	.word	0xffffcfff
 8002b10:	40008000 	.word	0x40008000
 8002b14:	11fff4ff 	.word	0x11fff4ff
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40004800 	.word	0x40004800
 8002b28:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d043      	beq.n	8002bbc <UART_SetConfig+0x3e4>
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d03d      	beq.n	8002bb8 <UART_SetConfig+0x3e0>
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d037      	beq.n	8002bb4 <UART_SetConfig+0x3dc>
 8002b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d031      	beq.n	8002bb0 <UART_SetConfig+0x3d8>
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d02b      	beq.n	8002bac <UART_SetConfig+0x3d4>
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d025      	beq.n	8002ba8 <UART_SetConfig+0x3d0>
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d01f      	beq.n	8002ba4 <UART_SetConfig+0x3cc>
 8002b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b07      	cmp	r3, #7
 8002b6a:	d019      	beq.n	8002ba0 <UART_SetConfig+0x3c8>
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d013      	beq.n	8002b9c <UART_SetConfig+0x3c4>
 8002b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d00d      	beq.n	8002b98 <UART_SetConfig+0x3c0>
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b0a      	cmp	r3, #10
 8002b82:	d007      	beq.n	8002b94 <UART_SetConfig+0x3bc>
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b0b      	cmp	r3, #11
 8002b8a:	d101      	bne.n	8002b90 <UART_SetConfig+0x3b8>
 8002b8c:	4baa      	ldr	r3, [pc, #680]	; (8002e38 <UART_SetConfig+0x660>)
 8002b8e:	e016      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002b90:	4baa      	ldr	r3, [pc, #680]	; (8002e3c <UART_SetConfig+0x664>)
 8002b92:	e014      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002b94:	4baa      	ldr	r3, [pc, #680]	; (8002e40 <UART_SetConfig+0x668>)
 8002b96:	e012      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002b98:	4baa      	ldr	r3, [pc, #680]	; (8002e44 <UART_SetConfig+0x66c>)
 8002b9a:	e010      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002b9c:	4baa      	ldr	r3, [pc, #680]	; (8002e48 <UART_SetConfig+0x670>)
 8002b9e:	e00e      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002ba0:	4baa      	ldr	r3, [pc, #680]	; (8002e4c <UART_SetConfig+0x674>)
 8002ba2:	e00c      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002ba4:	4baa      	ldr	r3, [pc, #680]	; (8002e50 <UART_SetConfig+0x678>)
 8002ba6:	e00a      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002ba8:	4baa      	ldr	r3, [pc, #680]	; (8002e54 <UART_SetConfig+0x67c>)
 8002baa:	e008      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002bac:	4baa      	ldr	r3, [pc, #680]	; (8002e58 <UART_SetConfig+0x680>)
 8002bae:	e006      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002bb0:	4baa      	ldr	r3, [pc, #680]	; (8002e5c <UART_SetConfig+0x684>)
 8002bb2:	e004      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002bb4:	4baa      	ldr	r3, [pc, #680]	; (8002e60 <UART_SetConfig+0x688>)
 8002bb6:	e002      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002bb8:	4baa      	ldr	r3, [pc, #680]	; (8002e64 <UART_SetConfig+0x68c>)
 8002bba:	e000      	b.n	8002bbe <UART_SetConfig+0x3e6>
 8002bbc:	4b9f      	ldr	r3, [pc, #636]	; (8002e3c <UART_SetConfig+0x664>)
 8002bbe:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002bc0:	e0ae      	b.n	8002d20 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002bc2:	f7ff fb59 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d044      	beq.n	8002c5a <UART_SetConfig+0x482>
 8002bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d03e      	beq.n	8002c56 <UART_SetConfig+0x47e>
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d038      	beq.n	8002c52 <UART_SetConfig+0x47a>
 8002be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d032      	beq.n	8002c4e <UART_SetConfig+0x476>
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d02c      	beq.n	8002c4a <UART_SetConfig+0x472>
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d026      	beq.n	8002c46 <UART_SetConfig+0x46e>
 8002bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d020      	beq.n	8002c42 <UART_SetConfig+0x46a>
 8002c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	d01a      	beq.n	8002c3e <UART_SetConfig+0x466>
 8002c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d014      	beq.n	8002c3a <UART_SetConfig+0x462>
 8002c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	d00e      	beq.n	8002c36 <UART_SetConfig+0x45e>
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b0a      	cmp	r3, #10
 8002c1e:	d008      	beq.n	8002c32 <UART_SetConfig+0x45a>
 8002c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b0b      	cmp	r3, #11
 8002c26:	d102      	bne.n	8002c2e <UART_SetConfig+0x456>
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	e016      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e014      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	e012      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c36:	2340      	movs	r3, #64	; 0x40
 8002c38:	e010      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e00e      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	e00c      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c42:	230c      	movs	r3, #12
 8002c44:	e00a      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c46:	230a      	movs	r3, #10
 8002c48:	e008      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	e006      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c4e:	2306      	movs	r3, #6
 8002c50:	e004      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c52:	2304      	movs	r3, #4
 8002c54:	e002      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e000      	b.n	8002c5c <UART_SetConfig+0x484>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f7fd fa50 	bl	8000104 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002c68:	e05a      	b.n	8002d20 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04b      	beq.n	8002d0a <UART_SetConfig+0x532>
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d044      	beq.n	8002d04 <UART_SetConfig+0x52c>
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d03d      	beq.n	8002cfe <UART_SetConfig+0x526>
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d037      	beq.n	8002cfa <UART_SetConfig+0x522>
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d030      	beq.n	8002cf4 <UART_SetConfig+0x51c>
 8002c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d02a      	beq.n	8002cf0 <UART_SetConfig+0x518>
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d024      	beq.n	8002cec <UART_SetConfig+0x514>
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d01d      	beq.n	8002ce6 <UART_SetConfig+0x50e>
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d016      	beq.n	8002ce0 <UART_SetConfig+0x508>
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b09      	cmp	r3, #9
 8002cb8:	d00f      	beq.n	8002cda <UART_SetConfig+0x502>
 8002cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b0a      	cmp	r3, #10
 8002cc0:	d008      	beq.n	8002cd4 <UART_SetConfig+0x4fc>
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b0b      	cmp	r3, #11
 8002cc8:	d101      	bne.n	8002cce <UART_SetConfig+0x4f6>
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	e01f      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	e01c      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	e019      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	e016      	b.n	8002d0e <UART_SetConfig+0x536>
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	e013      	b.n	8002d0e <UART_SetConfig+0x536>
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	e010      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <UART_SetConfig+0x690>)
 8002cee:	e00e      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <UART_SetConfig+0x694>)
 8002cf2:	e00c      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	e009      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <UART_SetConfig+0x698>)
 8002cfc:	e007      	b.n	8002d0e <UART_SetConfig+0x536>
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	e004      	b.n	8002d0e <UART_SetConfig+0x536>
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	e001      	b.n	8002d0e <UART_SetConfig+0x536>
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002d10:	e006      	b.n	8002d20 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002d12:	2313      	movs	r3, #19
 8002d14:	2258      	movs	r2, #88	; 0x58
 8002d16:	18ba      	adds	r2, r7, r2
 8002d18:	18d2      	adds	r2, r2, r3
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	7013      	strb	r3, [r2, #0]
        break;
 8002d1e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <UART_SetConfig+0x552>
 8002d26:	f000 fe09 	bl	800393c <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	0013      	movs	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	189a      	adds	r2, r3, r2
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d305      	bcc.n	8002d46 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d908      	bls.n	8002d58 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002d46:	2313      	movs	r3, #19
 8002d48:	2258      	movs	r2, #88	; 0x58
 8002d4a:	4694      	mov	ip, r2
 8002d4c:	44bc      	add	ip, r7
 8002d4e:	4463      	add	r3, ip
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	f000 fdf2 	bl	800393c <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002d58:	231b      	movs	r3, #27
 8002d5a:	2258      	movs	r2, #88	; 0x58
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	44bc      	add	ip, r7
 8002d60:	4463      	add	r3, ip
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d100      	bne.n	8002d6a <UART_SetConfig+0x592>
 8002d68:	e0a9      	b.n	8002ebe <UART_SetConfig+0x6e6>
 8002d6a:	dc02      	bgt.n	8002d72 <UART_SetConfig+0x59a>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <UART_SetConfig+0x5a8>
 8002d70:	e20f      	b.n	8003192 <UART_SetConfig+0x9ba>
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d100      	bne.n	8002d78 <UART_SetConfig+0x5a0>
 8002d76:	e10f      	b.n	8002f98 <UART_SetConfig+0x7c0>
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d100      	bne.n	8002d7e <UART_SetConfig+0x5a6>
 8002d7c:	e192      	b.n	80030a4 <UART_SetConfig+0x8cc>
 8002d7e:	e208      	b.n	8003192 <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d80:	f7ff fb06 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8002d84:	0003      	movs	r3, r0
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d88:	2300      	movs	r3, #0
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d100      	bne.n	8002d96 <UART_SetConfig+0x5be>
 8002d94:	e06e      	b.n	8002e74 <UART_SetConfig+0x69c>
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d049      	beq.n	8002e32 <UART_SetConfig+0x65a>
 8002d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d042      	beq.n	8002e2c <UART_SetConfig+0x654>
 8002da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d03b      	beq.n	8002e26 <UART_SetConfig+0x64e>
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d034      	beq.n	8002e20 <UART_SetConfig+0x648>
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d02d      	beq.n	8002e1a <UART_SetConfig+0x642>
 8002dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d026      	beq.n	8002e14 <UART_SetConfig+0x63c>
 8002dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d01f      	beq.n	8002e0e <UART_SetConfig+0x636>
 8002dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d018      	beq.n	8002e08 <UART_SetConfig+0x630>
 8002dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d011      	beq.n	8002e02 <UART_SetConfig+0x62a>
 8002dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b0a      	cmp	r3, #10
 8002de4:	d00a      	beq.n	8002dfc <UART_SetConfig+0x624>
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b0b      	cmp	r3, #11
 8002dec:	d103      	bne.n	8002df6 <UART_SetConfig+0x61e>
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2400      	movs	r4, #0
 8002df4:	e040      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002df6:	2301      	movs	r3, #1
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e03d      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	2400      	movs	r4, #0
 8002e00:	e03a      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e02:	2340      	movs	r3, #64	; 0x40
 8002e04:	2400      	movs	r4, #0
 8002e06:	e037      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e08:	2320      	movs	r3, #32
 8002e0a:	2400      	movs	r4, #0
 8002e0c:	e034      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e0e:	2310      	movs	r3, #16
 8002e10:	2400      	movs	r4, #0
 8002e12:	e031      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e14:	230c      	movs	r3, #12
 8002e16:	2400      	movs	r4, #0
 8002e18:	e02e      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	2400      	movs	r4, #0
 8002e1e:	e02b      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e20:	2308      	movs	r3, #8
 8002e22:	2400      	movs	r4, #0
 8002e24:	e028      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e26:	2306      	movs	r3, #6
 8002e28:	2400      	movs	r4, #0
 8002e2a:	e025      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	2400      	movs	r4, #0
 8002e30:	e022      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e32:	2302      	movs	r3, #2
 8002e34:	2400      	movs	r4, #0
 8002e36:	e01f      	b.n	8002e78 <UART_SetConfig+0x6a0>
 8002e38:	0000f424 	.word	0x0000f424
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	0001e848 	.word	0x0001e848
 8002e44:	0003d090 	.word	0x0003d090
 8002e48:	0007a120 	.word	0x0007a120
 8002e4c:	000f4240 	.word	0x000f4240
 8002e50:	00145855 	.word	0x00145855
 8002e54:	00186a00 	.word	0x00186a00
 8002e58:	001e8480 	.word	0x001e8480
 8002e5c:	0028b0aa 	.word	0x0028b0aa
 8002e60:	003d0900 	.word	0x003d0900
 8002e64:	007a1200 	.word	0x007a1200
 8002e68:	00000aaa 	.word	0x00000aaa
 8002e6c:	00000ccc 	.word	0x00000ccc
 8002e70:	00001555 	.word	0x00001555
 8002e74:	2301      	movs	r3, #1
 8002e76:	2400      	movs	r4, #0
 8002e78:	001a      	movs	r2, r3
 8002e7a:	0023      	movs	r3, r4
 8002e7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e80:	f7fd fab6 	bl	80003f0 <__aeabi_uldivmod>
 8002e84:	0003      	movs	r3, r0
 8002e86:	000c      	movs	r4, r1
 8002e88:	0e1a      	lsrs	r2, r3, #24
 8002e8a:	0226      	lsls	r6, r4, #8
 8002e8c:	4316      	orrs	r6, r2
 8002e8e:	021d      	lsls	r5, r3, #8
 8002e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	643b      	str	r3, [r7, #64]	; 0x40
 8002e98:	2300      	movs	r3, #0
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ea0:	1940      	adds	r0, r0, r5
 8002ea2:	4171      	adcs	r1, r6
 8002ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eaa:	2300      	movs	r3, #0
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	f7fd fa9d 	bl	80003f0 <__aeabi_uldivmod>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	000c      	movs	r4, r1
 8002eba:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002ebc:	e171      	b.n	80031a2 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <UART_SetConfig+0x78e>
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d048      	beq.n	8002f60 <UART_SetConfig+0x788>
 8002ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d041      	beq.n	8002f5a <UART_SetConfig+0x782>
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d03a      	beq.n	8002f54 <UART_SetConfig+0x77c>
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d033      	beq.n	8002f4e <UART_SetConfig+0x776>
 8002ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d02c      	beq.n	8002f48 <UART_SetConfig+0x770>
 8002eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d025      	beq.n	8002f42 <UART_SetConfig+0x76a>
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d01e      	beq.n	8002f3c <UART_SetConfig+0x764>
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d017      	beq.n	8002f36 <UART_SetConfig+0x75e>
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b09      	cmp	r3, #9
 8002f0c:	d010      	beq.n	8002f30 <UART_SetConfig+0x758>
 8002f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b0a      	cmp	r3, #10
 8002f14:	d009      	beq.n	8002f2a <UART_SetConfig+0x752>
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d102      	bne.n	8002f24 <UART_SetConfig+0x74c>
 8002f1e:	4bba      	ldr	r3, [pc, #744]	; (8003208 <UART_SetConfig+0xa30>)
 8002f20:	2400      	movs	r4, #0
 8002f22:	e022      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f24:	4bb9      	ldr	r3, [pc, #740]	; (800320c <UART_SetConfig+0xa34>)
 8002f26:	2400      	movs	r4, #0
 8002f28:	e01f      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f2a:	4bb9      	ldr	r3, [pc, #740]	; (8003210 <UART_SetConfig+0xa38>)
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	e01c      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f30:	4bb8      	ldr	r3, [pc, #736]	; (8003214 <UART_SetConfig+0xa3c>)
 8002f32:	2400      	movs	r4, #0
 8002f34:	e019      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f36:	4bb8      	ldr	r3, [pc, #736]	; (8003218 <UART_SetConfig+0xa40>)
 8002f38:	2400      	movs	r4, #0
 8002f3a:	e016      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f3c:	4bb7      	ldr	r3, [pc, #732]	; (800321c <UART_SetConfig+0xa44>)
 8002f3e:	2400      	movs	r4, #0
 8002f40:	e013      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f42:	4bb7      	ldr	r3, [pc, #732]	; (8003220 <UART_SetConfig+0xa48>)
 8002f44:	2400      	movs	r4, #0
 8002f46:	e010      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f48:	4bb6      	ldr	r3, [pc, #728]	; (8003224 <UART_SetConfig+0xa4c>)
 8002f4a:	2400      	movs	r4, #0
 8002f4c:	e00d      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f4e:	4bb6      	ldr	r3, [pc, #728]	; (8003228 <UART_SetConfig+0xa50>)
 8002f50:	2400      	movs	r4, #0
 8002f52:	e00a      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f54:	4bb5      	ldr	r3, [pc, #724]	; (800322c <UART_SetConfig+0xa54>)
 8002f56:	2400      	movs	r4, #0
 8002f58:	e007      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	; (8003230 <UART_SetConfig+0xa58>)
 8002f5c:	2400      	movs	r4, #0
 8002f5e:	e004      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f60:	4bb4      	ldr	r3, [pc, #720]	; (8003234 <UART_SetConfig+0xa5c>)
 8002f62:	2400      	movs	r4, #0
 8002f64:	e001      	b.n	8002f6a <UART_SetConfig+0x792>
 8002f66:	4ba9      	ldr	r3, [pc, #676]	; (800320c <UART_SetConfig+0xa34>)
 8002f68:	2400      	movs	r4, #0
 8002f6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	0852      	lsrs	r2, r2, #1
 8002f70:	633a      	str	r2, [r7, #48]	; 0x30
 8002f72:	2200      	movs	r2, #0
 8002f74:	637a      	str	r2, [r7, #52]	; 0x34
 8002f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f7a:	18c0      	adds	r0, r0, r3
 8002f7c:	4161      	adcs	r1, r4
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	f7fd fa30 	bl	80003f0 <__aeabi_uldivmod>
 8002f90:	0003      	movs	r3, r0
 8002f92:	000c      	movs	r4, r1
 8002f94:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002f96:	e104      	b.n	80031a2 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f98:	f7ff f96e 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d050      	beq.n	800304e <UART_SetConfig+0x876>
 8002fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d049      	beq.n	8003048 <UART_SetConfig+0x870>
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d042      	beq.n	8003042 <UART_SetConfig+0x86a>
 8002fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d03b      	beq.n	800303c <UART_SetConfig+0x864>
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d034      	beq.n	8003036 <UART_SetConfig+0x85e>
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d02d      	beq.n	8003030 <UART_SetConfig+0x858>
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d026      	beq.n	800302a <UART_SetConfig+0x852>
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	d01f      	beq.n	8003024 <UART_SetConfig+0x84c>
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d018      	beq.n	800301e <UART_SetConfig+0x846>
 8002fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d011      	beq.n	8003018 <UART_SetConfig+0x840>
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b0a      	cmp	r3, #10
 8002ffa:	d00a      	beq.n	8003012 <UART_SetConfig+0x83a>
 8002ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b0b      	cmp	r3, #11
 8003002:	d103      	bne.n	800300c <UART_SetConfig+0x834>
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2400      	movs	r4, #0
 800300a:	e022      	b.n	8003052 <UART_SetConfig+0x87a>
 800300c:	2301      	movs	r3, #1
 800300e:	2400      	movs	r4, #0
 8003010:	e01f      	b.n	8003052 <UART_SetConfig+0x87a>
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	2400      	movs	r4, #0
 8003016:	e01c      	b.n	8003052 <UART_SetConfig+0x87a>
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	2400      	movs	r4, #0
 800301c:	e019      	b.n	8003052 <UART_SetConfig+0x87a>
 800301e:	2320      	movs	r3, #32
 8003020:	2400      	movs	r4, #0
 8003022:	e016      	b.n	8003052 <UART_SetConfig+0x87a>
 8003024:	2310      	movs	r3, #16
 8003026:	2400      	movs	r4, #0
 8003028:	e013      	b.n	8003052 <UART_SetConfig+0x87a>
 800302a:	230c      	movs	r3, #12
 800302c:	2400      	movs	r4, #0
 800302e:	e010      	b.n	8003052 <UART_SetConfig+0x87a>
 8003030:	230a      	movs	r3, #10
 8003032:	2400      	movs	r4, #0
 8003034:	e00d      	b.n	8003052 <UART_SetConfig+0x87a>
 8003036:	2308      	movs	r3, #8
 8003038:	2400      	movs	r4, #0
 800303a:	e00a      	b.n	8003052 <UART_SetConfig+0x87a>
 800303c:	2306      	movs	r3, #6
 800303e:	2400      	movs	r4, #0
 8003040:	e007      	b.n	8003052 <UART_SetConfig+0x87a>
 8003042:	2304      	movs	r3, #4
 8003044:	2400      	movs	r4, #0
 8003046:	e004      	b.n	8003052 <UART_SetConfig+0x87a>
 8003048:	2302      	movs	r3, #2
 800304a:	2400      	movs	r4, #0
 800304c:	e001      	b.n	8003052 <UART_SetConfig+0x87a>
 800304e:	2301      	movs	r3, #1
 8003050:	2400      	movs	r4, #0
 8003052:	001a      	movs	r2, r3
 8003054:	0023      	movs	r3, r4
 8003056:	6a38      	ldr	r0, [r7, #32]
 8003058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800305a:	f7fd f9c9 	bl	80003f0 <__aeabi_uldivmod>
 800305e:	0003      	movs	r3, r0
 8003060:	000c      	movs	r4, r1
 8003062:	0e1a      	lsrs	r2, r3, #24
 8003064:	0221      	lsls	r1, r4, #8
 8003066:	6579      	str	r1, [r7, #84]	; 0x54
 8003068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800306a:	4311      	orrs	r1, r2
 800306c:	6579      	str	r1, [r7, #84]	; 0x54
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
 8003072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	69fc      	ldr	r4, [r7, #28]
 8003086:	18c0      	adds	r0, r0, r3
 8003088:	4161      	adcs	r1, r4
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f7fd f9aa 	bl	80003f0 <__aeabi_uldivmod>
 800309c:	0003      	movs	r3, r0
 800309e:	000c      	movs	r4, r1
 80030a0:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 80030a2:	e07e      	b.n	80031a2 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d058      	beq.n	800315e <UART_SetConfig+0x986>
 80030ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d050      	beq.n	8003156 <UART_SetConfig+0x97e>
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d048      	beq.n	800314e <UART_SetConfig+0x976>
 80030bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d041      	beq.n	8003148 <UART_SetConfig+0x970>
 80030c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d039      	beq.n	8003140 <UART_SetConfig+0x968>
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d032      	beq.n	800313a <UART_SetConfig+0x962>
 80030d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d02b      	beq.n	8003134 <UART_SetConfig+0x95c>
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2b07      	cmp	r3, #7
 80030e2:	d023      	beq.n	800312c <UART_SetConfig+0x954>
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d01b      	beq.n	8003124 <UART_SetConfig+0x94c>
 80030ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d013      	beq.n	800311c <UART_SetConfig+0x944>
 80030f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b0a      	cmp	r3, #10
 80030fa:	d00b      	beq.n	8003114 <UART_SetConfig+0x93c>
 80030fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b0b      	cmp	r3, #11
 8003102:	d103      	bne.n	800310c <UART_SetConfig+0x934>
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	2400      	movs	r4, #0
 800310a:	e02b      	b.n	8003164 <UART_SetConfig+0x98c>
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	2400      	movs	r4, #0
 8003112:	e027      	b.n	8003164 <UART_SetConfig+0x98c>
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	025b      	lsls	r3, r3, #9
 8003118:	2400      	movs	r4, #0
 800311a:	e023      	b.n	8003164 <UART_SetConfig+0x98c>
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	2400      	movs	r4, #0
 8003122:	e01f      	b.n	8003164 <UART_SetConfig+0x98c>
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	02db      	lsls	r3, r3, #11
 8003128:	2400      	movs	r4, #0
 800312a:	e01b      	b.n	8003164 <UART_SetConfig+0x98c>
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	031b      	lsls	r3, r3, #12
 8003130:	2400      	movs	r4, #0
 8003132:	e017      	b.n	8003164 <UART_SetConfig+0x98c>
 8003134:	4b40      	ldr	r3, [pc, #256]	; (8003238 <UART_SetConfig+0xa60>)
 8003136:	2400      	movs	r4, #0
 8003138:	e014      	b.n	8003164 <UART_SetConfig+0x98c>
 800313a:	4b40      	ldr	r3, [pc, #256]	; (800323c <UART_SetConfig+0xa64>)
 800313c:	2400      	movs	r4, #0
 800313e:	e011      	b.n	8003164 <UART_SetConfig+0x98c>
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	035b      	lsls	r3, r3, #13
 8003144:	2400      	movs	r4, #0
 8003146:	e00d      	b.n	8003164 <UART_SetConfig+0x98c>
 8003148:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <UART_SetConfig+0xa68>)
 800314a:	2400      	movs	r4, #0
 800314c:	e00a      	b.n	8003164 <UART_SetConfig+0x98c>
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	039b      	lsls	r3, r3, #14
 8003152:	2400      	movs	r4, #0
 8003154:	e006      	b.n	8003164 <UART_SetConfig+0x98c>
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	03db      	lsls	r3, r3, #15
 800315a:	2400      	movs	r4, #0
 800315c:	e002      	b.n	8003164 <UART_SetConfig+0x98c>
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	2400      	movs	r4, #0
 8003164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003166:	6852      	ldr	r2, [r2, #4]
 8003168:	0852      	lsrs	r2, r2, #1
 800316a:	60ba      	str	r2, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	68b8      	ldr	r0, [r7, #8]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	18c0      	adds	r0, r0, r3
 8003176:	4161      	adcs	r1, r4
 8003178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f7fd f933 	bl	80003f0 <__aeabi_uldivmod>
 800318a:	0003      	movs	r3, r0
 800318c:	000c      	movs	r4, r1
 800318e:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8003190:	e007      	b.n	80031a2 <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8003192:	2313      	movs	r3, #19
 8003194:	2258      	movs	r2, #88	; 0x58
 8003196:	4694      	mov	ip, r2
 8003198:	44bc      	add	ip, r7
 800319a:	4463      	add	r3, ip
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
            break;
 80031a0:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <UART_SetConfig+0xa6c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d909      	bls.n	80031be <UART_SetConfig+0x9e6>
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <UART_SetConfig+0xa70>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d805      	bhi.n	80031be <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	f000 fbbf 	bl	800393c <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 80031be:	2313      	movs	r3, #19
 80031c0:	2258      	movs	r2, #88	; 0x58
 80031c2:	4694      	mov	ip, r2
 80031c4:	44bc      	add	ip, r7
 80031c6:	4463      	add	r3, ip
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	f000 fbb6 	bl	800393c <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	429a      	cmp	r2, r3
 80031da:	d000      	beq.n	80031de <UART_SetConfig+0xa06>
 80031dc:	e1e4      	b.n	80035a8 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 80031de:	231b      	movs	r3, #27
 80031e0:	2258      	movs	r2, #88	; 0x58
 80031e2:	4694      	mov	ip, r2
 80031e4:	44bc      	add	ip, r7
 80031e6:	4463      	add	r3, ip
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d100      	bne.n	80031f0 <UART_SetConfig+0xa18>
 80031ee:	e08e      	b.n	800330e <UART_SetConfig+0xb36>
 80031f0:	dc02      	bgt.n	80031f8 <UART_SetConfig+0xa20>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02a      	beq.n	800324c <UART_SetConfig+0xa74>
 80031f6:	e1a3      	b.n	8003540 <UART_SetConfig+0xd68>
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d100      	bne.n	80031fe <UART_SetConfig+0xa26>
 80031fc:	e0de      	b.n	80033bc <UART_SetConfig+0xbe4>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d100      	bne.n	8003204 <UART_SetConfig+0xa2c>
 8003202:	e13c      	b.n	800347e <UART_SetConfig+0xca6>
 8003204:	e19c      	b.n	8003540 <UART_SetConfig+0xd68>
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	00f42400 	.word	0x00f42400
 800320c:	f4240000 	.word	0xf4240000
 8003210:	01e84800 	.word	0x01e84800
 8003214:	03d09000 	.word	0x03d09000
 8003218:	07a12000 	.word	0x07a12000
 800321c:	0f424000 	.word	0x0f424000
 8003220:	14585500 	.word	0x14585500
 8003224:	186a0000 	.word	0x186a0000
 8003228:	1e848000 	.word	0x1e848000
 800322c:	28b0aa00 	.word	0x28b0aa00
 8003230:	3d090000 	.word	0x3d090000
 8003234:	7a120000 	.word	0x7a120000
 8003238:	000aaa00 	.word	0x000aaa00
 800323c:	000ccc00 	.word	0x000ccc00
 8003240:	00155500 	.word	0x00155500
 8003244:	000002ff 	.word	0x000002ff
 8003248:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324c:	f7ff f8a0 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003250:	0002      	movs	r2, r0
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d044      	beq.n	80032e4 <UART_SetConfig+0xb0c>
 800325a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b01      	cmp	r3, #1
 8003260:	d03e      	beq.n	80032e0 <UART_SetConfig+0xb08>
 8003262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b02      	cmp	r3, #2
 8003268:	d038      	beq.n	80032dc <UART_SetConfig+0xb04>
 800326a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b03      	cmp	r3, #3
 8003270:	d032      	beq.n	80032d8 <UART_SetConfig+0xb00>
 8003272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b04      	cmp	r3, #4
 8003278:	d02c      	beq.n	80032d4 <UART_SetConfig+0xafc>
 800327a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b05      	cmp	r3, #5
 8003280:	d026      	beq.n	80032d0 <UART_SetConfig+0xaf8>
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b06      	cmp	r3, #6
 8003288:	d020      	beq.n	80032cc <UART_SetConfig+0xaf4>
 800328a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b07      	cmp	r3, #7
 8003290:	d01a      	beq.n	80032c8 <UART_SetConfig+0xaf0>
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b08      	cmp	r3, #8
 8003298:	d014      	beq.n	80032c4 <UART_SetConfig+0xaec>
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b09      	cmp	r3, #9
 80032a0:	d00e      	beq.n	80032c0 <UART_SetConfig+0xae8>
 80032a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b0a      	cmp	r3, #10
 80032a8:	d008      	beq.n	80032bc <UART_SetConfig+0xae4>
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b0b      	cmp	r3, #11
 80032b0:	d102      	bne.n	80032b8 <UART_SetConfig+0xae0>
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	e016      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e014      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	e012      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032c4:	2320      	movs	r3, #32
 80032c6:	e00e      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032c8:	2310      	movs	r3, #16
 80032ca:	e00c      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032cc:	230c      	movs	r3, #12
 80032ce:	e00a      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032d0:	230a      	movs	r3, #10
 80032d2:	e008      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032d4:	2308      	movs	r3, #8
 80032d6:	e006      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032d8:	2306      	movs	r3, #6
 80032da:	e004      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032dc:	2304      	movs	r3, #4
 80032de:	e002      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e000      	b.n	80032e6 <UART_SetConfig+0xb0e>
 80032e4:	2301      	movs	r3, #1
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f7fc ff0b 	bl	8000104 <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	18d2      	adds	r2, r2, r3
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0019      	movs	r1, r3
 8003300:	0010      	movs	r0, r2
 8003302:	f7fc feff 	bl	8000104 <__udivsi3>
 8003306:	0003      	movs	r3, r0
 8003308:	b29b      	uxth	r3, r3
 800330a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800330c:	e120      	b.n	8003550 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d043      	beq.n	800339e <UART_SetConfig+0xbc6>
 8003316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b01      	cmp	r3, #1
 800331c:	d03d      	beq.n	800339a <UART_SetConfig+0xbc2>
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2b02      	cmp	r3, #2
 8003324:	d037      	beq.n	8003396 <UART_SetConfig+0xbbe>
 8003326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b03      	cmp	r3, #3
 800332c:	d031      	beq.n	8003392 <UART_SetConfig+0xbba>
 800332e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b04      	cmp	r3, #4
 8003334:	d02b      	beq.n	800338e <UART_SetConfig+0xbb6>
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b05      	cmp	r3, #5
 800333c:	d025      	beq.n	800338a <UART_SetConfig+0xbb2>
 800333e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b06      	cmp	r3, #6
 8003344:	d01f      	beq.n	8003386 <UART_SetConfig+0xbae>
 8003346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b07      	cmp	r3, #7
 800334c:	d019      	beq.n	8003382 <UART_SetConfig+0xbaa>
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b08      	cmp	r3, #8
 8003354:	d013      	beq.n	800337e <UART_SetConfig+0xba6>
 8003356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b09      	cmp	r3, #9
 800335c:	d00d      	beq.n	800337a <UART_SetConfig+0xba2>
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b0a      	cmp	r3, #10
 8003364:	d007      	beq.n	8003376 <UART_SetConfig+0xb9e>
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b0b      	cmp	r3, #11
 800336c:	d101      	bne.n	8003372 <UART_SetConfig+0xb9a>
 800336e:	4bba      	ldr	r3, [pc, #744]	; (8003658 <UART_SetConfig+0xe80>)
 8003370:	e016      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003372:	4bba      	ldr	r3, [pc, #744]	; (800365c <UART_SetConfig+0xe84>)
 8003374:	e014      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003376:	4bba      	ldr	r3, [pc, #744]	; (8003660 <UART_SetConfig+0xe88>)
 8003378:	e012      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800337a:	4bba      	ldr	r3, [pc, #744]	; (8003664 <UART_SetConfig+0xe8c>)
 800337c:	e010      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800337e:	4bba      	ldr	r3, [pc, #744]	; (8003668 <UART_SetConfig+0xe90>)
 8003380:	e00e      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003382:	4bba      	ldr	r3, [pc, #744]	; (800366c <UART_SetConfig+0xe94>)
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003386:	4bba      	ldr	r3, [pc, #744]	; (8003670 <UART_SetConfig+0xe98>)
 8003388:	e00a      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800338a:	4bba      	ldr	r3, [pc, #744]	; (8003674 <UART_SetConfig+0xe9c>)
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800338e:	4bba      	ldr	r3, [pc, #744]	; (8003678 <UART_SetConfig+0xea0>)
 8003390:	e006      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003392:	4bba      	ldr	r3, [pc, #744]	; (800367c <UART_SetConfig+0xea4>)
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0xbc8>
 8003396:	4bba      	ldr	r3, [pc, #744]	; (8003680 <UART_SetConfig+0xea8>)
 8003398:	e002      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800339a:	4bba      	ldr	r3, [pc, #744]	; (8003684 <UART_SetConfig+0xeac>)
 800339c:	e000      	b.n	80033a0 <UART_SetConfig+0xbc8>
 800339e:	4baf      	ldr	r3, [pc, #700]	; (800365c <UART_SetConfig+0xe84>)
 80033a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033a2:	6852      	ldr	r2, [r2, #4]
 80033a4:	0852      	lsrs	r2, r2, #1
 80033a6:	189a      	adds	r2, r3, r2
 80033a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	0019      	movs	r1, r3
 80033ae:	0010      	movs	r0, r2
 80033b0:	f7fc fea8 	bl	8000104 <__udivsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033ba:	e0c9      	b.n	8003550 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033bc:	f7fe ff5c 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 80033c0:	0002      	movs	r2, r0
 80033c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d044      	beq.n	8003454 <UART_SetConfig+0xc7c>
 80033ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d03e      	beq.n	8003450 <UART_SetConfig+0xc78>
 80033d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d038      	beq.n	800344c <UART_SetConfig+0xc74>
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d032      	beq.n	8003448 <UART_SetConfig+0xc70>
 80033e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d02c      	beq.n	8003444 <UART_SetConfig+0xc6c>
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d026      	beq.n	8003440 <UART_SetConfig+0xc68>
 80033f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d020      	beq.n	800343c <UART_SetConfig+0xc64>
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b07      	cmp	r3, #7
 8003400:	d01a      	beq.n	8003438 <UART_SetConfig+0xc60>
 8003402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2b08      	cmp	r3, #8
 8003408:	d014      	beq.n	8003434 <UART_SetConfig+0xc5c>
 800340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b09      	cmp	r3, #9
 8003410:	d00e      	beq.n	8003430 <UART_SetConfig+0xc58>
 8003412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2b0a      	cmp	r3, #10
 8003418:	d008      	beq.n	800342c <UART_SetConfig+0xc54>
 800341a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b0b      	cmp	r3, #11
 8003420:	d102      	bne.n	8003428 <UART_SetConfig+0xc50>
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	e016      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003428:	2301      	movs	r3, #1
 800342a:	e014      	b.n	8003456 <UART_SetConfig+0xc7e>
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	e012      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	e010      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003434:	2320      	movs	r3, #32
 8003436:	e00e      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003438:	2310      	movs	r3, #16
 800343a:	e00c      	b.n	8003456 <UART_SetConfig+0xc7e>
 800343c:	230c      	movs	r3, #12
 800343e:	e00a      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003440:	230a      	movs	r3, #10
 8003442:	e008      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003444:	2308      	movs	r3, #8
 8003446:	e006      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003448:	2306      	movs	r3, #6
 800344a:	e004      	b.n	8003456 <UART_SetConfig+0xc7e>
 800344c:	2304      	movs	r3, #4
 800344e:	e002      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003450:	2302      	movs	r3, #2
 8003452:	e000      	b.n	8003456 <UART_SetConfig+0xc7e>
 8003454:	2301      	movs	r3, #1
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f7fc fe53 	bl	8000104 <__udivsi3>
 800345e:	0003      	movs	r3, r0
 8003460:	005a      	lsls	r2, r3, #1
 8003462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	18d2      	adds	r2, r2, r3
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0019      	movs	r1, r3
 8003470:	0010      	movs	r0, r2
 8003472:	f7fc fe47 	bl	8000104 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	b29b      	uxth	r3, r3
 800347a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800347c:	e068      	b.n	8003550 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04c      	beq.n	8003520 <UART_SetConfig+0xd48>
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b01      	cmp	r3, #1
 800348c:	d045      	beq.n	800351a <UART_SetConfig+0xd42>
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b02      	cmp	r3, #2
 8003494:	d03e      	beq.n	8003514 <UART_SetConfig+0xd3c>
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b03      	cmp	r3, #3
 800349c:	d038      	beq.n	8003510 <UART_SetConfig+0xd38>
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d031      	beq.n	800350a <UART_SetConfig+0xd32>
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d02b      	beq.n	8003506 <UART_SetConfig+0xd2e>
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d025      	beq.n	8003502 <UART_SetConfig+0xd2a>
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d01e      	beq.n	80034fc <UART_SetConfig+0xd24>
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d017      	beq.n	80034f6 <UART_SetConfig+0xd1e>
 80034c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d010      	beq.n	80034f0 <UART_SetConfig+0xd18>
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d009      	beq.n	80034ea <UART_SetConfig+0xd12>
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b0b      	cmp	r3, #11
 80034dc:	d102      	bne.n	80034e4 <UART_SetConfig+0xd0c>
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	e01f      	b.n	8003524 <UART_SetConfig+0xd4c>
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	e01c      	b.n	8003524 <UART_SetConfig+0xd4c>
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	e019      	b.n	8003524 <UART_SetConfig+0xd4c>
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	e016      	b.n	8003524 <UART_SetConfig+0xd4c>
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	e013      	b.n	8003524 <UART_SetConfig+0xd4c>
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	e010      	b.n	8003524 <UART_SetConfig+0xd4c>
 8003502:	4b61      	ldr	r3, [pc, #388]	; (8003688 <UART_SetConfig+0xeb0>)
 8003504:	e00e      	b.n	8003524 <UART_SetConfig+0xd4c>
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <UART_SetConfig+0xeb4>)
 8003508:	e00c      	b.n	8003524 <UART_SetConfig+0xd4c>
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	e009      	b.n	8003524 <UART_SetConfig+0xd4c>
 8003510:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <UART_SetConfig+0xeb8>)
 8003512:	e007      	b.n	8003524 <UART_SetConfig+0xd4c>
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	01db      	lsls	r3, r3, #7
 8003518:	e004      	b.n	8003524 <UART_SetConfig+0xd4c>
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	e001      	b.n	8003524 <UART_SetConfig+0xd4c>
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	025b      	lsls	r3, r3, #9
 8003524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003526:	6852      	ldr	r2, [r2, #4]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	189a      	adds	r2, r3, r2
 800352c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0019      	movs	r1, r3
 8003532:	0010      	movs	r0, r2
 8003534:	f7fc fde6 	bl	8000104 <__udivsi3>
 8003538:	0003      	movs	r3, r0
 800353a:	b29b      	uxth	r3, r3
 800353c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800353e:	e007      	b.n	8003550 <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 8003540:	2313      	movs	r3, #19
 8003542:	2258      	movs	r2, #88	; 0x58
 8003544:	4694      	mov	ip, r2
 8003546:	44bc      	add	ip, r7
 8003548:	4463      	add	r3, ip
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
        break;
 800354e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003552:	2b0f      	cmp	r3, #15
 8003554:	d920      	bls.n	8003598 <UART_SetConfig+0xdc0>
 8003556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <UART_SetConfig+0xebc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d81c      	bhi.n	8003598 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	b29a      	uxth	r2, r3
 8003562:	200a      	movs	r0, #10
 8003564:	2458      	movs	r4, #88	; 0x58
 8003566:	193b      	adds	r3, r7, r4
 8003568:	181b      	adds	r3, r3, r0
 800356a:	210f      	movs	r1, #15
 800356c:	438a      	bics	r2, r1
 800356e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	2207      	movs	r2, #7
 8003578:	4013      	ands	r3, r2
 800357a:	b299      	uxth	r1, r3
 800357c:	193b      	adds	r3, r7, r4
 800357e:	181b      	adds	r3, r3, r0
 8003580:	193a      	adds	r2, r7, r4
 8003582:	1812      	adds	r2, r2, r0
 8003584:	8812      	ldrh	r2, [r2, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	193a      	adds	r2, r7, r4
 8003590:	1812      	adds	r2, r2, r0
 8003592:	8812      	ldrh	r2, [r2, #0]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e1d1      	b.n	800393c <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003598:	2313      	movs	r3, #19
 800359a:	2258      	movs	r2, #88	; 0x58
 800359c:	4694      	mov	ip, r2
 800359e:	44bc      	add	ip, r7
 80035a0:	4463      	add	r3, ip
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e1c9      	b.n	800393c <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 80035a8:	231b      	movs	r3, #27
 80035aa:	2258      	movs	r2, #88	; 0x58
 80035ac:	4694      	mov	ip, r2
 80035ae:	44bc      	add	ip, r7
 80035b0:	4463      	add	r3, ip
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d100      	bne.n	80035ba <UART_SetConfig+0xde2>
 80035b8:	e08d      	b.n	80036d6 <UART_SetConfig+0xefe>
 80035ba:	dc02      	bgt.n	80035c2 <UART_SetConfig+0xdea>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <UART_SetConfig+0xdf8>
 80035c0:	e1a1      	b.n	8003906 <UART_SetConfig+0x112e>
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d100      	bne.n	80035c8 <UART_SetConfig+0xdf0>
 80035c6:	e0dd      	b.n	8003784 <UART_SetConfig+0xfac>
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d100      	bne.n	80035ce <UART_SetConfig+0xdf6>
 80035cc:	e13b      	b.n	8003846 <UART_SetConfig+0x106e>
 80035ce:	e19a      	b.n	8003906 <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d0:	f7fe fede 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80035d4:	0002      	movs	r2, r0
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d100      	bne.n	80035e0 <UART_SetConfig+0xe08>
 80035de:	e065      	b.n	80036ac <UART_SetConfig+0xed4>
 80035e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d100      	bne.n	80035ea <UART_SetConfig+0xe12>
 80035e8:	e05e      	b.n	80036a8 <UART_SetConfig+0xed0>
 80035ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d058      	beq.n	80036a4 <UART_SetConfig+0xecc>
 80035f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d052      	beq.n	80036a0 <UART_SetConfig+0xec8>
 80035fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d04c      	beq.n	800369c <UART_SetConfig+0xec4>
 8003602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b05      	cmp	r3, #5
 8003608:	d046      	beq.n	8003698 <UART_SetConfig+0xec0>
 800360a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b06      	cmp	r3, #6
 8003610:	d020      	beq.n	8003654 <UART_SetConfig+0xe7c>
 8003612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b07      	cmp	r3, #7
 8003618:	d01a      	beq.n	8003650 <UART_SetConfig+0xe78>
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b08      	cmp	r3, #8
 8003620:	d014      	beq.n	800364c <UART_SetConfig+0xe74>
 8003622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b09      	cmp	r3, #9
 8003628:	d00e      	beq.n	8003648 <UART_SetConfig+0xe70>
 800362a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b0a      	cmp	r3, #10
 8003630:	d008      	beq.n	8003644 <UART_SetConfig+0xe6c>
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b0b      	cmp	r3, #11
 8003638:	d102      	bne.n	8003640 <UART_SetConfig+0xe68>
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	e036      	b.n	80036ae <UART_SetConfig+0xed6>
 8003640:	2301      	movs	r3, #1
 8003642:	e034      	b.n	80036ae <UART_SetConfig+0xed6>
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	e032      	b.n	80036ae <UART_SetConfig+0xed6>
 8003648:	2340      	movs	r3, #64	; 0x40
 800364a:	e030      	b.n	80036ae <UART_SetConfig+0xed6>
 800364c:	2320      	movs	r3, #32
 800364e:	e02e      	b.n	80036ae <UART_SetConfig+0xed6>
 8003650:	2310      	movs	r3, #16
 8003652:	e02c      	b.n	80036ae <UART_SetConfig+0xed6>
 8003654:	230c      	movs	r3, #12
 8003656:	e02a      	b.n	80036ae <UART_SetConfig+0xed6>
 8003658:	0001e848 	.word	0x0001e848
 800365c:	01e84800 	.word	0x01e84800
 8003660:	0003d090 	.word	0x0003d090
 8003664:	0007a120 	.word	0x0007a120
 8003668:	000f4240 	.word	0x000f4240
 800366c:	001e8480 	.word	0x001e8480
 8003670:	0028b0aa 	.word	0x0028b0aa
 8003674:	0030d400 	.word	0x0030d400
 8003678:	003d0900 	.word	0x003d0900
 800367c:	00516154 	.word	0x00516154
 8003680:	007a1200 	.word	0x007a1200
 8003684:	00f42400 	.word	0x00f42400
 8003688:	00001554 	.word	0x00001554
 800368c:	00001998 	.word	0x00001998
 8003690:	00002aaa 	.word	0x00002aaa
 8003694:	0000ffff 	.word	0x0000ffff
 8003698:	230a      	movs	r3, #10
 800369a:	e008      	b.n	80036ae <UART_SetConfig+0xed6>
 800369c:	2308      	movs	r3, #8
 800369e:	e006      	b.n	80036ae <UART_SetConfig+0xed6>
 80036a0:	2306      	movs	r3, #6
 80036a2:	e004      	b.n	80036ae <UART_SetConfig+0xed6>
 80036a4:	2304      	movs	r3, #4
 80036a6:	e002      	b.n	80036ae <UART_SetConfig+0xed6>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e000      	b.n	80036ae <UART_SetConfig+0xed6>
 80036ac:	2301      	movs	r3, #1
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f7fc fd27 	bl	8000104 <__udivsi3>
 80036b6:	0003      	movs	r3, r0
 80036b8:	001a      	movs	r2, r3
 80036ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	18d2      	adds	r2, r2, r3
 80036c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f7fc fd1b 	bl	8000104 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80036d4:	e11f      	b.n	8003916 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d043      	beq.n	8003766 <UART_SetConfig+0xf8e>
 80036de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d03d      	beq.n	8003762 <UART_SetConfig+0xf8a>
 80036e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d037      	beq.n	800375e <UART_SetConfig+0xf86>
 80036ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d031      	beq.n	800375a <UART_SetConfig+0xf82>
 80036f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d02b      	beq.n	8003756 <UART_SetConfig+0xf7e>
 80036fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b05      	cmp	r3, #5
 8003704:	d025      	beq.n	8003752 <UART_SetConfig+0xf7a>
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b06      	cmp	r3, #6
 800370c:	d01f      	beq.n	800374e <UART_SetConfig+0xf76>
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b07      	cmp	r3, #7
 8003714:	d019      	beq.n	800374a <UART_SetConfig+0xf72>
 8003716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b08      	cmp	r3, #8
 800371c:	d013      	beq.n	8003746 <UART_SetConfig+0xf6e>
 800371e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2b09      	cmp	r3, #9
 8003724:	d00d      	beq.n	8003742 <UART_SetConfig+0xf6a>
 8003726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b0a      	cmp	r3, #10
 800372c:	d007      	beq.n	800373e <UART_SetConfig+0xf66>
 800372e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b0b      	cmp	r3, #11
 8003734:	d101      	bne.n	800373a <UART_SetConfig+0xf62>
 8003736:	4b8d      	ldr	r3, [pc, #564]	; (800396c <UART_SetConfig+0x1194>)
 8003738:	e016      	b.n	8003768 <UART_SetConfig+0xf90>
 800373a:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <UART_SetConfig+0x1198>)
 800373c:	e014      	b.n	8003768 <UART_SetConfig+0xf90>
 800373e:	4b8d      	ldr	r3, [pc, #564]	; (8003974 <UART_SetConfig+0x119c>)
 8003740:	e012      	b.n	8003768 <UART_SetConfig+0xf90>
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <UART_SetConfig+0x11a0>)
 8003744:	e010      	b.n	8003768 <UART_SetConfig+0xf90>
 8003746:	4b8d      	ldr	r3, [pc, #564]	; (800397c <UART_SetConfig+0x11a4>)
 8003748:	e00e      	b.n	8003768 <UART_SetConfig+0xf90>
 800374a:	4b8d      	ldr	r3, [pc, #564]	; (8003980 <UART_SetConfig+0x11a8>)
 800374c:	e00c      	b.n	8003768 <UART_SetConfig+0xf90>
 800374e:	4b8d      	ldr	r3, [pc, #564]	; (8003984 <UART_SetConfig+0x11ac>)
 8003750:	e00a      	b.n	8003768 <UART_SetConfig+0xf90>
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <UART_SetConfig+0x11b0>)
 8003754:	e008      	b.n	8003768 <UART_SetConfig+0xf90>
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <UART_SetConfig+0x11b4>)
 8003758:	e006      	b.n	8003768 <UART_SetConfig+0xf90>
 800375a:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <UART_SetConfig+0x11b8>)
 800375c:	e004      	b.n	8003768 <UART_SetConfig+0xf90>
 800375e:	4b8d      	ldr	r3, [pc, #564]	; (8003994 <UART_SetConfig+0x11bc>)
 8003760:	e002      	b.n	8003768 <UART_SetConfig+0xf90>
 8003762:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <UART_SetConfig+0x11c0>)
 8003764:	e000      	b.n	8003768 <UART_SetConfig+0xf90>
 8003766:	4b82      	ldr	r3, [pc, #520]	; (8003970 <UART_SetConfig+0x1198>)
 8003768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800376a:	6852      	ldr	r2, [r2, #4]
 800376c:	0852      	lsrs	r2, r2, #1
 800376e:	189a      	adds	r2, r3, r2
 8003770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f7fc fcc4 	bl	8000104 <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	b29b      	uxth	r3, r3
 8003780:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003782:	e0c8      	b.n	8003916 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003784:	f7fe fd78 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8003788:	0002      	movs	r2, r0
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d044      	beq.n	800381c <UART_SetConfig+0x1044>
 8003792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b01      	cmp	r3, #1
 8003798:	d03e      	beq.n	8003818 <UART_SetConfig+0x1040>
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d038      	beq.n	8003814 <UART_SetConfig+0x103c>
 80037a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d032      	beq.n	8003810 <UART_SetConfig+0x1038>
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d02c      	beq.n	800380c <UART_SetConfig+0x1034>
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d026      	beq.n	8003808 <UART_SetConfig+0x1030>
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d020      	beq.n	8003804 <UART_SetConfig+0x102c>
 80037c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	d01a      	beq.n	8003800 <UART_SetConfig+0x1028>
 80037ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d014      	beq.n	80037fc <UART_SetConfig+0x1024>
 80037d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d00e      	beq.n	80037f8 <UART_SetConfig+0x1020>
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d008      	beq.n	80037f4 <UART_SetConfig+0x101c>
 80037e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d102      	bne.n	80037f0 <UART_SetConfig+0x1018>
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	e016      	b.n	800381e <UART_SetConfig+0x1046>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e014      	b.n	800381e <UART_SetConfig+0x1046>
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	e012      	b.n	800381e <UART_SetConfig+0x1046>
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	e010      	b.n	800381e <UART_SetConfig+0x1046>
 80037fc:	2320      	movs	r3, #32
 80037fe:	e00e      	b.n	800381e <UART_SetConfig+0x1046>
 8003800:	2310      	movs	r3, #16
 8003802:	e00c      	b.n	800381e <UART_SetConfig+0x1046>
 8003804:	230c      	movs	r3, #12
 8003806:	e00a      	b.n	800381e <UART_SetConfig+0x1046>
 8003808:	230a      	movs	r3, #10
 800380a:	e008      	b.n	800381e <UART_SetConfig+0x1046>
 800380c:	2308      	movs	r3, #8
 800380e:	e006      	b.n	800381e <UART_SetConfig+0x1046>
 8003810:	2306      	movs	r3, #6
 8003812:	e004      	b.n	800381e <UART_SetConfig+0x1046>
 8003814:	2304      	movs	r3, #4
 8003816:	e002      	b.n	800381e <UART_SetConfig+0x1046>
 8003818:	2302      	movs	r3, #2
 800381a:	e000      	b.n	800381e <UART_SetConfig+0x1046>
 800381c:	2301      	movs	r3, #1
 800381e:	0019      	movs	r1, r3
 8003820:	0010      	movs	r0, r2
 8003822:	f7fc fc6f 	bl	8000104 <__udivsi3>
 8003826:	0003      	movs	r3, r0
 8003828:	001a      	movs	r2, r3
 800382a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	18d2      	adds	r2, r2, r3
 8003832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f7fc fc63 	bl	8000104 <__udivsi3>
 800383e:	0003      	movs	r3, r0
 8003840:	b29b      	uxth	r3, r3
 8003842:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003844:	e067      	b.n	8003916 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04b      	beq.n	80038e6 <UART_SetConfig+0x110e>
 800384e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b01      	cmp	r3, #1
 8003854:	d044      	beq.n	80038e0 <UART_SetConfig+0x1108>
 8003856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b02      	cmp	r3, #2
 800385c:	d03d      	beq.n	80038da <UART_SetConfig+0x1102>
 800385e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b03      	cmp	r3, #3
 8003864:	d037      	beq.n	80038d6 <UART_SetConfig+0x10fe>
 8003866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b04      	cmp	r3, #4
 800386c:	d030      	beq.n	80038d0 <UART_SetConfig+0x10f8>
 800386e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b05      	cmp	r3, #5
 8003874:	d02a      	beq.n	80038cc <UART_SetConfig+0x10f4>
 8003876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	2b06      	cmp	r3, #6
 800387c:	d024      	beq.n	80038c8 <UART_SetConfig+0x10f0>
 800387e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b07      	cmp	r3, #7
 8003884:	d01d      	beq.n	80038c2 <UART_SetConfig+0x10ea>
 8003886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b08      	cmp	r3, #8
 800388c:	d016      	beq.n	80038bc <UART_SetConfig+0x10e4>
 800388e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b09      	cmp	r3, #9
 8003894:	d00f      	beq.n	80038b6 <UART_SetConfig+0x10de>
 8003896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b0a      	cmp	r3, #10
 800389c:	d008      	beq.n	80038b0 <UART_SetConfig+0x10d8>
 800389e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b0b      	cmp	r3, #11
 80038a4:	d101      	bne.n	80038aa <UART_SetConfig+0x10d2>
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	e01f      	b.n	80038ea <UART_SetConfig+0x1112>
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	e01c      	b.n	80038ea <UART_SetConfig+0x1112>
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	e019      	b.n	80038ea <UART_SetConfig+0x1112>
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	e016      	b.n	80038ea <UART_SetConfig+0x1112>
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	e013      	b.n	80038ea <UART_SetConfig+0x1112>
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	e010      	b.n	80038ea <UART_SetConfig+0x1112>
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <UART_SetConfig+0x11c4>)
 80038ca:	e00e      	b.n	80038ea <UART_SetConfig+0x1112>
 80038cc:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <UART_SetConfig+0x11c8>)
 80038ce:	e00c      	b.n	80038ea <UART_SetConfig+0x1112>
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	015b      	lsls	r3, r3, #5
 80038d4:	e009      	b.n	80038ea <UART_SetConfig+0x1112>
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <UART_SetConfig+0x11cc>)
 80038d8:	e007      	b.n	80038ea <UART_SetConfig+0x1112>
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	e004      	b.n	80038ea <UART_SetConfig+0x1112>
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	e001      	b.n	80038ea <UART_SetConfig+0x1112>
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	0852      	lsrs	r2, r2, #1
 80038f0:	189a      	adds	r2, r3, r2
 80038f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0019      	movs	r1, r3
 80038f8:	0010      	movs	r0, r2
 80038fa:	f7fc fc03 	bl	8000104 <__udivsi3>
 80038fe:	0003      	movs	r3, r0
 8003900:	b29b      	uxth	r3, r3
 8003902:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003904:	e007      	b.n	8003916 <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 8003906:	2313      	movs	r3, #19
 8003908:	2258      	movs	r2, #88	; 0x58
 800390a:	4694      	mov	ip, r2
 800390c:	44bc      	add	ip, r7
 800390e:	4463      	add	r3, ip
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
        break;
 8003914:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d908      	bls.n	800392e <UART_SetConfig+0x1156>
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <UART_SetConfig+0x11d0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d804      	bhi.n	800392e <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 8003924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	e006      	b.n	800393c <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 800392e:	2313      	movs	r3, #19
 8003930:	2258      	movs	r2, #88	; 0x58
 8003932:	4694      	mov	ip, r2
 8003934:	44bc      	add	ip, r7
 8003936:	4463      	add	r3, ip
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800393c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393e:	226a      	movs	r2, #106	; 0x6a
 8003940:	2101      	movs	r1, #1
 8003942:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003946:	2268      	movs	r2, #104	; 0x68
 8003948:	2101      	movs	r1, #1
 800394a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800394c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394e:	2200      	movs	r2, #0
 8003950:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003954:	2200      	movs	r2, #0
 8003956:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003958:	2313      	movs	r3, #19
 800395a:	2258      	movs	r2, #88	; 0x58
 800395c:	4694      	mov	ip, r2
 800395e:	44bc      	add	ip, r7
 8003960:	4463      	add	r3, ip
 8003962:	781b      	ldrb	r3, [r3, #0]
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b01f      	add	sp, #124	; 0x7c
 800396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396c:	0000f424 	.word	0x0000f424
 8003970:	00f42400 	.word	0x00f42400
 8003974:	0001e848 	.word	0x0001e848
 8003978:	0003d090 	.word	0x0003d090
 800397c:	0007a120 	.word	0x0007a120
 8003980:	000f4240 	.word	0x000f4240
 8003984:	00145855 	.word	0x00145855
 8003988:	00186a00 	.word	0x00186a00
 800398c:	001e8480 	.word	0x001e8480
 8003990:	0028b0aa 	.word	0x0028b0aa
 8003994:	003d0900 	.word	0x003d0900
 8003998:	007a1200 	.word	0x007a1200
 800399c:	00000aaa 	.word	0x00000aaa
 80039a0:	00000ccc 	.word	0x00000ccc
 80039a4:	00001555 	.word	0x00001555
 80039a8:	0000ffff 	.word	0x0000ffff

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <UART_AdvFeatureConfig+0x144>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	2202      	movs	r2, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a43      	ldr	r2, [pc, #268]	; (8003af4 <UART_AdvFeatureConfig+0x148>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	2204      	movs	r2, #4
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <UART_AdvFeatureConfig+0x14c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <UART_AdvFeatureConfig+0x150>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2210      	movs	r2, #16
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <UART_AdvFeatureConfig+0x154>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	2220      	movs	r2, #32
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <UART_AdvFeatureConfig+0x158>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	4013      	ands	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <UART_AdvFeatureConfig+0x15c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	035b      	lsls	r3, r3, #13
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10b      	bne.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <UART_AdvFeatureConfig+0x160>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <UART_AdvFeatureConfig+0x164>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffdffff 	.word	0xfffdffff
 8003af4:	fffeffff 	.word	0xfffeffff
 8003af8:	fffbffff 	.word	0xfffbffff
 8003afc:	ffff7fff 	.word	0xffff7fff
 8003b00:	ffffefff 	.word	0xffffefff
 8003b04:	ffffdfff 	.word	0xffffdfff
 8003b08:	ffefffff 	.word	0xffefffff
 8003b0c:	ff9fffff 	.word	0xff9fffff
 8003b10:	fff7ffff 	.word	0xfff7ffff

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2288      	movs	r2, #136	; 0x88
 8003b20:	2100      	movs	r1, #0
 8003b22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b24:	f7fc fdea 	bl	80006fc <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2208      	movs	r2, #8
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d10d      	bne.n	8003b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	0399      	lsls	r1, r3, #14
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <UART_CheckIdleState+0x90>)
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	0013      	movs	r3, r2
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f000 f82d 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d001      	beq.n	8003b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e021      	b.n	8003b9a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d10d      	bne.n	8003b80 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	03d9      	lsls	r1, r3, #15
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <UART_CheckIdleState+0x90>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	0013      	movs	r3, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	f000 f818 	bl	8003ba8 <UART_WaitOnFlagUntilTimeout>
 8003b78:	1e03      	subs	r3, r0, #0
 8003b7a:	d001      	beq.n	8003b80 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e00c      	b.n	8003b9a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	2120      	movs	r1, #32
 8003b86:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2284      	movs	r2, #132	; 0x84
 8003b8c:	2120      	movs	r1, #32
 8003b8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	227c      	movs	r2, #124	; 0x7c
 8003b94:	2100      	movs	r1, #0
 8003b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	01ffffff 	.word	0x01ffffff

08003ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb8:	e02b      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d028      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc0:	f7fc fd9c 	bl	80006fc <HAL_GetTick>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d302      	bcc.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11d      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4916      	ldr	r1, [pc, #88]	; (8003c3c <UART_WaitOnFlagUntilTimeout+0x94>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2284      	movs	r2, #132	; 0x84
 8003c02:	2120      	movs	r1, #32
 8003c04:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	227c      	movs	r2, #124	; 0x7c
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	425a      	negs	r2, r3
 8003c22:	4153      	adcs	r3, r2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	001a      	movs	r2, r3
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d0c4      	beq.n	8003bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	fffffe5f 	.word	0xfffffe5f

08003c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	227c      	movs	r2, #124	; 0x7c
 8003c4c:	5c9b      	ldrb	r3, [r3, r2]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e027      	b.n	8003ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	227c      	movs	r2, #124	; 0x7c
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	2124      	movs	r1, #36	; 0x24
 8003c64:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	2120      	movs	r1, #32
 8003c9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	227c      	movs	r2, #124	; 0x7c
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	dfffffff 	.word	0xdfffffff

08003cb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	227c      	movs	r2, #124	; 0x7c
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e02e      	b.n	8003d2a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	227c      	movs	r2, #124	; 0x7c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	2124      	movs	r1, #36	; 0x24
 8003cda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	08d9      	lsrs	r1, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 f854 	bl	8003db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	227c      	movs	r2, #124	; 0x7c
 8003d24:	2100      	movs	r1, #0
 8003d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	227c      	movs	r2, #124	; 0x7c
 8003d42:	5c9b      	ldrb	r3, [r3, r2]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e02f      	b.n	8003dac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	227c      	movs	r2, #124	; 0x7c
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	2124      	movs	r1, #36	; 0x24
 8003d5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	438a      	bics	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 f813 	bl	8003db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	2120      	movs	r1, #32
 8003da0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	227c      	movs	r2, #124	; 0x7c
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b004      	add	sp, #16
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	f1ffffff 	.word	0xf1ffffff

08003db8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003dc0:	2314      	movs	r3, #20
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <UARTEx_SetNbDataToProcess+0xcc>)
 8003dc6:	ca03      	ldmia	r2!, {r0, r1}
 8003dc8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003dca:	230c      	movs	r3, #12
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <UARTEx_SetNbDataToProcess+0xd0>)
 8003dd0:	ca03      	ldmia	r2!, {r0, r1}
 8003dd2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	226a      	movs	r2, #106	; 0x6a
 8003de0:	2101      	movs	r1, #1
 8003de2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2268      	movs	r2, #104	; 0x68
 8003de8:	2101      	movs	r1, #1
 8003dea:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dec:	e046      	b.n	8003e7c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dee:	261f      	movs	r6, #31
 8003df0:	19bb      	adds	r3, r7, r6
 8003df2:	2208      	movs	r2, #8
 8003df4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003df6:	201e      	movs	r0, #30
 8003df8:	183b      	adds	r3, r7, r0
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	0e5b      	lsrs	r3, r3, #25
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	241d      	movs	r4, #29
 8003e0a:	193b      	adds	r3, r7, r4
 8003e0c:	2107      	movs	r1, #7
 8003e0e:	400a      	ands	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	0f5b      	lsrs	r3, r3, #29
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	251c      	movs	r5, #28
 8003e1e:	197b      	adds	r3, r7, r5
 8003e20:	2107      	movs	r1, #7
 8003e22:	400a      	ands	r2, r1
 8003e24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	197a      	adds	r2, r7, r5
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	2114      	movs	r1, #20
 8003e30:	1879      	adds	r1, r7, r1
 8003e32:	5c8a      	ldrb	r2, [r1, r2]
 8003e34:	435a      	muls	r2, r3
 8003e36:	0010      	movs	r0, r2
 8003e38:	197b      	adds	r3, r7, r5
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	250c      	movs	r5, #12
 8003e3e:	197a      	adds	r2, r7, r5
 8003e40:	5cd3      	ldrb	r3, [r2, r3]
 8003e42:	0019      	movs	r1, r3
 8003e44:	f7fc f9e8 	bl	8000218 <__divsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	b299      	uxth	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	226a      	movs	r2, #106	; 0x6a
 8003e50:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e52:	19bb      	adds	r3, r7, r6
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	193a      	adds	r2, r7, r4
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	2114      	movs	r1, #20
 8003e5c:	1879      	adds	r1, r7, r1
 8003e5e:	5c8a      	ldrb	r2, [r1, r2]
 8003e60:	435a      	muls	r2, r3
 8003e62:	0010      	movs	r0, r2
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	197a      	adds	r2, r7, r5
 8003e6a:	5cd3      	ldrb	r3, [r2, r3]
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	f7fc f9d3 	bl	8000218 <__divsi3>
 8003e72:	0003      	movs	r3, r0
 8003e74:	b299      	uxth	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2268      	movs	r2, #104	; 0x68
 8003e7a:	5299      	strh	r1, [r3, r2]
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b009      	add	sp, #36	; 0x24
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	08004810 	.word	0x08004810
 8003e88:	08004818 	.word	0x08004818

08003e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8e:	b09f      	sub	sp, #124	; 0x7c
 8003e90:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e92:	f7fc fbb9 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e96:	f000 f8ab 	bl	8003ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e9a:	f000 f995 	bl	80041c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e9e:	f000 f903 	bl	80040a8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003ea2:	f000 f941 	bl	8004128 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer[6];
  buffer[0]= 0x4c;	//L
 8003ea6:	2460      	movs	r4, #96	; 0x60
 8003ea8:	193b      	adds	r3, r7, r4
 8003eaa:	224c      	movs	r2, #76	; 0x4c
 8003eac:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003eae:	193b      	adds	r3, r7, r4
 8003eb0:	224f      	movs	r2, #79	; 0x4f
 8003eb2:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003eb4:	193b      	adds	r3, r7, r4
 8003eb6:	2255      	movs	r2, #85	; 0x55
 8003eb8:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	2249      	movs	r2, #73	; 0x49
 8003ebe:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	2253      	movs	r2, #83	; 0x53
 8003ec4:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003ec6:	193b      	adds	r3, r7, r4
 8003ec8:	2231      	movs	r2, #49	; 0x31
 8003eca:	715a      	strb	r2, [r3, #5]
  uint8_t buffer1[6];
  buffer1[0]= 0x48;	//H
 8003ecc:	2558      	movs	r5, #88	; 0x58
 8003ece:	197b      	adds	r3, r7, r5
 8003ed0:	2248      	movs	r2, #72	; 0x48
 8003ed2:	701a      	strb	r2, [r3, #0]
  buffer1[1]= 0x45;	//E
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	2245      	movs	r2, #69	; 0x45
 8003ed8:	705a      	strb	r2, [r3, #1]
  buffer1[2]= 0x4c;	//L
 8003eda:	197b      	adds	r3, r7, r5
 8003edc:	224c      	movs	r2, #76	; 0x4c
 8003ede:	709a      	strb	r2, [r3, #2]
  buffer1[3]= 0x4c;	//L
 8003ee0:	197b      	adds	r3, r7, r5
 8003ee2:	224c      	movs	r2, #76	; 0x4c
 8003ee4:	70da      	strb	r2, [r3, #3]
  buffer1[4]= 0x4f;	//O
 8003ee6:	197b      	adds	r3, r7, r5
 8003ee8:	224f      	movs	r2, #79	; 0x4f
 8003eea:	711a      	strb	r2, [r3, #4]
  buffer1[5]= 0x33;	//3
 8003eec:	197b      	adds	r3, r7, r5
 8003eee:	2233      	movs	r2, #51	; 0x33
 8003ef0:	715a      	strb	r2, [r3, #5]
  uint8_t empty[10];
  empty[0] = 0x0;
 8003ef2:	214c      	movs	r1, #76	; 0x4c
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
  empty[1] = 0x0;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  empty[2] = 0x0;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2200      	movs	r2, #0
 8003f04:	709a      	strb	r2, [r3, #2]
  empty[3] = 0x0;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	70da      	strb	r2, [r3, #3]
  empty[4] = 0x0;
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2200      	movs	r2, #0
 8003f10:	711a      	strb	r2, [r3, #4]
  empty[5] = 0x0;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2200      	movs	r2, #0
 8003f16:	715a      	strb	r2, [r3, #5]
  empty[6] = 0x0;
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	719a      	strb	r2, [r3, #6]
  empty[7] = 0x0;
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	2200      	movs	r2, #0
 8003f22:	71da      	strb	r2, [r3, #7]
  empty[8] = 0x0;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	721a      	strb	r2, [r3, #8]
  empty[9] = 0x0;
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	725a      	strb	r2, [r3, #9]
  uint8_t password[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8003f30:	2644      	movs	r6, #68	; 0x44
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	0018      	movs	r0, r3
 8003f36:	2308      	movs	r3, #8
 8003f38:	001a      	movs	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f000 fc54 	bl	80047e8 <memset>
  uint8_t password1[17] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8003f40:	2330      	movs	r3, #48	; 0x30
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	0018      	movs	r0, r3
 8003f46:	2311      	movs	r3, #17
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f000 fc4c 	bl	80047e8 <memset>
 8003f50:	2330      	movs	r3, #48	; 0x30
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2209      	movs	r2, #9
 8003f56:	721a      	strb	r2, [r3, #8]
  //{0x00,0x00,0x00,0x20,0x30,0x44,0x00,0x00};
  uint8_t received[11];
  uint8_t received1[20];
  uint8_t test1[2];
  uint8_t data[2];
  data[0] = 0x00;
 8003f58:	2208      	movs	r2, #8
 8003f5a:	18bb      	adds	r3, r7, r2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
  uint8_t test2[8];

  initNFC(&hi2c1, NFC_USERMEMORY);
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <main+0x15c>)
 8003f62:	21a6      	movs	r1, #166	; 0xa6
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 f9ad 	bl	80042c4 <initNFC>
  NFC04A1_setRFMode(password,RF_DISABLE);
 8003f6a:	19bb      	adds	r3, r7, r6
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 fafa 	bl	8004568 <NFC04A1_setRFMode>
  //changeI2CPassword(&hi2c1, NFC_SystemMemory,password);
  //readI2CPassword(&hi2c1,NFC_SystemMemory,received);
  I2CWrite(NFC_USERMEMORY,0x77,buffer,6);
 8003f74:	193a      	adds	r2, r7, r4
 8003f76:	2306      	movs	r3, #6
 8003f78:	2177      	movs	r1, #119	; 0x77
 8003f7a:	20a6      	movs	r0, #166	; 0xa6
 8003f7c:	f000 f9f0 	bl	8004360 <I2CWrite>
  I2CRead(NFC_USERMEMORY,0x77, test2, 6);
 8003f80:	003a      	movs	r2, r7
 8003f82:	2306      	movs	r3, #6
 8003f84:	2177      	movs	r1, #119	; 0x77
 8003f86:	20a6      	movs	r0, #166	; 0xa6
 8003f88:	f000 f9c6 	bl	8004318 <I2CRead>
  //HAL_I2C_Master_Transmit(&hi2c1, (NFC_UserMemory), buffer, 5,10);
  //unlockI2CSecurity(password);
  HAL_I2C_Mem_Write(&hi2c1, NFC_SYSTEMMEMORY, I2C_PWD, 2, password1, 17, 50);
 8003f8c:	2390      	movs	r3, #144	; 0x90
 8003f8e:	011a      	lsls	r2, r3, #4
 8003f90:	4815      	ldr	r0, [pc, #84]	; (8003fe8 <main+0x15c>)
 8003f92:	2332      	movs	r3, #50	; 0x32
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2311      	movs	r3, #17
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2330      	movs	r3, #48	; 0x30
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	21ae      	movs	r1, #174	; 0xae
 8003fa4:	f7fc fea2 	bl	8000cec <HAL_I2C_Mem_Write>
  I2CRead(NFC_DYNMEMORY,I2C_SSO_DYN, test1, 1);
 8003fa8:	230c      	movs	r3, #12
 8003faa:	18fa      	adds	r2, r7, r3
 8003fac:	490f      	ldr	r1, [pc, #60]	; (8003fec <main+0x160>)
 8003fae:	2301      	movs	r3, #1
 8003fb0:	20a6      	movs	r0, #166	; 0xa6
 8003fb2:	f000 f9b1 	bl	8004318 <I2CRead>
  writeSystemMemory(I2CSS,password, 0x55);
 8003fb6:	19bb      	adds	r3, r7, r6
 8003fb8:	2255      	movs	r2, #85	; 0x55
 8003fba:	0019      	movs	r1, r3
 8003fbc:	200b      	movs	r0, #11
 8003fbe:	f000 fa78 	bl	80044b2 <writeSystemMemory>
  writeUserMemory(1, 0x077, buffer1, 6);
 8003fc2:	197a      	adds	r2, r7, r5
 8003fc4:	2306      	movs	r3, #6
 8003fc6:	2177      	movs	r1, #119	; 0x77
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f000 fa93 	bl	80044f4 <writeUserMemory>
  readSystemMemory(I2CSS, test2,1);
 8003fce:	003b      	movs	r3, r7
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	200b      	movs	r0, #11
 8003fd6:	f000 fa57 	bl	8004488 <readSystemMemory>
  readUserMemory(1, 0x077, test2, 6);
 8003fda:	003a      	movs	r2, r7
 8003fdc:	2306      	movs	r3, #6
 8003fde:	2177      	movs	r1, #119	; 0x77
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f000 faa4 	bl	800452e <readUserMemory>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <main+0x15a>
 8003fe8:	2000002c 	.word	0x2000002c
 8003fec:	00002004 	.word	0x00002004

08003ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b0a1      	sub	sp, #132	; 0x84
 8003ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ff6:	2448      	movs	r4, #72	; 0x48
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	2338      	movs	r3, #56	; 0x38
 8003ffe:	001a      	movs	r2, r3
 8004000:	2100      	movs	r1, #0
 8004002:	f000 fbf1 	bl	80047e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004006:	2338      	movs	r3, #56	; 0x38
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	0018      	movs	r0, r3
 800400c:	2310      	movs	r3, #16
 800400e:	001a      	movs	r2, r3
 8004010:	2100      	movs	r1, #0
 8004012:	f000 fbe9 	bl	80047e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	0018      	movs	r0, r3
 800401a:	2334      	movs	r3, #52	; 0x34
 800401c:	001a      	movs	r2, r3
 800401e:	2100      	movs	r1, #0
 8004020:	f000 fbe2 	bl	80047e8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	0018      	movs	r0, r3
 800402a:	f7fd fcb1 	bl	8001990 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800402e:	193b      	adds	r3, r7, r4
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004034:	193b      	adds	r3, r7, r4
 8004036:	22a0      	movs	r2, #160	; 0xa0
 8004038:	02d2      	lsls	r2, r2, #11
 800403a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800403c:	193b      	adds	r3, r7, r4
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004042:	193b      	adds	r3, r7, r4
 8004044:	0018      	movs	r0, r3
 8004046:	f7fd fcef 	bl	8001a28 <HAL_RCC_OscConfig>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d001      	beq.n	8004052 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800404e:	f000 f933 	bl	80042b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004052:	2138      	movs	r1, #56	; 0x38
 8004054:	187b      	adds	r3, r7, r1
 8004056:	2207      	movs	r2, #7
 8004058:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2201      	movs	r2, #1
 800405e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2200      	movs	r2, #0
 800406a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800406c:	187b      	adds	r3, r7, r1
 800406e:	2100      	movs	r1, #0
 8004070:	0018      	movs	r0, r3
 8004072:	f7fd fff9 	bl	8002068 <HAL_RCC_ClockConfig>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d001      	beq.n	800407e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800407a:	f000 f91d 	bl	80042b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2260      	movs	r2, #96	; 0x60
 8004082:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	0018      	movs	r0, r3
 8004094:	f7fe f992 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800409c:	f000 f90c 	bl	80042b8 <Error_Handler>
  }
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b021      	add	sp, #132	; 0x84
 80040a6:	bd90      	pop	{r4, r7, pc}

080040a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <MX_I2C1_Init+0x74>)
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <MX_I2C1_Init+0x78>)
 80040b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <MX_I2C1_Init+0x74>)
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <MX_I2C1_Init+0x7c>)
 80040b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <MX_I2C1_Init+0x74>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <MX_I2C1_Init+0x74>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <MX_I2C1_Init+0x74>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <MX_I2C1_Init+0x74>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <MX_I2C1_Init+0x74>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <MX_I2C1_Init+0x74>)
 80040d8:	2200      	movs	r2, #0
 80040da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <MX_I2C1_Init+0x74>)
 80040de:	2200      	movs	r2, #0
 80040e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <MX_I2C1_Init+0x74>)
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc fd6b 	bl	8000bc0 <HAL_I2C_Init>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d001      	beq.n	80040f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040ee:	f000 f8e3 	bl	80042b8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <MX_I2C1_Init+0x74>)
 80040f4:	2100      	movs	r1, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7fd fbb2 	bl	8001860 <HAL_I2CEx_ConfigAnalogFilter>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004100:	f000 f8da 	bl	80042b8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <MX_I2C1_Init+0x74>)
 8004106:	2100      	movs	r1, #0
 8004108:	0018      	movs	r0, r3
 800410a:	f7fd fbf5 	bl	80018f8 <HAL_I2CEx_ConfigDigitalFilter>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d001      	beq.n	8004116 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004112:	f000 f8d1 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2000002c 	.word	0x2000002c
 8004120:	40005400 	.word	0x40005400
 8004124:	2000090e 	.word	0x2000090e

08004128 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800412c:	4b23      	ldr	r3, [pc, #140]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 800412e:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <MX_LPUART1_UART_Init+0x98>)
 8004130:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <MX_LPUART1_UART_Init+0x9c>)
 8004136:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	0552      	lsls	r2, r2, #21
 800413e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 800414e:	220c      	movs	r2, #12
 8004150:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 800415a:	2200      	movs	r2, #0
 800415c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004160:	2200      	movs	r2, #0
 8004162:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004166:	2200      	movs	r2, #0
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 800416c:	2200      	movs	r2, #0
 800416e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004172:	0018      	movs	r0, r3
 8004174:	f7fe fada 	bl	800272c <HAL_UART_Init>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800417c:	f000 f89c 	bl	80042b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004182:	2100      	movs	r1, #0
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fd95 	bl	8003cb4 <HAL_UARTEx_SetTxFifoThreshold>
 800418a:	1e03      	subs	r3, r0, #0
 800418c:	d001      	beq.n	8004192 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800418e:	f000 f893 	bl	80042b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 8004194:	2100      	movs	r1, #0
 8004196:	0018      	movs	r0, r3
 8004198:	f7ff fdcc 	bl	8003d34 <HAL_UARTEx_SetRxFifoThreshold>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d001      	beq.n	80041a4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80041a0:	f000 f88a 	bl	80042b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <MX_LPUART1_UART_Init+0x94>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7ff fd4a 	bl	8003c40 <HAL_UARTEx_DisableFifoMode>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d001      	beq.n	80041b4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041b0:	f000 f882 	bl	80042b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000078 	.word	0x20000078
 80041c0:	40008000 	.word	0x40008000
 80041c4:	00033324 	.word	0x00033324

080041c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b08b      	sub	sp, #44	; 0x2c
 80041cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ce:	2414      	movs	r4, #20
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	0018      	movs	r0, r3
 80041d4:	2314      	movs	r3, #20
 80041d6:	001a      	movs	r2, r3
 80041d8:	2100      	movs	r1, #0
 80041da:	f000 fb05 	bl	80047e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <MX_GPIO_Init+0xe8>)
 80041e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e2:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <MX_GPIO_Init+0xe8>)
 80041e4:	2104      	movs	r1, #4
 80041e6:	430a      	orrs	r2, r1
 80041e8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <MX_GPIO_Init+0xe8>)
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	2204      	movs	r2, #4
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <MX_GPIO_Init+0xe8>)
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <MX_GPIO_Init+0xe8>)
 80041fc:	2120      	movs	r1, #32
 80041fe:	430a      	orrs	r2, r1
 8004200:	635a      	str	r2, [r3, #52]	; 0x34
 8004202:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <MX_GPIO_Init+0xe8>)
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	2220      	movs	r2, #32
 8004208:	4013      	ands	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <MX_GPIO_Init+0xe8>)
 8004210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <MX_GPIO_Init+0xe8>)
 8004214:	2101      	movs	r1, #1
 8004216:	430a      	orrs	r2, r1
 8004218:	635a      	str	r2, [r3, #52]	; 0x34
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <MX_GPIO_Init+0xe8>)
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <MX_GPIO_Init+0xe8>)
 8004228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <MX_GPIO_Init+0xe8>)
 800422c:	2102      	movs	r1, #2
 800422e:	430a      	orrs	r2, r1
 8004230:	635a      	str	r2, [r3, #52]	; 0x34
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <MX_GPIO_Init+0xe8>)
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	00d9      	lsls	r1, r3, #3
 8004242:	23a0      	movs	r3, #160	; 0xa0
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	2200      	movs	r2, #0
 8004248:	0018      	movs	r0, r3
 800424a:	f7fc fc9b 	bl	8000b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <MX_GPIO_Init+0xec>)
 8004250:	2200      	movs	r2, #0
 8004252:	2130      	movs	r1, #48	; 0x30
 8004254:	0018      	movs	r0, r3
 8004256:	f7fc fc95 	bl	8000b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800425a:	193b      	adds	r3, r7, r4
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	00d2      	lsls	r2, r2, #3
 8004260:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004262:	193b      	adds	r3, r7, r4
 8004264:	2201      	movs	r2, #1
 8004266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	193b      	adds	r3, r7, r4
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426e:	193b      	adds	r3, r7, r4
 8004270:	2200      	movs	r2, #0
 8004272:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 8004274:	193a      	adds	r2, r7, r4
 8004276:	23a0      	movs	r3, #160	; 0xa0
 8004278:	05db      	lsls	r3, r3, #23
 800427a:	0011      	movs	r1, r2
 800427c:	0018      	movs	r0, r3
 800427e:	f7fc fb1d 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 8004282:	0021      	movs	r1, r4
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2230      	movs	r2, #48	; 0x30
 8004288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2201      	movs	r2, #1
 800428e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	187b      	adds	r3, r7, r1
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	187b      	adds	r3, r7, r1
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800429c:	187b      	adds	r3, r7, r1
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <MX_GPIO_Init+0xec>)
 80042a0:	0019      	movs	r1, r3
 80042a2:	0010      	movs	r0, r2
 80042a4:	f7fc fb0a 	bl	80008bc <HAL_GPIO_Init>

}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b00b      	add	sp, #44	; 0x2c
 80042ae:	bd90      	pop	{r4, r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	50000400 	.word	0x50000400

080042b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <initNFC>:

#include "nfc.h"
#include "main.h"
#include "stm32g0xx_hal.h"

void initNFC(I2C_HandleTypeDef *hi2c, uint16_t devAddress){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	000a      	movs	r2, r1
 80042ce:	1cbb      	adds	r3, r7, #2
 80042d0:	801a      	strh	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(hi2c, devAddress,3,50) == HAL_OK){
 80042d2:	1cbb      	adds	r3, r7, #2
 80042d4:	8819      	ldrh	r1, [r3, #0]
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	2332      	movs	r3, #50	; 0x32
 80042da:	2203      	movs	r2, #3
 80042dc:	f7fc ff68 	bl	80011b0 <HAL_I2C_IsDeviceReady>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d10c      	bne.n	80042fe <initNFC+0x3a>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <initNFC+0x50>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	2110      	movs	r1, #16
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fc fc4a 	bl	8000b84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NFC_LED2_PORT,NFC_LED2,1);
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <initNFC+0x50>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	2120      	movs	r1, #32
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7fc fc44 	bl	8000b84 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
	}
}
 80042fc:	e005      	b.n	800430a <initNFC+0x46>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <initNFC+0x50>)
 8004300:	2201      	movs	r2, #1
 8004302:	2110      	movs	r1, #16
 8004304:	0018      	movs	r0, r3
 8004306:	f7fc fc3d 	bl	8000b84 <HAL_GPIO_WritePin>
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	50000400 	.word	0x50000400

08004318 <I2CRead>:

void I2CRead(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8004318:	b5b0      	push	{r4, r5, r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af04      	add	r7, sp, #16
 800431e:	60ba      	str	r2, [r7, #8]
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	250e      	movs	r5, #14
 8004324:	197b      	adds	r3, r7, r5
 8004326:	1c02      	adds	r2, r0, #0
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	200c      	movs	r0, #12
 800432c:	183b      	adds	r3, r7, r0
 800432e:	1c0a      	adds	r2, r1, #0
 8004330:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	b29b      	uxth	r3, r3
 8004336:	183a      	adds	r2, r7, r0
 8004338:	8814      	ldrh	r4, [r2, #0]
 800433a:	197a      	adds	r2, r7, r5
 800433c:	8811      	ldrh	r1, [r2, #0]
 800433e:	4807      	ldr	r0, [pc, #28]	; (800435c <I2CRead+0x44>)
 8004340:	2232      	movs	r2, #50	; 0x32
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2302      	movs	r3, #2
 800434c:	0022      	movs	r2, r4
 800434e:	f7fc fdfb 	bl	8000f48 <HAL_I2C_Mem_Read>
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b004      	add	sp, #16
 8004358:	bdb0      	pop	{r4, r5, r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	2000002c 	.word	0x2000002c

08004360 <I2CWrite>:

void I2CWrite(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af04      	add	r7, sp, #16
 8004366:	60ba      	str	r2, [r7, #8]
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	250e      	movs	r5, #14
 800436c:	197b      	adds	r3, r7, r5
 800436e:	1c02      	adds	r2, r0, #0
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	200c      	movs	r0, #12
 8004374:	183b      	adds	r3, r7, r0
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	b29b      	uxth	r3, r3
 800437e:	183a      	adds	r2, r7, r0
 8004380:	8814      	ldrh	r4, [r2, #0]
 8004382:	197a      	adds	r2, r7, r5
 8004384:	8811      	ldrh	r1, [r2, #0]
 8004386:	4807      	ldr	r0, [pc, #28]	; (80043a4 <I2CWrite+0x44>)
 8004388:	2232      	movs	r2, #50	; 0x32
 800438a:	9202      	str	r2, [sp, #8]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2302      	movs	r3, #2
 8004394:	0022      	movs	r2, r4
 8004396:	f7fc fca9 	bl	8000cec <HAL_I2C_Mem_Write>
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bdb0      	pop	{r4, r5, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	2000002c 	.word	0x2000002c

080043a8 <unlockI2CSecurity>:
/**
 * @description present the i2c password and unlock i2c security session
 * @param device address
 * @param password
 */
void unlockI2CSecurity(uint8_t *password){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
		for( i = 0; i < 8; i++){
			pass[i] = password[i];
		}
		pass[8] = PRESENTPASS;
	}*/
	for(int i = 0; i < 8; i++){
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
 80043b4:	e00c      	b.n	80043d0 <unlockI2CSecurity+0x28>
		pass[i] = password[i];
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	7819      	ldrb	r1, [r3, #0]
 80043be:	230c      	movs	r3, #12
 80043c0:	18fa      	adds	r2, r7, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	1c0a      	adds	r2, r1, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	ddef      	ble.n	80043b6 <unlockI2CSecurity+0xe>
	}
	pass[8] = PRESENTPASS;
 80043d6:	230c      	movs	r3, #12
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2209      	movs	r2, #9
 80043dc:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 80043de:	2300      	movs	r3, #0
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e00b      	b.n	80043fc <unlockI2CSecurity+0x54>
		pass[i+9] = password[i];
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	18d2      	adds	r2, r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	3309      	adds	r3, #9
 80043ee:	7811      	ldrb	r1, [r2, #0]
 80043f0:	220c      	movs	r2, #12
 80043f2:	18ba      	adds	r2, r7, r2
 80043f4:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	3301      	adds	r3, #1
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	ddf0      	ble.n	80043e4 <unlockI2CSecurity+0x3c>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, pass,17); //present i2c password
 8004402:	230c      	movs	r3, #12
 8004404:	18fa      	adds	r2, r7, r3
 8004406:	2390      	movs	r3, #144	; 0x90
 8004408:	0119      	lsls	r1, r3, #4
 800440a:	2311      	movs	r3, #17
 800440c:	20ae      	movs	r0, #174	; 0xae
 800440e:	f7ff ffa7 	bl	8004360 <I2CWrite>
	//HAL_Delay(10);
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b00a      	add	sp, #40	; 0x28
 8004418:	bd80      	pop	{r7, pc}

0800441a <lockI2CSecurity>:

/**
 * @description lock the i2c security session by presenting a wrong password
 * @param device address
 */
void lockI2CSecurity(){
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0

	uint8_t WrongPass[17];

	for(int i = 0; i < 8; i++){
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e00b      	b.n	800443e <lockI2CSecurity+0x24>
		WrongPass[i] = i+1;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	1d3a      	adds	r2, r7, #4
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	1c0a      	adds	r2, r1, #0
 8004436:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3301      	adds	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b07      	cmp	r3, #7
 8004442:	ddf0      	ble.n	8004426 <lockI2CSecurity+0xc>
	}
	WrongPass[8] = PRESENTPASS;
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	2209      	movs	r2, #9
 8004448:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e00a      	b.n	8004466 <lockI2CSecurity+0x4c>
		WrongPass[i+9] = i+2;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3309      	adds	r3, #9
 8004458:	3202      	adds	r2, #2
 800445a:	b2d1      	uxtb	r1, r2
 800445c:	1d3a      	adds	r2, r7, #4
 800445e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	3301      	adds	r3, #1
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b07      	cmp	r3, #7
 800446a:	ddf1      	ble.n	8004450 <lockI2CSecurity+0x36>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, WrongPass,17); //present wrong i2c password
 800446c:	1d3a      	adds	r2, r7, #4
 800446e:	2390      	movs	r3, #144	; 0x90
 8004470:	0119      	lsls	r1, r3, #4
 8004472:	2311      	movs	r3, #17
 8004474:	20ae      	movs	r0, #174	; 0xae
 8004476:	f7ff ff73 	bl	8004360 <I2CWrite>
	HAL_Delay(10);
 800447a:	200a      	movs	r0, #10
 800447c:	f7fc f948 	bl	8000710 <HAL_Delay>
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b008      	add	sp, #32
 8004486:	bd80      	pop	{r7, pc}

08004488 <readSystemMemory>:
 * @param device address
 * @param register address
 * @param buffer
 * @param number of bytes to read
 */
void readSystemMemory(uint16_t regAddress, uint8_t *buffer,int n){
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	210e      	movs	r1, #14
 8004494:	187b      	adds	r3, r7, r1
 8004496:	1c02      	adds	r2, r0, #0
 8004498:	801a      	strh	r2, [r3, #0]

	//presentI2Cpassword(hi2c, NFC_SystemMemory, 0x00);
	I2CRead(NFC_SYSTEMMEMORY, regAddress, buffer, n);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	8819      	ldrh	r1, [r3, #0]
 80044a2:	0003      	movs	r3, r0
 80044a4:	20ae      	movs	r0, #174	; 0xae
 80044a6:	f7ff ff37 	bl	8004318 <I2CRead>
	//lockI2CSecurity(hi2c, NFC_SystemMemory);
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b004      	add	sp, #16
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <writeSystemMemory>:
/**
 * @description write data into the system static register
 * @param device address
 * @param data to write
 */
void writeSystemMemory(uint16_t regAddress, uint8_t *password, uint8_t data){
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	0011      	movs	r1, r2
 80044bc:	1dbb      	adds	r3, r7, #6
 80044be:	1c02      	adds	r2, r0, #0
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	1d7b      	adds	r3, r7, #5
 80044c4:	1c0a      	adds	r2, r1, #0
 80044c6:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[1];
	buffer[0] = data;
 80044c8:	240c      	movs	r4, #12
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	1d7a      	adds	r2, r7, #5
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff ff67 	bl	80043a8 <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY, regAddress, buffer, 1);
 80044da:	193a      	adds	r2, r7, r4
 80044dc:	1dbb      	adds	r3, r7, #6
 80044de:	8819      	ldrh	r1, [r3, #0]
 80044e0:	2301      	movs	r3, #1
 80044e2:	20ae      	movs	r0, #174	; 0xae
 80044e4:	f7ff ff3c 	bl	8004360 <I2CWrite>
	lockI2CSecurity();
 80044e8:	f7ff ff97 	bl	800441a <lockI2CSecurity>
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b005      	add	sp, #20
 80044f2:	bd90      	pop	{r4, r7, pc}

080044f4 <writeUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to write
 * @param number of bytes to write
 */
void writeUserMemory(int area, uint16_t address, uint8_t *data, int n){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	230a      	movs	r3, #10
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	1c0a      	adds	r2, r1, #0
 8004506:	801a      	strh	r2, [r3, #0]

	if(area == 1){
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <writeUserMemory+0x2c>
		I2CWrite(NFC_USERMEMORY, address, data, n);
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	230a      	movs	r3, #10
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	8819      	ldrh	r1, [r3, #0]
 8004518:	0003      	movs	r3, r0
 800451a:	20a6      	movs	r0, #166	; 0xa6
 800451c:	f7ff ff20 	bl	8004360 <I2CWrite>
	}
	else{
		//waiting to implement
	}
	HAL_Delay(10);
 8004520:	200a      	movs	r0, #10
 8004522:	f7fc f8f5 	bl	8000710 <HAL_Delay>
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}

0800452e <readUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to read
 * @param number of bytes to read
 */
void readUserMemory(int area, uint16_t address, uint8_t *data, int n){
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	230a      	movs	r3, #10
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	1c0a      	adds	r2, r1, #0
 8004540:	801a      	strh	r2, [r3, #0]

	if(area == 1){
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <readUserMemory+0x2c>
		I2CRead(NFC_USERMEMORY, address, data, n);
 8004548:	6838      	ldr	r0, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	230a      	movs	r3, #10
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	8819      	ldrh	r1, [r3, #0]
 8004552:	0003      	movs	r3, r0
 8004554:	20a6      	movs	r0, #166	; 0xa6
 8004556:	f7ff fedf 	bl	8004318 <I2CRead>
	}
	else{
		//waiting to implement
	}
	HAL_Delay(10);
 800455a:	200a      	movs	r0, #10
 800455c:	f7fc f8d8 	bl	8000710 <HAL_Delay>
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b004      	add	sp, #16
 8004566:	bd80      	pop	{r7, pc}

08004568 <NFC04A1_setRFMode>:

void NFC04A1_setRFMode(uint8_t *password, uint8_t mode){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	000a      	movs	r2, r1
 8004572:	1cfb      	adds	r3, r7, #3
 8004574:	701a      	strb	r2, [r3, #0]
	//unlockI2CSecurity(NFC_SystemMemory,0x00);
	writeSystemMemory(RF_MNGT, password, mode);
 8004576:	1cfb      	adds	r3, r7, #3
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0019      	movs	r1, r3
 800457e:	2003      	movs	r0, #3
 8004580:	f7ff ff97 	bl	80044b2 <writeSystemMemory>
	//lockI2CSecurity(NFC_SystemMemory);
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <HAL_MspInit+0x44>)
 8004594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004596:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <HAL_MspInit+0x44>)
 8004598:	2101      	movs	r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <HAL_MspInit+0x44>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2201      	movs	r2, #1
 80045a4:	4013      	ands	r3, r2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_MspInit+0x44>)
 80045ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_MspInit+0x44>)
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	0549      	lsls	r1, r1, #21
 80045b4:	430a      	orrs	r2, r1
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_MspInit+0x44>)
 80045ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	055b      	lsls	r3, r3, #21
 80045c0:	4013      	ands	r3, r2
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	2314      	movs	r3, #20
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	0018      	movs	r0, r3
 80045e2:	2314      	movs	r3, #20
 80045e4:	001a      	movs	r2, r3
 80045e6:	2100      	movs	r1, #0
 80045e8:	f000 f8fe 	bl	80047e8 <memset>
  if(hi2c->Instance==I2C1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_I2C_MspInit+0x8c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d130      	bne.n	8004658 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_I2C_MspInit+0x90>)
 80045f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_I2C_MspInit+0x90>)
 80045fc:	2102      	movs	r1, #2
 80045fe:	430a      	orrs	r2, r1
 8004600:	635a      	str	r2, [r3, #52]	; 0x34
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_I2C_MspInit+0x90>)
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800460e:	2114      	movs	r1, #20
 8004610:	187b      	adds	r3, r7, r1
 8004612:	22c0      	movs	r2, #192	; 0xc0
 8004614:	0092      	lsls	r2, r2, #2
 8004616:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004618:	187b      	adds	r3, r7, r1
 800461a:	2212      	movs	r2, #18
 800461c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800461e:	187b      	adds	r3, r7, r1
 8004620:	2201      	movs	r2, #1
 8004622:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004624:	187b      	adds	r3, r7, r1
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2206      	movs	r2, #6
 800462e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004630:	187b      	adds	r3, r7, r1
 8004632:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <HAL_I2C_MspInit+0x94>)
 8004634:	0019      	movs	r1, r3
 8004636:	0010      	movs	r0, r2
 8004638:	f7fc f940 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_I2C_MspInit+0x90>)
 800463e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_I2C_MspInit+0x90>)
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	0389      	lsls	r1, r1, #14
 8004646:	430a      	orrs	r2, r1
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_I2C_MspInit+0x90>)
 800464c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	039b      	lsls	r3, r3, #14
 8004652:	4013      	ands	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b00a      	add	sp, #40	; 0x28
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40005400 	.word	0x40005400
 8004664:	40021000 	.word	0x40021000
 8004668:	50000400 	.word	0x50000400

0800466c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	2314      	movs	r3, #20
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	0018      	movs	r0, r3
 800467a:	2314      	movs	r3, #20
 800467c:	001a      	movs	r2, r3
 800467e:	2100      	movs	r1, #0
 8004680:	f000 f8b2 	bl	80047e8 <memset>
  if(huart->Instance==LPUART1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <HAL_UART_MspInit+0x8c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d130      	bne.n	80046f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_UART_MspInit+0x90>)
 8004690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_UART_MspInit+0x90>)
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0349      	lsls	r1, r1, #13
 8004698:	430a      	orrs	r2, r1
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_UART_MspInit+0x90>)
 800469e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	035b      	lsls	r3, r3, #13
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_UART_MspInit+0x90>)
 80046ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_UART_MspInit+0x90>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_UART_MspInit+0x90>)
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2201      	movs	r2, #1
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80046c2:	2114      	movs	r1, #20
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	220c      	movs	r2, #12
 80046c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	2202      	movs	r2, #2
 80046ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2200      	movs	r2, #0
 80046da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	2206      	movs	r2, #6
 80046e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e2:	187a      	adds	r2, r7, r1
 80046e4:	23a0      	movs	r3, #160	; 0xa0
 80046e6:	05db      	lsls	r3, r3, #23
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7fc f8e6 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b00a      	add	sp, #40	; 0x28
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40008000 	.word	0x40008000
 80046fc:	40021000 	.word	0x40021000

08004700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800470e:	e7fe      	b.n	800470e <HardFault_Handler+0x4>

08004710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004728:	f7fb ffd8 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <SystemInit+0x14>)
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	0512      	lsls	r2, r2, #20
 800473e:	609a      	str	r2, [r3, #8]
#endif
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800474c:	480d      	ldr	r0, [pc, #52]	; (8004784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800474e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004750:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004752:	e003      	b.n	800475c <LoopCopyDataInit>

08004754 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004756:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004758:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800475a:	3104      	adds	r1, #4

0800475c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800475c:	480b      	ldr	r0, [pc, #44]	; (800478c <LoopForever+0xa>)
  ldr r3, =_edata
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <LoopForever+0xe>)
  adds r2, r0, r1
 8004760:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004762:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004764:	d3f6      	bcc.n	8004754 <CopyDataInit>
  ldr r2, =_sbss
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <LoopForever+0x12>)
  b LoopFillZerobss
 8004768:	e002      	b.n	8004770 <LoopFillZerobss>

0800476a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800476a:	2300      	movs	r3, #0
  str  r3, [r2]
 800476c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800476e:	3204      	adds	r2, #4

08004770 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <LoopForever+0x16>)
  cmp r2, r3
 8004772:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004774:	d3f9      	bcc.n	800476a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004776:	f7ff ffdd 	bl	8004734 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800477a:	f000 f811 	bl	80047a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800477e:	f7ff fb85 	bl	8003e8c <main>

08004782 <LoopForever>:

LoopForever:
    b LoopForever
 8004782:	e7fe      	b.n	8004782 <LoopForever>
  ldr   r0, =_estack
 8004784:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004788:	08004890 	.word	0x08004890
  ldr r0, =_sdata
 800478c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004790:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8004794:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8004798:	20000104 	.word	0x20000104

0800479c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800479c:	e7fe      	b.n	800479c <ADC1_COMP_IRQHandler>
	...

080047a0 <__libc_init_array>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	2600      	movs	r6, #0
 80047a4:	4d0c      	ldr	r5, [pc, #48]	; (80047d8 <__libc_init_array+0x38>)
 80047a6:	4c0d      	ldr	r4, [pc, #52]	; (80047dc <__libc_init_array+0x3c>)
 80047a8:	1b64      	subs	r4, r4, r5
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	42a6      	cmp	r6, r4
 80047ae:	d109      	bne.n	80047c4 <__libc_init_array+0x24>
 80047b0:	2600      	movs	r6, #0
 80047b2:	f000 f821 	bl	80047f8 <_init>
 80047b6:	4d0a      	ldr	r5, [pc, #40]	; (80047e0 <__libc_init_array+0x40>)
 80047b8:	4c0a      	ldr	r4, [pc, #40]	; (80047e4 <__libc_init_array+0x44>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	42a6      	cmp	r6, r4
 80047c0:	d105      	bne.n	80047ce <__libc_init_array+0x2e>
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	00b3      	lsls	r3, r6, #2
 80047c6:	58eb      	ldr	r3, [r5, r3]
 80047c8:	4798      	blx	r3
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7ee      	b.n	80047ac <__libc_init_array+0xc>
 80047ce:	00b3      	lsls	r3, r6, #2
 80047d0:	58eb      	ldr	r3, [r5, r3]
 80047d2:	4798      	blx	r3
 80047d4:	3601      	adds	r6, #1
 80047d6:	e7f2      	b.n	80047be <__libc_init_array+0x1e>
 80047d8:	08004888 	.word	0x08004888
 80047dc:	08004888 	.word	0x08004888
 80047e0:	08004888 	.word	0x08004888
 80047e4:	0800488c 	.word	0x0800488c

080047e8 <memset>:
 80047e8:	0003      	movs	r3, r0
 80047ea:	1812      	adds	r2, r2, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d100      	bne.n	80047f2 <memset+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	7019      	strb	r1, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	e7f9      	b.n	80047ec <memset+0x4>

080047f8 <_init>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr

08004804 <_fini>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr
