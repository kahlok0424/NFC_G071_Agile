
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c24  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d58  08003d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003d6c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af9b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c29  00000000  00000000  0002afcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168ac  00000000  00000000  0002e050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a05e  00000000  00000000  000448fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e3bd  00000000  00000000  0004e95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcd17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000dcd94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003cc8 	.word	0x08003cc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003cc8 	.word	0x08003cc8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 fa12 	bl	8003a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f8ed 	bl	800085e <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8cc 	bl	8000834 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b7f      	cmp	r3, #127	; 0x7f
 8000724:	d932      	bls.n	800078c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	230f      	movs	r3, #15
 8000730:	400b      	ands	r3, r1
 8000732:	3b08      	subs	r3, #8
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3306      	adds	r3, #6
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	3304      	adds	r3, #4
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1dfa      	adds	r2, r7, #7
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	0011      	movs	r1, r2
 8000746:	2203      	movs	r2, #3
 8000748:	400a      	ands	r2, r1
 800074a:	00d2      	lsls	r2, r2, #3
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	4091      	lsls	r1, r2
 8000750:	000a      	movs	r2, r1
 8000752:	43d2      	mvns	r2, r2
 8000754:	401a      	ands	r2, r3
 8000756:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	019b      	lsls	r3, r3, #6
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	401a      	ands	r2, r3
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0018      	movs	r0, r3
 8000766:	2303      	movs	r3, #3
 8000768:	4003      	ands	r3, r0
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001c      	movs	r4, r3
 8000776:	230f      	movs	r3, #15
 8000778:	4023      	ands	r3, r4
 800077a:	3b08      	subs	r3, #8
 800077c:	089b      	lsrs	r3, r3, #2
 800077e:	430a      	orrs	r2, r1
 8000780:	3306      	adds	r3, #6
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	18c3      	adds	r3, r0, r3
 8000786:	3304      	adds	r3, #4
 8000788:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e027      	b.n	80007dc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	33c0      	adds	r3, #192	; 0xc0
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	589b      	ldr	r3, [r3, r2]
 800079c:	1dfa      	adds	r2, r7, #7
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	0011      	movs	r1, r2
 80007a2:	2203      	movs	r2, #3
 80007a4:	400a      	ands	r2, r1
 80007a6:	00d2      	lsls	r2, r2, #3
 80007a8:	21ff      	movs	r1, #255	; 0xff
 80007aa:	4091      	lsls	r1, r2
 80007ac:	000a      	movs	r2, r1
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	401a      	ands	r2, r3
 80007b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	401a      	ands	r2, r3
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0018      	movs	r0, r3
 80007c2:	2303      	movs	r3, #3
 80007c4:	4003      	ands	r3, r0
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <NVIC_SetPriority+0xd8>)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	33c0      	adds	r3, #192	; 0xc0
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	501a      	str	r2, [r3, r0]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b003      	add	sp, #12
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	e000e100 	.word	0xe000e100

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <SysTick_Config+0x40>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d901      	bls.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e010      	b.n	8000824 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <SysTick_Config+0x44>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	3a01      	subs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	2301      	movs	r3, #1
 800080c:	425b      	negs	r3, r3
 800080e:	2103      	movs	r1, #3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7d 	bl	8000710 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SysTick_Config+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x44>)
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	00ffffff 	.word	0x00ffffff
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	210f      	movs	r1, #15
 8000840:	187b      	adds	r3, r7, r1
 8000842:	1c02      	adds	r2, r0, #0
 8000844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	187b      	adds	r3, r7, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <NVIC_SetPriority>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffbf 	bl	80007ec <SysTick_Config>
 800086e:	0003      	movs	r3, r0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e147      	b.n	8000b18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x28>
 800089e:	e138      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0x38>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d123      	bne.n	80008f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	58d3      	ldr	r3, [r2, r3]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2207      	movs	r2, #7
 80008c2:	4013      	ands	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	220f      	movs	r2, #15
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	2107      	movs	r1, #7
 80008dc:	400b      	ands	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2203      	movs	r2, #3
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <HAL_GPIO_Init+0xd4>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d007      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2b11      	cmp	r3, #17
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	43da      	mvns	r2, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	2201      	movs	r2, #1
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	055b      	lsls	r3, r3, #21
 80009e6:	4013      	ands	r3, r2
 80009e8:	d100      	bne.n	80009ec <HAL_GPIO_Init+0x174>
 80009ea:	e092      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3318      	adds	r3, #24
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	589b      	ldr	r3, [r3, r2]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2203      	movs	r2, #3
 80009fe:	4013      	ands	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	220f      	movs	r2, #15
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	23a0      	movs	r3, #160	; 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x1ca>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <HAL_GPIO_Init+0x2bc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x1c6>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <HAL_GPIO_Init+0x2c0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x1c2>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <HAL_GPIO_Init+0x2c4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x1be>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e004      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a42:	2300      	movs	r3, #0
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	2103      	movs	r1, #3
 8000a48:	400a      	ands	r2, r1
 8000a4a:	00d2      	lsls	r2, r2, #3
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a54:	4936      	ldr	r1, [pc, #216]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	58d3      	ldr	r3, [r2, r3]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	025b      	lsls	r3, r3, #9
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a88:	4929      	ldr	r1, [pc, #164]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a92:	2384      	movs	r3, #132	; 0x84
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ab8:	2284      	movs	r2, #132	; 0x84
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	035b      	lsls	r3, r3, #13
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43da      	mvns	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	039b      	lsls	r3, r3, #14
 8000b00:	4013      	ands	r3, r2
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	1e13      	subs	r3, r2, #0
 8000b22:	d000      	beq.n	8000b26 <HAL_GPIO_Init+0x2ae>
 8000b24:	e6b0      	b.n	8000888 <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b006      	add	sp, #24
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40021800 	.word	0x40021800
 8000b34:	50000400 	.word	0x50000400
 8000b38:	50000800 	.word	0x50000800
 8000b3c:	50000c00 	.word	0x50000c00

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	0008      	movs	r0, r1
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	1cbb      	adds	r3, r7, #2
 8000b4e:	1c02      	adds	r2, r0, #0
 8000b50:	801a      	strh	r2, [r3, #0]
 8000b52:	1c7b      	adds	r3, r7, #1
 8000b54:	1c0a      	adds	r2, r1, #0
 8000b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b58:	1c7b      	adds	r3, r7, #1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e082      	b.n	8000c94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2241      	movs	r2, #65	; 0x41
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 ff7d 	bl	8003aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2241      	movs	r2, #65	; 0x41
 8000bae:	2124      	movs	r1, #36	; 0x24
 8000bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4934      	ldr	r1, [pc, #208]	; (8000c9c <HAL_I2C_Init+0x120>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4931      	ldr	r1, [pc, #196]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d108      	bne.n	8000bfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0209      	lsls	r1, r1, #8
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	e007      	b.n	8000c0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2184      	movs	r1, #132	; 0x84
 8000c04:	0209      	lsls	r1, r1, #8
 8000c06:	430a      	orrs	r2, r1
 8000c08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d104      	bne.n	8000c1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	491f      	ldr	r1, [pc, #124]	; (8000ca4 <HAL_I2C_Init+0x128>)
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	021a      	lsls	r2, r3, #8
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69d9      	ldr	r1, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2241      	movs	r2, #65	; 0x41
 8000c80:	2120      	movs	r1, #32
 8000c82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2242      	movs	r2, #66	; 0x42
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	f0ffffff 	.word	0xf0ffffff
 8000ca0:	ffff7fff 	.word	0xffff7fff
 8000ca4:	02008000 	.word	0x02008000

08000ca8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	1c0a      	adds	r2, r1, #0
 8000cba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2241      	movs	r2, #65	; 0x41
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b20      	cmp	r3, #32
 8000cca:	d000      	beq.n	8000cce <HAL_I2C_IsDeviceReady+0x26>
 8000ccc:	e0fe      	b.n	8000ecc <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	401a      	ands	r2, r3
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d101      	bne.n	8000ce6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e0f3      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2240      	movs	r2, #64	; 0x40
 8000cea:	5c9b      	ldrb	r3, [r3, r2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <HAL_I2C_IsDeviceReady+0x4c>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e0ec      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2241      	movs	r2, #65	; 0x41
 8000d00:	2124      	movs	r1, #36	; 0x24
 8000d02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d107      	bne.n	8000d22 <HAL_I2C_IsDeviceReady+0x7a>
 8000d12:	230a      	movs	r3, #10
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	059b      	lsls	r3, r3, #22
 8000d1a:	0d9b      	lsrs	r3, r3, #22
 8000d1c:	4a6e      	ldr	r2, [pc, #440]	; (8000ed8 <HAL_I2C_IsDeviceReady+0x230>)
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	e007      	b.n	8000d32 <HAL_I2C_IsDeviceReady+0x8a>
 8000d22:	230a      	movs	r3, #10
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	059b      	lsls	r3, r3, #22
 8000d2a:	0d9b      	lsrs	r3, r3, #22
 8000d2c:	22a0      	movs	r2, #160	; 0xa0
 8000d2e:	0192      	lsls	r2, r2, #6
 8000d30:	431a      	orrs	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000d38:	f7ff fce0 	bl	80006fc <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	2220      	movs	r2, #32
 8000d48:	4013      	ands	r3, r2
 8000d4a:	3b20      	subs	r3, #32
 8000d4c:	425a      	negs	r2, r3
 8000d4e:	4153      	adcs	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	231f      	movs	r3, #31
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	2210      	movs	r2, #16
 8000d60:	4013      	ands	r3, r2
 8000d62:	3b10      	subs	r3, #16
 8000d64:	425a      	negs	r2, r3
 8000d66:	4153      	adcs	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	231e      	movs	r3, #30
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000d70:	e035      	b.n	8000dde <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	d01a      	beq.n	8000dae <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d78:	f7ff fcc0 	bl	80006fc <HAL_GetTick>
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d302      	bcc.n	8000d8e <HAL_I2C_IsDeviceReady+0xe6>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10f      	bne.n	8000dae <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2241      	movs	r2, #65	; 0x41
 8000d92:	2120      	movs	r1, #32
 8000d94:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	2100      	movs	r1, #0
 8000da8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e08f      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	2220      	movs	r2, #32
 8000db6:	4013      	ands	r3, r2
 8000db8:	3b20      	subs	r3, #32
 8000dba:	425a      	negs	r2, r3
 8000dbc:	4153      	adcs	r3, r2
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	231f      	movs	r3, #31
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	2210      	movs	r2, #16
 8000dce:	4013      	ands	r3, r2
 8000dd0:	3b10      	subs	r3, #16
 8000dd2:	425a      	negs	r2, r3
 8000dd4:	4153      	adcs	r3, r2
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	231e      	movs	r3, #30
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000dde:	231f      	movs	r3, #31
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d104      	bne.n	8000df2 <HAL_I2C_IsDeviceReady+0x14a>
 8000de8:	231e      	movs	r3, #30
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0bf      	beq.n	8000d72 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2210      	movs	r2, #16
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d01a      	beq.n	8000e36 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	0013      	movs	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	f000 f865 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e059      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2220      	movs	r2, #32
 8000e20:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2241      	movs	r2, #65	; 0x41
 8000e26:	2120      	movs	r1, #32
 8000e28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	2100      	movs	r1, #0
 8000e30:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e04b      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	0013      	movs	r3, r2
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	f000 f84a 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e03e      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2210      	movs	r2, #16
 8000e56:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d119      	bne.n	8000e9c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	01c9      	lsls	r1, r1, #7
 8000e76:	430a      	orrs	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	0013      	movs	r3, r2
 8000e84:	2200      	movs	r2, #0
 8000e86:	2120      	movs	r1, #32
 8000e88:	f000 f828 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e01c      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d900      	bls.n	8000eac <HAL_I2C_IsDeviceReady+0x204>
 8000eaa:	e72e      	b.n	8000d0a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2241      	movs	r2, #65	; 0x41
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	2220      	movs	r2, #32
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2240      	movs	r2, #64	; 0x40
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8000ecc:	2302      	movs	r3, #2
  }
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b008      	add	sp, #32
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	02002000 	.word	0x02002000

08000edc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000eec:	e021      	b.n	8000f32 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	d01e      	beq.n	8000f32 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ef4:	f7ff fc02 	bl	80006fc <HAL_GetTick>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d302      	bcc.n	8000f0a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d113      	bne.n	8000f32 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	2220      	movs	r2, #32
 8000f10:	431a      	orrs	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2241      	movs	r2, #65	; 0x41
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2242      	movs	r2, #66	; 0x42
 8000f22:	2100      	movs	r1, #0
 8000f24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	425a      	negs	r2, r3
 8000f42:	4153      	adcs	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	001a      	movs	r2, r3
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d0ce      	beq.n	8000eee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2241      	movs	r2, #65	; 0x41
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d138      	bne.n	8000fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e032      	b.n	8000fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	2101      	movs	r1, #1
 8000f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2241      	movs	r2, #65	; 0x41
 8000f8c:	2124      	movs	r1, #36	; 0x24
 8000f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2241      	movs	r2, #65	; 0x41
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
  }
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	ffffefff 	.word	0xffffefff

08000ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2241      	movs	r2, #65	; 0x41
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b20      	cmp	r3, #32
 8001008:	d139      	bne.n	800107e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001014:	2302      	movs	r3, #2
 8001016:	e033      	b.n	8001080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2241      	movs	r2, #65	; 0x41
 8001024:	2124      	movs	r1, #36	; 0x24
 8001026:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2241      	movs	r2, #65	; 0x41
 800106e:	2120      	movs	r1, #32
 8001070:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800107e:	2302      	movs	r3, #2
  }
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}
 8001088:	fffff0ff 	.word	0xfffff0ff

0800108c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800109a:	4013      	ands	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d11f      	bne.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	0013      	movs	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	189b      	adds	r3, r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff f820 	bl	8000104 <__udivsi3>
 80010c4:	0003      	movs	r3, r0
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ca:	e008      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e001      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e009      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d0ed      	beq.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40007000 	.word	0x40007000
 8001100:	fffff9ff 	.word	0xfffff9ff
 8001104:	20000008 	.word	0x20000008
 8001108:	000f4240 	.word	0x000f4240

0800110c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	23e0      	movs	r3, #224	; 0xe0
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	4013      	ands	r3, r2
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e304      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	d100      	bne.n	8001142 <HAL_RCC_OscConfig+0x1e>
 8001140:	e07c      	b.n	800123c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001142:	4bc3      	ldr	r3, [pc, #780]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2238      	movs	r2, #56	; 0x38
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114c:	4bc0      	ldr	r3, [pc, #768]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2203      	movs	r2, #3
 8001152:	4013      	ands	r3, r2
 8001154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b10      	cmp	r3, #16
 800115a:	d102      	bne.n	8001162 <HAL_RCC_OscConfig+0x3e>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d002      	beq.n	8001168 <HAL_RCC_OscConfig+0x44>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b08      	cmp	r3, #8
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4bb9      	ldr	r3, [pc, #740]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d062      	beq.n	800123a <HAL_RCC_OscConfig+0x116>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15e      	bne.n	800123a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e2df      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	025b      	lsls	r3, r3, #9
 8001188:	429a      	cmp	r2, r3
 800118a:	d107      	bne.n	800119c <HAL_RCC_OscConfig+0x78>
 800118c:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4baf      	ldr	r3, [pc, #700]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	0249      	lsls	r1, r1, #9
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e020      	b.n	80011de <HAL_RCC_OscConfig+0xba>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	23a0      	movs	r3, #160	; 0xa0
 80011a2:	02db      	lsls	r3, r3, #11
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d10e      	bne.n	80011c6 <HAL_RCC_OscConfig+0xa2>
 80011a8:	4ba9      	ldr	r3, [pc, #676]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4ba8      	ldr	r3, [pc, #672]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	02c9      	lsls	r1, r1, #11
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4ba5      	ldr	r3, [pc, #660]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0249      	lsls	r1, r1, #9
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0xba>
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	49a1      	ldr	r1, [pc, #644]	; (8001454 <HAL_RCC_OscConfig+0x330>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4b9f      	ldr	r3, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	499f      	ldr	r1, [pc, #636]	; (8001458 <HAL_RCC_OscConfig+0x334>)
 80011da:	400a      	ands	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d014      	beq.n	8001210 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fa89 	bl	80006fc <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fa84 	bl	80006fc <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e29e      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	4b93      	ldr	r3, [pc, #588]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xcc>
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fa74 	bl	80006fc <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121a:	f7ff fa6f 	bl	80006fc <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e289      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0xf6>
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d100      	bne.n	8001248 <HAL_RCC_OscConfig+0x124>
 8001246:	e099      	b.n	800137c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2238      	movs	r2, #56	; 0x38
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2203      	movs	r2, #3
 8001258:	4013      	ands	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b10      	cmp	r3, #16
 8001260:	d102      	bne.n	8001268 <HAL_RCC_OscConfig+0x144>
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d002      	beq.n	800126e <HAL_RCC_OscConfig+0x14a>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d135      	bne.n	80012da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4013      	ands	r3, r2
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x162>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e25c      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a74      	ldr	r2, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x338>)
 800128c:	4013      	ands	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	021a      	lsls	r2, r3, #8
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012a2:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_RCC_OscConfig+0x33c>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0adb      	lsrs	r3, r3, #11
 80012bc:	2207      	movs	r2, #7
 80012be:	4013      	ands	r3, r2
 80012c0:	4a68      	ldr	r2, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x340>)
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x344>)
 80012c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012c8:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_RCC_OscConfig+0x348>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff f9bb 	bl	8000648 <HAL_InitTick>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d051      	beq.n	800137a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e232      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d030      	beq.n	8001344 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012e2:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a5e      	ldr	r2, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x33c>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	0019      	movs	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012f6:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b55      	ldr	r3, [pc, #340]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	0049      	lsls	r1, r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff f9fa 	bl	80006fc <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff f9f5 	bl	80006fc <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e20f      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4013      	ands	r3, r2
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x338>)
 8001332:	4013      	ands	r3, r2
 8001334:	0019      	movs	r1, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	021a      	lsls	r2, r3, #8
 800133c:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	e01b      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800134a:	4949      	ldr	r1, [pc, #292]	; (8001470 <HAL_RCC_OscConfig+0x34c>)
 800134c:	400a      	ands	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff f9d4 	bl	80006fc <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff f9cf 	bl	80006fc <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1e9      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4013      	ands	r3, r2
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x236>
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2208      	movs	r2, #8
 8001382:	4013      	ands	r3, r2
 8001384:	d047      	beq.n	8001416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2238      	movs	r2, #56	; 0x38
 800138c:	4013      	ands	r3, r2
 800138e:	2b18      	cmp	r3, #24
 8001390:	d10a      	bne.n	80013a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	d03c      	beq.n	8001416 <HAL_RCC_OscConfig+0x2f2>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d138      	bne.n	8001416 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e1cb      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d019      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff f99e 	bl	80006fc <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff f999 	bl	80006fc <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1b3      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d0f1      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2a2>
 80013e2:	e018      	b.n	8001416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f984 	bl	80006fc <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff f97f 	bl	80006fc <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e199      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d1f1      	bne.n	80013fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2204      	movs	r2, #4
 800141c:	4013      	ands	r3, r2
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x2fe>
 8001420:	e0c6      	b.n	80015b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2238      	movs	r2, #56	; 0x38
 8001430:	4013      	ands	r3, r2
 8001432:	2b20      	cmp	r3, #32
 8001434:	d11e      	bne.n	8001474 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x32c>)
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x31e>
 8001440:	e0b6      	b.n	80015b0 <HAL_RCC_OscConfig+0x48c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d000      	beq.n	800144c <HAL_RCC_OscConfig+0x328>
 800144a:	e0b1      	b.n	80015b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e177      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
 8001450:	40021000 	.word	0x40021000
 8001454:	fffeffff 	.word	0xfffeffff
 8001458:	fffbffff 	.word	0xfffbffff
 800145c:	ffff80ff 	.word	0xffff80ff
 8001460:	ffffc7ff 	.word	0xffffc7ff
 8001464:	00f42400 	.word	0x00f42400
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001474:	4bb4      	ldr	r3, [pc, #720]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	055b      	lsls	r3, r3, #21
 800147c:	4013      	ands	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x360>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x362>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d011      	beq.n	80014ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4baf      	ldr	r3, [pc, #700]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800148c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148e:	4bae      	ldr	r3, [pc, #696]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0549      	lsls	r1, r1, #21
 8001494:	430a      	orrs	r2, r1
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
 8001498:	4bab      	ldr	r3, [pc, #684]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800149a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014a6:	231f      	movs	r3, #31
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ae:	4ba7      	ldr	r3, [pc, #668]	; (800174c <HAL_RCC_OscConfig+0x628>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d11a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ba:	4ba4      	ldr	r3, [pc, #656]	; (800174c <HAL_RCC_OscConfig+0x628>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4ba3      	ldr	r3, [pc, #652]	; (800174c <HAL_RCC_OscConfig+0x628>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0049      	lsls	r1, r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014c8:	f7ff f918 	bl	80006fc <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff f913 	bl	80006fc <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e12d      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e4:	4b99      	ldr	r3, [pc, #612]	; (800174c <HAL_RCC_OscConfig+0x628>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e2>
 80014f8:	4b93      	ldr	r3, [pc, #588]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80014fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80014fe:	2101      	movs	r1, #1
 8001500:	430a      	orrs	r2, r1
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x41c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x404>
 800150e:	4b8e      	ldr	r3, [pc, #568]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001512:	4b8d      	ldr	r3, [pc, #564]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001514:	2104      	movs	r1, #4
 8001516:	430a      	orrs	r2, r1
 8001518:	65da      	str	r2, [r3, #92]	; 0x5c
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800151c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800151e:	4b8a      	ldr	r3, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001520:	2101      	movs	r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	65da      	str	r2, [r3, #92]	; 0x5c
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x41c>
 8001528:	4b87      	ldr	r3, [pc, #540]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800152a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800152c:	4b86      	ldr	r3, [pc, #536]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800152e:	2101      	movs	r1, #1
 8001530:	438a      	bics	r2, r1
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c
 8001534:	4b84      	ldr	r3, [pc, #528]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001538:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800153a:	2104      	movs	r1, #4
 800153c:	438a      	bics	r2, r1
 800153e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d014      	beq.n	8001572 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff f8d8 	bl	80006fc <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001550:	e009      	b.n	8001566 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff f8d3 	bl	80006fc <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	4a7c      	ldr	r2, [pc, #496]	; (8001750 <HAL_RCC_OscConfig+0x62c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0ec      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001566:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x42e>
 8001570:	e013      	b.n	800159a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff f8c3 	bl	80006fc <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157a:	e009      	b.n	8001590 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f8be 	bl	80006fc <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_RCC_OscConfig+0x62c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0d7      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800159a:	231f      	movs	r3, #31
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015aa:	496a      	ldr	r1, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x630>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x496>
 80015b8:	e0c1      	b.n	800173e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d100      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4a4>
 80015c6:	e081      	b.n	80016cc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d156      	bne.n	800167e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015d6:	4960      	ldr	r1, [pc, #384]	; (8001758 <HAL_RCC_OscConfig+0x634>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff f88e 	bl	80006fc <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f889 	bl	80006fc <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0a3      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	049b      	lsls	r3, r3, #18
 8001600:	4013      	ands	r3, r2
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_RCC_OscConfig+0x638>)
 800160a:	4013      	ands	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1a      	ldr	r2, [r3, #32]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	431a      	orrs	r2, r3
 8001632:	4b45      	ldr	r3, [pc, #276]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001634:	430a      	orrs	r2, r1
 8001636:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0449      	lsls	r1, r1, #17
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0549      	lsls	r1, r1, #21
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff f852 	bl	80006fc <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff f84d 	bl	80006fc <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e067      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	049b      	lsls	r3, r3, #18
 8001678:	4013      	ands	r3, r2
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x53a>
 800167c:	e05f      	b.n	800173e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001684:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x634>)
 8001686:	400a      	ands	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001690:	2103      	movs	r1, #3
 8001692:	438a      	bics	r2, r1
 8001694:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 800169c:	4930      	ldr	r1, [pc, #192]	; (8001760 <HAL_RCC_OscConfig+0x63c>)
 800169e:	400a      	ands	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f82b 	bl	80006fc <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff f826 	bl	80006fc <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e040      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	049b      	lsls	r3, r3, #18
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x588>
 80016ca:	e038      	b.n	800173e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e033      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x624>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2203      	movs	r2, #3
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d126      	bne.n	800173a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2270      	movs	r2, #112	; 0x70
 80016f0:	401a      	ands	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11f      	bne.n	800173a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	23fe      	movs	r3, #254	; 0xfe
 80016fe:	01db      	lsls	r3, r3, #7
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d116      	bne.n	800173a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	23f8      	movs	r3, #248	; 0xf8
 8001710:	039b      	lsls	r3, r3, #14
 8001712:	401a      	ands	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d10e      	bne.n	800173a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	23e0      	movs	r3, #224	; 0xe0
 8001720:	051b      	lsls	r3, r3, #20
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	0f5b      	lsrs	r3, r3, #29
 8001730:	075a      	lsls	r2, r3, #29
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b008      	add	sp, #32
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	00001388 	.word	0x00001388
 8001754:	efffffff 	.word	0xefffffff
 8001758:	feffffff 	.word	0xfeffffff
 800175c:	11c1808c 	.word	0x11c1808c
 8001760:	eefeffff 	.word	0xeefeffff

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0e9      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2207      	movs	r2, #7
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d91e      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2207      	movs	r2, #7
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4b70      	ldr	r3, [pc, #448]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001798:	f7fe ffb0 	bl	80006fc <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a0:	e009      	b.n	80017b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a2:	f7fe ffab 	bl	80006fc <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_RCC_ClockConfig+0x1f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0ca      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2207      	movs	r2, #7
 80017bc:	4013      	ands	r3, r2
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1ee      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d015      	beq.n	80017fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	d006      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017d8:	4b60      	ldr	r3, [pc, #384]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	21e0      	movs	r1, #224	; 0xe0
 80017e0:	01c9      	lsls	r1, r1, #7
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_RCC_ClockConfig+0x1fc>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d057      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	029b      	lsls	r3, r3, #10
 8001814:	4013      	ands	r3, r2
 8001816:	d12b      	bne.n	8001870 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e097      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d107      	bne.n	8001834 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001824:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	049b      	lsls	r3, r3, #18
 800182c:	4013      	ands	r3, r2
 800182e:	d11f      	bne.n	8001870 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e08b      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4013      	ands	r3, r2
 8001846:	d113      	bne.n	8001870 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e07f      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d106      	bne.n	8001862 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d108      	bne.n	8001870 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e074      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e06d      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001870:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2207      	movs	r2, #7
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001884:	f7fe ff3a 	bl	80006fc <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188c:	e009      	b.n	80018a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7fe ff35 	bl	80006fc <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a2f      	ldr	r2, [pc, #188]	; (8001958 <HAL_RCC_ClockConfig+0x1f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e054      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2238      	movs	r2, #56	; 0x38
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1ec      	bne.n	800188e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2207      	movs	r2, #7
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d21e      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2207      	movs	r2, #7
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018d4:	f7fe ff12 	bl	80006fc <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018de:	f7fe ff0d 	bl	80006fc <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_RCC_ClockConfig+0x1f4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e02c      	b.n	800194c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2207      	movs	r2, #7
 80018f8:	4013      	ands	r3, r2
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2204      	movs	r2, #4
 8001906:	4013      	ands	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_RCC_ClockConfig+0x200>)
 8001910:	4013      	ands	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800191e:	f000 f829 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001922:	0001      	movs	r1, r0
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	220f      	movs	r2, #15
 800192c:	401a      	ands	r2, r3
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x204>)
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	58d3      	ldr	r3, [r2, r3]
 8001934:	221f      	movs	r2, #31
 8001936:	4013      	ands	r3, r2
 8001938:	000a      	movs	r2, r1
 800193a:	40da      	lsrs	r2, r3
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x208>)
 800193e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x20c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0018      	movs	r0, r3
 8001946:	f7fe fe7f 	bl	8000648 <HAL_InitTick>
 800194a:	0003      	movs	r3, r0
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40022000 	.word	0x40022000
 8001958:	00001388 	.word	0x00001388
 800195c:	40021000 	.word	0x40021000
 8001960:	fffff0ff 	.word	0xfffff0ff
 8001964:	ffff8fff 	.word	0xffff8fff
 8001968:	08003cf0 	.word	0x08003cf0
 800196c:	20000008 	.word	0x20000008
 8001970:	20000000 	.word	0x20000000

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2238      	movs	r2, #56	; 0x38
 8001980:	4013      	ands	r3, r2
 8001982:	d10f      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0adb      	lsrs	r3, r3, #11
 800198a:	2207      	movs	r2, #7
 800198c:	4013      	ands	r3, r2
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	4835      	ldr	r0, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xfc>)
 800199a:	f7fe fbb3 	bl	8000104 <__udivsi3>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e05d      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2238      	movs	r2, #56	; 0x38
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x100>)
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e054      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2238      	movs	r2, #56	; 0x38
 80019bc:	4013      	ands	r3, r2
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d138      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2203      	movs	r2, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	4824      	ldr	r0, [pc, #144]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x100>)
 80019e4:	f7fe fb8e 	bl	8000104 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	0019      	movs	r1, r3
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	227f      	movs	r2, #127	; 0x7f
 80019f4:	4013      	ands	r3, r2
 80019f6:	434b      	muls	r3, r1
 80019f8:	617b      	str	r3, [r7, #20]
        break;
 80019fa:	e00d      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	481c      	ldr	r0, [pc, #112]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a00:	f7fe fb80 	bl	8000104 <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	0019      	movs	r1, r3
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	227f      	movs	r2, #127	; 0x7f
 8001a10:	4013      	ands	r3, r2
 8001a12:	434b      	muls	r3, r1
 8001a14:	617b      	str	r3, [r7, #20]
        break;
 8001a16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0f5b      	lsrs	r3, r3, #29
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	3301      	adds	r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6978      	ldr	r0, [r7, #20]
 8001a2a:	f7fe fb6b 	bl	8000104 <__udivsi3>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e015      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2238      	movs	r2, #56	; 0x38
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d103      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2238      	movs	r2, #56	; 0x38
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b18      	cmp	r3, #24
 8001a52:	d103      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a54:	23fa      	movs	r3, #250	; 0xfa
 8001a56:	01db      	lsls	r3, r3, #7
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e001      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a60:	693b      	ldr	r3, [r7, #16]
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b006      	add	sp, #24
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a90:	f7ff fff2 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a94:	0004      	movs	r4, r0
 8001a96:	f7ff fb39 	bl	800110c <LL_RCC_GetAPB1Prescaler>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	0b1a      	lsrs	r2, r3, #12
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	58d3      	ldr	r3, [r2, r3]
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	40dc      	lsrs	r4, r3
 8001aaa:	0023      	movs	r3, r4
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	08003d30 	.word	0x08003d30

08001ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ac0:	2313      	movs	r3, #19
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ac8:	2312      	movs	r3, #18
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001adc:	e0a4      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2311      	movs	r3, #17
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4bc3      	ldr	r3, [pc, #780]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	055b      	lsls	r3, r3, #21
 8001aee:	4013      	ands	r3, r2
 8001af0:	d111      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4bc0      	ldr	r3, [pc, #768]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af6:	4bbf      	ldr	r3, [pc, #764]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0549      	lsls	r1, r1, #21
 8001afc:	430a      	orrs	r2, r1
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b00:	4bbc      	ldr	r3, [pc, #752]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2311      	movs	r3, #17
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b16:	4bb8      	ldr	r3, [pc, #736]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4bb7      	ldr	r3, [pc, #732]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0049      	lsls	r1, r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b24:	f7fe fdea 	bl	80006fc <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b2c:	e00b      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7fe fde5 	bl	80006fc <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d904      	bls.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001b3c:	2313      	movs	r3, #19
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2203      	movs	r2, #3
 8001b42:	701a      	strb	r2, [r3, #0]
        break;
 8001b44:	e005      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b46:	4bac      	ldr	r3, [pc, #688]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d0ed      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001b52:	2313      	movs	r3, #19
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d154      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b5c:	4ba5      	ldr	r3, [pc, #660]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b60:	23c0      	movs	r3, #192	; 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d019      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d014      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b78:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	4a9f      	ldr	r2, [pc, #636]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b82:	4b9c      	ldr	r3, [pc, #624]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b86:	4b9b      	ldr	r3, [pc, #620]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0249      	lsls	r1, r1, #9
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b90:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b94:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b96:	499a      	ldr	r1, [pc, #616]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b9c:	4b95      	ldr	r3, [pc, #596]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d016      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7fe fda7 	bl	80006fc <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	e00c      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe fda2 	bl	80006fc <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	4a91      	ldr	r2, [pc, #580]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d904      	bls.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001bc4:	2313      	movs	r3, #19
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	2203      	movs	r2, #3
 8001bca:	701a      	strb	r2, [r3, #0]
            break;
 8001bcc:	e004      	b.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0ed      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001bd8:	2313      	movs	r3, #19
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be2:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	4a85      	ldr	r2, [pc, #532]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf0:	4b80      	ldr	r3, [pc, #512]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf6:	e00c      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2213      	movs	r2, #19
 8001bfe:	18ba      	adds	r2, r7, r2
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e005      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c06:	2312      	movs	r3, #18
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2213      	movs	r2, #19
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c12:	2311      	movs	r3, #17
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c20:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c22:	4979      	ldr	r1, [pc, #484]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c32:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	2203      	movs	r2, #3
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c50:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	220c      	movs	r2, #12
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c6e:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	4a66      	ldr	r2, [pc, #408]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c8e:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4013      	ands	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cae:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ccc:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	4a51      	ldr	r2, [pc, #324]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d015      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	0899      	lsrs	r1, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1a      	ldr	r2, [r3, #32]
 8001cf8:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d106      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0249      	lsls	r1, r1, #9
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	031b      	lsls	r3, r3, #12
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	039b      	lsls	r3, r3, #14
 8001d40:	4013      	ands	r3, r2
 8001d42:	d016      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	03db      	lsls	r3, r3, #15
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0449      	lsls	r1, r1, #17
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	03db      	lsls	r3, r3, #15
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d016      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	045b      	lsls	r3, r3, #17
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d106      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0449      	lsls	r1, r1, #17
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d016      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	01db      	lsls	r3, r3, #7
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0249      	lsls	r1, r1, #9
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001de6:	2312      	movs	r3, #18
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b006      	add	sp, #24
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	fffffcff 	.word	0xfffffcff
 8001e00:	fffeffff 	.word	0xfffeffff
 8001e04:	00001388 	.word	0x00001388
 8001e08:	efffffff 	.word	0xefffffff
 8001e0c:	fffff3ff 	.word	0xfffff3ff
 8001e10:	fff3ffff 	.word	0xfff3ffff
 8001e14:	ffcfffff 	.word	0xffcfffff
 8001e18:	ffffcfff 	.word	0xffffcfff
 8001e1c:	ffbfffff 	.word	0xffbfffff
 8001e20:	feffffff 	.word	0xfeffffff
 8001e24:	ffff3fff 	.word	0xffff3fff

08001e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e046      	b.n	8001ec8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	589b      	ldr	r3, [r3, r2]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	227c      	movs	r2, #124	; 0x7c
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 fe74 	bl	8003b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	2124      	movs	r1, #36	; 0x24
 8001e5a:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2101      	movs	r1, #1
 8001e68:	438a      	bics	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f830 	bl	8001ed4 <UART_SetConfig>
 8001e74:	0003      	movs	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e024      	b.n	8001ec8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 f90d 	bl	80030a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <HAL_UART_Init+0xa8>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	212a      	movs	r1, #42	; 0x2a
 8001eaa:	438a      	bics	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f001 f9a5 	bl	8003210 <UART_CheckIdleState>
 8001ec6:	0003      	movs	r3, r0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	ffffb7ff 	.word	0xffffb7ff

08001ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	b09f      	sub	sp, #124	; 0x7c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee0:	2313      	movs	r3, #19
 8001ee2:	2258      	movs	r2, #88	; 0x58
 8001ee4:	18ba      	adds	r2, r7, r2
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 8001f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4bba      	ldr	r3, [pc, #744]	; (8002204 <UART_SetConfig+0x330>)
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4bb6      	ldr	r3, [pc, #728]	; (8002208 <UART_SetConfig+0x334>)
 8001f30:	401a      	ands	r2, r3
 8001f32:	0010      	movs	r0, r2
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	68d9      	ldr	r1, [r3, #12]
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4baf      	ldr	r3, [pc, #700]	; (800220c <UART_SetConfig+0x338>)
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d004      	beq.n	8001f5c <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	4bab      	ldr	r3, [pc, #684]	; (8002210 <UART_SetConfig+0x33c>)
 8001f64:	401a      	ands	r2, r3
 8001f66:	0011      	movs	r1, r2
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f78:	230f      	movs	r3, #15
 8001f7a:	439a      	bics	r2, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	0003      	movs	r3, r0
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <UART_SetConfig+0x340>)
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d12f      	bne.n	8001ff6 <UART_SetConfig+0x122>
 8001f96:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <UART_SetConfig+0x344>)
 8001f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d013      	beq.n	8001fca <UART_SetConfig+0xf6>
 8001fa2:	d304      	bcc.n	8001fae <UART_SetConfig+0xda>
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d009      	beq.n	8001fbc <UART_SetConfig+0xe8>
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d015      	beq.n	8001fd8 <UART_SetConfig+0x104>
 8001fac:	e01b      	b.n	8001fe6 <UART_SetConfig+0x112>
 8001fae:	231b      	movs	r3, #27
 8001fb0:	2258      	movs	r2, #88	; 0x58
 8001fb2:	18ba      	adds	r2, r7, r2
 8001fb4:	18d2      	adds	r2, r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	7013      	strb	r3, [r2, #0]
 8001fba:	e0b4      	b.n	8002126 <UART_SetConfig+0x252>
 8001fbc:	231b      	movs	r3, #27
 8001fbe:	2258      	movs	r2, #88	; 0x58
 8001fc0:	18ba      	adds	r2, r7, r2
 8001fc2:	18d2      	adds	r2, r2, r3
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	7013      	strb	r3, [r2, #0]
 8001fc8:	e0ad      	b.n	8002126 <UART_SetConfig+0x252>
 8001fca:	231b      	movs	r3, #27
 8001fcc:	2258      	movs	r2, #88	; 0x58
 8001fce:	18ba      	adds	r2, r7, r2
 8001fd0:	18d2      	adds	r2, r2, r3
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	7013      	strb	r3, [r2, #0]
 8001fd6:	e0a6      	b.n	8002126 <UART_SetConfig+0x252>
 8001fd8:	231b      	movs	r3, #27
 8001fda:	2258      	movs	r2, #88	; 0x58
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	18d2      	adds	r2, r2, r3
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	7013      	strb	r3, [r2, #0]
 8001fe4:	e09f      	b.n	8002126 <UART_SetConfig+0x252>
 8001fe6:	231b      	movs	r3, #27
 8001fe8:	2258      	movs	r2, #88	; 0x58
 8001fea:	18ba      	adds	r2, r7, r2
 8001fec:	18d2      	adds	r2, r2, r3
 8001fee:	2310      	movs	r3, #16
 8001ff0:	7013      	strb	r3, [r2, #0]
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	e097      	b.n	8002126 <UART_SetConfig+0x252>
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <UART_SetConfig+0x348>)
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d132      	bne.n	8002066 <UART_SetConfig+0x192>
 8002000:	4b85      	ldr	r3, [pc, #532]	; (8002218 <UART_SetConfig+0x344>)
 8002002:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002004:	230c      	movs	r3, #12
 8002006:	4013      	ands	r3, r2
 8002008:	2b04      	cmp	r3, #4
 800200a:	d016      	beq.n	800203a <UART_SetConfig+0x166>
 800200c:	d802      	bhi.n	8002014 <UART_SetConfig+0x140>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <UART_SetConfig+0x14a>
 8002012:	e020      	b.n	8002056 <UART_SetConfig+0x182>
 8002014:	2b08      	cmp	r3, #8
 8002016:	d009      	beq.n	800202c <UART_SetConfig+0x158>
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d015      	beq.n	8002048 <UART_SetConfig+0x174>
 800201c:	e01b      	b.n	8002056 <UART_SetConfig+0x182>
 800201e:	231b      	movs	r3, #27
 8002020:	2258      	movs	r2, #88	; 0x58
 8002022:	18ba      	adds	r2, r7, r2
 8002024:	18d2      	adds	r2, r2, r3
 8002026:	2300      	movs	r3, #0
 8002028:	7013      	strb	r3, [r2, #0]
 800202a:	e07c      	b.n	8002126 <UART_SetConfig+0x252>
 800202c:	231b      	movs	r3, #27
 800202e:	2258      	movs	r2, #88	; 0x58
 8002030:	18ba      	adds	r2, r7, r2
 8002032:	18d2      	adds	r2, r2, r3
 8002034:	2302      	movs	r3, #2
 8002036:	7013      	strb	r3, [r2, #0]
 8002038:	e075      	b.n	8002126 <UART_SetConfig+0x252>
 800203a:	231b      	movs	r3, #27
 800203c:	2258      	movs	r2, #88	; 0x58
 800203e:	18ba      	adds	r2, r7, r2
 8002040:	18d2      	adds	r2, r2, r3
 8002042:	2304      	movs	r3, #4
 8002044:	7013      	strb	r3, [r2, #0]
 8002046:	e06e      	b.n	8002126 <UART_SetConfig+0x252>
 8002048:	231b      	movs	r3, #27
 800204a:	2258      	movs	r2, #88	; 0x58
 800204c:	18ba      	adds	r2, r7, r2
 800204e:	18d2      	adds	r2, r2, r3
 8002050:	2308      	movs	r3, #8
 8002052:	7013      	strb	r3, [r2, #0]
 8002054:	e067      	b.n	8002126 <UART_SetConfig+0x252>
 8002056:	231b      	movs	r3, #27
 8002058:	2258      	movs	r2, #88	; 0x58
 800205a:	18ba      	adds	r2, r7, r2
 800205c:	18d2      	adds	r2, r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	7013      	strb	r3, [r2, #0]
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	e05f      	b.n	8002126 <UART_SetConfig+0x252>
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <UART_SetConfig+0x34c>)
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <UART_SetConfig+0x1aa>
 8002070:	231b      	movs	r3, #27
 8002072:	2258      	movs	r2, #88	; 0x58
 8002074:	18ba      	adds	r2, r7, r2
 8002076:	18d2      	adds	r2, r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	7013      	strb	r3, [r2, #0]
 800207c:	e053      	b.n	8002126 <UART_SetConfig+0x252>
 800207e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <UART_SetConfig+0x350>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <UART_SetConfig+0x1c2>
 8002088:	231b      	movs	r3, #27
 800208a:	2258      	movs	r2, #88	; 0x58
 800208c:	18ba      	adds	r2, r7, r2
 800208e:	18d2      	adds	r2, r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	7013      	strb	r3, [r2, #0]
 8002094:	e047      	b.n	8002126 <UART_SetConfig+0x252>
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <UART_SetConfig+0x338>)
 800209c:	429a      	cmp	r2, r3
 800209e:	d13c      	bne.n	800211a <UART_SetConfig+0x246>
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <UART_SetConfig+0x344>)
 80020a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	401a      	ands	r2, r3
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d01d      	beq.n	80020ee <UART_SetConfig+0x21a>
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d802      	bhi.n	80020c0 <UART_SetConfig+0x1ec>
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d009      	beq.n	80020d2 <UART_SetConfig+0x1fe>
 80020be:	e024      	b.n	800210a <UART_SetConfig+0x236>
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d00b      	beq.n	80020e0 <UART_SetConfig+0x20c>
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d015      	beq.n	80020fc <UART_SetConfig+0x228>
 80020d0:	e01b      	b.n	800210a <UART_SetConfig+0x236>
 80020d2:	231b      	movs	r3, #27
 80020d4:	2258      	movs	r2, #88	; 0x58
 80020d6:	18ba      	adds	r2, r7, r2
 80020d8:	18d2      	adds	r2, r2, r3
 80020da:	2300      	movs	r3, #0
 80020dc:	7013      	strb	r3, [r2, #0]
 80020de:	e022      	b.n	8002126 <UART_SetConfig+0x252>
 80020e0:	231b      	movs	r3, #27
 80020e2:	2258      	movs	r2, #88	; 0x58
 80020e4:	18ba      	adds	r2, r7, r2
 80020e6:	18d2      	adds	r2, r2, r3
 80020e8:	2302      	movs	r3, #2
 80020ea:	7013      	strb	r3, [r2, #0]
 80020ec:	e01b      	b.n	8002126 <UART_SetConfig+0x252>
 80020ee:	231b      	movs	r3, #27
 80020f0:	2258      	movs	r2, #88	; 0x58
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	18d2      	adds	r2, r2, r3
 80020f6:	2304      	movs	r3, #4
 80020f8:	7013      	strb	r3, [r2, #0]
 80020fa:	e014      	b.n	8002126 <UART_SetConfig+0x252>
 80020fc:	231b      	movs	r3, #27
 80020fe:	2258      	movs	r2, #88	; 0x58
 8002100:	18ba      	adds	r2, r7, r2
 8002102:	18d2      	adds	r2, r2, r3
 8002104:	2308      	movs	r3, #8
 8002106:	7013      	strb	r3, [r2, #0]
 8002108:	e00d      	b.n	8002126 <UART_SetConfig+0x252>
 800210a:	231b      	movs	r3, #27
 800210c:	2258      	movs	r2, #88	; 0x58
 800210e:	18ba      	adds	r2, r7, r2
 8002110:	18d2      	adds	r2, r2, r3
 8002112:	2310      	movs	r3, #16
 8002114:	7013      	strb	r3, [r2, #0]
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	e005      	b.n	8002126 <UART_SetConfig+0x252>
 800211a:	231b      	movs	r3, #27
 800211c:	2258      	movs	r2, #88	; 0x58
 800211e:	18ba      	adds	r2, r7, r2
 8002120:	18d2      	adds	r2, r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <UART_SetConfig+0x338>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <UART_SetConfig+0x260>
 8002130:	f000 fbcc 	bl	80028cc <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002134:	231b      	movs	r3, #27
 8002136:	2258      	movs	r2, #88	; 0x58
 8002138:	4694      	mov	ip, r2
 800213a:	44bc      	add	ip, r7
 800213c:	4463      	add	r3, ip
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d100      	bne.n	8002146 <UART_SetConfig+0x272>
 8002144:	e070      	b.n	8002228 <UART_SetConfig+0x354>
 8002146:	dc02      	bgt.n	800214e <UART_SetConfig+0x27a>
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <UART_SetConfig+0x288>
 800214c:	e15f      	b.n	800240e <UART_SetConfig+0x53a>
 800214e:	2b04      	cmp	r3, #4
 8002150:	d100      	bne.n	8002154 <UART_SetConfig+0x280>
 8002152:	e0b4      	b.n	80022be <UART_SetConfig+0x3ea>
 8002154:	2b08      	cmp	r3, #8
 8002156:	d100      	bne.n	800215a <UART_SetConfig+0x286>
 8002158:	e105      	b.n	8002366 <UART_SetConfig+0x492>
 800215a:	e158      	b.n	800240e <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800215c:	f7ff fc96 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002160:	0002      	movs	r2, r0
 8002162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <UART_SetConfig+0x320>
 800216a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b01      	cmp	r3, #1
 8002170:	d03e      	beq.n	80021f0 <UART_SetConfig+0x31c>
 8002172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b02      	cmp	r3, #2
 8002178:	d038      	beq.n	80021ec <UART_SetConfig+0x318>
 800217a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b03      	cmp	r3, #3
 8002180:	d032      	beq.n	80021e8 <UART_SetConfig+0x314>
 8002182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b04      	cmp	r3, #4
 8002188:	d02c      	beq.n	80021e4 <UART_SetConfig+0x310>
 800218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b05      	cmp	r3, #5
 8002190:	d026      	beq.n	80021e0 <UART_SetConfig+0x30c>
 8002192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	2b06      	cmp	r3, #6
 8002198:	d020      	beq.n	80021dc <UART_SetConfig+0x308>
 800219a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d01a      	beq.n	80021d8 <UART_SetConfig+0x304>
 80021a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d014      	beq.n	80021d4 <UART_SetConfig+0x300>
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d00e      	beq.n	80021d0 <UART_SetConfig+0x2fc>
 80021b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b0a      	cmp	r3, #10
 80021b8:	d008      	beq.n	80021cc <UART_SetConfig+0x2f8>
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2b0b      	cmp	r3, #11
 80021c0:	d102      	bne.n	80021c8 <UART_SetConfig+0x2f4>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	e016      	b.n	80021f6 <UART_SetConfig+0x322>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e014      	b.n	80021f6 <UART_SetConfig+0x322>
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	e012      	b.n	80021f6 <UART_SetConfig+0x322>
 80021d0:	2340      	movs	r3, #64	; 0x40
 80021d2:	e010      	b.n	80021f6 <UART_SetConfig+0x322>
 80021d4:	2320      	movs	r3, #32
 80021d6:	e00e      	b.n	80021f6 <UART_SetConfig+0x322>
 80021d8:	2310      	movs	r3, #16
 80021da:	e00c      	b.n	80021f6 <UART_SetConfig+0x322>
 80021dc:	230c      	movs	r3, #12
 80021de:	e00a      	b.n	80021f6 <UART_SetConfig+0x322>
 80021e0:	230a      	movs	r3, #10
 80021e2:	e008      	b.n	80021f6 <UART_SetConfig+0x322>
 80021e4:	2308      	movs	r3, #8
 80021e6:	e006      	b.n	80021f6 <UART_SetConfig+0x322>
 80021e8:	2306      	movs	r3, #6
 80021ea:	e004      	b.n	80021f6 <UART_SetConfig+0x322>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e002      	b.n	80021f6 <UART_SetConfig+0x322>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e000      	b.n	80021f6 <UART_SetConfig+0x322>
 80021f4:	2301      	movs	r3, #1
 80021f6:	0019      	movs	r1, r3
 80021f8:	0010      	movs	r0, r2
 80021fa:	f7fd ff83 	bl	8000104 <__udivsi3>
 80021fe:	0003      	movs	r3, r0
 8002200:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002202:	e10b      	b.n	800241c <UART_SetConfig+0x548>
 8002204:	cfff69f3 	.word	0xcfff69f3
 8002208:	ffffcfff 	.word	0xffffcfff
 800220c:	40008000 	.word	0x40008000
 8002210:	11fff4ff 	.word	0x11fff4ff
 8002214:	40013800 	.word	0x40013800
 8002218:	40021000 	.word	0x40021000
 800221c:	40004400 	.word	0x40004400
 8002220:	40004800 	.word	0x40004800
 8002224:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d043      	beq.n	80022b8 <UART_SetConfig+0x3e4>
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b01      	cmp	r3, #1
 8002236:	d03d      	beq.n	80022b4 <UART_SetConfig+0x3e0>
 8002238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b02      	cmp	r3, #2
 800223e:	d037      	beq.n	80022b0 <UART_SetConfig+0x3dc>
 8002240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b03      	cmp	r3, #3
 8002246:	d031      	beq.n	80022ac <UART_SetConfig+0x3d8>
 8002248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b04      	cmp	r3, #4
 800224e:	d02b      	beq.n	80022a8 <UART_SetConfig+0x3d4>
 8002250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2b05      	cmp	r3, #5
 8002256:	d025      	beq.n	80022a4 <UART_SetConfig+0x3d0>
 8002258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2b06      	cmp	r3, #6
 800225e:	d01f      	beq.n	80022a0 <UART_SetConfig+0x3cc>
 8002260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b07      	cmp	r3, #7
 8002266:	d019      	beq.n	800229c <UART_SetConfig+0x3c8>
 8002268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2b08      	cmp	r3, #8
 800226e:	d013      	beq.n	8002298 <UART_SetConfig+0x3c4>
 8002270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2b09      	cmp	r3, #9
 8002276:	d00d      	beq.n	8002294 <UART_SetConfig+0x3c0>
 8002278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b0a      	cmp	r3, #10
 800227e:	d007      	beq.n	8002290 <UART_SetConfig+0x3bc>
 8002280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b0b      	cmp	r3, #11
 8002286:	d101      	bne.n	800228c <UART_SetConfig+0x3b8>
 8002288:	4baa      	ldr	r3, [pc, #680]	; (8002534 <UART_SetConfig+0x660>)
 800228a:	e016      	b.n	80022ba <UART_SetConfig+0x3e6>
 800228c:	4baa      	ldr	r3, [pc, #680]	; (8002538 <UART_SetConfig+0x664>)
 800228e:	e014      	b.n	80022ba <UART_SetConfig+0x3e6>
 8002290:	4baa      	ldr	r3, [pc, #680]	; (800253c <UART_SetConfig+0x668>)
 8002292:	e012      	b.n	80022ba <UART_SetConfig+0x3e6>
 8002294:	4baa      	ldr	r3, [pc, #680]	; (8002540 <UART_SetConfig+0x66c>)
 8002296:	e010      	b.n	80022ba <UART_SetConfig+0x3e6>
 8002298:	4baa      	ldr	r3, [pc, #680]	; (8002544 <UART_SetConfig+0x670>)
 800229a:	e00e      	b.n	80022ba <UART_SetConfig+0x3e6>
 800229c:	4baa      	ldr	r3, [pc, #680]	; (8002548 <UART_SetConfig+0x674>)
 800229e:	e00c      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022a0:	4baa      	ldr	r3, [pc, #680]	; (800254c <UART_SetConfig+0x678>)
 80022a2:	e00a      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022a4:	4baa      	ldr	r3, [pc, #680]	; (8002550 <UART_SetConfig+0x67c>)
 80022a6:	e008      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022a8:	4baa      	ldr	r3, [pc, #680]	; (8002554 <UART_SetConfig+0x680>)
 80022aa:	e006      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022ac:	4baa      	ldr	r3, [pc, #680]	; (8002558 <UART_SetConfig+0x684>)
 80022ae:	e004      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022b0:	4baa      	ldr	r3, [pc, #680]	; (800255c <UART_SetConfig+0x688>)
 80022b2:	e002      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022b4:	4baa      	ldr	r3, [pc, #680]	; (8002560 <UART_SetConfig+0x68c>)
 80022b6:	e000      	b.n	80022ba <UART_SetConfig+0x3e6>
 80022b8:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <UART_SetConfig+0x664>)
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80022bc:	e0ae      	b.n	800241c <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80022be:	f7ff fb59 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 80022c2:	0002      	movs	r2, r0
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d044      	beq.n	8002356 <UART_SetConfig+0x482>
 80022cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d03e      	beq.n	8002352 <UART_SetConfig+0x47e>
 80022d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d038      	beq.n	800234e <UART_SetConfig+0x47a>
 80022dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d032      	beq.n	800234a <UART_SetConfig+0x476>
 80022e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d02c      	beq.n	8002346 <UART_SetConfig+0x472>
 80022ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d026      	beq.n	8002342 <UART_SetConfig+0x46e>
 80022f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d020      	beq.n	800233e <UART_SetConfig+0x46a>
 80022fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b07      	cmp	r3, #7
 8002302:	d01a      	beq.n	800233a <UART_SetConfig+0x466>
 8002304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b08      	cmp	r3, #8
 800230a:	d014      	beq.n	8002336 <UART_SetConfig+0x462>
 800230c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b09      	cmp	r3, #9
 8002312:	d00e      	beq.n	8002332 <UART_SetConfig+0x45e>
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b0a      	cmp	r3, #10
 800231a:	d008      	beq.n	800232e <UART_SetConfig+0x45a>
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b0b      	cmp	r3, #11
 8002322:	d102      	bne.n	800232a <UART_SetConfig+0x456>
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	e016      	b.n	8002358 <UART_SetConfig+0x484>
 800232a:	2301      	movs	r3, #1
 800232c:	e014      	b.n	8002358 <UART_SetConfig+0x484>
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	e012      	b.n	8002358 <UART_SetConfig+0x484>
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	e010      	b.n	8002358 <UART_SetConfig+0x484>
 8002336:	2320      	movs	r3, #32
 8002338:	e00e      	b.n	8002358 <UART_SetConfig+0x484>
 800233a:	2310      	movs	r3, #16
 800233c:	e00c      	b.n	8002358 <UART_SetConfig+0x484>
 800233e:	230c      	movs	r3, #12
 8002340:	e00a      	b.n	8002358 <UART_SetConfig+0x484>
 8002342:	230a      	movs	r3, #10
 8002344:	e008      	b.n	8002358 <UART_SetConfig+0x484>
 8002346:	2308      	movs	r3, #8
 8002348:	e006      	b.n	8002358 <UART_SetConfig+0x484>
 800234a:	2306      	movs	r3, #6
 800234c:	e004      	b.n	8002358 <UART_SetConfig+0x484>
 800234e:	2304      	movs	r3, #4
 8002350:	e002      	b.n	8002358 <UART_SetConfig+0x484>
 8002352:	2302      	movs	r3, #2
 8002354:	e000      	b.n	8002358 <UART_SetConfig+0x484>
 8002356:	2301      	movs	r3, #1
 8002358:	0019      	movs	r1, r3
 800235a:	0010      	movs	r0, r2
 800235c:	f7fd fed2 	bl	8000104 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002364:	e05a      	b.n	800241c <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d04b      	beq.n	8002406 <UART_SetConfig+0x532>
 800236e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d044      	beq.n	8002400 <UART_SetConfig+0x52c>
 8002376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b02      	cmp	r3, #2
 800237c:	d03d      	beq.n	80023fa <UART_SetConfig+0x526>
 800237e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b03      	cmp	r3, #3
 8002384:	d037      	beq.n	80023f6 <UART_SetConfig+0x522>
 8002386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d030      	beq.n	80023f0 <UART_SetConfig+0x51c>
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b05      	cmp	r3, #5
 8002394:	d02a      	beq.n	80023ec <UART_SetConfig+0x518>
 8002396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b06      	cmp	r3, #6
 800239c:	d024      	beq.n	80023e8 <UART_SetConfig+0x514>
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d01d      	beq.n	80023e2 <UART_SetConfig+0x50e>
 80023a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d016      	beq.n	80023dc <UART_SetConfig+0x508>
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d00f      	beq.n	80023d6 <UART_SetConfig+0x502>
 80023b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	d008      	beq.n	80023d0 <UART_SetConfig+0x4fc>
 80023be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b0b      	cmp	r3, #11
 80023c4:	d101      	bne.n	80023ca <UART_SetConfig+0x4f6>
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	e01f      	b.n	800240a <UART_SetConfig+0x536>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	e01c      	b.n	800240a <UART_SetConfig+0x536>
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	e019      	b.n	800240a <UART_SetConfig+0x536>
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	e016      	b.n	800240a <UART_SetConfig+0x536>
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	e013      	b.n	800240a <UART_SetConfig+0x536>
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	e010      	b.n	800240a <UART_SetConfig+0x536>
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <UART_SetConfig+0x690>)
 80023ea:	e00e      	b.n	800240a <UART_SetConfig+0x536>
 80023ec:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <UART_SetConfig+0x694>)
 80023ee:	e00c      	b.n	800240a <UART_SetConfig+0x536>
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	e009      	b.n	800240a <UART_SetConfig+0x536>
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <UART_SetConfig+0x698>)
 80023f8:	e007      	b.n	800240a <UART_SetConfig+0x536>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	e004      	b.n	800240a <UART_SetConfig+0x536>
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	01db      	lsls	r3, r3, #7
 8002404:	e001      	b.n	800240a <UART_SetConfig+0x536>
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 800240c:	e006      	b.n	800241c <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 800240e:	2313      	movs	r3, #19
 8002410:	2258      	movs	r2, #88	; 0x58
 8002412:	18ba      	adds	r2, r7, r2
 8002414:	18d2      	adds	r2, r2, r3
 8002416:	2301      	movs	r3, #1
 8002418:	7013      	strb	r3, [r2, #0]
        break;
 800241a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800241c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <UART_SetConfig+0x552>
 8002422:	f000 fe09 	bl	8003038 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	0013      	movs	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	189a      	adds	r2, r3, r2
 8002430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002432:	4293      	cmp	r3, r2
 8002434:	d305      	bcc.n	8002442 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800243c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800243e:	4293      	cmp	r3, r2
 8002440:	d908      	bls.n	8002454 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002442:	2313      	movs	r3, #19
 8002444:	2258      	movs	r2, #88	; 0x58
 8002446:	4694      	mov	ip, r2
 8002448:	44bc      	add	ip, r7
 800244a:	4463      	add	r3, ip
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	f000 fdf2 	bl	8003038 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002454:	231b      	movs	r3, #27
 8002456:	2258      	movs	r2, #88	; 0x58
 8002458:	4694      	mov	ip, r2
 800245a:	44bc      	add	ip, r7
 800245c:	4463      	add	r3, ip
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d100      	bne.n	8002466 <UART_SetConfig+0x592>
 8002464:	e0a9      	b.n	80025ba <UART_SetConfig+0x6e6>
 8002466:	dc02      	bgt.n	800246e <UART_SetConfig+0x59a>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <UART_SetConfig+0x5a8>
 800246c:	e20f      	b.n	800288e <UART_SetConfig+0x9ba>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d100      	bne.n	8002474 <UART_SetConfig+0x5a0>
 8002472:	e10f      	b.n	8002694 <UART_SetConfig+0x7c0>
 8002474:	2b08      	cmp	r3, #8
 8002476:	d100      	bne.n	800247a <UART_SetConfig+0x5a6>
 8002478:	e192      	b.n	80027a0 <UART_SetConfig+0x8cc>
 800247a:	e208      	b.n	800288e <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800247c:	f7ff fb06 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002480:	0003      	movs	r3, r0
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
 8002484:	2300      	movs	r3, #0
 8002486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d100      	bne.n	8002492 <UART_SetConfig+0x5be>
 8002490:	e06e      	b.n	8002570 <UART_SetConfig+0x69c>
 8002492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b01      	cmp	r3, #1
 8002498:	d049      	beq.n	800252e <UART_SetConfig+0x65a>
 800249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d042      	beq.n	8002528 <UART_SetConfig+0x654>
 80024a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d03b      	beq.n	8002522 <UART_SetConfig+0x64e>
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d034      	beq.n	800251c <UART_SetConfig+0x648>
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d02d      	beq.n	8002516 <UART_SetConfig+0x642>
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d026      	beq.n	8002510 <UART_SetConfig+0x63c>
 80024c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	2b07      	cmp	r3, #7
 80024c8:	d01f      	beq.n	800250a <UART_SetConfig+0x636>
 80024ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d018      	beq.n	8002504 <UART_SetConfig+0x630>
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	d011      	beq.n	80024fe <UART_SetConfig+0x62a>
 80024da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d00a      	beq.n	80024f8 <UART_SetConfig+0x624>
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b0b      	cmp	r3, #11
 80024e8:	d103      	bne.n	80024f2 <UART_SetConfig+0x61e>
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2400      	movs	r4, #0
 80024f0:	e040      	b.n	8002574 <UART_SetConfig+0x6a0>
 80024f2:	2301      	movs	r3, #1
 80024f4:	2400      	movs	r4, #0
 80024f6:	e03d      	b.n	8002574 <UART_SetConfig+0x6a0>
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	2400      	movs	r4, #0
 80024fc:	e03a      	b.n	8002574 <UART_SetConfig+0x6a0>
 80024fe:	2340      	movs	r3, #64	; 0x40
 8002500:	2400      	movs	r4, #0
 8002502:	e037      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002504:	2320      	movs	r3, #32
 8002506:	2400      	movs	r4, #0
 8002508:	e034      	b.n	8002574 <UART_SetConfig+0x6a0>
 800250a:	2310      	movs	r3, #16
 800250c:	2400      	movs	r4, #0
 800250e:	e031      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002510:	230c      	movs	r3, #12
 8002512:	2400      	movs	r4, #0
 8002514:	e02e      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002516:	230a      	movs	r3, #10
 8002518:	2400      	movs	r4, #0
 800251a:	e02b      	b.n	8002574 <UART_SetConfig+0x6a0>
 800251c:	2308      	movs	r3, #8
 800251e:	2400      	movs	r4, #0
 8002520:	e028      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002522:	2306      	movs	r3, #6
 8002524:	2400      	movs	r4, #0
 8002526:	e025      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002528:	2304      	movs	r3, #4
 800252a:	2400      	movs	r4, #0
 800252c:	e022      	b.n	8002574 <UART_SetConfig+0x6a0>
 800252e:	2302      	movs	r3, #2
 8002530:	2400      	movs	r4, #0
 8002532:	e01f      	b.n	8002574 <UART_SetConfig+0x6a0>
 8002534:	0000f424 	.word	0x0000f424
 8002538:	00f42400 	.word	0x00f42400
 800253c:	0001e848 	.word	0x0001e848
 8002540:	0003d090 	.word	0x0003d090
 8002544:	0007a120 	.word	0x0007a120
 8002548:	000f4240 	.word	0x000f4240
 800254c:	00145855 	.word	0x00145855
 8002550:	00186a00 	.word	0x00186a00
 8002554:	001e8480 	.word	0x001e8480
 8002558:	0028b0aa 	.word	0x0028b0aa
 800255c:	003d0900 	.word	0x003d0900
 8002560:	007a1200 	.word	0x007a1200
 8002564:	00000aaa 	.word	0x00000aaa
 8002568:	00000ccc 	.word	0x00000ccc
 800256c:	00001555 	.word	0x00001555
 8002570:	2301      	movs	r3, #1
 8002572:	2400      	movs	r4, #0
 8002574:	001a      	movs	r2, r3
 8002576:	0023      	movs	r3, r4
 8002578:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800257a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800257c:	f7fd ff38 	bl	80003f0 <__aeabi_uldivmod>
 8002580:	0003      	movs	r3, r0
 8002582:	000c      	movs	r4, r1
 8002584:	0e1a      	lsrs	r2, r3, #24
 8002586:	0226      	lsls	r6, r4, #8
 8002588:	4316      	orrs	r6, r2
 800258a:	021d      	lsls	r5, r3, #8
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
 8002594:	2300      	movs	r3, #0
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
 8002598:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800259a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800259c:	1940      	adds	r0, r0, r5
 800259e:	4171      	adcs	r1, r6
 80025a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a6:	2300      	movs	r3, #0
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ae:	f7fd ff1f 	bl	80003f0 <__aeabi_uldivmod>
 80025b2:	0003      	movs	r3, r0
 80025b4:	000c      	movs	r4, r1
 80025b6:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 80025b8:	e171      	b.n	800289e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d04f      	beq.n	8002662 <UART_SetConfig+0x78e>
 80025c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d048      	beq.n	800265c <UART_SetConfig+0x788>
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d041      	beq.n	8002656 <UART_SetConfig+0x782>
 80025d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d03a      	beq.n	8002650 <UART_SetConfig+0x77c>
 80025da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d033      	beq.n	800264a <UART_SetConfig+0x776>
 80025e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d02c      	beq.n	8002644 <UART_SetConfig+0x770>
 80025ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d025      	beq.n	800263e <UART_SetConfig+0x76a>
 80025f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d01e      	beq.n	8002638 <UART_SetConfig+0x764>
 80025fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d017      	beq.n	8002632 <UART_SetConfig+0x75e>
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b09      	cmp	r3, #9
 8002608:	d010      	beq.n	800262c <UART_SetConfig+0x758>
 800260a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d009      	beq.n	8002626 <UART_SetConfig+0x752>
 8002612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b0b      	cmp	r3, #11
 8002618:	d102      	bne.n	8002620 <UART_SetConfig+0x74c>
 800261a:	4bba      	ldr	r3, [pc, #744]	; (8002904 <UART_SetConfig+0xa30>)
 800261c:	2400      	movs	r4, #0
 800261e:	e022      	b.n	8002666 <UART_SetConfig+0x792>
 8002620:	4bb9      	ldr	r3, [pc, #740]	; (8002908 <UART_SetConfig+0xa34>)
 8002622:	2400      	movs	r4, #0
 8002624:	e01f      	b.n	8002666 <UART_SetConfig+0x792>
 8002626:	4bb9      	ldr	r3, [pc, #740]	; (800290c <UART_SetConfig+0xa38>)
 8002628:	2400      	movs	r4, #0
 800262a:	e01c      	b.n	8002666 <UART_SetConfig+0x792>
 800262c:	4bb8      	ldr	r3, [pc, #736]	; (8002910 <UART_SetConfig+0xa3c>)
 800262e:	2400      	movs	r4, #0
 8002630:	e019      	b.n	8002666 <UART_SetConfig+0x792>
 8002632:	4bb8      	ldr	r3, [pc, #736]	; (8002914 <UART_SetConfig+0xa40>)
 8002634:	2400      	movs	r4, #0
 8002636:	e016      	b.n	8002666 <UART_SetConfig+0x792>
 8002638:	4bb7      	ldr	r3, [pc, #732]	; (8002918 <UART_SetConfig+0xa44>)
 800263a:	2400      	movs	r4, #0
 800263c:	e013      	b.n	8002666 <UART_SetConfig+0x792>
 800263e:	4bb7      	ldr	r3, [pc, #732]	; (800291c <UART_SetConfig+0xa48>)
 8002640:	2400      	movs	r4, #0
 8002642:	e010      	b.n	8002666 <UART_SetConfig+0x792>
 8002644:	4bb6      	ldr	r3, [pc, #728]	; (8002920 <UART_SetConfig+0xa4c>)
 8002646:	2400      	movs	r4, #0
 8002648:	e00d      	b.n	8002666 <UART_SetConfig+0x792>
 800264a:	4bb6      	ldr	r3, [pc, #728]	; (8002924 <UART_SetConfig+0xa50>)
 800264c:	2400      	movs	r4, #0
 800264e:	e00a      	b.n	8002666 <UART_SetConfig+0x792>
 8002650:	4bb5      	ldr	r3, [pc, #724]	; (8002928 <UART_SetConfig+0xa54>)
 8002652:	2400      	movs	r4, #0
 8002654:	e007      	b.n	8002666 <UART_SetConfig+0x792>
 8002656:	4bb5      	ldr	r3, [pc, #724]	; (800292c <UART_SetConfig+0xa58>)
 8002658:	2400      	movs	r4, #0
 800265a:	e004      	b.n	8002666 <UART_SetConfig+0x792>
 800265c:	4bb4      	ldr	r3, [pc, #720]	; (8002930 <UART_SetConfig+0xa5c>)
 800265e:	2400      	movs	r4, #0
 8002660:	e001      	b.n	8002666 <UART_SetConfig+0x792>
 8002662:	4ba9      	ldr	r3, [pc, #676]	; (8002908 <UART_SetConfig+0xa34>)
 8002664:	2400      	movs	r4, #0
 8002666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002668:	6852      	ldr	r2, [r2, #4]
 800266a:	0852      	lsrs	r2, r2, #1
 800266c:	633a      	str	r2, [r7, #48]	; 0x30
 800266e:	2200      	movs	r2, #0
 8002670:	637a      	str	r2, [r7, #52]	; 0x34
 8002672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	4161      	adcs	r1, r4
 800267a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	f7fd feb2 	bl	80003f0 <__aeabi_uldivmod>
 800268c:	0003      	movs	r3, r0
 800268e:	000c      	movs	r4, r1
 8002690:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002692:	e104      	b.n	800289e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002694:	f7ff f96e 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8002698:	0003      	movs	r3, r0
 800269a:	623b      	str	r3, [r7, #32]
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d050      	beq.n	800274a <UART_SetConfig+0x876>
 80026a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d049      	beq.n	8002744 <UART_SetConfig+0x870>
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d042      	beq.n	800273e <UART_SetConfig+0x86a>
 80026b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d03b      	beq.n	8002738 <UART_SetConfig+0x864>
 80026c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d034      	beq.n	8002732 <UART_SetConfig+0x85e>
 80026c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d02d      	beq.n	800272c <UART_SetConfig+0x858>
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d026      	beq.n	8002726 <UART_SetConfig+0x852>
 80026d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d01f      	beq.n	8002720 <UART_SetConfig+0x84c>
 80026e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d018      	beq.n	800271a <UART_SetConfig+0x846>
 80026e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d011      	beq.n	8002714 <UART_SetConfig+0x840>
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d00a      	beq.n	800270e <UART_SetConfig+0x83a>
 80026f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b0b      	cmp	r3, #11
 80026fe:	d103      	bne.n	8002708 <UART_SetConfig+0x834>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2400      	movs	r4, #0
 8002706:	e022      	b.n	800274e <UART_SetConfig+0x87a>
 8002708:	2301      	movs	r3, #1
 800270a:	2400      	movs	r4, #0
 800270c:	e01f      	b.n	800274e <UART_SetConfig+0x87a>
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	2400      	movs	r4, #0
 8002712:	e01c      	b.n	800274e <UART_SetConfig+0x87a>
 8002714:	2340      	movs	r3, #64	; 0x40
 8002716:	2400      	movs	r4, #0
 8002718:	e019      	b.n	800274e <UART_SetConfig+0x87a>
 800271a:	2320      	movs	r3, #32
 800271c:	2400      	movs	r4, #0
 800271e:	e016      	b.n	800274e <UART_SetConfig+0x87a>
 8002720:	2310      	movs	r3, #16
 8002722:	2400      	movs	r4, #0
 8002724:	e013      	b.n	800274e <UART_SetConfig+0x87a>
 8002726:	230c      	movs	r3, #12
 8002728:	2400      	movs	r4, #0
 800272a:	e010      	b.n	800274e <UART_SetConfig+0x87a>
 800272c:	230a      	movs	r3, #10
 800272e:	2400      	movs	r4, #0
 8002730:	e00d      	b.n	800274e <UART_SetConfig+0x87a>
 8002732:	2308      	movs	r3, #8
 8002734:	2400      	movs	r4, #0
 8002736:	e00a      	b.n	800274e <UART_SetConfig+0x87a>
 8002738:	2306      	movs	r3, #6
 800273a:	2400      	movs	r4, #0
 800273c:	e007      	b.n	800274e <UART_SetConfig+0x87a>
 800273e:	2304      	movs	r3, #4
 8002740:	2400      	movs	r4, #0
 8002742:	e004      	b.n	800274e <UART_SetConfig+0x87a>
 8002744:	2302      	movs	r3, #2
 8002746:	2400      	movs	r4, #0
 8002748:	e001      	b.n	800274e <UART_SetConfig+0x87a>
 800274a:	2301      	movs	r3, #1
 800274c:	2400      	movs	r4, #0
 800274e:	001a      	movs	r2, r3
 8002750:	0023      	movs	r3, r4
 8002752:	6a38      	ldr	r0, [r7, #32]
 8002754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002756:	f7fd fe4b 	bl	80003f0 <__aeabi_uldivmod>
 800275a:	0003      	movs	r3, r0
 800275c:	000c      	movs	r4, r1
 800275e:	0e1a      	lsrs	r2, r3, #24
 8002760:	0221      	lsls	r1, r4, #8
 8002762:	6579      	str	r1, [r7, #84]	; 0x54
 8002764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002766:	4311      	orrs	r1, r2
 8002768:	6579      	str	r1, [r7, #84]	; 0x54
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	653b      	str	r3, [r7, #80]	; 0x50
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800277c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	69fc      	ldr	r4, [r7, #28]
 8002782:	18c0      	adds	r0, r0, r3
 8002784:	4161      	adcs	r1, r4
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f7fd fe2c 	bl	80003f0 <__aeabi_uldivmod>
 8002798:	0003      	movs	r3, r0
 800279a:	000c      	movs	r4, r1
 800279c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800279e:	e07e      	b.n	800289e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d058      	beq.n	800285a <UART_SetConfig+0x986>
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d050      	beq.n	8002852 <UART_SetConfig+0x97e>
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d048      	beq.n	800284a <UART_SetConfig+0x976>
 80027b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d041      	beq.n	8002844 <UART_SetConfig+0x970>
 80027c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d039      	beq.n	800283c <UART_SetConfig+0x968>
 80027c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d032      	beq.n	8002836 <UART_SetConfig+0x962>
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d02b      	beq.n	8002830 <UART_SetConfig+0x95c>
 80027d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2b07      	cmp	r3, #7
 80027de:	d023      	beq.n	8002828 <UART_SetConfig+0x954>
 80027e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d01b      	beq.n	8002820 <UART_SetConfig+0x94c>
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d013      	beq.n	8002818 <UART_SetConfig+0x944>
 80027f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b0a      	cmp	r3, #10
 80027f6:	d00b      	beq.n	8002810 <UART_SetConfig+0x93c>
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d103      	bne.n	8002808 <UART_SetConfig+0x934>
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	2400      	movs	r4, #0
 8002806:	e02b      	b.n	8002860 <UART_SetConfig+0x98c>
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	2400      	movs	r4, #0
 800280e:	e027      	b.n	8002860 <UART_SetConfig+0x98c>
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	025b      	lsls	r3, r3, #9
 8002814:	2400      	movs	r4, #0
 8002816:	e023      	b.n	8002860 <UART_SetConfig+0x98c>
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	029b      	lsls	r3, r3, #10
 800281c:	2400      	movs	r4, #0
 800281e:	e01f      	b.n	8002860 <UART_SetConfig+0x98c>
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	02db      	lsls	r3, r3, #11
 8002824:	2400      	movs	r4, #0
 8002826:	e01b      	b.n	8002860 <UART_SetConfig+0x98c>
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	031b      	lsls	r3, r3, #12
 800282c:	2400      	movs	r4, #0
 800282e:	e017      	b.n	8002860 <UART_SetConfig+0x98c>
 8002830:	4b40      	ldr	r3, [pc, #256]	; (8002934 <UART_SetConfig+0xa60>)
 8002832:	2400      	movs	r4, #0
 8002834:	e014      	b.n	8002860 <UART_SetConfig+0x98c>
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <UART_SetConfig+0xa64>)
 8002838:	2400      	movs	r4, #0
 800283a:	e011      	b.n	8002860 <UART_SetConfig+0x98c>
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	035b      	lsls	r3, r3, #13
 8002840:	2400      	movs	r4, #0
 8002842:	e00d      	b.n	8002860 <UART_SetConfig+0x98c>
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <UART_SetConfig+0xa68>)
 8002846:	2400      	movs	r4, #0
 8002848:	e00a      	b.n	8002860 <UART_SetConfig+0x98c>
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	039b      	lsls	r3, r3, #14
 800284e:	2400      	movs	r4, #0
 8002850:	e006      	b.n	8002860 <UART_SetConfig+0x98c>
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	03db      	lsls	r3, r3, #15
 8002856:	2400      	movs	r4, #0
 8002858:	e002      	b.n	8002860 <UART_SetConfig+0x98c>
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	2400      	movs	r4, #0
 8002860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002862:	6852      	ldr	r2, [r2, #4]
 8002864:	0852      	lsrs	r2, r2, #1
 8002866:	60ba      	str	r2, [r7, #8]
 8002868:	2200      	movs	r2, #0
 800286a:	60fa      	str	r2, [r7, #12]
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	68f9      	ldr	r1, [r7, #12]
 8002870:	18c0      	adds	r0, r0, r3
 8002872:	4161      	adcs	r1, r4
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f7fd fdb5 	bl	80003f0 <__aeabi_uldivmod>
 8002886:	0003      	movs	r3, r0
 8002888:	000c      	movs	r4, r1
 800288a:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800288c:	e007      	b.n	800289e <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 800288e:	2313      	movs	r3, #19
 8002890:	2258      	movs	r2, #88	; 0x58
 8002892:	4694      	mov	ip, r2
 8002894:	44bc      	add	ip, r7
 8002896:	4463      	add	r3, ip
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
            break;
 800289c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <UART_SetConfig+0xa6c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d909      	bls.n	80028ba <UART_SetConfig+0x9e6>
 80028a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <UART_SetConfig+0xa70>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d805      	bhi.n	80028ba <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 80028ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	f000 fbbf 	bl	8003038 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 80028ba:	2313      	movs	r3, #19
 80028bc:	2258      	movs	r2, #88	; 0x58
 80028be:	4694      	mov	ip, r2
 80028c0:	44bc      	add	ip, r7
 80028c2:	4463      	add	r3, ip
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	f000 fbb6 	bl	8003038 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d000      	beq.n	80028da <UART_SetConfig+0xa06>
 80028d8:	e1e4      	b.n	8002ca4 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 80028da:	231b      	movs	r3, #27
 80028dc:	2258      	movs	r2, #88	; 0x58
 80028de:	4694      	mov	ip, r2
 80028e0:	44bc      	add	ip, r7
 80028e2:	4463      	add	r3, ip
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d100      	bne.n	80028ec <UART_SetConfig+0xa18>
 80028ea:	e08e      	b.n	8002a0a <UART_SetConfig+0xb36>
 80028ec:	dc02      	bgt.n	80028f4 <UART_SetConfig+0xa20>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02a      	beq.n	8002948 <UART_SetConfig+0xa74>
 80028f2:	e1a3      	b.n	8002c3c <UART_SetConfig+0xd68>
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d100      	bne.n	80028fa <UART_SetConfig+0xa26>
 80028f8:	e0de      	b.n	8002ab8 <UART_SetConfig+0xbe4>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d100      	bne.n	8002900 <UART_SetConfig+0xa2c>
 80028fe:	e13c      	b.n	8002b7a <UART_SetConfig+0xca6>
 8002900:	e19c      	b.n	8002c3c <UART_SetConfig+0xd68>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	00f42400 	.word	0x00f42400
 8002908:	f4240000 	.word	0xf4240000
 800290c:	01e84800 	.word	0x01e84800
 8002910:	03d09000 	.word	0x03d09000
 8002914:	07a12000 	.word	0x07a12000
 8002918:	0f424000 	.word	0x0f424000
 800291c:	14585500 	.word	0x14585500
 8002920:	186a0000 	.word	0x186a0000
 8002924:	1e848000 	.word	0x1e848000
 8002928:	28b0aa00 	.word	0x28b0aa00
 800292c:	3d090000 	.word	0x3d090000
 8002930:	7a120000 	.word	0x7a120000
 8002934:	000aaa00 	.word	0x000aaa00
 8002938:	000ccc00 	.word	0x000ccc00
 800293c:	00155500 	.word	0x00155500
 8002940:	000002ff 	.word	0x000002ff
 8002944:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002948:	f7ff f8a0 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 800294c:	0002      	movs	r2, r0
 800294e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <UART_SetConfig+0xb0c>
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b01      	cmp	r3, #1
 800295c:	d03e      	beq.n	80029dc <UART_SetConfig+0xb08>
 800295e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b02      	cmp	r3, #2
 8002964:	d038      	beq.n	80029d8 <UART_SetConfig+0xb04>
 8002966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b03      	cmp	r3, #3
 800296c:	d032      	beq.n	80029d4 <UART_SetConfig+0xb00>
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2b04      	cmp	r3, #4
 8002974:	d02c      	beq.n	80029d0 <UART_SetConfig+0xafc>
 8002976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b05      	cmp	r3, #5
 800297c:	d026      	beq.n	80029cc <UART_SetConfig+0xaf8>
 800297e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b06      	cmp	r3, #6
 8002984:	d020      	beq.n	80029c8 <UART_SetConfig+0xaf4>
 8002986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2b07      	cmp	r3, #7
 800298c:	d01a      	beq.n	80029c4 <UART_SetConfig+0xaf0>
 800298e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b08      	cmp	r3, #8
 8002994:	d014      	beq.n	80029c0 <UART_SetConfig+0xaec>
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b09      	cmp	r3, #9
 800299c:	d00e      	beq.n	80029bc <UART_SetConfig+0xae8>
 800299e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d008      	beq.n	80029b8 <UART_SetConfig+0xae4>
 80029a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b0b      	cmp	r3, #11
 80029ac:	d102      	bne.n	80029b4 <UART_SetConfig+0xae0>
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	e016      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e014      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	e012      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029bc:	2340      	movs	r3, #64	; 0x40
 80029be:	e010      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029c0:	2320      	movs	r3, #32
 80029c2:	e00e      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029c4:	2310      	movs	r3, #16
 80029c6:	e00c      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029c8:	230c      	movs	r3, #12
 80029ca:	e00a      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029cc:	230a      	movs	r3, #10
 80029ce:	e008      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029d0:	2308      	movs	r3, #8
 80029d2:	e006      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029d4:	2306      	movs	r3, #6
 80029d6:	e004      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029d8:	2304      	movs	r3, #4
 80029da:	e002      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029dc:	2302      	movs	r3, #2
 80029de:	e000      	b.n	80029e2 <UART_SetConfig+0xb0e>
 80029e0:	2301      	movs	r3, #1
 80029e2:	0019      	movs	r1, r3
 80029e4:	0010      	movs	r0, r2
 80029e6:	f7fd fb8d 	bl	8000104 <__udivsi3>
 80029ea:	0003      	movs	r3, r0
 80029ec:	005a      	lsls	r2, r3, #1
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	18d2      	adds	r2, r2, r3
 80029f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f7fd fb81 	bl	8000104 <__udivsi3>
 8002a02:	0003      	movs	r3, r0
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002a08:	e120      	b.n	8002c4c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d043      	beq.n	8002a9a <UART_SetConfig+0xbc6>
 8002a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d03d      	beq.n	8002a96 <UART_SetConfig+0xbc2>
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d037      	beq.n	8002a92 <UART_SetConfig+0xbbe>
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d031      	beq.n	8002a8e <UART_SetConfig+0xbba>
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d02b      	beq.n	8002a8a <UART_SetConfig+0xbb6>
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d025      	beq.n	8002a86 <UART_SetConfig+0xbb2>
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d01f      	beq.n	8002a82 <UART_SetConfig+0xbae>
 8002a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	d019      	beq.n	8002a7e <UART_SetConfig+0xbaa>
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d013      	beq.n	8002a7a <UART_SetConfig+0xba6>
 8002a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d00d      	beq.n	8002a76 <UART_SetConfig+0xba2>
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b0a      	cmp	r3, #10
 8002a60:	d007      	beq.n	8002a72 <UART_SetConfig+0xb9e>
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b0b      	cmp	r3, #11
 8002a68:	d101      	bne.n	8002a6e <UART_SetConfig+0xb9a>
 8002a6a:	4bba      	ldr	r3, [pc, #744]	; (8002d54 <UART_SetConfig+0xe80>)
 8002a6c:	e016      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a6e:	4bba      	ldr	r3, [pc, #744]	; (8002d58 <UART_SetConfig+0xe84>)
 8002a70:	e014      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a72:	4bba      	ldr	r3, [pc, #744]	; (8002d5c <UART_SetConfig+0xe88>)
 8002a74:	e012      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a76:	4bba      	ldr	r3, [pc, #744]	; (8002d60 <UART_SetConfig+0xe8c>)
 8002a78:	e010      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a7a:	4bba      	ldr	r3, [pc, #744]	; (8002d64 <UART_SetConfig+0xe90>)
 8002a7c:	e00e      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a7e:	4bba      	ldr	r3, [pc, #744]	; (8002d68 <UART_SetConfig+0xe94>)
 8002a80:	e00c      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a82:	4bba      	ldr	r3, [pc, #744]	; (8002d6c <UART_SetConfig+0xe98>)
 8002a84:	e00a      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a86:	4bba      	ldr	r3, [pc, #744]	; (8002d70 <UART_SetConfig+0xe9c>)
 8002a88:	e008      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a8a:	4bba      	ldr	r3, [pc, #744]	; (8002d74 <UART_SetConfig+0xea0>)
 8002a8c:	e006      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a8e:	4bba      	ldr	r3, [pc, #744]	; (8002d78 <UART_SetConfig+0xea4>)
 8002a90:	e004      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a92:	4bba      	ldr	r3, [pc, #744]	; (8002d7c <UART_SetConfig+0xea8>)
 8002a94:	e002      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a96:	4bba      	ldr	r3, [pc, #744]	; (8002d80 <UART_SetConfig+0xeac>)
 8002a98:	e000      	b.n	8002a9c <UART_SetConfig+0xbc8>
 8002a9a:	4baf      	ldr	r3, [pc, #700]	; (8002d58 <UART_SetConfig+0xe84>)
 8002a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	0852      	lsrs	r2, r2, #1
 8002aa2:	189a      	adds	r2, r3, r2
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	0010      	movs	r0, r2
 8002aac:	f7fd fb2a 	bl	8000104 <__udivsi3>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002ab6:	e0c9      	b.n	8002c4c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ab8:	f7fe ff5c 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8002abc:	0002      	movs	r2, r0
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d044      	beq.n	8002b50 <UART_SetConfig+0xc7c>
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d03e      	beq.n	8002b4c <UART_SetConfig+0xc78>
 8002ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d038      	beq.n	8002b48 <UART_SetConfig+0xc74>
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d032      	beq.n	8002b44 <UART_SetConfig+0xc70>
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d02c      	beq.n	8002b40 <UART_SetConfig+0xc6c>
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d026      	beq.n	8002b3c <UART_SetConfig+0xc68>
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d020      	beq.n	8002b38 <UART_SetConfig+0xc64>
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	d01a      	beq.n	8002b34 <UART_SetConfig+0xc60>
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d014      	beq.n	8002b30 <UART_SetConfig+0xc5c>
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	d00e      	beq.n	8002b2c <UART_SetConfig+0xc58>
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b0a      	cmp	r3, #10
 8002b14:	d008      	beq.n	8002b28 <UART_SetConfig+0xc54>
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b0b      	cmp	r3, #11
 8002b1c:	d102      	bne.n	8002b24 <UART_SetConfig+0xc50>
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	e016      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e014      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	e012      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b2c:	2340      	movs	r3, #64	; 0x40
 8002b2e:	e010      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b30:	2320      	movs	r3, #32
 8002b32:	e00e      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b34:	2310      	movs	r3, #16
 8002b36:	e00c      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b38:	230c      	movs	r3, #12
 8002b3a:	e00a      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b3c:	230a      	movs	r3, #10
 8002b3e:	e008      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b40:	2308      	movs	r3, #8
 8002b42:	e006      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b44:	2306      	movs	r3, #6
 8002b46:	e004      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	e002      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e000      	b.n	8002b52 <UART_SetConfig+0xc7e>
 8002b50:	2301      	movs	r3, #1
 8002b52:	0019      	movs	r1, r3
 8002b54:	0010      	movs	r0, r2
 8002b56:	f7fd fad5 	bl	8000104 <__udivsi3>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	005a      	lsls	r2, r3, #1
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	18d2      	adds	r2, r2, r3
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	f7fd fac9 	bl	8000104 <__udivsi3>
 8002b72:	0003      	movs	r3, r0
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002b78:	e068      	b.n	8002c4c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04c      	beq.n	8002c1c <UART_SetConfig+0xd48>
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d045      	beq.n	8002c16 <UART_SetConfig+0xd42>
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d03e      	beq.n	8002c10 <UART_SetConfig+0xd3c>
 8002b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d038      	beq.n	8002c0c <UART_SetConfig+0xd38>
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d031      	beq.n	8002c06 <UART_SetConfig+0xd32>
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d02b      	beq.n	8002c02 <UART_SetConfig+0xd2e>
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d025      	beq.n	8002bfe <UART_SetConfig+0xd2a>
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	d01e      	beq.n	8002bf8 <UART_SetConfig+0xd24>
 8002bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d017      	beq.n	8002bf2 <UART_SetConfig+0xd1e>
 8002bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	d010      	beq.n	8002bec <UART_SetConfig+0xd18>
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b0a      	cmp	r3, #10
 8002bd0:	d009      	beq.n	8002be6 <UART_SetConfig+0xd12>
 8002bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b0b      	cmp	r3, #11
 8002bd8:	d102      	bne.n	8002be0 <UART_SetConfig+0xd0c>
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	e01f      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	e01c      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	e019      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	e016      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	e013      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	e010      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <UART_SetConfig+0xeb0>)
 8002c00:	e00e      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c02:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <UART_SetConfig+0xeb4>)
 8002c04:	e00c      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	e009      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c0c:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <UART_SetConfig+0xeb8>)
 8002c0e:	e007      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	01db      	lsls	r3, r3, #7
 8002c14:	e004      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	e001      	b.n	8002c20 <UART_SetConfig+0xd4c>
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	189a      	adds	r2, r3, r2
 8002c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	0010      	movs	r0, r2
 8002c30:	f7fd fa68 	bl	8000104 <__udivsi3>
 8002c34:	0003      	movs	r3, r0
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002c3a:	e007      	b.n	8002c4c <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 8002c3c:	2313      	movs	r3, #19
 8002c3e:	2258      	movs	r2, #88	; 0x58
 8002c40:	4694      	mov	ip, r2
 8002c42:	44bc      	add	ip, r7
 8002c44:	4463      	add	r3, ip
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
        break;
 8002c4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	d920      	bls.n	8002c94 <UART_SetConfig+0xdc0>
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <UART_SetConfig+0xebc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d81c      	bhi.n	8002c94 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	200a      	movs	r0, #10
 8002c60:	2458      	movs	r4, #88	; 0x58
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	181b      	adds	r3, r3, r0
 8002c66:	210f      	movs	r1, #15
 8002c68:	438a      	bics	r2, r1
 8002c6a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2207      	movs	r2, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	b299      	uxth	r1, r3
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	181b      	adds	r3, r3, r0
 8002c7c:	193a      	adds	r2, r7, r4
 8002c7e:	1812      	adds	r2, r2, r0
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	193a      	adds	r2, r7, r4
 8002c8c:	1812      	adds	r2, r2, r0
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e1d1      	b.n	8003038 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8002c94:	2313      	movs	r3, #19
 8002c96:	2258      	movs	r2, #88	; 0x58
 8002c98:	4694      	mov	ip, r2
 8002c9a:	44bc      	add	ip, r7
 8002c9c:	4463      	add	r3, ip
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e1c9      	b.n	8003038 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2258      	movs	r2, #88	; 0x58
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d100      	bne.n	8002cb6 <UART_SetConfig+0xde2>
 8002cb4:	e08d      	b.n	8002dd2 <UART_SetConfig+0xefe>
 8002cb6:	dc02      	bgt.n	8002cbe <UART_SetConfig+0xdea>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <UART_SetConfig+0xdf8>
 8002cbc:	e1a1      	b.n	8003002 <UART_SetConfig+0x112e>
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d100      	bne.n	8002cc4 <UART_SetConfig+0xdf0>
 8002cc2:	e0dd      	b.n	8002e80 <UART_SetConfig+0xfac>
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d100      	bne.n	8002cca <UART_SetConfig+0xdf6>
 8002cc8:	e13b      	b.n	8002f42 <UART_SetConfig+0x106e>
 8002cca:	e19a      	b.n	8003002 <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ccc:	f7fe fede 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <UART_SetConfig+0xe08>
 8002cda:	e065      	b.n	8002da8 <UART_SetConfig+0xed4>
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d100      	bne.n	8002ce6 <UART_SetConfig+0xe12>
 8002ce4:	e05e      	b.n	8002da4 <UART_SetConfig+0xed0>
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d058      	beq.n	8002da0 <UART_SetConfig+0xecc>
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d052      	beq.n	8002d9c <UART_SetConfig+0xec8>
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d04c      	beq.n	8002d98 <UART_SetConfig+0xec4>
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d046      	beq.n	8002d94 <UART_SetConfig+0xec0>
 8002d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d020      	beq.n	8002d50 <UART_SetConfig+0xe7c>
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	d01a      	beq.n	8002d4c <UART_SetConfig+0xe78>
 8002d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d014      	beq.n	8002d48 <UART_SetConfig+0xe74>
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	d00e      	beq.n	8002d44 <UART_SetConfig+0xe70>
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b0a      	cmp	r3, #10
 8002d2c:	d008      	beq.n	8002d40 <UART_SetConfig+0xe6c>
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b0b      	cmp	r3, #11
 8002d34:	d102      	bne.n	8002d3c <UART_SetConfig+0xe68>
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	e036      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e034      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	e032      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d44:	2340      	movs	r3, #64	; 0x40
 8002d46:	e030      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e02e      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e02c      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d50:	230c      	movs	r3, #12
 8002d52:	e02a      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d54:	0001e848 	.word	0x0001e848
 8002d58:	01e84800 	.word	0x01e84800
 8002d5c:	0003d090 	.word	0x0003d090
 8002d60:	0007a120 	.word	0x0007a120
 8002d64:	000f4240 	.word	0x000f4240
 8002d68:	001e8480 	.word	0x001e8480
 8002d6c:	0028b0aa 	.word	0x0028b0aa
 8002d70:	0030d400 	.word	0x0030d400
 8002d74:	003d0900 	.word	0x003d0900
 8002d78:	00516154 	.word	0x00516154
 8002d7c:	007a1200 	.word	0x007a1200
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	00001554 	.word	0x00001554
 8002d88:	00001998 	.word	0x00001998
 8002d8c:	00002aaa 	.word	0x00002aaa
 8002d90:	0000ffff 	.word	0x0000ffff
 8002d94:	230a      	movs	r3, #10
 8002d96:	e008      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d98:	2308      	movs	r3, #8
 8002d9a:	e006      	b.n	8002daa <UART_SetConfig+0xed6>
 8002d9c:	2306      	movs	r3, #6
 8002d9e:	e004      	b.n	8002daa <UART_SetConfig+0xed6>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e002      	b.n	8002daa <UART_SetConfig+0xed6>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e000      	b.n	8002daa <UART_SetConfig+0xed6>
 8002da8:	2301      	movs	r3, #1
 8002daa:	0019      	movs	r1, r3
 8002dac:	0010      	movs	r0, r2
 8002dae:	f7fd f9a9 	bl	8000104 <__udivsi3>
 8002db2:	0003      	movs	r3, r0
 8002db4:	001a      	movs	r2, r3
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	18d2      	adds	r2, r2, r3
 8002dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f7fd f99d 	bl	8000104 <__udivsi3>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002dd0:	e11f      	b.n	8003012 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d043      	beq.n	8002e62 <UART_SetConfig+0xf8e>
 8002dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d03d      	beq.n	8002e5e <UART_SetConfig+0xf8a>
 8002de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d037      	beq.n	8002e5a <UART_SetConfig+0xf86>
 8002dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d031      	beq.n	8002e56 <UART_SetConfig+0xf82>
 8002df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d02b      	beq.n	8002e52 <UART_SetConfig+0xf7e>
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d025      	beq.n	8002e4e <UART_SetConfig+0xf7a>
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d01f      	beq.n	8002e4a <UART_SetConfig+0xf76>
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b07      	cmp	r3, #7
 8002e10:	d019      	beq.n	8002e46 <UART_SetConfig+0xf72>
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d013      	beq.n	8002e42 <UART_SetConfig+0xf6e>
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d00d      	beq.n	8002e3e <UART_SetConfig+0xf6a>
 8002e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d007      	beq.n	8002e3a <UART_SetConfig+0xf66>
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b0b      	cmp	r3, #11
 8002e30:	d101      	bne.n	8002e36 <UART_SetConfig+0xf62>
 8002e32:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <UART_SetConfig+0x1194>)
 8002e34:	e016      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <UART_SetConfig+0x1198>)
 8002e38:	e014      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <UART_SetConfig+0x119c>)
 8002e3c:	e012      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e3e:	4b8d      	ldr	r3, [pc, #564]	; (8003074 <UART_SetConfig+0x11a0>)
 8002e40:	e010      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <UART_SetConfig+0x11a4>)
 8002e44:	e00e      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <UART_SetConfig+0x11a8>)
 8002e48:	e00c      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e4a:	4b8d      	ldr	r3, [pc, #564]	; (8003080 <UART_SetConfig+0x11ac>)
 8002e4c:	e00a      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <UART_SetConfig+0x11b0>)
 8002e50:	e008      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e52:	4b8d      	ldr	r3, [pc, #564]	; (8003088 <UART_SetConfig+0x11b4>)
 8002e54:	e006      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e56:	4b8d      	ldr	r3, [pc, #564]	; (800308c <UART_SetConfig+0x11b8>)
 8002e58:	e004      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e5a:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <UART_SetConfig+0x11bc>)
 8002e5c:	e002      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	; (8003094 <UART_SetConfig+0x11c0>)
 8002e60:	e000      	b.n	8002e64 <UART_SetConfig+0xf90>
 8002e62:	4b82      	ldr	r3, [pc, #520]	; (800306c <UART_SetConfig+0x1198>)
 8002e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	0852      	lsrs	r2, r2, #1
 8002e6a:	189a      	adds	r2, r3, r2
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0019      	movs	r1, r3
 8002e72:	0010      	movs	r0, r2
 8002e74:	f7fd f946 	bl	8000104 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002e7e:	e0c8      	b.n	8003012 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e80:	f7fe fd78 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8002e84:	0002      	movs	r2, r0
 8002e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <UART_SetConfig+0x1044>
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d03e      	beq.n	8002f14 <UART_SetConfig+0x1040>
 8002e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d038      	beq.n	8002f10 <UART_SetConfig+0x103c>
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d032      	beq.n	8002f0c <UART_SetConfig+0x1038>
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d02c      	beq.n	8002f08 <UART_SetConfig+0x1034>
 8002eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d026      	beq.n	8002f04 <UART_SetConfig+0x1030>
 8002eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d020      	beq.n	8002f00 <UART_SetConfig+0x102c>
 8002ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b07      	cmp	r3, #7
 8002ec4:	d01a      	beq.n	8002efc <UART_SetConfig+0x1028>
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d014      	beq.n	8002ef8 <UART_SetConfig+0x1024>
 8002ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	d00e      	beq.n	8002ef4 <UART_SetConfig+0x1020>
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b0a      	cmp	r3, #10
 8002edc:	d008      	beq.n	8002ef0 <UART_SetConfig+0x101c>
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b0b      	cmp	r3, #11
 8002ee4:	d102      	bne.n	8002eec <UART_SetConfig+0x1018>
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	e016      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e014      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	e012      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	e010      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e00e      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002efc:	2310      	movs	r3, #16
 8002efe:	e00c      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f00:	230c      	movs	r3, #12
 8002f02:	e00a      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f04:	230a      	movs	r3, #10
 8002f06:	e008      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	e006      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f0c:	2306      	movs	r3, #6
 8002f0e:	e004      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e002      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e000      	b.n	8002f1a <UART_SetConfig+0x1046>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7fd f8f1 	bl	8000104 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	001a      	movs	r2, r3
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	18d2      	adds	r2, r2, r3
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0019      	movs	r1, r3
 8002f34:	0010      	movs	r0, r2
 8002f36:	f7fd f8e5 	bl	8000104 <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002f40:	e067      	b.n	8003012 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04b      	beq.n	8002fe2 <UART_SetConfig+0x110e>
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d044      	beq.n	8002fdc <UART_SetConfig+0x1108>
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d03d      	beq.n	8002fd6 <UART_SetConfig+0x1102>
 8002f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d037      	beq.n	8002fd2 <UART_SetConfig+0x10fe>
 8002f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d030      	beq.n	8002fcc <UART_SetConfig+0x10f8>
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d02a      	beq.n	8002fc8 <UART_SetConfig+0x10f4>
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d024      	beq.n	8002fc4 <UART_SetConfig+0x10f0>
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d01d      	beq.n	8002fbe <UART_SetConfig+0x10ea>
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d016      	beq.n	8002fb8 <UART_SetConfig+0x10e4>
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d00f      	beq.n	8002fb2 <UART_SetConfig+0x10de>
 8002f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b0a      	cmp	r3, #10
 8002f98:	d008      	beq.n	8002fac <UART_SetConfig+0x10d8>
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b0b      	cmp	r3, #11
 8002fa0:	d101      	bne.n	8002fa6 <UART_SetConfig+0x10d2>
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	e01f      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	e01c      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	e019      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	e016      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	e013      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	e010      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <UART_SetConfig+0x11c4>)
 8002fc6:	e00e      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <UART_SetConfig+0x11c8>)
 8002fca:	e00c      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	e009      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <UART_SetConfig+0x11cc>)
 8002fd4:	e007      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	e004      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	01db      	lsls	r3, r3, #7
 8002fe0:	e001      	b.n	8002fe6 <UART_SetConfig+0x1112>
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fe8:	6852      	ldr	r2, [r2, #4]
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	189a      	adds	r2, r3, r2
 8002fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f7fd f885 	bl	8000104 <__udivsi3>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003000:	e007      	b.n	8003012 <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 8003002:	2313      	movs	r3, #19
 8003004:	2258      	movs	r2, #88	; 0x58
 8003006:	4694      	mov	ip, r2
 8003008:	44bc      	add	ip, r7
 800300a:	4463      	add	r3, ip
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d908      	bls.n	800302a <UART_SetConfig+0x1156>
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <UART_SetConfig+0x11d0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d804      	bhi.n	800302a <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 8003020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	e006      	b.n	8003038 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 800302a:	2313      	movs	r3, #19
 800302c:	2258      	movs	r2, #88	; 0x58
 800302e:	4694      	mov	ip, r2
 8003030:	44bc      	add	ip, r7
 8003032:	4463      	add	r3, ip
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303a:	226a      	movs	r2, #106	; 0x6a
 800303c:	2101      	movs	r1, #1
 800303e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003042:	2268      	movs	r2, #104	; 0x68
 8003044:	2101      	movs	r1, #1
 8003046:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304a:	2200      	movs	r2, #0
 800304c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800304e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003050:	2200      	movs	r2, #0
 8003052:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003054:	2313      	movs	r3, #19
 8003056:	2258      	movs	r2, #88	; 0x58
 8003058:	4694      	mov	ip, r2
 800305a:	44bc      	add	ip, r7
 800305c:	4463      	add	r3, ip
 800305e:	781b      	ldrb	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b01f      	add	sp, #124	; 0x7c
 8003066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003068:	0000f424 	.word	0x0000f424
 800306c:	00f42400 	.word	0x00f42400
 8003070:	0001e848 	.word	0x0001e848
 8003074:	0003d090 	.word	0x0003d090
 8003078:	0007a120 	.word	0x0007a120
 800307c:	000f4240 	.word	0x000f4240
 8003080:	00145855 	.word	0x00145855
 8003084:	00186a00 	.word	0x00186a00
 8003088:	001e8480 	.word	0x001e8480
 800308c:	0028b0aa 	.word	0x0028b0aa
 8003090:	003d0900 	.word	0x003d0900
 8003094:	007a1200 	.word	0x007a1200
 8003098:	00000aaa 	.word	0x00000aaa
 800309c:	00000ccc 	.word	0x00000ccc
 80030a0:	00001555 	.word	0x00001555
 80030a4:	0000ffff 	.word	0x0000ffff

080030a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <UART_AdvFeatureConfig+0x144>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d00b      	beq.n	80030f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <UART_AdvFeatureConfig+0x148>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2204      	movs	r2, #4
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a3b      	ldr	r2, [pc, #236]	; (80031f4 <UART_AdvFeatureConfig+0x14c>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	2208      	movs	r2, #8
 800311c:	4013      	ands	r3, r2
 800311e:	d00b      	beq.n	8003138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4a34      	ldr	r2, [pc, #208]	; (80031f8 <UART_AdvFeatureConfig+0x150>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	2210      	movs	r2, #16
 800313e:	4013      	ands	r3, r2
 8003140:	d00b      	beq.n	800315a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <UART_AdvFeatureConfig+0x154>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	d00b      	beq.n	800317c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4a25      	ldr	r2, [pc, #148]	; (8003200 <UART_AdvFeatureConfig+0x158>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	4013      	ands	r3, r2
 8003184:	d01d      	beq.n	80031c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <UART_AdvFeatureConfig+0x15c>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	035b      	lsls	r3, r3, #13
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10b      	bne.n	80031c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <UART_AdvFeatureConfig+0x160>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a0e      	ldr	r2, [pc, #56]	; (800320c <UART_AdvFeatureConfig+0x164>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffdffff 	.word	0xfffdffff
 80031f0:	fffeffff 	.word	0xfffeffff
 80031f4:	fffbffff 	.word	0xfffbffff
 80031f8:	ffff7fff 	.word	0xffff7fff
 80031fc:	ffffefff 	.word	0xffffefff
 8003200:	ffffdfff 	.word	0xffffdfff
 8003204:	ffefffff 	.word	0xffefffff
 8003208:	ff9fffff 	.word	0xff9fffff
 800320c:	fff7ffff 	.word	0xfff7ffff

08003210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2288      	movs	r2, #136	; 0x88
 800321c:	2100      	movs	r1, #0
 800321e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003220:	f7fd fa6c 	bl	80006fc <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2208      	movs	r2, #8
 8003230:	4013      	ands	r3, r2
 8003232:	2b08      	cmp	r3, #8
 8003234:	d10d      	bne.n	8003252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	0399      	lsls	r1, r3, #14
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <UART_CheckIdleState+0x90>)
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	0013      	movs	r3, r2
 8003244:	2200      	movs	r2, #0
 8003246:	f000 f82d 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e021      	b.n	8003296 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2204      	movs	r2, #4
 800325a:	4013      	ands	r3, r2
 800325c:	2b04      	cmp	r3, #4
 800325e:	d10d      	bne.n	800327c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	03d9      	lsls	r1, r3, #15
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <UART_CheckIdleState+0x90>)
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	0013      	movs	r3, r2
 800326e:	2200      	movs	r2, #0
 8003270:	f000 f818 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 8003274:	1e03      	subs	r3, r0, #0
 8003276:	d001      	beq.n	800327c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e00c      	b.n	8003296 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	2120      	movs	r1, #32
 8003282:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2284      	movs	r2, #132	; 0x84
 8003288:	2120      	movs	r1, #32
 800328a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	227c      	movs	r2, #124	; 0x7c
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	01ffffff 	.word	0x01ffffff

080032a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	e02b      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	3301      	adds	r3, #1
 80032ba:	d028      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7fd fa1e 	bl	80006fc <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11d      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4916      	ldr	r1, [pc, #88]	; (8003338 <UART_WaitOnFlagUntilTimeout+0x94>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	438a      	bics	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	2120      	movs	r1, #32
 80032f8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2284      	movs	r2, #132	; 0x84
 80032fe:	2120      	movs	r1, #32
 8003300:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	227c      	movs	r2, #124	; 0x7c
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e00f      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	425a      	negs	r2, r3
 800331e:	4153      	adcs	r3, r2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	001a      	movs	r2, r3
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d0c4      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b004      	add	sp, #16
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	fffffe5f 	.word	0xfffffe5f

0800333c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	227c      	movs	r2, #124	; 0x7c
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_UARTEx_DisableFifoMode+0x16>
 800334e:	2302      	movs	r3, #2
 8003350:	e027      	b.n	80033a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	227c      	movs	r2, #124	; 0x7c
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	2124      	movs	r1, #36	; 0x24
 8003360:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	2120      	movs	r1, #32
 8003396:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	227c      	movs	r2, #124	; 0x7c
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	dfffffff 	.word	0xdfffffff

080033b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	227c      	movs	r2, #124	; 0x7c
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e02e      	b.n	8003426 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	227c      	movs	r2, #124	; 0x7c
 80033cc:	2101      	movs	r1, #1
 80033ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	2124      	movs	r1, #36	; 0x24
 80033d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	438a      	bics	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	08d9      	lsrs	r1, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f854 	bl	80034b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	2120      	movs	r1, #32
 800341a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	227c      	movs	r2, #124	; 0x7c
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	227c      	movs	r2, #124	; 0x7c
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003444:	2302      	movs	r3, #2
 8003446:	e02f      	b.n	80034a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	227c      	movs	r2, #124	; 0x7c
 800344c:	2101      	movs	r1, #1
 800344e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	2124      	movs	r1, #36	; 0x24
 8003456:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	438a      	bics	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003478:	4013      	ands	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f813 	bl	80034b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	2120      	movs	r1, #32
 800349c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	227c      	movs	r2, #124	; 0x7c
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	f1ffffff 	.word	0xf1ffffff

080034b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80034bc:	2314      	movs	r3, #20
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <UARTEx_SetNbDataToProcess+0xcc>)
 80034c2:	ca03      	ldmia	r2!, {r0, r1}
 80034c4:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80034c6:	230c      	movs	r3, #12
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <UARTEx_SetNbDataToProcess+0xd0>)
 80034cc:	ca03      	ldmia	r2!, {r0, r1}
 80034ce:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	226a      	movs	r2, #106	; 0x6a
 80034dc:	2101      	movs	r1, #1
 80034de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2268      	movs	r2, #104	; 0x68
 80034e4:	2101      	movs	r1, #1
 80034e6:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034e8:	e046      	b.n	8003578 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034ea:	261f      	movs	r6, #31
 80034ec:	19bb      	adds	r3, r7, r6
 80034ee:	2208      	movs	r2, #8
 80034f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034f2:	201e      	movs	r0, #30
 80034f4:	183b      	adds	r3, r7, r0
 80034f6:	2208      	movs	r2, #8
 80034f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	0e5b      	lsrs	r3, r3, #25
 8003502:	b2da      	uxtb	r2, r3
 8003504:	241d      	movs	r4, #29
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2107      	movs	r1, #7
 800350a:	400a      	ands	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	0f5b      	lsrs	r3, r3, #29
 8003516:	b2da      	uxtb	r2, r3
 8003518:	251c      	movs	r5, #28
 800351a:	197b      	adds	r3, r7, r5
 800351c:	2107      	movs	r1, #7
 800351e:	400a      	ands	r2, r1
 8003520:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003522:	183b      	adds	r3, r7, r0
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	197a      	adds	r2, r7, r5
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	2114      	movs	r1, #20
 800352c:	1879      	adds	r1, r7, r1
 800352e:	5c8a      	ldrb	r2, [r1, r2]
 8003530:	435a      	muls	r2, r3
 8003532:	0010      	movs	r0, r2
 8003534:	197b      	adds	r3, r7, r5
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	250c      	movs	r5, #12
 800353a:	197a      	adds	r2, r7, r5
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	0019      	movs	r1, r3
 8003540:	f7fc fe6a 	bl	8000218 <__divsi3>
 8003544:	0003      	movs	r3, r0
 8003546:	b299      	uxth	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	226a      	movs	r2, #106	; 0x6a
 800354c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800354e:	19bb      	adds	r3, r7, r6
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	193a      	adds	r2, r7, r4
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	2114      	movs	r1, #20
 8003558:	1879      	adds	r1, r7, r1
 800355a:	5c8a      	ldrb	r2, [r1, r2]
 800355c:	435a      	muls	r2, r3
 800355e:	0010      	movs	r0, r2
 8003560:	193b      	adds	r3, r7, r4
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	197a      	adds	r2, r7, r5
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	0019      	movs	r1, r3
 800356a:	f7fc fe55 	bl	8000218 <__divsi3>
 800356e:	0003      	movs	r3, r0
 8003570:	b299      	uxth	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2268      	movs	r2, #104	; 0x68
 8003576:	5299      	strh	r1, [r3, r2]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b009      	add	sp, #36	; 0x24
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003580:	08003ce0 	.word	0x08003ce0
 8003584:	08003ce8 	.word	0x08003ce8

08003588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b096      	sub	sp, #88	; 0x58
 800358c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800358e:	f7fd f83b 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003592:	f000 f895 	bl	80036c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003596:	f000 f97f 	bl	8003898 <MX_GPIO_Init>
  MX_I2C1_Init();
 800359a:	f000 f8ed 	bl	8003778 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800359e:	f000 f92b 	bl	80037f8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer[6];
  buffer[0]= 0x4c;	//L
 80035a2:	214c      	movs	r1, #76	; 0x4c
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	224c      	movs	r2, #76	; 0x4c
 80035a8:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	224f      	movs	r2, #79	; 0x4f
 80035ae:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2255      	movs	r2, #85	; 0x55
 80035b4:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2249      	movs	r2, #73	; 0x49
 80035ba:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	2253      	movs	r2, #83	; 0x53
 80035c0:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	2231      	movs	r2, #49	; 0x31
 80035c6:	715a      	strb	r2, [r3, #5]
  volatile char password[17];
  password[0] = 0x00;
 80035c8:	2138      	movs	r1, #56	; 0x38
 80035ca:	187b      	adds	r3, r7, r1
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
  password[1] = 0x00;
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	2200      	movs	r2, #0
 80035d4:	705a      	strb	r2, [r3, #1]
  password[2] = 0x00;
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2200      	movs	r2, #0
 80035da:	709a      	strb	r2, [r3, #2]
  password[3] = 0x00;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2200      	movs	r2, #0
 80035e0:	70da      	strb	r2, [r3, #3]
  password[4] = 0x00;
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	2200      	movs	r2, #0
 80035e6:	711a      	strb	r2, [r3, #4]
  password[5] = 0x00;
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2200      	movs	r2, #0
 80035ec:	715a      	strb	r2, [r3, #5]
  password[6] = 0x00;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2200      	movs	r2, #0
 80035f2:	719a      	strb	r2, [r3, #6]
  password[7] = 0x00;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2200      	movs	r2, #0
 80035f8:	71da      	strb	r2, [r3, #7]
  password[8] = 0x09;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2209      	movs	r2, #9
 80035fe:	721a      	strb	r2, [r3, #8]
  password[9] = 0x00;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	725a      	strb	r2, [r3, #9]
  password[10] = 0x00;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	729a      	strb	r2, [r3, #10]
  password[11] = 0x00;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2200      	movs	r2, #0
 8003610:	72da      	strb	r2, [r3, #11]
  password[12] = 0x00;
 8003612:	187b      	adds	r3, r7, r1
 8003614:	2200      	movs	r2, #0
 8003616:	731a      	strb	r2, [r3, #12]
  password[13] = 0x00;
 8003618:	187b      	adds	r3, r7, r1
 800361a:	2200      	movs	r2, #0
 800361c:	735a      	strb	r2, [r3, #13]
  password[14] = 0x00;
 800361e:	187b      	adds	r3, r7, r1
 8003620:	2200      	movs	r2, #0
 8003622:	739a      	strb	r2, [r3, #14]
  password[15] = 0x00;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2200      	movs	r2, #0
 8003628:	73da      	strb	r2, [r3, #15]
  password[16] = 0x00;
 800362a:	187b      	adds	r3, r7, r1
 800362c:	2200      	movs	r2, #0
 800362e:	741a      	strb	r2, [r3, #16]
  volatile char WrongPass[17];
  WrongPass[0] = 0x00;
 8003630:	2124      	movs	r1, #36	; 0x24
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
  WrongPass[1] = 0x00;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2200      	movs	r2, #0
 800363c:	705a      	strb	r2, [r3, #1]
  WrongPass[2] = 0x10;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2210      	movs	r2, #16
 8003642:	709a      	strb	r2, [r3, #2]
  WrongPass[3] = 0x10;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2210      	movs	r2, #16
 8003648:	70da      	strb	r2, [r3, #3]
  WrongPass[4] = 0x00;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2200      	movs	r2, #0
 800364e:	711a      	strb	r2, [r3, #4]
  WrongPass[5] = 0x00;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2200      	movs	r2, #0
 8003654:	715a      	strb	r2, [r3, #5]
  WrongPass[6] = 0x00;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	719a      	strb	r2, [r3, #6]
  WrongPass[7] = 0x00;
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2200      	movs	r2, #0
 8003660:	71da      	strb	r2, [r3, #7]
  WrongPass[8] = 0x09;
 8003662:	187b      	adds	r3, r7, r1
 8003664:	2209      	movs	r2, #9
 8003666:	721a      	strb	r2, [r3, #8]
  WrongPass[9] = 0x00;
 8003668:	187b      	adds	r3, r7, r1
 800366a:	2200      	movs	r2, #0
 800366c:	725a      	strb	r2, [r3, #9]
  WrongPass[10] = 0x00;
 800366e:	187b      	adds	r3, r7, r1
 8003670:	2200      	movs	r2, #0
 8003672:	729a      	strb	r2, [r3, #10]
  WrongPass[11] = 0x00;
 8003674:	187b      	adds	r3, r7, r1
 8003676:	2200      	movs	r2, #0
 8003678:	72da      	strb	r2, [r3, #11]
  WrongPass[12] = 0x00;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2200      	movs	r2, #0
 800367e:	731a      	strb	r2, [r3, #12]
  WrongPass[13] = 0x00;
 8003680:	187b      	adds	r3, r7, r1
 8003682:	2200      	movs	r2, #0
 8003684:	735a      	strb	r2, [r3, #13]
  WrongPass[14] = 0x00;
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	739a      	strb	r2, [r3, #14]
  WrongPass[15] = 0x00;
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	73da      	strb	r2, [r3, #15]
  WrongPass[16] = 0x00;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2200      	movs	r2, #0
 8003696:	741a      	strb	r2, [r3, #16]
  char received[11];
  char received1[11];
  char test1[2];
  char data[2];
  data[0] = 0x00;
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
  char *pass;
  pass = I2CPassword;
 800369e:	2300      	movs	r3, #0
 80036a0:	657b      	str	r3, [r7, #84]	; 0x54
  //char test123[17];
  //test123[0] = test14;


  initNFC(&hi2c1, (NFC_UserMemory));
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <main+0x134>)
 80036a4:	21a6      	movs	r1, #166	; 0xa6
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f974 	bl	8003994 <initNFC>
  //HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x005f, 2, received1,6,50);
  HAL_I2C_Mem_Read(&hi2c1, NFC_SystemMemory, 0x000b, 2, received1,2,50);
  HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x2004, 2, test1, 1, 50);
  HAL_I2C_Mem_Write(&hi2c1,NFC_SystemMemory, 0x0900,2, WrongPass,17,50); //present wrong password
  HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x2004, 2, test1, 1, 50);*/
  presentI2Cpassword(&hi2c1, NFC_UserMemory, I2CPassword);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <main+0x134>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	21a6      	movs	r1, #166	; 0xa6
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f998 	bl	80039e8 <presentI2Cpassword>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036b8:	e7fe      	b.n	80036b8 <main+0x130>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	2000002c 	.word	0x2000002c

080036c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b0a1      	sub	sp, #132	; 0x84
 80036c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036c6:	2448      	movs	r4, #72	; 0x48
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	0018      	movs	r0, r3
 80036cc:	2338      	movs	r3, #56	; 0x38
 80036ce:	001a      	movs	r2, r3
 80036d0:	2100      	movs	r1, #0
 80036d2:	f000 faf1 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036d6:	2338      	movs	r3, #56	; 0x38
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	0018      	movs	r0, r3
 80036dc:	2310      	movs	r3, #16
 80036de:	001a      	movs	r2, r3
 80036e0:	2100      	movs	r1, #0
 80036e2:	f000 fae9 	bl	8003cb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	0018      	movs	r0, r3
 80036ea:	2334      	movs	r3, #52	; 0x34
 80036ec:	001a      	movs	r2, r3
 80036ee:	2100      	movs	r1, #0
 80036f0:	f000 fae2 	bl	8003cb8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fd fcc7 	bl	800108c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	22a0      	movs	r2, #160	; 0xa0
 8003708:	02d2      	lsls	r2, r2, #11
 800370a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800370c:	193b      	adds	r3, r7, r4
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003712:	193b      	adds	r3, r7, r4
 8003714:	0018      	movs	r0, r3
 8003716:	f7fd fd05 	bl	8001124 <HAL_RCC_OscConfig>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d001      	beq.n	8003722 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800371e:	f000 f933 	bl	8003988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003722:	2138      	movs	r1, #56	; 0x38
 8003724:	187b      	adds	r3, r7, r1
 8003726:	2207      	movs	r2, #7
 8003728:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800372a:	187b      	adds	r3, r7, r1
 800372c:	2201      	movs	r2, #1
 800372e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003730:	187b      	adds	r3, r7, r1
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2200      	movs	r2, #0
 800373a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800373c:	187b      	adds	r3, r7, r1
 800373e:	2100      	movs	r1, #0
 8003740:	0018      	movs	r0, r3
 8003742:	f7fe f80f 	bl	8001764 <HAL_RCC_ClockConfig>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d001      	beq.n	800374e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800374a:	f000 f91d 	bl	8003988 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	2260      	movs	r2, #96	; 0x60
 8003752:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	0018      	movs	r0, r3
 8003764:	f7fe f9a8 	bl	8001ab8 <HAL_RCCEx_PeriphCLKConfig>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800376c:	f000 f90c 	bl	8003988 <Error_Handler>
  }
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b021      	add	sp, #132	; 0x84
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <MX_I2C1_Init+0x74>)
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <MX_I2C1_Init+0x78>)
 8003780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_I2C1_Init+0x74>)
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <MX_I2C1_Init+0x7c>)
 8003786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <MX_I2C1_Init+0x74>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <MX_I2C1_Init+0x74>)
 8003790:	2201      	movs	r2, #1
 8003792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <MX_I2C1_Init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <MX_I2C1_Init+0x74>)
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <MX_I2C1_Init+0x74>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <MX_I2C1_Init+0x74>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <MX_I2C1_Init+0x74>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <MX_I2C1_Init+0x74>)
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fd f9e1 	bl	8000b7c <HAL_I2C_Init>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037be:	f000 f8e3 	bl	8003988 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <MX_I2C1_Init+0x74>)
 80037c4:	2100      	movs	r1, #0
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7fd fbc8 	bl	8000f5c <HAL_I2CEx_ConfigAnalogFilter>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d001      	beq.n	80037d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80037d0:	f000 f8da 	bl	8003988 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <MX_I2C1_Init+0x74>)
 80037d6:	2100      	movs	r1, #0
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fd fc0b 	bl	8000ff4 <HAL_I2CEx_ConfigDigitalFilter>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80037e2:	f000 f8d1 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	2000002c 	.word	0x2000002c
 80037f0:	40005400 	.word	0x40005400
 80037f4:	2000090e 	.word	0x2000090e

080037f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80037fc:	4b23      	ldr	r3, [pc, #140]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 80037fe:	4a24      	ldr	r2, [pc, #144]	; (8003890 <MX_LPUART1_UART_Init+0x98>)
 8003800:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003804:	4a23      	ldr	r2, [pc, #140]	; (8003894 <MX_LPUART1_UART_Init+0x9c>)
 8003806:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	0552      	lsls	r2, r2, #21
 800380e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003812:	2200      	movs	r2, #0
 8003814:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 800381e:	220c      	movs	r2, #12
 8003820:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 800382a:	2200      	movs	r2, #0
 800382c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003830:	2200      	movs	r2, #0
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003834:	4b15      	ldr	r3, [pc, #84]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003836:	2200      	movs	r2, #0
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 800383c:	2200      	movs	r2, #0
 800383e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003840:	4b12      	ldr	r3, [pc, #72]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003842:	0018      	movs	r0, r3
 8003844:	f7fe faf0 	bl	8001e28 <HAL_UART_Init>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d001      	beq.n	8003850 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800384c:	f000 f89c 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003852:	2100      	movs	r1, #0
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff fdab 	bl	80033b0 <HAL_UARTEx_SetTxFifoThreshold>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d001      	beq.n	8003862 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800385e:	f000 f893 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003864:	2100      	movs	r1, #0
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff fde2 	bl	8003430 <HAL_UARTEx_SetRxFifoThreshold>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d001      	beq.n	8003874 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003870:	f000 f88a 	bl	8003988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <MX_LPUART1_UART_Init+0x94>)
 8003876:	0018      	movs	r0, r3
 8003878:	f7ff fd60 	bl	800333c <HAL_UARTEx_DisableFifoMode>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d001      	beq.n	8003884 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003880:	f000 f882 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	20000078 	.word	0x20000078
 8003890:	40008000 	.word	0x40008000
 8003894:	00033324 	.word	0x00033324

08003898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b08b      	sub	sp, #44	; 0x2c
 800389c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389e:	2414      	movs	r4, #20
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	0018      	movs	r0, r3
 80038a4:	2314      	movs	r3, #20
 80038a6:	001a      	movs	r2, r3
 80038a8:	2100      	movs	r1, #0
 80038aa:	f000 fa05 	bl	8003cb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038b4:	2104      	movs	r1, #4
 80038b6:	430a      	orrs	r2, r1
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2204      	movs	r2, #4
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038cc:	2120      	movs	r1, #32
 80038ce:	430a      	orrs	r2, r1
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2220      	movs	r2, #32
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <MX_GPIO_Init+0xe8>)
 80038fc:	2102      	movs	r1, #2
 80038fe:	430a      	orrs	r2, r1
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <MX_GPIO_Init+0xe8>)
 8003904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	00d9      	lsls	r1, r3, #3
 8003912:	23a0      	movs	r3, #160	; 0xa0
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	2200      	movs	r2, #0
 8003918:	0018      	movs	r0, r3
 800391a:	f7fd f911 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_GPIO_Init+0xec>)
 8003920:	2200      	movs	r2, #0
 8003922:	2130      	movs	r1, #48	; 0x30
 8003924:	0018      	movs	r0, r3
 8003926:	f7fd f90b 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800392a:	193b      	adds	r3, r7, r4
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003932:	193b      	adds	r3, r7, r4
 8003934:	2201      	movs	r2, #1
 8003936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	193b      	adds	r3, r7, r4
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2200      	movs	r2, #0
 8003942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 8003944:	193a      	adds	r2, r7, r4
 8003946:	23a0      	movs	r3, #160	; 0xa0
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f7fc ff93 	bl	8000878 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 8003952:	0021      	movs	r1, r4
 8003954:	187b      	adds	r3, r7, r1
 8003956:	2230      	movs	r2, #48	; 0x30
 8003958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395a:	187b      	adds	r3, r7, r1
 800395c:	2201      	movs	r2, #1
 800395e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2200      	movs	r2, #0
 800396a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	187b      	adds	r3, r7, r1
 800396e:	4a05      	ldr	r2, [pc, #20]	; (8003984 <MX_GPIO_Init+0xec>)
 8003970:	0019      	movs	r1, r3
 8003972:	0010      	movs	r0, r2
 8003974:	f7fc ff80 	bl	8000878 <HAL_GPIO_Init>

}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b00b      	add	sp, #44	; 0x2c
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	50000400 	.word	0x50000400

08003988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <initNFC>:
 */

#include "nfc.h"
#include "stm32g0xx_hal.h"

void initNFC(I2C_HandleTypeDef *hi2c, uint16_t devAddress){
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	000a      	movs	r2, r1
 800399e:	1cbb      	adds	r3, r7, #2
 80039a0:	801a      	strh	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(hi2c, devAddress,3,50) == HAL_OK){
 80039a2:	1cbb      	adds	r3, r7, #2
 80039a4:	8819      	ldrh	r1, [r3, #0]
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	2332      	movs	r3, #50	; 0x32
 80039aa:	2203      	movs	r2, #3
 80039ac:	f7fd f97c 	bl	8000ca8 <HAL_I2C_IsDeviceReady>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d10c      	bne.n	80039ce <initNFC+0x3a>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <initNFC+0x50>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	2110      	movs	r1, #16
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fd f8c0 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NFC_LED2_PORT,NFC_LED2,1);
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <initNFC+0x50>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	2120      	movs	r1, #32
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fd f8ba 	bl	8000b40 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(NFC_LED3_PORT,NFC_LED3,1);
	}
	else{
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
	}
}
 80039cc:	e005      	b.n	80039da <initNFC+0x46>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <initNFC+0x50>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	2110      	movs	r1, #16
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fd f8b3 	bl	8000b40 <HAL_GPIO_WritePin>
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b002      	add	sp, #8
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	50000400 	.word	0x50000400

080039e8 <presentI2Cpassword>:
void currentAddRead(I2C_HandleTypeDef *hi2c, uint16_t devAddress, char *buffer,int n){

	HAL_I2C_Master_Receive(hi2c, devAddress, buffer,n ,50);
}

void presentI2Cpassword(I2C_HandleTypeDef *hi2c, uint16_t devAddress, int password){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	230a      	movs	r3, #10
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	1c0a      	adds	r2, r1, #0
 80039f8:	801a      	strh	r2, [r3, #0]
	char *temp = password;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	char pass[17];
	//allocate the password into buffer
	for(int i = 0; i < 8; i++){
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	e00c      	b.n	8003a1e <presentI2Cpassword+0x36>
		pass[i] = temp[i];
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	7819      	ldrb	r1, [r3, #0]
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	18fa      	adds	r2, r7, r3
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	1c0a      	adds	r2, r1, #0
 8003a16:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b07      	cmp	r3, #7
 8003a22:	ddef      	ble.n	8003a04 <presentI2Cpassword+0x1c>
	}
	pass[8] = presentPass;
 8003a24:	2310      	movs	r3, #16
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	2209      	movs	r2, #9
 8003a2a:	721a      	strb	r2, [r3, #8]

	for(int i = 0; i < 8; i++){
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	e00c      	b.n	8003a4c <presentI2Cpassword+0x64>
		pass[i+8] = temp;
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	3308      	adds	r3, #8
 8003a38:	b2d1      	uxtb	r1, r2
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	18ba      	adds	r2, r7, r2
 8003a3e:	54d1      	strb	r1, [r2, r3]
		temp++;
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	3301      	adds	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	3301      	adds	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	ddef      	ble.n	8003a32 <presentI2Cpassword+0x4a>
	}

	//HAL_I2C_Mem_Write(hi2c,NFC_SystemMemory, I2C_PWD, Itl, pass,17,50); //present  i2c password

}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b00c      	add	sp, #48	; 0x30
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	0549      	lsls	r1, r1, #21
 8003a84:	430a      	orrs	r2, r1
 8003a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_MspInit+0x44>)
 8003a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	055b      	lsls	r3, r3, #21
 8003a90:	4013      	ands	r3, r2
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	40021000 	.word	0x40021000

08003aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	2314      	movs	r3, #20
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	2314      	movs	r3, #20
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f000 f8fe 	bl	8003cb8 <memset>
  if(hi2c->Instance==I2C1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_I2C_MspInit+0x8c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d130      	bne.n	8003b28 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003acc:	2102      	movs	r1, #2
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ad2:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ade:	2114      	movs	r1, #20
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	22c0      	movs	r2, #192	; 0xc0
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2212      	movs	r2, #18
 8003aec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	2201      	movs	r2, #1
 8003af2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2206      	movs	r2, #6
 8003afe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <HAL_I2C_MspInit+0x94>)
 8003b04:	0019      	movs	r1, r3
 8003b06:	0010      	movs	r0, r2
 8003b08:	f7fc feb6 	bl	8000878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0389      	lsls	r1, r1, #14
 8003b16:	430a      	orrs	r2, r1
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_I2C_MspInit+0x90>)
 8003b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	039b      	lsls	r3, r3, #14
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b00a      	add	sp, #40	; 0x28
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40005400 	.word	0x40005400
 8003b34:	40021000 	.word	0x40021000
 8003b38:	50000400 	.word	0x50000400

08003b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	2314      	movs	r3, #20
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	0018      	movs	r0, r3
 8003b4a:	2314      	movs	r3, #20
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f000 f8b2 	bl	8003cb8 <memset>
  if(huart->Instance==LPUART1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_UART_MspInit+0x8c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d130      	bne.n	8003bc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0349      	lsls	r1, r1, #13
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	035b      	lsls	r3, r3, #13
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b80:	2101      	movs	r1, #1
 8003b82:	430a      	orrs	r2, r1
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_UART_MspInit+0x90>)
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003b92:	2114      	movs	r1, #20
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	220c      	movs	r2, #12
 8003b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	2206      	movs	r2, #6
 8003bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb2:	187a      	adds	r2, r7, r1
 8003bb4:	23a0      	movs	r3, #160	; 0xa0
 8003bb6:	05db      	lsls	r3, r3, #23
 8003bb8:	0011      	movs	r1, r2
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc fe5c 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b00a      	add	sp, #40	; 0x28
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40008000 	.word	0x40008000
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <HardFault_Handler+0x4>

08003be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bf8:	f7fc fd70 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <SystemInit+0x14>)
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	0512      	lsls	r2, r2, #20
 8003c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c1c:	480d      	ldr	r0, [pc, #52]	; (8003c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c22:	e003      	b.n	8003c2c <LoopCopyDataInit>

08003c24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003c26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c2a:	3104      	adds	r1, #4

08003c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c2c:	480b      	ldr	r0, [pc, #44]	; (8003c5c <LoopForever+0xa>)
  ldr r3, =_edata
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <LoopForever+0xe>)
  adds r2, r0, r1
 8003c30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c34:	d3f6      	bcc.n	8003c24 <CopyDataInit>
  ldr r2, =_sbss
 8003c36:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <LoopForever+0x12>)
  b LoopFillZerobss
 8003c38:	e002      	b.n	8003c40 <LoopFillZerobss>

08003c3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  str  r3, [r2]
 8003c3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c3e:	3204      	adds	r2, #4

08003c40 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <LoopForever+0x16>)
  cmp r2, r3
 8003c42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c44:	d3f9      	bcc.n	8003c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c46:	f7ff ffdd 	bl	8003c04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c4a:	f000 f811 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c4e:	f7ff fc9b 	bl	8003588 <main>

08003c52 <LoopForever>:

LoopForever:
    b LoopForever
 8003c52:	e7fe      	b.n	8003c52 <LoopForever>
  ldr   r0, =_estack
 8003c54:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8003c58:	08003d60 	.word	0x08003d60
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003c64:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003c68:	20000104 	.word	0x20000104

08003c6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC1_COMP_IRQHandler>
	...

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	2600      	movs	r6, #0
 8003c74:	4d0c      	ldr	r5, [pc, #48]	; (8003ca8 <__libc_init_array+0x38>)
 8003c76:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <__libc_init_array+0x3c>)
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	2600      	movs	r6, #0
 8003c82:	f000 f821 	bl	8003cc8 <_init>
 8003c86:	4d0a      	ldr	r5, [pc, #40]	; (8003cb0 <__libc_init_array+0x40>)
 8003c88:	4c0a      	ldr	r4, [pc, #40]	; (8003cb4 <__libc_init_array+0x44>)
 8003c8a:	1b64      	subs	r4, r4, r5
 8003c8c:	10a4      	asrs	r4, r4, #2
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	00b3      	lsls	r3, r6, #2
 8003c96:	58eb      	ldr	r3, [r5, r3]
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	00b3      	lsls	r3, r6, #2
 8003ca0:	58eb      	ldr	r3, [r5, r3]
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08003d58 	.word	0x08003d58
 8003cac:	08003d58 	.word	0x08003d58
 8003cb0:	08003d58 	.word	0x08003d58
 8003cb4:	08003d5c 	.word	0x08003d5c

08003cb8 <memset>:
 8003cb8:	0003      	movs	r3, r0
 8003cba:	1812      	adds	r2, r2, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	7019      	strb	r1, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <_init>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_fini>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr
