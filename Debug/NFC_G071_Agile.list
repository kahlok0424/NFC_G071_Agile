
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004660  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004794  08004794  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800479c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080047a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080047a8  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ef0  00000000  00000000  0002c1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002e0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b2c  00000000  00000000  0002f658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8ef  00000000  00000000  00046184  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e704  00000000  00000000  00050a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  000df1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004704 	.word	0x08004704

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004704 	.word	0x08004704

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 ff30 	bl	8004498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f90f 	bl	80008a2 <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8ee 	bl	8000878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d004      	beq.n	8000734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_Delay+0x40>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	18d3      	adds	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	f7ff ffe1 	bl	80006fc <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8f7      	bhi.n	8000736 <HAL_Delay+0x26>
  {
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000004 	.word	0x20000004

08000754 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b7f      	cmp	r3, #127	; 0x7f
 8000768:	d932      	bls.n	80007d0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076a:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <NVIC_SetPriority+0xd4>)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	0019      	movs	r1, r3
 8000772:	230f      	movs	r3, #15
 8000774:	400b      	ands	r3, r1
 8000776:	3b08      	subs	r3, #8
 8000778:	089b      	lsrs	r3, r3, #2
 800077a:	3306      	adds	r3, #6
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	18d3      	adds	r3, r2, r3
 8000780:	3304      	adds	r3, #4
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	1dfa      	adds	r2, r7, #7
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	0011      	movs	r1, r2
 800078a:	2203      	movs	r2, #3
 800078c:	400a      	ands	r2, r1
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	21ff      	movs	r1, #255	; 0xff
 8000792:	4091      	lsls	r1, r2
 8000794:	000a      	movs	r2, r1
 8000796:	43d2      	mvns	r2, r2
 8000798:	401a      	ands	r2, r3
 800079a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	019b      	lsls	r3, r3, #6
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	401a      	ands	r2, r3
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	0018      	movs	r0, r3
 80007aa:	2303      	movs	r3, #3
 80007ac:	4003      	ands	r3, r0
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <NVIC_SetPriority+0xd4>)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001c      	movs	r4, r3
 80007ba:	230f      	movs	r3, #15
 80007bc:	4023      	ands	r3, r4
 80007be:	3b08      	subs	r3, #8
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	3306      	adds	r3, #6
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	18c3      	adds	r3, r0, r3
 80007ca:	3304      	adds	r3, #4
 80007cc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ce:	e027      	b.n	8000820 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <NVIC_SetPriority+0xd8>)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	33c0      	adds	r3, #192	; 0xc0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	589b      	ldr	r3, [r3, r2]
 80007e0:	1dfa      	adds	r2, r7, #7
 80007e2:	7812      	ldrb	r2, [r2, #0]
 80007e4:	0011      	movs	r1, r2
 80007e6:	2203      	movs	r2, #3
 80007e8:	400a      	ands	r2, r1
 80007ea:	00d2      	lsls	r2, r2, #3
 80007ec:	21ff      	movs	r1, #255	; 0xff
 80007ee:	4091      	lsls	r1, r2
 80007f0:	000a      	movs	r2, r1
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	401a      	ands	r2, r3
 80007f6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	019b      	lsls	r3, r3, #6
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	401a      	ands	r2, r3
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	2303      	movs	r3, #3
 8000808:	4003      	ands	r3, r0
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <NVIC_SetPriority+0xd8>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	33c0      	adds	r3, #192	; 0xc0
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	501a      	str	r2, [r3, r0]
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b003      	add	sp, #12
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	e000e100 	.word	0xe000e100

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <SysTick_Config+0x40>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d901      	bls.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e010      	b.n	8000868 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SysTick_Config+0x44>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	3a01      	subs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	2103      	movs	r1, #3
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff7d 	bl	8000754 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SysTick_Config+0x44>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x44>)
 8000862:	2207      	movs	r2, #7
 8000864:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000866:	2300      	movs	r3, #0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	00ffffff 	.word	0x00ffffff
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	210f      	movs	r1, #15
 8000884:	187b      	adds	r3, r7, r1
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	187b      	adds	r3, r7, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25b      	sxtb	r3, r3
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <NVIC_SetPriority>
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ffbf 	bl	8000830 <SysTick_Config>
 80008b2:	0003      	movs	r3, r0
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e147      	b.n	8000b5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	4091      	lsls	r1, r2
 80008d6:	000a      	movs	r2, r1
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <HAL_GPIO_Init+0x28>
 80008e2:	e138      	b.n	8000b56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d003      	beq.n	80008f4 <HAL_GPIO_Init+0x38>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	d123      	bne.n	800093c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	58d3      	ldr	r3, [r2, r3]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2207      	movs	r2, #7
 8000906:	4013      	ands	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	409a      	lsls	r2, r3
 800090e:	0013      	movs	r3, r2
 8000910:	43da      	mvns	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2107      	movs	r1, #7
 8000920:	400b      	ands	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	409a      	lsls	r2, r3
 8000926:	0013      	movs	r3, r2
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	6939      	ldr	r1, [r7, #16]
 800093a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	409a      	lsls	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	43da      	mvns	r2, r3
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d00b      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d007      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000984:	2b11      	cmp	r3, #17
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b12      	cmp	r3, #18
 800098e:	d130      	bne.n	80009f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	2203      	movs	r2, #3
 800099c:	409a      	lsls	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	43da      	mvns	r2, r3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	409a      	lsls	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009c6:	2201      	movs	r2, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	2201      	movs	r2, #1
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	055b      	lsls	r3, r3, #21
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_GPIO_Init+0x174>
 8000a2e:	e092      	b.n	8000b56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a30:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3318      	adds	r3, #24
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	589b      	ldr	r3, [r3, r2]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2203      	movs	r2, #3
 8000a42:	4013      	ands	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	220f      	movs	r2, #15
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	43da      	mvns	r2, r3
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0x1ca>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <HAL_GPIO_Init+0x2bc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_GPIO_Init+0x1c6>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a44      	ldr	r2, [pc, #272]	; (8000b7c <HAL_GPIO_Init+0x2c0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x1c2>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a43      	ldr	r2, [pc, #268]	; (8000b80 <HAL_GPIO_Init+0x2c4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_GPIO_Init+0x1be>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x1cc>
 8000a86:	2300      	movs	r3, #0
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	4093      	lsls	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a98:	4936      	ldr	r1, [pc, #216]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3318      	adds	r3, #24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	58d3      	ldr	r3, [r2, r3]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000acc:	4929      	ldr	r1, [pc, #164]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000ad6:	2384      	movs	r3, #132	; 0x84
 8000ad8:	58d3      	ldr	r3, [r2, r3]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	029b      	lsls	r3, r3, #10
 8000aee:	4013      	ands	r3, r2
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afa:	491e      	ldr	r1, [pc, #120]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000afc:	2284      	movs	r2, #132	; 0x84
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	035b      	lsls	r3, r3, #13
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43da      	mvns	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	039b      	lsls	r3, r3, #14
 8000b44:	4013      	ands	r3, r2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_GPIO_Init+0x2b8>)
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	40da      	lsrs	r2, r3
 8000b64:	1e13      	subs	r3, r2, #0
 8000b66:	d000      	beq.n	8000b6a <HAL_GPIO_Init+0x2ae>
 8000b68:	e6b0      	b.n	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b006      	add	sp, #24
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021800 	.word	0x40021800
 8000b78:	50000400 	.word	0x50000400
 8000b7c:	50000800 	.word	0x50000800
 8000b80:	50000c00 	.word	0x50000c00

08000b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	1cbb      	adds	r3, r7, #2
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	801a      	strh	r2, [r3, #0]
 8000b96:	1c7b      	adds	r3, r7, #1
 8000b98:	1c0a      	adds	r2, r1, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	1c7b      	adds	r3, r7, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d004      	beq.n	8000bae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bac:	e003      	b.n	8000bb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bae:	1cbb      	adds	r3, r7, #2
 8000bb0:	881a      	ldrh	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e082      	b.n	8000cd8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2241      	movs	r2, #65	; 0x41
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	2100      	movs	r1, #0
 8000be4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f003 fc79 	bl	80044e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2241      	movs	r2, #65	; 0x41
 8000bf2:	2124      	movs	r1, #36	; 0x24
 8000bf4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	438a      	bics	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <HAL_I2C_Init+0x120>)
 8000c10:	400a      	ands	r2, r1
 8000c12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4931      	ldr	r1, [pc, #196]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d108      	bne.n	8000c3e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0209      	lsls	r1, r1, #8
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	e007      	b.n	8000c4e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2184      	movs	r1, #132	; 0x84
 8000c48:	0209      	lsls	r1, r1, #8
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d104      	bne.n	8000c60 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <HAL_I2C_Init+0x128>)
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	491a      	ldr	r1, [pc, #104]	; (8000ce4 <HAL_I2C_Init+0x124>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	021a      	lsls	r2, r3, #8
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69d9      	ldr	r1, [r3, #28]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2241      	movs	r2, #65	; 0x41
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2242      	movs	r2, #66	; 0x42
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	f0ffffff 	.word	0xf0ffffff
 8000ce4:	ffff7fff 	.word	0xffff7fff
 8000ce8:	02008000 	.word	0x02008000

08000cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0010      	movs	r0, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	1c22      	adds	r2, r4, #0
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	2308      	movs	r3, #8
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	1c02      	adds	r2, r0, #0
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	1c0a      	adds	r2, r1, #0
 8000d0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2241      	movs	r2, #65	; 0x41
 8000d14:	5c9b      	ldrb	r3, [r3, r2]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b20      	cmp	r3, #32
 8000d1a:	d000      	beq.n	8000d1e <HAL_I2C_Mem_Write+0x32>
 8000d1c:	e10c      	b.n	8000f38 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <HAL_I2C_Mem_Write+0x42>
 8000d24:	232c      	movs	r3, #44	; 0x2c
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0ff      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <HAL_I2C_Mem_Write+0x5c>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e0f8      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d50:	f7ff fcd4 	bl	80006fc <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	0219      	lsls	r1, r3, #8
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2319      	movs	r3, #25
 8000d64:	2201      	movs	r2, #1
 8000d66:	f000 fb0b 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e0e3      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2241      	movs	r2, #65	; 0x41
 8000d76:	2121      	movs	r1, #33	; 0x21
 8000d78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2242      	movs	r2, #66	; 0x42
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	222c      	movs	r2, #44	; 0x2c
 8000d92:	18ba      	adds	r2, r7, r2
 8000d94:	8812      	ldrh	r2, [r2, #0]
 8000d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	881c      	ldrh	r4, [r3, #0]
 8000da2:	2308      	movs	r3, #8
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	230a      	movs	r3, #10
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	8819      	ldrh	r1, [r3, #0]
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	0023      	movs	r3, r4
 8000dba:	f000 f9f9 	bl	80011b0 <I2C_RequestMemoryWrite>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0b5      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	2bff      	cmp	r3, #255	; 0xff
 8000dd6:	d911      	bls.n	8000dfc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045c      	lsls	r4, r3, #17
 8000de8:	230a      	movs	r3, #10
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	8819      	ldrh	r1, [r3, #0]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	0023      	movs	r3, r4
 8000df6:	f000 fbe3 	bl	80015c0 <I2C_TransferConfig>
 8000dfa:	e012      	b.n	8000e22 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	049c      	lsls	r4, r3, #18
 8000e10:	230a      	movs	r3, #10
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	8819      	ldrh	r1, [r3, #0]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	0023      	movs	r3, r4
 8000e1e:	f000 fbcf 	bl	80015c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fae8 	bl	80013fe <I2C_WaitOnTXISFlagUntilTimeout>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e081      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03a      	beq.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d136      	bne.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	0013      	movs	r3, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	f000 fa7b 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e053      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d911      	bls.n	8000ec0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	045c      	lsls	r4, r3, #17
 8000eac:	230a      	movs	r3, #10
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	8819      	ldrh	r1, [r3, #0]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	0023      	movs	r3, r4
 8000eba:	f000 fb81 	bl	80015c0 <I2C_TransferConfig>
 8000ebe:	e012      	b.n	8000ee6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	049c      	lsls	r4, r3, #18
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	0023      	movs	r3, r4
 8000ee2:	f000 fb6d 	bl	80015c0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d198      	bne.n	8000e22 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fac0 	bl	800147c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e01a      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	490b      	ldr	r1, [pc, #44]	; (8000f44 <HAL_I2C_Mem_Write+0x258>)
 8000f18:	400a      	ands	r2, r1
 8000f1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2241      	movs	r2, #65	; 0x41
 8000f20:	2120      	movs	r1, #32
 8000f22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2242      	movs	r2, #66	; 0x42
 8000f28:	2100      	movs	r1, #0
 8000f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	2100      	movs	r1, #0
 8000f32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e000      	b.n	8000f3a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8000f38:	2302      	movs	r3, #2
  }
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b007      	add	sp, #28
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fe00e800 	.word	0xfe00e800

08000f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	000c      	movs	r4, r1
 8000f52:	0010      	movs	r0, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	230a      	movs	r3, #10
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	1c22      	adds	r2, r4, #0
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	2308      	movs	r3, #8
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2241      	movs	r2, #65	; 0x41
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b20      	cmp	r3, #32
 8000f76:	d000      	beq.n	8000f7a <HAL_I2C_Mem_Read+0x32>
 8000f78:	e110      	b.n	800119c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <HAL_I2C_Mem_Read+0x42>
 8000f80:	232c      	movs	r3, #44	; 0x2c
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e103      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	5c9b      	ldrb	r3, [r3, r2]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_I2C_Mem_Read+0x5c>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e0fc      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2240      	movs	r2, #64	; 0x40
 8000fa8:	2101      	movs	r1, #1
 8000faa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fac:	f7ff fba6 	bl	80006fc <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	0219      	lsls	r1, r3, #8
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2319      	movs	r3, #25
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f000 f9dd 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0e7      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2241      	movs	r2, #65	; 0x41
 8000fd2:	2122      	movs	r1, #34	; 0x22
 8000fd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2242      	movs	r2, #66	; 0x42
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	222c      	movs	r2, #44	; 0x2c
 8000fee:	18ba      	adds	r2, r7, r2
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ffa:	1dbb      	adds	r3, r7, #6
 8000ffc:	881c      	ldrh	r4, [r3, #0]
 8000ffe:	2308      	movs	r3, #8
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	230a      	movs	r3, #10
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	8819      	ldrh	r1, [r3, #0]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	0023      	movs	r3, r4
 8001016:	f000 f92f 	bl	8001278 <I2C_RequestMemoryRead>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d005      	beq.n	800102a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0b9      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102e:	b29b      	uxth	r3, r3
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d911      	bls.n	8001058 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800103e:	b2da      	uxtb	r2, r3
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	045c      	lsls	r4, r3, #17
 8001044:	230a      	movs	r3, #10
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	8819      	ldrh	r1, [r3, #0]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_I2C_Mem_Read+0x260>)
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	0023      	movs	r3, r4
 8001052:	f000 fab5 	bl	80015c0 <I2C_TransferConfig>
 8001056:	e012      	b.n	800107e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001066:	b2da      	uxtb	r2, r3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	049c      	lsls	r4, r3, #18
 800106c:	230a      	movs	r3, #10
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <HAL_I2C_Mem_Read+0x260>)
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	0023      	movs	r3, r4
 800107a:	f000 faa1 	bl	80015c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800107e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	0013      	movs	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	2104      	movs	r1, #4
 800108c:	f000 f978 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e082      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03a      	beq.n	800114a <HAL_I2C_Mem_Read+0x202>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d136      	bne.n	800114a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	0013      	movs	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	f000 f949 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e053      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d911      	bls.n	8001124 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	b2da      	uxtb	r2, r3
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	045c      	lsls	r4, r3, #17
 8001110:	230a      	movs	r3, #10
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	8819      	ldrh	r1, [r3, #0]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	2300      	movs	r3, #0
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	0023      	movs	r3, r4
 800111e:	f000 fa4f 	bl	80015c0 <I2C_TransferConfig>
 8001122:	e012      	b.n	800114a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001128:	b29a      	uxth	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001132:	b2da      	uxtb	r2, r3
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	049c      	lsls	r4, r3, #18
 8001138:	230a      	movs	r3, #10
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	0023      	movs	r3, r4
 8001146:	f000 fa3b 	bl	80015c0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d194      	bne.n	800107e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f98e 	bl	800147c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e01a      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2220      	movs	r2, #32
 800116e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	490c      	ldr	r1, [pc, #48]	; (80011ac <HAL_I2C_Mem_Read+0x264>)
 800117c:	400a      	ands	r2, r1
 800117e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2241      	movs	r2, #65	; 0x41
 8001184:	2120      	movs	r1, #32
 8001186:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2242      	movs	r2, #66	; 0x42
 800118c:	2100      	movs	r1, #0
 800118e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800119c:	2302      	movs	r3, #2
  }
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b007      	add	sp, #28
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	80002400 	.word	0x80002400
 80011ac:	fe00e800 	.word	0xfe00e800

080011b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	000c      	movs	r4, r1
 80011ba:	0010      	movs	r0, r2
 80011bc:	0019      	movs	r1, r3
 80011be:	250a      	movs	r5, #10
 80011c0:	197b      	adds	r3, r7, r5
 80011c2:	1c22      	adds	r2, r4, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	2308      	movs	r3, #8
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	1c02      	adds	r2, r0, #0
 80011cc:	801a      	strh	r2, [r3, #0]
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	1c0a      	adds	r2, r1, #0
 80011d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	045c      	lsls	r4, r3, #17
 80011de:	197b      	adds	r3, r7, r5
 80011e0:	8819      	ldrh	r1, [r3, #0]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <I2C_RequestMemoryWrite+0xc4>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	0023      	movs	r3, r4
 80011ea:	f000 f9e9 	bl	80015c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f0:	6a39      	ldr	r1, [r7, #32]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f902 	bl	80013fe <I2C_WaitOnTXISFlagUntilTimeout>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e033      	b.n	800126a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d107      	bne.n	800121a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800120a:	2308      	movs	r3, #8
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
 8001218:	e019      	b.n	800124e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800121a:	2308      	movs	r3, #8
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800122c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122e:	6a39      	ldr	r1, [r7, #32]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0018      	movs	r0, r3
 8001234:	f000 f8e3 	bl	80013fe <I2C_WaitOnTXISFlagUntilTimeout>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e014      	b.n	800126a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001240:	2308      	movs	r3, #8
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	0013      	movs	r3, r2
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	f000 f890 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bdb0      	pop	{r4, r5, r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	80002000 	.word	0x80002000

08001278 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	000c      	movs	r4, r1
 8001282:	0010      	movs	r0, r2
 8001284:	0019      	movs	r1, r3
 8001286:	250a      	movs	r5, #10
 8001288:	197b      	adds	r3, r7, r5
 800128a:	1c22      	adds	r2, r4, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	2308      	movs	r3, #8
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	1c02      	adds	r2, r0, #0
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	1dbb      	adds	r3, r7, #6
 8001298:	1c0a      	adds	r2, r1, #0
 800129a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	197b      	adds	r3, r7, r5
 80012a4:	8819      	ldrh	r1, [r3, #0]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <I2C_RequestMemoryRead+0xc0>)
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	f000 f987 	bl	80015c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b4:	6a39      	ldr	r1, [r7, #32]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 f8a0 	bl	80013fe <I2C_WaitOnTXISFlagUntilTimeout>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d001      	beq.n	80012c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e033      	b.n	800132e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012ce:	2308      	movs	r3, #8
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
 80012dc:	e019      	b.n	8001312 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012de:	2308      	movs	r3, #8
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f2:	6a39      	ldr	r1, [r7, #32]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 f881 	bl	80013fe <I2C_WaitOnTXISFlagUntilTimeout>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e014      	b.n	800132e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001304:	2308      	movs	r3, #8
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001312:	6a3a      	ldr	r2, [r7, #32]
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	0013      	movs	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	f000 f82e 	bl	8001380 <I2C_WaitOnFlagUntilTimeout>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b004      	add	sp, #16
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	80002000 	.word	0x80002000

0800133c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d103      	bne.n	800135a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	2b01      	cmp	r3, #1
 8001366:	d007      	beq.n	8001378 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	619a      	str	r2, [r3, #24]
  }
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001390:	e021      	b.n	80013d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	d01e      	beq.n	80013d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001398:	f7ff f9b0 	bl	80006fc <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d302      	bcc.n	80013ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d113      	bne.n	80013d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	2220      	movs	r2, #32
 80013b4:	431a      	orrs	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2241      	movs	r2, #65	; 0x41
 80013be:	2120      	movs	r1, #32
 80013c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2242      	movs	r2, #66	; 0x42
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	2100      	movs	r1, #0
 80013d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	4013      	ands	r3, r2
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	425a      	negs	r2, r3
 80013e6:	4153      	adcs	r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	001a      	movs	r2, r3
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d0ce      	beq.n	8001392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}

080013fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800140a:	e02b      	b.n	8001464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f86e 	bl	80014f4 <I2C_IsAcknowledgeFailed>
 8001418:	1e03      	subs	r3, r0, #0
 800141a:	d001      	beq.n	8001420 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e029      	b.n	8001474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	d01e      	beq.n	8001464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001426:	f7ff f969 	bl	80006fc <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	d302      	bcc.n	800143c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d113      	bne.n	8001464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	2220      	movs	r2, #32
 8001442:	431a      	orrs	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2241      	movs	r2, #65	; 0x41
 800144c:	2120      	movs	r1, #32
 800144e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2242      	movs	r2, #66	; 0x42
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2240      	movs	r2, #64	; 0x40
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e007      	b.n	8001474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	2b02      	cmp	r3, #2
 8001470:	d1cc      	bne.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}

0800147c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001488:	e028      	b.n	80014dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f82f 	bl	80014f4 <I2C_IsAcknowledgeFailed>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e026      	b.n	80014ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149e:	f7ff f92d 	bl	80006fc <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d302      	bcc.n	80014b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d113      	bne.n	80014dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	2220      	movs	r2, #32
 80014ba:	431a      	orrs	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2241      	movs	r2, #65	; 0x41
 80014c4:	2120      	movs	r1, #32
 80014c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2242      	movs	r2, #66	; 0x42
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e007      	b.n	80014ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2220      	movs	r2, #32
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d1cf      	bne.n	800148a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b004      	add	sp, #16
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2210      	movs	r2, #16
 8001508:	4013      	ands	r3, r2
 800150a:	2b10      	cmp	r3, #16
 800150c:	d151      	bne.n	80015b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800150e:	e021      	b.n	8001554 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3301      	adds	r3, #1
 8001514:	d01e      	beq.n	8001554 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001516:	f7ff f8f1 	bl	80006fc <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	429a      	cmp	r2, r3
 8001524:	d302      	bcc.n	800152c <I2C_IsAcknowledgeFailed+0x38>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d113      	bne.n	8001554 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	2220      	movs	r2, #32
 8001532:	431a      	orrs	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2241      	movs	r2, #65	; 0x41
 800153c:	2120      	movs	r1, #32
 800153e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2242      	movs	r2, #66	; 0x42
 8001544:	2100      	movs	r1, #0
 8001546:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e02f      	b.n	80015b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2220      	movs	r2, #32
 800155c:	4013      	ands	r3, r2
 800155e:	2b20      	cmp	r3, #32
 8001560:	d1d6      	bne.n	8001510 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2210      	movs	r2, #16
 8001568:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2220      	movs	r2, #32
 8001570:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fee1 	bl	800133c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	490d      	ldr	r1, [pc, #52]	; (80015bc <I2C_IsAcknowledgeFailed+0xc8>)
 8001586:	400a      	ands	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	2204      	movs	r2, #4
 8001590:	431a      	orrs	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2241      	movs	r2, #65	; 0x41
 800159a:	2120      	movs	r1, #32
 800159c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2242      	movs	r2, #66	; 0x42
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2240      	movs	r2, #64	; 0x40
 80015aa:	2100      	movs	r1, #0
 80015ac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	fe00e800 	.word	0xfe00e800

080015c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	0008      	movs	r0, r1
 80015ca:	0011      	movs	r1, r2
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	240a      	movs	r4, #10
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	1c02      	adds	r2, r0, #0
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	2009      	movs	r0, #9
 80015d8:	183b      	adds	r3, r7, r0
 80015da:	1c0a      	adds	r2, r1, #0
 80015dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	0d51      	lsrs	r1, r2, #21
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	00d2      	lsls	r2, r2, #3
 80015ec:	400a      	ands	r2, r1
 80015ee:	490e      	ldr	r1, [pc, #56]	; (8001628 <I2C_TransferConfig+0x68>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	43d2      	mvns	r2, r2
 80015f4:	401a      	ands	r2, r3
 80015f6:	0011      	movs	r1, r2
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	059b      	lsls	r3, r3, #22
 80015fe:	0d9a      	lsrs	r2, r3, #22
 8001600:	183b      	adds	r3, r7, r0
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	0418      	lsls	r0, r3, #16
 8001606:	23ff      	movs	r3, #255	; 0xff
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	4003      	ands	r3, r0
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	431a      	orrs	r2, r3
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b005      	add	sp, #20
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	03ff63ff 	.word	0x03ff63ff

0800162c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	; 0x41
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b20      	cmp	r3, #32
 8001640:	d138      	bne.n	80016b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2240      	movs	r2, #64	; 0x40
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800164c:	2302      	movs	r3, #2
 800164e:	e032      	b.n	80016b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2240      	movs	r2, #64	; 0x40
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2241      	movs	r2, #65	; 0x41
 800165c:	2124      	movs	r1, #36	; 0x24
 800165e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4911      	ldr	r1, [pc, #68]	; (80016c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2101      	movs	r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2241      	movs	r2, #65	; 0x41
 80016a4:	2120      	movs	r1, #32
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016b4:	2302      	movs	r3, #2
  }
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	ffffefff 	.word	0xffffefff

080016c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2241      	movs	r2, #65	; 0x41
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d139      	bne.n	800174e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	5c9b      	ldrb	r3, [r3, r2]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e033      	b.n	8001750 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2241      	movs	r2, #65	; 0x41
 80016f4:	2124      	movs	r1, #36	; 0x24
 80016f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2241      	movs	r2, #65	; 0x41
 800173e:	2120      	movs	r1, #32
 8001740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
  }
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	fffff0ff 	.word	0xfffff0ff

0800175c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800176a:	4013      	ands	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d11f      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	0013      	movs	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	189b      	adds	r3, r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4912      	ldr	r1, [pc, #72]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800178e:	0018      	movs	r0, r3
 8001790:	f7fe fcb8 	bl	8000104 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179a:	e008      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e001      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e009      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	401a      	ands	r2, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	429a      	cmp	r2, r3
 80017be:	d0ed      	beq.n	800179c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b004      	add	sp, #16
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40007000 	.word	0x40007000
 80017d0:	fffff9ff 	.word	0xfffff9ff
 80017d4:	20000008 	.word	0x20000008
 80017d8:	000f4240 	.word	0x000f4240

080017dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	23e0      	movs	r3, #224	; 0xe0
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4013      	ands	r3, r2
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e304      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x1e>
 8001810:	e07c      	b.n	800190c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4bc3      	ldr	r3, [pc, #780]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2238      	movs	r2, #56	; 0x38
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	4bc0      	ldr	r3, [pc, #768]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2203      	movs	r2, #3
 8001822:	4013      	ands	r3, r2
 8001824:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b10      	cmp	r3, #16
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x3e>
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d002      	beq.n	8001838 <HAL_RCC_OscConfig+0x44>
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d10b      	bne.n	8001850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4bb9      	ldr	r3, [pc, #740]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d062      	beq.n	800190a <HAL_RCC_OscConfig+0x116>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d15e      	bne.n	800190a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e2df      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	429a      	cmp	r2, r3
 800185a:	d107      	bne.n	800186c <HAL_RCC_OscConfig+0x78>
 800185c:	4bb0      	ldr	r3, [pc, #704]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4baf      	ldr	r3, [pc, #700]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0249      	lsls	r1, r1, #9
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e020      	b.n	80018ae <HAL_RCC_OscConfig+0xba>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	23a0      	movs	r3, #160	; 0xa0
 8001872:	02db      	lsls	r3, r3, #11
 8001874:	429a      	cmp	r2, r3
 8001876:	d10e      	bne.n	8001896 <HAL_RCC_OscConfig+0xa2>
 8001878:	4ba9      	ldr	r3, [pc, #676]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4ba8      	ldr	r3, [pc, #672]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	02c9      	lsls	r1, r1, #11
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4ba6      	ldr	r3, [pc, #664]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4ba5      	ldr	r3, [pc, #660]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0xba>
 8001896:	4ba2      	ldr	r3, [pc, #648]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4ba1      	ldr	r3, [pc, #644]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800189c:	49a1      	ldr	r1, [pc, #644]	; (8001b24 <HAL_RCC_OscConfig+0x330>)
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4b9f      	ldr	r3, [pc, #636]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b9e      	ldr	r3, [pc, #632]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	499f      	ldr	r1, [pc, #636]	; (8001b28 <HAL_RCC_OscConfig+0x334>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d014      	beq.n	80018e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7fe ff21 	bl	80006fc <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7fe ff1c 	bl	80006fc <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e29e      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d2:	4b93      	ldr	r3, [pc, #588]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xcc>
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7fe ff0c 	bl	80006fc <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ea:	f7fe ff07 	bl	80006fc <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e289      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fc:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	4013      	ands	r3, r2
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0xf6>
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x124>
 8001916:	e099      	b.n	8001a4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2238      	movs	r2, #56	; 0x38
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001922:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2203      	movs	r2, #3
 8001928:	4013      	ands	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d102      	bne.n	8001938 <HAL_RCC_OscConfig+0x144>
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d002      	beq.n	800193e <HAL_RCC_OscConfig+0x14a>
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d135      	bne.n	80019aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4013      	ands	r3, r2
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x162>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e25c      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a74      	ldr	r2, [pc, #464]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	021a      	lsls	r2, r3, #8
 8001966:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d112      	bne.n	8001998 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x33c>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001986:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	2207      	movs	r2, #7
 800198e:	4013      	ands	r3, r2
 8001990:	4a68      	ldr	r2, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x340>)
 8001992:	40da      	lsrs	r2, r3
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x344>)
 8001996:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x348>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0018      	movs	r0, r3
 800199e:	f7fe fe53 	bl	8000648 <HAL_InitTick>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d051      	beq.n	8001a4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e232      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d030      	beq.n	8001a14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <HAL_RCC_OscConfig+0x33c>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0049      	lsls	r1, r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7fe fe92 	bl	80006fc <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7fe fe8d 	bl	80006fc <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e20f      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x338>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	021a      	lsls	r2, r3, #8
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e01b      	b.n	8001a4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	4949      	ldr	r1, [pc, #292]	; (8001b40 <HAL_RCC_OscConfig+0x34c>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7fe fe6c 	bl	80006fc <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7fe fe67 	bl	80006fc <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1e9      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x236>
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	4013      	ands	r3, r2
 8001a54:	d047      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2238      	movs	r2, #56	; 0x38
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b18      	cmp	r3, #24
 8001a60:	d10a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d03c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d138      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e1cb      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d019      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fe36 	bl	80006fc <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7fe fe31 	bl	80006fc <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1b3      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0f1      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2a2>
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	438a      	bics	r2, r1
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fe1c 	bl	80006fc <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7fe fe17 	bl	80006fc <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e199      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d1f1      	bne.n	8001aca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2fe>
 8001af0:	e0c6      	b.n	8001c80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	231f      	movs	r3, #31
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2238      	movs	r2, #56	; 0x38
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d11e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x31e>
 8001b10:	e0b6      	b.n	8001c80 <HAL_RCC_OscConfig+0x48c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d000      	beq.n	8001b1c <HAL_RCC_OscConfig+0x328>
 8001b1a:	e0b1      	b.n	8001c80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e177      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffeffff 	.word	0xfffeffff
 8001b28:	fffbffff 	.word	0xfffbffff
 8001b2c:	ffff80ff 	.word	0xffff80ff
 8001b30:	ffffc7ff 	.word	0xffffc7ff
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b44:	4bb4      	ldr	r3, [pc, #720]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	055b      	lsls	r3, r3, #21
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x360>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x362>
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d011      	beq.n	8001b7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4baf      	ldr	r3, [pc, #700]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5e:	4bae      	ldr	r3, [pc, #696]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0549      	lsls	r1, r1, #21
 8001b64:	430a      	orrs	r2, r1
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b68:	4bab      	ldr	r3, [pc, #684]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	055b      	lsls	r3, r3, #21
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b76:	231f      	movs	r3, #31
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7e:	4ba7      	ldr	r3, [pc, #668]	; (8001e1c <HAL_RCC_OscConfig+0x628>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	d11a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8a:	4ba4      	ldr	r3, [pc, #656]	; (8001e1c <HAL_RCC_OscConfig+0x628>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <HAL_RCC_OscConfig+0x628>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0049      	lsls	r1, r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b98:	f7fe fdb0 	bl	80006fc <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7fe fdab 	bl	80006fc <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e12d      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <HAL_RCC_OscConfig+0x628>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e2>
 8001bc8:	4b93      	ldr	r3, [pc, #588]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x404>
 8001bde:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001be0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be2:	4b8d      	ldr	r3, [pc, #564]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001be4:	2104      	movs	r1, #4
 8001be6:	430a      	orrs	r2, r1
 8001be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bea:	4b8b      	ldr	r3, [pc, #556]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bee:	4b8a      	ldr	r3, [pc, #552]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
 8001bf8:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfc:	4b86      	ldr	r3, [pc, #536]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	438a      	bics	r2, r1
 8001c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c04:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c08:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d014      	beq.n	8001c42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe fd70 	bl	80006fc <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe fd6b 	bl	80006fc <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x62c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0ec      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x42e>
 8001c40:	e013      	b.n	8001c6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe fd5b 	bl	80006fc <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4a:	e009      	b.n	8001c60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7fe fd56 	bl	80006fc <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x62c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0d7      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	4b6d      	ldr	r3, [pc, #436]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c6a:	231f      	movs	r3, #31
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c7a:	496a      	ldr	r1, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x630>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x496>
 8001c88:	e0c1      	b.n	8001e0e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	; 0x38
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4a4>
 8001c96:	e081      	b.n	8001d9c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d156      	bne.n	8001d4e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001ca6:	4960      	ldr	r1, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x634>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe fd26 	bl	80006fc <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fd21 	bl	80006fc <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0a3      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	049b      	lsls	r3, r3, #18
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_RCC_OscConfig+0x638>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	431a      	orrs	r2, r3
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0449      	lsls	r1, r1, #17
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe fcea 	bl	80006fc <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe fce5 	bl	80006fc <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e067      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	049b      	lsls	r3, r3, #18
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x53a>
 8001d4c:	e05f      	b.n	8001e0e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d54:	4934      	ldr	r1, [pc, #208]	; (8001e28 <HAL_RCC_OscConfig+0x634>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d60:	2103      	movs	r1, #3
 8001d62:	438a      	bics	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d6c:	4930      	ldr	r1, [pc, #192]	; (8001e30 <HAL_RCC_OscConfig+0x63c>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe fcc3 	bl	80006fc <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe fcbe 	bl	80006fc <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e040      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x588>
 8001d9a:	e038      	b.n	8001e0e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e033      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x624>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2203      	movs	r2, #3
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d126      	bne.n	8001e0a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2270      	movs	r2, #112	; 0x70
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d11f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	23fe      	movs	r3, #254	; 0xfe
 8001dce:	01db      	lsls	r3, r3, #7
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d116      	bne.n	8001e0a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	23f8      	movs	r3, #248	; 0xf8
 8001de0:	039b      	lsls	r3, r3, #14
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d10e      	bne.n	8001e0a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	23e0      	movs	r3, #224	; 0xe0
 8001df0:	051b      	lsls	r3, r3, #20
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0f5b      	lsrs	r3, r3, #29
 8001e00:	075a      	lsls	r2, r3, #29
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b008      	add	sp, #32
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	00001388 	.word	0x00001388
 8001e24:	efffffff 	.word	0xefffffff
 8001e28:	feffffff 	.word	0xfeffffff
 8001e2c:	11c1808c 	.word	0x11c1808c
 8001e30:	eefeffff 	.word	0xeefeffff

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0e9      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d91e      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fc48 	bl	80006fc <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7fe fc43 	bl	80006fc <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0ca      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d015      	beq.n	8001eca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d006      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	21e0      	movs	r1, #224	; 0xe0
 8001eb0:	01c9      	lsls	r1, r1, #7
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_RCC_ClockConfig+0x1fc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d057      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d12b      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e097      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	049b      	lsls	r3, r3, #18
 8001efc:	4013      	ands	r3, r2
 8001efe:	d11f      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e08b      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4013      	ands	r3, r2
 8001f16:	d113      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e07f      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e074      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e06d      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2207      	movs	r2, #7
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f54:	f7fe fbd2 	bl	80006fc <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	e009      	b.n	8001f72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7fe fbcd 	bl	80006fc <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e054      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2238      	movs	r2, #56	; 0x38
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1ec      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2207      	movs	r2, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d21e      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa4:	f7fe fbaa 	bl	80006fc <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7fe fba5 	bl	80006fc <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_RCC_ClockConfig+0x1f4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e02c      	b.n	800201c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	4013      	ands	r3, r2
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_RCC_ClockConfig+0x200>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fee:	f000 f829 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff2:	0001      	movs	r1, r0
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x204>)
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	58d3      	ldr	r3, [r2, r3]
 8002004:	221f      	movs	r2, #31
 8002006:	4013      	ands	r3, r2
 8002008:	000a      	movs	r2, r1
 800200a:	40da      	lsrs	r2, r3
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x208>)
 800200e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x20c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe fb17 	bl	8000648 <HAL_InitTick>
 800201a:	0003      	movs	r3, r0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40022000 	.word	0x40022000
 8002028:	00001388 	.word	0x00001388
 800202c:	40021000 	.word	0x40021000
 8002030:	fffff0ff 	.word	0xfffff0ff
 8002034:	ffff8fff 	.word	0xffff8fff
 8002038:	0800472c 	.word	0x0800472c
 800203c:	20000008 	.word	0x20000008
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800204a:	4b3c      	ldr	r3, [pc, #240]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	d10f      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0adb      	lsrs	r3, r3, #11
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4835      	ldr	r0, [pc, #212]	; (8002140 <HAL_RCC_GetSysClockFreq+0xfc>)
 800206a:	f7fe f84b 	bl	8000104 <__udivsi3>
 800206e:	0003      	movs	r3, r0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e05d      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2238      	movs	r2, #56	; 0x38
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d102      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_GetSysClockFreq+0x100>)
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e054      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2238      	movs	r2, #56	; 0x38
 800208c:	4013      	ands	r3, r2
 800208e:	2b10      	cmp	r3, #16
 8002090:	d138      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2203      	movs	r2, #3
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	2207      	movs	r2, #7
 80020a4:	4013      	ands	r3, r2
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4824      	ldr	r0, [pc, #144]	; (8002144 <HAL_RCC_GetSysClockFreq+0x100>)
 80020b4:	f7fe f826 	bl	8000104 <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	0019      	movs	r1, r3
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	227f      	movs	r2, #127	; 0x7f
 80020c4:	4013      	ands	r3, r2
 80020c6:	434b      	muls	r3, r1
 80020c8:	617b      	str	r3, [r7, #20]
        break;
 80020ca:	e00d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020d0:	f7fe f818 	bl	8000104 <__udivsi3>
 80020d4:	0003      	movs	r3, r0
 80020d6:	0019      	movs	r1, r3
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	227f      	movs	r2, #127	; 0x7f
 80020e0:	4013      	ands	r3, r2
 80020e2:	434b      	muls	r3, r1
 80020e4:	617b      	str	r3, [r7, #20]
        break;
 80020e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0f5b      	lsrs	r3, r3, #29
 80020ee:	2207      	movs	r2, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7fe f803 	bl	8000104 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e015      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2238      	movs	r2, #56	; 0x38
 800210a:	4013      	ands	r3, r2
 800210c:	2b20      	cmp	r3, #32
 800210e:	d103      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2238      	movs	r2, #56	; 0x38
 800211e:	4013      	ands	r3, r2
 8002120:	2b18      	cmp	r3, #24
 8002122:	d103      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002124:	23fa      	movs	r3, #250	; 0xfa
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e001      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002130:	693b      	ldr	r3, [r7, #16]
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b006      	add	sp, #24
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40021000 	.word	0x40021000
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	0004      	movs	r4, r0
 8002166:	f7ff fb39 	bl	80017dc <LL_RCC_GetAPB1Prescaler>
 800216a:	0003      	movs	r3, r0
 800216c:	0b1a      	lsrs	r2, r3, #12
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	58d3      	ldr	r3, [r2, r3]
 8002174:	221f      	movs	r2, #31
 8002176:	4013      	ands	r3, r2
 8002178:	40dc      	lsrs	r4, r3
 800217a:	0023      	movs	r3, r4
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	0800476c 	.word	0x0800476c

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002190:	2313      	movs	r3, #19
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2312      	movs	r3, #18
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021ac:	e0a4      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2311      	movs	r3, #17
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4bc3      	ldr	r3, [pc, #780]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	4013      	ands	r3, r2
 80021c0:	d111      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4bc0      	ldr	r3, [pc, #768]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c6:	4bbf      	ldr	r3, [pc, #764]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80021d0:	4bbc      	ldr	r3, [pc, #752]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	2311      	movs	r3, #17
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	4bb8      	ldr	r3, [pc, #736]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4bb7      	ldr	r3, [pc, #732]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0049      	lsls	r1, r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fa82 	bl	80006fc <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021fc:	e00b      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fa7d 	bl	80006fc <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d904      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800220c:	2313      	movs	r3, #19
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2203      	movs	r2, #3
 8002212:	701a      	strb	r2, [r3, #0]
        break;
 8002214:	e005      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	4bac      	ldr	r3, [pc, #688]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4013      	ands	r3, r2
 8002220:	d0ed      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002222:	2313      	movs	r3, #19
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d154      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222c:	4ba5      	ldr	r3, [pc, #660]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002230:	23c0      	movs	r3, #192	; 0xc0
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d014      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002248:	4b9e      	ldr	r3, [pc, #632]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	4a9f      	ldr	r2, [pc, #636]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800224e:	4013      	ands	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002252:	4b9c      	ldr	r3, [pc, #624]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002256:	4b9b      	ldr	r3, [pc, #620]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	0249      	lsls	r1, r1, #9
 800225c:	430a      	orrs	r2, r1
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002260:	4b98      	ldr	r3, [pc, #608]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002264:	4b97      	ldr	r3, [pc, #604]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002266:	499a      	ldr	r1, [pc, #616]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002268:	400a      	ands	r2, r1
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800226c:	4b95      	ldr	r3, [pc, #596]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2201      	movs	r2, #1
 8002276:	4013      	ands	r3, r2
 8002278:	d016      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fa3f 	bl	80006fc <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002282:	e00c      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7fe fa3a 	bl	80006fc <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	4a91      	ldr	r2, [pc, #580]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d904      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002294:	2313      	movs	r3, #19
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2203      	movs	r2, #3
 800229a:	701a      	strb	r2, [r3, #0]
            break;
 800229c:	e004      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0ed      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80022a8:	2313      	movs	r3, #19
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b2:	4b84      	ldr	r3, [pc, #528]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	4a85      	ldr	r2, [pc, #532]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80022c6:	e00c      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c8:	2312      	movs	r3, #18
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	2213      	movs	r2, #19
 80022ce:	18ba      	adds	r2, r7, r2
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e005      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d6:	2312      	movs	r3, #18
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2213      	movs	r2, #19
 80022dc:	18ba      	adds	r2, r7, r2
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e2:	2311      	movs	r3, #17
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f2:	4979      	ldr	r1, [pc, #484]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002302:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2203      	movs	r2, #3
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	430a      	orrs	r2, r1
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	220c      	movs	r2, #12
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	430a      	orrs	r2, r1
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234e:	430a      	orrs	r2, r1
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4013      	ands	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238e:	430a      	orrs	r2, r1
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	4013      	ands	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	01db      	lsls	r3, r3, #7
 80023b8:	4013      	ands	r3, r2
 80023ba:	d015      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	0899      	lsrs	r1, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	05db      	lsls	r3, r3, #23
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d106      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0249      	lsls	r1, r1, #9
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	031b      	lsls	r3, r3, #12
 80023f0:	4013      	ands	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023f4:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002404:	430a      	orrs	r2, r1
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	039b      	lsls	r3, r3, #14
 8002410:	4013      	ands	r3, r2
 8002412:	d016      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	4a34      	ldr	r2, [pc, #208]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002424:	430a      	orrs	r2, r1
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	03db      	lsls	r3, r3, #15
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0449      	lsls	r1, r1, #17
 800243e:	430a      	orrs	r2, r1
 8002440:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	03db      	lsls	r3, r3, #15
 800244a:	4013      	ands	r3, r2
 800244c:	d016      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245e:	430a      	orrs	r2, r1
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	045b      	lsls	r3, r3, #17
 800246a:	429a      	cmp	r2, r3
 800246c:	d106      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0449      	lsls	r1, r1, #17
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d016      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002498:	430a      	orrs	r2, r1
 800249a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0249      	lsls	r1, r1, #9
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80024b6:	2312      	movs	r3, #18
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	781b      	ldrb	r3, [r3, #0]
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b006      	add	sp, #24
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
 80024cc:	fffffcff 	.word	0xfffffcff
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	00001388 	.word	0x00001388
 80024d8:	efffffff 	.word	0xefffffff
 80024dc:	fffff3ff 	.word	0xfffff3ff
 80024e0:	fff3ffff 	.word	0xfff3ffff
 80024e4:	ffcfffff 	.word	0xffcfffff
 80024e8:	ffffcfff 	.word	0xffffcfff
 80024ec:	ffbfffff 	.word	0xffbfffff
 80024f0:	feffffff 	.word	0xfeffffff
 80024f4:	ffff3fff 	.word	0xffff3fff

080024f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e046      	b.n	8002598 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	589b      	ldr	r3, [r3, r2]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	227c      	movs	r2, #124	; 0x7c
 8002518:	2100      	movs	r1, #0
 800251a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	0018      	movs	r0, r3
 8002520:	f002 f82a 	bl	8004578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	2124      	movs	r1, #36	; 0x24
 800252a:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f830 	bl	80025a4 <UART_SetConfig>
 8002544:	0003      	movs	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e024      	b.n	8002598 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f001 f90d 	bl	8003778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	490d      	ldr	r1, [pc, #52]	; (80025a0 <HAL_UART_Init+0xa8>)
 800256a:	400a      	ands	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	212a      	movs	r1, #42	; 0x2a
 800257a:	438a      	bics	r2, r1
 800257c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f001 f9a5 	bl	80038e0 <UART_CheckIdleState>
 8002596:	0003      	movs	r3, r0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	ffffb7ff 	.word	0xffffb7ff

080025a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b09f      	sub	sp, #124	; 0x7c
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b0:	2313      	movs	r3, #19
 80025b2:	2258      	movs	r2, #88	; 0x58
 80025b4:	18ba      	adds	r2, r7, r2
 80025b6:	18d2      	adds	r2, r2, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80025bc:	2300      	movs	r3, #0
 80025be:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 80025d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025de:	4313      	orrs	r3, r2
 80025e0:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4bba      	ldr	r3, [pc, #744]	; (80028d4 <UART_SetConfig+0x330>)
 80025ea:	401a      	ands	r2, r3
 80025ec:	0011      	movs	r1, r2
 80025ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4bb6      	ldr	r3, [pc, #728]	; (80028d8 <UART_SetConfig+0x334>)
 8002600:	401a      	ands	r2, r3
 8002602:	0010      	movs	r0, r2
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	0003      	movs	r3, r0
 800260e:	430b      	orrs	r3, r1
 8002610:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4baf      	ldr	r3, [pc, #700]	; (80028dc <UART_SetConfig+0x338>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d004      	beq.n	800262c <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002628:	4313      	orrs	r3, r2
 800262a:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800262c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4bab      	ldr	r3, [pc, #684]	; (80028e0 <UART_SetConfig+0x33c>)
 8002634:	401a      	ands	r2, r3
 8002636:	0011      	movs	r1, r2
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	430b      	orrs	r3, r1
 8002640:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	230f      	movs	r3, #15
 800264a:	439a      	bics	r2, r3
 800264c:	0010      	movs	r0, r2
 800264e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002650:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	0003      	movs	r3, r0
 8002658:	430b      	orrs	r3, r1
 800265a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <UART_SetConfig+0x340>)
 8002662:	429a      	cmp	r2, r3
 8002664:	d12f      	bne.n	80026c6 <UART_SetConfig+0x122>
 8002666:	4ba0      	ldr	r3, [pc, #640]	; (80028e8 <UART_SetConfig+0x344>)
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	2303      	movs	r3, #3
 800266c:	4013      	ands	r3, r2
 800266e:	2b01      	cmp	r3, #1
 8002670:	d013      	beq.n	800269a <UART_SetConfig+0xf6>
 8002672:	d304      	bcc.n	800267e <UART_SetConfig+0xda>
 8002674:	2b02      	cmp	r3, #2
 8002676:	d009      	beq.n	800268c <UART_SetConfig+0xe8>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d015      	beq.n	80026a8 <UART_SetConfig+0x104>
 800267c:	e01b      	b.n	80026b6 <UART_SetConfig+0x112>
 800267e:	231b      	movs	r3, #27
 8002680:	2258      	movs	r2, #88	; 0x58
 8002682:	18ba      	adds	r2, r7, r2
 8002684:	18d2      	adds	r2, r2, r3
 8002686:	2300      	movs	r3, #0
 8002688:	7013      	strb	r3, [r2, #0]
 800268a:	e0b4      	b.n	80027f6 <UART_SetConfig+0x252>
 800268c:	231b      	movs	r3, #27
 800268e:	2258      	movs	r2, #88	; 0x58
 8002690:	18ba      	adds	r2, r7, r2
 8002692:	18d2      	adds	r2, r2, r3
 8002694:	2302      	movs	r3, #2
 8002696:	7013      	strb	r3, [r2, #0]
 8002698:	e0ad      	b.n	80027f6 <UART_SetConfig+0x252>
 800269a:	231b      	movs	r3, #27
 800269c:	2258      	movs	r2, #88	; 0x58
 800269e:	18ba      	adds	r2, r7, r2
 80026a0:	18d2      	adds	r2, r2, r3
 80026a2:	2304      	movs	r3, #4
 80026a4:	7013      	strb	r3, [r2, #0]
 80026a6:	e0a6      	b.n	80027f6 <UART_SetConfig+0x252>
 80026a8:	231b      	movs	r3, #27
 80026aa:	2258      	movs	r2, #88	; 0x58
 80026ac:	18ba      	adds	r2, r7, r2
 80026ae:	18d2      	adds	r2, r2, r3
 80026b0:	2308      	movs	r3, #8
 80026b2:	7013      	strb	r3, [r2, #0]
 80026b4:	e09f      	b.n	80027f6 <UART_SetConfig+0x252>
 80026b6:	231b      	movs	r3, #27
 80026b8:	2258      	movs	r2, #88	; 0x58
 80026ba:	18ba      	adds	r2, r7, r2
 80026bc:	18d2      	adds	r2, r2, r3
 80026be:	2310      	movs	r3, #16
 80026c0:	7013      	strb	r3, [r2, #0]
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	e097      	b.n	80027f6 <UART_SetConfig+0x252>
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b88      	ldr	r3, [pc, #544]	; (80028ec <UART_SetConfig+0x348>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d132      	bne.n	8002736 <UART_SetConfig+0x192>
 80026d0:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <UART_SetConfig+0x344>)
 80026d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026d4:	230c      	movs	r3, #12
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d016      	beq.n	800270a <UART_SetConfig+0x166>
 80026dc:	d802      	bhi.n	80026e4 <UART_SetConfig+0x140>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <UART_SetConfig+0x14a>
 80026e2:	e020      	b.n	8002726 <UART_SetConfig+0x182>
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d009      	beq.n	80026fc <UART_SetConfig+0x158>
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d015      	beq.n	8002718 <UART_SetConfig+0x174>
 80026ec:	e01b      	b.n	8002726 <UART_SetConfig+0x182>
 80026ee:	231b      	movs	r3, #27
 80026f0:	2258      	movs	r2, #88	; 0x58
 80026f2:	18ba      	adds	r2, r7, r2
 80026f4:	18d2      	adds	r2, r2, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	7013      	strb	r3, [r2, #0]
 80026fa:	e07c      	b.n	80027f6 <UART_SetConfig+0x252>
 80026fc:	231b      	movs	r3, #27
 80026fe:	2258      	movs	r2, #88	; 0x58
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	18d2      	adds	r2, r2, r3
 8002704:	2302      	movs	r3, #2
 8002706:	7013      	strb	r3, [r2, #0]
 8002708:	e075      	b.n	80027f6 <UART_SetConfig+0x252>
 800270a:	231b      	movs	r3, #27
 800270c:	2258      	movs	r2, #88	; 0x58
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	18d2      	adds	r2, r2, r3
 8002712:	2304      	movs	r3, #4
 8002714:	7013      	strb	r3, [r2, #0]
 8002716:	e06e      	b.n	80027f6 <UART_SetConfig+0x252>
 8002718:	231b      	movs	r3, #27
 800271a:	2258      	movs	r2, #88	; 0x58
 800271c:	18ba      	adds	r2, r7, r2
 800271e:	18d2      	adds	r2, r2, r3
 8002720:	2308      	movs	r3, #8
 8002722:	7013      	strb	r3, [r2, #0]
 8002724:	e067      	b.n	80027f6 <UART_SetConfig+0x252>
 8002726:	231b      	movs	r3, #27
 8002728:	2258      	movs	r2, #88	; 0x58
 800272a:	18ba      	adds	r2, r7, r2
 800272c:	18d2      	adds	r2, r2, r3
 800272e:	2310      	movs	r3, #16
 8002730:	7013      	strb	r3, [r2, #0]
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	e05f      	b.n	80027f6 <UART_SetConfig+0x252>
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <UART_SetConfig+0x34c>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <UART_SetConfig+0x1aa>
 8002740:	231b      	movs	r3, #27
 8002742:	2258      	movs	r2, #88	; 0x58
 8002744:	18ba      	adds	r2, r7, r2
 8002746:	18d2      	adds	r2, r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	7013      	strb	r3, [r2, #0]
 800274c:	e053      	b.n	80027f6 <UART_SetConfig+0x252>
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <UART_SetConfig+0x350>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <UART_SetConfig+0x1c2>
 8002758:	231b      	movs	r3, #27
 800275a:	2258      	movs	r2, #88	; 0x58
 800275c:	18ba      	adds	r2, r7, r2
 800275e:	18d2      	adds	r2, r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	7013      	strb	r3, [r2, #0]
 8002764:	e047      	b.n	80027f6 <UART_SetConfig+0x252>
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b5c      	ldr	r3, [pc, #368]	; (80028dc <UART_SetConfig+0x338>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d13c      	bne.n	80027ea <UART_SetConfig+0x246>
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <UART_SetConfig+0x344>)
 8002772:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	401a      	ands	r2, r3
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	429a      	cmp	r2, r3
 8002780:	d01d      	beq.n	80027be <UART_SetConfig+0x21a>
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	429a      	cmp	r2, r3
 8002788:	d802      	bhi.n	8002790 <UART_SetConfig+0x1ec>
 800278a:	2a00      	cmp	r2, #0
 800278c:	d009      	beq.n	80027a2 <UART_SetConfig+0x1fe>
 800278e:	e024      	b.n	80027da <UART_SetConfig+0x236>
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	429a      	cmp	r2, r3
 8002796:	d00b      	beq.n	80027b0 <UART_SetConfig+0x20c>
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	429a      	cmp	r2, r3
 800279e:	d015      	beq.n	80027cc <UART_SetConfig+0x228>
 80027a0:	e01b      	b.n	80027da <UART_SetConfig+0x236>
 80027a2:	231b      	movs	r3, #27
 80027a4:	2258      	movs	r2, #88	; 0x58
 80027a6:	18ba      	adds	r2, r7, r2
 80027a8:	18d2      	adds	r2, r2, r3
 80027aa:	2300      	movs	r3, #0
 80027ac:	7013      	strb	r3, [r2, #0]
 80027ae:	e022      	b.n	80027f6 <UART_SetConfig+0x252>
 80027b0:	231b      	movs	r3, #27
 80027b2:	2258      	movs	r2, #88	; 0x58
 80027b4:	18ba      	adds	r2, r7, r2
 80027b6:	18d2      	adds	r2, r2, r3
 80027b8:	2302      	movs	r3, #2
 80027ba:	7013      	strb	r3, [r2, #0]
 80027bc:	e01b      	b.n	80027f6 <UART_SetConfig+0x252>
 80027be:	231b      	movs	r3, #27
 80027c0:	2258      	movs	r2, #88	; 0x58
 80027c2:	18ba      	adds	r2, r7, r2
 80027c4:	18d2      	adds	r2, r2, r3
 80027c6:	2304      	movs	r3, #4
 80027c8:	7013      	strb	r3, [r2, #0]
 80027ca:	e014      	b.n	80027f6 <UART_SetConfig+0x252>
 80027cc:	231b      	movs	r3, #27
 80027ce:	2258      	movs	r2, #88	; 0x58
 80027d0:	18ba      	adds	r2, r7, r2
 80027d2:	18d2      	adds	r2, r2, r3
 80027d4:	2308      	movs	r3, #8
 80027d6:	7013      	strb	r3, [r2, #0]
 80027d8:	e00d      	b.n	80027f6 <UART_SetConfig+0x252>
 80027da:	231b      	movs	r3, #27
 80027dc:	2258      	movs	r2, #88	; 0x58
 80027de:	18ba      	adds	r2, r7, r2
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	2310      	movs	r3, #16
 80027e4:	7013      	strb	r3, [r2, #0]
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	e005      	b.n	80027f6 <UART_SetConfig+0x252>
 80027ea:	231b      	movs	r3, #27
 80027ec:	2258      	movs	r2, #88	; 0x58
 80027ee:	18ba      	adds	r2, r7, r2
 80027f0:	18d2      	adds	r2, r2, r3
 80027f2:	2310      	movs	r3, #16
 80027f4:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <UART_SetConfig+0x338>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <UART_SetConfig+0x260>
 8002800:	f000 fbcc 	bl	8002f9c <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002804:	231b      	movs	r3, #27
 8002806:	2258      	movs	r2, #88	; 0x58
 8002808:	4694      	mov	ip, r2
 800280a:	44bc      	add	ip, r7
 800280c:	4463      	add	r3, ip
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d100      	bne.n	8002816 <UART_SetConfig+0x272>
 8002814:	e070      	b.n	80028f8 <UART_SetConfig+0x354>
 8002816:	dc02      	bgt.n	800281e <UART_SetConfig+0x27a>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <UART_SetConfig+0x288>
 800281c:	e15f      	b.n	8002ade <UART_SetConfig+0x53a>
 800281e:	2b04      	cmp	r3, #4
 8002820:	d100      	bne.n	8002824 <UART_SetConfig+0x280>
 8002822:	e0b4      	b.n	800298e <UART_SetConfig+0x3ea>
 8002824:	2b08      	cmp	r3, #8
 8002826:	d100      	bne.n	800282a <UART_SetConfig+0x286>
 8002828:	e105      	b.n	8002a36 <UART_SetConfig+0x492>
 800282a:	e158      	b.n	8002ade <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800282c:	f7ff fc96 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002830:	0002      	movs	r2, r0
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d044      	beq.n	80028c4 <UART_SetConfig+0x320>
 800283a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b01      	cmp	r3, #1
 8002840:	d03e      	beq.n	80028c0 <UART_SetConfig+0x31c>
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b02      	cmp	r3, #2
 8002848:	d038      	beq.n	80028bc <UART_SetConfig+0x318>
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b03      	cmp	r3, #3
 8002850:	d032      	beq.n	80028b8 <UART_SetConfig+0x314>
 8002852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b04      	cmp	r3, #4
 8002858:	d02c      	beq.n	80028b4 <UART_SetConfig+0x310>
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b05      	cmp	r3, #5
 8002860:	d026      	beq.n	80028b0 <UART_SetConfig+0x30c>
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b06      	cmp	r3, #6
 8002868:	d020      	beq.n	80028ac <UART_SetConfig+0x308>
 800286a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b07      	cmp	r3, #7
 8002870:	d01a      	beq.n	80028a8 <UART_SetConfig+0x304>
 8002872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b08      	cmp	r3, #8
 8002878:	d014      	beq.n	80028a4 <UART_SetConfig+0x300>
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b09      	cmp	r3, #9
 8002880:	d00e      	beq.n	80028a0 <UART_SetConfig+0x2fc>
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2b0a      	cmp	r3, #10
 8002888:	d008      	beq.n	800289c <UART_SetConfig+0x2f8>
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b0b      	cmp	r3, #11
 8002890:	d102      	bne.n	8002898 <UART_SetConfig+0x2f4>
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	e016      	b.n	80028c6 <UART_SetConfig+0x322>
 8002898:	2301      	movs	r3, #1
 800289a:	e014      	b.n	80028c6 <UART_SetConfig+0x322>
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	e012      	b.n	80028c6 <UART_SetConfig+0x322>
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	e010      	b.n	80028c6 <UART_SetConfig+0x322>
 80028a4:	2320      	movs	r3, #32
 80028a6:	e00e      	b.n	80028c6 <UART_SetConfig+0x322>
 80028a8:	2310      	movs	r3, #16
 80028aa:	e00c      	b.n	80028c6 <UART_SetConfig+0x322>
 80028ac:	230c      	movs	r3, #12
 80028ae:	e00a      	b.n	80028c6 <UART_SetConfig+0x322>
 80028b0:	230a      	movs	r3, #10
 80028b2:	e008      	b.n	80028c6 <UART_SetConfig+0x322>
 80028b4:	2308      	movs	r3, #8
 80028b6:	e006      	b.n	80028c6 <UART_SetConfig+0x322>
 80028b8:	2306      	movs	r3, #6
 80028ba:	e004      	b.n	80028c6 <UART_SetConfig+0x322>
 80028bc:	2304      	movs	r3, #4
 80028be:	e002      	b.n	80028c6 <UART_SetConfig+0x322>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e000      	b.n	80028c6 <UART_SetConfig+0x322>
 80028c4:	2301      	movs	r3, #1
 80028c6:	0019      	movs	r1, r3
 80028c8:	0010      	movs	r0, r2
 80028ca:	f7fd fc1b 	bl	8000104 <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80028d2:	e10b      	b.n	8002aec <UART_SetConfig+0x548>
 80028d4:	cfff69f3 	.word	0xcfff69f3
 80028d8:	ffffcfff 	.word	0xffffcfff
 80028dc:	40008000 	.word	0x40008000
 80028e0:	11fff4ff 	.word	0x11fff4ff
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40004400 	.word	0x40004400
 80028f0:	40004800 	.word	0x40004800
 80028f4:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <UART_SetConfig+0x3e4>
 8002900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d03d      	beq.n	8002984 <UART_SetConfig+0x3e0>
 8002908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2b02      	cmp	r3, #2
 800290e:	d037      	beq.n	8002980 <UART_SetConfig+0x3dc>
 8002910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b03      	cmp	r3, #3
 8002916:	d031      	beq.n	800297c <UART_SetConfig+0x3d8>
 8002918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d02b      	beq.n	8002978 <UART_SetConfig+0x3d4>
 8002920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b05      	cmp	r3, #5
 8002926:	d025      	beq.n	8002974 <UART_SetConfig+0x3d0>
 8002928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b06      	cmp	r3, #6
 800292e:	d01f      	beq.n	8002970 <UART_SetConfig+0x3cc>
 8002930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b07      	cmp	r3, #7
 8002936:	d019      	beq.n	800296c <UART_SetConfig+0x3c8>
 8002938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b08      	cmp	r3, #8
 800293e:	d013      	beq.n	8002968 <UART_SetConfig+0x3c4>
 8002940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b09      	cmp	r3, #9
 8002946:	d00d      	beq.n	8002964 <UART_SetConfig+0x3c0>
 8002948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d007      	beq.n	8002960 <UART_SetConfig+0x3bc>
 8002950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b0b      	cmp	r3, #11
 8002956:	d101      	bne.n	800295c <UART_SetConfig+0x3b8>
 8002958:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <UART_SetConfig+0x660>)
 800295a:	e016      	b.n	800298a <UART_SetConfig+0x3e6>
 800295c:	4baa      	ldr	r3, [pc, #680]	; (8002c08 <UART_SetConfig+0x664>)
 800295e:	e014      	b.n	800298a <UART_SetConfig+0x3e6>
 8002960:	4baa      	ldr	r3, [pc, #680]	; (8002c0c <UART_SetConfig+0x668>)
 8002962:	e012      	b.n	800298a <UART_SetConfig+0x3e6>
 8002964:	4baa      	ldr	r3, [pc, #680]	; (8002c10 <UART_SetConfig+0x66c>)
 8002966:	e010      	b.n	800298a <UART_SetConfig+0x3e6>
 8002968:	4baa      	ldr	r3, [pc, #680]	; (8002c14 <UART_SetConfig+0x670>)
 800296a:	e00e      	b.n	800298a <UART_SetConfig+0x3e6>
 800296c:	4baa      	ldr	r3, [pc, #680]	; (8002c18 <UART_SetConfig+0x674>)
 800296e:	e00c      	b.n	800298a <UART_SetConfig+0x3e6>
 8002970:	4baa      	ldr	r3, [pc, #680]	; (8002c1c <UART_SetConfig+0x678>)
 8002972:	e00a      	b.n	800298a <UART_SetConfig+0x3e6>
 8002974:	4baa      	ldr	r3, [pc, #680]	; (8002c20 <UART_SetConfig+0x67c>)
 8002976:	e008      	b.n	800298a <UART_SetConfig+0x3e6>
 8002978:	4baa      	ldr	r3, [pc, #680]	; (8002c24 <UART_SetConfig+0x680>)
 800297a:	e006      	b.n	800298a <UART_SetConfig+0x3e6>
 800297c:	4baa      	ldr	r3, [pc, #680]	; (8002c28 <UART_SetConfig+0x684>)
 800297e:	e004      	b.n	800298a <UART_SetConfig+0x3e6>
 8002980:	4baa      	ldr	r3, [pc, #680]	; (8002c2c <UART_SetConfig+0x688>)
 8002982:	e002      	b.n	800298a <UART_SetConfig+0x3e6>
 8002984:	4baa      	ldr	r3, [pc, #680]	; (8002c30 <UART_SetConfig+0x68c>)
 8002986:	e000      	b.n	800298a <UART_SetConfig+0x3e6>
 8002988:	4b9f      	ldr	r3, [pc, #636]	; (8002c08 <UART_SetConfig+0x664>)
 800298a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 800298c:	e0ae      	b.n	8002aec <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800298e:	f7ff fb59 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002992:	0002      	movs	r2, r0
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d044      	beq.n	8002a26 <UART_SetConfig+0x482>
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d03e      	beq.n	8002a22 <UART_SetConfig+0x47e>
 80029a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d038      	beq.n	8002a1e <UART_SetConfig+0x47a>
 80029ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d032      	beq.n	8002a1a <UART_SetConfig+0x476>
 80029b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d02c      	beq.n	8002a16 <UART_SetConfig+0x472>
 80029bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d026      	beq.n	8002a12 <UART_SetConfig+0x46e>
 80029c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d020      	beq.n	8002a0e <UART_SetConfig+0x46a>
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b07      	cmp	r3, #7
 80029d2:	d01a      	beq.n	8002a0a <UART_SetConfig+0x466>
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d014      	beq.n	8002a06 <UART_SetConfig+0x462>
 80029dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d00e      	beq.n	8002a02 <UART_SetConfig+0x45e>
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b0a      	cmp	r3, #10
 80029ea:	d008      	beq.n	80029fe <UART_SetConfig+0x45a>
 80029ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2b0b      	cmp	r3, #11
 80029f2:	d102      	bne.n	80029fa <UART_SetConfig+0x456>
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	e016      	b.n	8002a28 <UART_SetConfig+0x484>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e014      	b.n	8002a28 <UART_SetConfig+0x484>
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	e012      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	e010      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a06:	2320      	movs	r3, #32
 8002a08:	e00e      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	e00c      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	e00a      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a12:	230a      	movs	r3, #10
 8002a14:	e008      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a16:	2308      	movs	r3, #8
 8002a18:	e006      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	e004      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e002      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e000      	b.n	8002a28 <UART_SetConfig+0x484>
 8002a26:	2301      	movs	r3, #1
 8002a28:	0019      	movs	r1, r3
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	f7fd fb6a 	bl	8000104 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002a34:	e05a      	b.n	8002aec <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04b      	beq.n	8002ad6 <UART_SetConfig+0x532>
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d044      	beq.n	8002ad0 <UART_SetConfig+0x52c>
 8002a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d03d      	beq.n	8002aca <UART_SetConfig+0x526>
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d037      	beq.n	8002ac6 <UART_SetConfig+0x522>
 8002a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d030      	beq.n	8002ac0 <UART_SetConfig+0x51c>
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d02a      	beq.n	8002abc <UART_SetConfig+0x518>
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d024      	beq.n	8002ab8 <UART_SetConfig+0x514>
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d01d      	beq.n	8002ab2 <UART_SetConfig+0x50e>
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d016      	beq.n	8002aac <UART_SetConfig+0x508>
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d00f      	beq.n	8002aa6 <UART_SetConfig+0x502>
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d008      	beq.n	8002aa0 <UART_SetConfig+0x4fc>
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b0b      	cmp	r3, #11
 8002a94:	d101      	bne.n	8002a9a <UART_SetConfig+0x4f6>
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	e01f      	b.n	8002ada <UART_SetConfig+0x536>
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	e01c      	b.n	8002ada <UART_SetConfig+0x536>
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	e019      	b.n	8002ada <UART_SetConfig+0x536>
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	e016      	b.n	8002ada <UART_SetConfig+0x536>
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	e013      	b.n	8002ada <UART_SetConfig+0x536>
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	e010      	b.n	8002ada <UART_SetConfig+0x536>
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <UART_SetConfig+0x690>)
 8002aba:	e00e      	b.n	8002ada <UART_SetConfig+0x536>
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <UART_SetConfig+0x694>)
 8002abe:	e00c      	b.n	8002ada <UART_SetConfig+0x536>
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	015b      	lsls	r3, r3, #5
 8002ac4:	e009      	b.n	8002ada <UART_SetConfig+0x536>
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <UART_SetConfig+0x698>)
 8002ac8:	e007      	b.n	8002ada <UART_SetConfig+0x536>
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	e004      	b.n	8002ada <UART_SetConfig+0x536>
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	e001      	b.n	8002ada <UART_SetConfig+0x536>
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002adc:	e006      	b.n	8002aec <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002ade:	2313      	movs	r3, #19
 8002ae0:	2258      	movs	r2, #88	; 0x58
 8002ae2:	18ba      	adds	r2, r7, r2
 8002ae4:	18d2      	adds	r2, r2, r3
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	7013      	strb	r3, [r2, #0]
        break;
 8002aea:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <UART_SetConfig+0x552>
 8002af2:	f000 fe09 	bl	8003708 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	0013      	movs	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	189a      	adds	r2, r3, r2
 8002b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d305      	bcc.n	8002b12 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d908      	bls.n	8002b24 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002b12:	2313      	movs	r3, #19
 8002b14:	2258      	movs	r2, #88	; 0x58
 8002b16:	4694      	mov	ip, r2
 8002b18:	44bc      	add	ip, r7
 8002b1a:	4463      	add	r3, ip
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	f000 fdf2 	bl	8003708 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002b24:	231b      	movs	r3, #27
 8002b26:	2258      	movs	r2, #88	; 0x58
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d100      	bne.n	8002b36 <UART_SetConfig+0x592>
 8002b34:	e0a9      	b.n	8002c8a <UART_SetConfig+0x6e6>
 8002b36:	dc02      	bgt.n	8002b3e <UART_SetConfig+0x59a>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <UART_SetConfig+0x5a8>
 8002b3c:	e20f      	b.n	8002f5e <UART_SetConfig+0x9ba>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d100      	bne.n	8002b44 <UART_SetConfig+0x5a0>
 8002b42:	e10f      	b.n	8002d64 <UART_SetConfig+0x7c0>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d100      	bne.n	8002b4a <UART_SetConfig+0x5a6>
 8002b48:	e192      	b.n	8002e70 <UART_SetConfig+0x8cc>
 8002b4a:	e208      	b.n	8002f5e <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b4c:	f7ff fb06 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002b50:	0003      	movs	r3, r0
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b54:	2300      	movs	r3, #0
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d100      	bne.n	8002b62 <UART_SetConfig+0x5be>
 8002b60:	e06e      	b.n	8002c40 <UART_SetConfig+0x69c>
 8002b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d049      	beq.n	8002bfe <UART_SetConfig+0x65a>
 8002b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d042      	beq.n	8002bf8 <UART_SetConfig+0x654>
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d03b      	beq.n	8002bf2 <UART_SetConfig+0x64e>
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d034      	beq.n	8002bec <UART_SetConfig+0x648>
 8002b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d02d      	beq.n	8002be6 <UART_SetConfig+0x642>
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d026      	beq.n	8002be0 <UART_SetConfig+0x63c>
 8002b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d01f      	beq.n	8002bda <UART_SetConfig+0x636>
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d018      	beq.n	8002bd4 <UART_SetConfig+0x630>
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d011      	beq.n	8002bce <UART_SetConfig+0x62a>
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b0a      	cmp	r3, #10
 8002bb0:	d00a      	beq.n	8002bc8 <UART_SetConfig+0x624>
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b0b      	cmp	r3, #11
 8002bb8:	d103      	bne.n	8002bc2 <UART_SetConfig+0x61e>
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2400      	movs	r4, #0
 8002bc0:	e040      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	e03d      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	2400      	movs	r4, #0
 8002bcc:	e03a      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bce:	2340      	movs	r3, #64	; 0x40
 8002bd0:	2400      	movs	r4, #0
 8002bd2:	e037      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	2400      	movs	r4, #0
 8002bd8:	e034      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	2400      	movs	r4, #0
 8002bde:	e031      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002be0:	230c      	movs	r3, #12
 8002be2:	2400      	movs	r4, #0
 8002be4:	e02e      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002be6:	230a      	movs	r3, #10
 8002be8:	2400      	movs	r4, #0
 8002bea:	e02b      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bec:	2308      	movs	r3, #8
 8002bee:	2400      	movs	r4, #0
 8002bf0:	e028      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	2400      	movs	r4, #0
 8002bf6:	e025      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	e022      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	2400      	movs	r4, #0
 8002c02:	e01f      	b.n	8002c44 <UART_SetConfig+0x6a0>
 8002c04:	0000f424 	.word	0x0000f424
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	0001e848 	.word	0x0001e848
 8002c10:	0003d090 	.word	0x0003d090
 8002c14:	0007a120 	.word	0x0007a120
 8002c18:	000f4240 	.word	0x000f4240
 8002c1c:	00145855 	.word	0x00145855
 8002c20:	00186a00 	.word	0x00186a00
 8002c24:	001e8480 	.word	0x001e8480
 8002c28:	0028b0aa 	.word	0x0028b0aa
 8002c2c:	003d0900 	.word	0x003d0900
 8002c30:	007a1200 	.word	0x007a1200
 8002c34:	00000aaa 	.word	0x00000aaa
 8002c38:	00000ccc 	.word	0x00000ccc
 8002c3c:	00001555 	.word	0x00001555
 8002c40:	2301      	movs	r3, #1
 8002c42:	2400      	movs	r4, #0
 8002c44:	001a      	movs	r2, r3
 8002c46:	0023      	movs	r3, r4
 8002c48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c4c:	f7fd fbd0 	bl	80003f0 <__aeabi_uldivmod>
 8002c50:	0003      	movs	r3, r0
 8002c52:	000c      	movs	r4, r1
 8002c54:	0e1a      	lsrs	r2, r3, #24
 8002c56:	0226      	lsls	r6, r4, #8
 8002c58:	4316      	orrs	r6, r2
 8002c5a:	021d      	lsls	r5, r3, #8
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
 8002c64:	2300      	movs	r3, #0
 8002c66:	647b      	str	r3, [r7, #68]	; 0x44
 8002c68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c6c:	1940      	adds	r0, r0, r5
 8002c6e:	4171      	adcs	r1, r6
 8002c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c76:	2300      	movs	r3, #0
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	f7fd fbb7 	bl	80003f0 <__aeabi_uldivmod>
 8002c82:	0003      	movs	r3, r0
 8002c84:	000c      	movs	r4, r1
 8002c86:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002c88:	e171      	b.n	8002f6e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04f      	beq.n	8002d32 <UART_SetConfig+0x78e>
 8002c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d048      	beq.n	8002d2c <UART_SetConfig+0x788>
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d041      	beq.n	8002d26 <UART_SetConfig+0x782>
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d03a      	beq.n	8002d20 <UART_SetConfig+0x77c>
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d033      	beq.n	8002d1a <UART_SetConfig+0x776>
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d02c      	beq.n	8002d14 <UART_SetConfig+0x770>
 8002cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d025      	beq.n	8002d0e <UART_SetConfig+0x76a>
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	d01e      	beq.n	8002d08 <UART_SetConfig+0x764>
 8002cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d017      	beq.n	8002d02 <UART_SetConfig+0x75e>
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	d010      	beq.n	8002cfc <UART_SetConfig+0x758>
 8002cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b0a      	cmp	r3, #10
 8002ce0:	d009      	beq.n	8002cf6 <UART_SetConfig+0x752>
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b0b      	cmp	r3, #11
 8002ce8:	d102      	bne.n	8002cf0 <UART_SetConfig+0x74c>
 8002cea:	4bba      	ldr	r3, [pc, #744]	; (8002fd4 <UART_SetConfig+0xa30>)
 8002cec:	2400      	movs	r4, #0
 8002cee:	e022      	b.n	8002d36 <UART_SetConfig+0x792>
 8002cf0:	4bb9      	ldr	r3, [pc, #740]	; (8002fd8 <UART_SetConfig+0xa34>)
 8002cf2:	2400      	movs	r4, #0
 8002cf4:	e01f      	b.n	8002d36 <UART_SetConfig+0x792>
 8002cf6:	4bb9      	ldr	r3, [pc, #740]	; (8002fdc <UART_SetConfig+0xa38>)
 8002cf8:	2400      	movs	r4, #0
 8002cfa:	e01c      	b.n	8002d36 <UART_SetConfig+0x792>
 8002cfc:	4bb8      	ldr	r3, [pc, #736]	; (8002fe0 <UART_SetConfig+0xa3c>)
 8002cfe:	2400      	movs	r4, #0
 8002d00:	e019      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d02:	4bb8      	ldr	r3, [pc, #736]	; (8002fe4 <UART_SetConfig+0xa40>)
 8002d04:	2400      	movs	r4, #0
 8002d06:	e016      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d08:	4bb7      	ldr	r3, [pc, #732]	; (8002fe8 <UART_SetConfig+0xa44>)
 8002d0a:	2400      	movs	r4, #0
 8002d0c:	e013      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d0e:	4bb7      	ldr	r3, [pc, #732]	; (8002fec <UART_SetConfig+0xa48>)
 8002d10:	2400      	movs	r4, #0
 8002d12:	e010      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d14:	4bb6      	ldr	r3, [pc, #728]	; (8002ff0 <UART_SetConfig+0xa4c>)
 8002d16:	2400      	movs	r4, #0
 8002d18:	e00d      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d1a:	4bb6      	ldr	r3, [pc, #728]	; (8002ff4 <UART_SetConfig+0xa50>)
 8002d1c:	2400      	movs	r4, #0
 8002d1e:	e00a      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d20:	4bb5      	ldr	r3, [pc, #724]	; (8002ff8 <UART_SetConfig+0xa54>)
 8002d22:	2400      	movs	r4, #0
 8002d24:	e007      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d26:	4bb5      	ldr	r3, [pc, #724]	; (8002ffc <UART_SetConfig+0xa58>)
 8002d28:	2400      	movs	r4, #0
 8002d2a:	e004      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d2c:	4bb4      	ldr	r3, [pc, #720]	; (8003000 <UART_SetConfig+0xa5c>)
 8002d2e:	2400      	movs	r4, #0
 8002d30:	e001      	b.n	8002d36 <UART_SetConfig+0x792>
 8002d32:	4ba9      	ldr	r3, [pc, #676]	; (8002fd8 <UART_SetConfig+0xa34>)
 8002d34:	2400      	movs	r4, #0
 8002d36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	633a      	str	r2, [r7, #48]	; 0x30
 8002d3e:	2200      	movs	r2, #0
 8002d40:	637a      	str	r2, [r7, #52]	; 0x34
 8002d42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d46:	18c0      	adds	r0, r0, r3
 8002d48:	4161      	adcs	r1, r4
 8002d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	f7fd fb4a 	bl	80003f0 <__aeabi_uldivmod>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	000c      	movs	r4, r1
 8002d60:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002d62:	e104      	b.n	8002f6e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d64:	f7ff f96e 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d050      	beq.n	8002e1a <UART_SetConfig+0x876>
 8002d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d049      	beq.n	8002e14 <UART_SetConfig+0x870>
 8002d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d042      	beq.n	8002e0e <UART_SetConfig+0x86a>
 8002d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d03b      	beq.n	8002e08 <UART_SetConfig+0x864>
 8002d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d034      	beq.n	8002e02 <UART_SetConfig+0x85e>
 8002d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d02d      	beq.n	8002dfc <UART_SetConfig+0x858>
 8002da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d026      	beq.n	8002df6 <UART_SetConfig+0x852>
 8002da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b07      	cmp	r3, #7
 8002dae:	d01f      	beq.n	8002df0 <UART_SetConfig+0x84c>
 8002db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d018      	beq.n	8002dea <UART_SetConfig+0x846>
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d011      	beq.n	8002de4 <UART_SetConfig+0x840>
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b0a      	cmp	r3, #10
 8002dc6:	d00a      	beq.n	8002dde <UART_SetConfig+0x83a>
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b0b      	cmp	r3, #11
 8002dce:	d103      	bne.n	8002dd8 <UART_SetConfig+0x834>
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2400      	movs	r4, #0
 8002dd6:	e022      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	2400      	movs	r4, #0
 8002ddc:	e01f      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	2400      	movs	r4, #0
 8002de2:	e01c      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	2400      	movs	r4, #0
 8002de8:	e019      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002dea:	2320      	movs	r3, #32
 8002dec:	2400      	movs	r4, #0
 8002dee:	e016      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002df0:	2310      	movs	r3, #16
 8002df2:	2400      	movs	r4, #0
 8002df4:	e013      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002df6:	230c      	movs	r3, #12
 8002df8:	2400      	movs	r4, #0
 8002dfa:	e010      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	2400      	movs	r4, #0
 8002e00:	e00d      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002e02:	2308      	movs	r3, #8
 8002e04:	2400      	movs	r4, #0
 8002e06:	e00a      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002e08:	2306      	movs	r3, #6
 8002e0a:	2400      	movs	r4, #0
 8002e0c:	e007      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	2400      	movs	r4, #0
 8002e12:	e004      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002e14:	2302      	movs	r3, #2
 8002e16:	2400      	movs	r4, #0
 8002e18:	e001      	b.n	8002e1e <UART_SetConfig+0x87a>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	2400      	movs	r4, #0
 8002e1e:	001a      	movs	r2, r3
 8002e20:	0023      	movs	r3, r4
 8002e22:	6a38      	ldr	r0, [r7, #32]
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	f7fd fae3 	bl	80003f0 <__aeabi_uldivmod>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	000c      	movs	r4, r1
 8002e2e:	0e1a      	lsrs	r2, r3, #24
 8002e30:	0221      	lsls	r1, r4, #8
 8002e32:	6579      	str	r1, [r7, #84]	; 0x54
 8002e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e36:	4311      	orrs	r1, r2
 8002e38:	6579      	str	r1, [r7, #84]	; 0x54
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	69fc      	ldr	r4, [r7, #28]
 8002e52:	18c0      	adds	r0, r0, r3
 8002e54:	4161      	adcs	r1, r4
 8002e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f7fd fac4 	bl	80003f0 <__aeabi_uldivmod>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	000c      	movs	r4, r1
 8002e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002e6e:	e07e      	b.n	8002f6e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d058      	beq.n	8002f2a <UART_SetConfig+0x986>
 8002e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d050      	beq.n	8002f22 <UART_SetConfig+0x97e>
 8002e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d048      	beq.n	8002f1a <UART_SetConfig+0x976>
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d041      	beq.n	8002f14 <UART_SetConfig+0x970>
 8002e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d039      	beq.n	8002f0c <UART_SetConfig+0x968>
 8002e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d032      	beq.n	8002f06 <UART_SetConfig+0x962>
 8002ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d02b      	beq.n	8002f00 <UART_SetConfig+0x95c>
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b07      	cmp	r3, #7
 8002eae:	d023      	beq.n	8002ef8 <UART_SetConfig+0x954>
 8002eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d01b      	beq.n	8002ef0 <UART_SetConfig+0x94c>
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d013      	beq.n	8002ee8 <UART_SetConfig+0x944>
 8002ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b0a      	cmp	r3, #10
 8002ec6:	d00b      	beq.n	8002ee0 <UART_SetConfig+0x93c>
 8002ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b0b      	cmp	r3, #11
 8002ece:	d103      	bne.n	8002ed8 <UART_SetConfig+0x934>
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	2400      	movs	r4, #0
 8002ed6:	e02b      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	2400      	movs	r4, #0
 8002ede:	e027      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	e023      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	2400      	movs	r4, #0
 8002eee:	e01f      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	02db      	lsls	r3, r3, #11
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e01b      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	031b      	lsls	r3, r3, #12
 8002efc:	2400      	movs	r4, #0
 8002efe:	e017      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <UART_SetConfig+0xa60>)
 8002f02:	2400      	movs	r4, #0
 8002f04:	e014      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f06:	4b40      	ldr	r3, [pc, #256]	; (8003008 <UART_SetConfig+0xa64>)
 8002f08:	2400      	movs	r4, #0
 8002f0a:	e011      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	035b      	lsls	r3, r3, #13
 8002f10:	2400      	movs	r4, #0
 8002f12:	e00d      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <UART_SetConfig+0xa68>)
 8002f16:	2400      	movs	r4, #0
 8002f18:	e00a      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	039b      	lsls	r3, r3, #14
 8002f1e:	2400      	movs	r4, #0
 8002f20:	e006      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	03db      	lsls	r3, r3, #15
 8002f26:	2400      	movs	r4, #0
 8002f28:	e002      	b.n	8002f30 <UART_SetConfig+0x98c>
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	2400      	movs	r4, #0
 8002f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f32:	6852      	ldr	r2, [r2, #4]
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	60ba      	str	r2, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60fa      	str	r2, [r7, #12]
 8002f3c:	68b8      	ldr	r0, [r7, #8]
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	18c0      	adds	r0, r0, r3
 8002f42:	4161      	adcs	r1, r4
 8002f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f7fd fa4d 	bl	80003f0 <__aeabi_uldivmod>
 8002f56:	0003      	movs	r3, r0
 8002f58:	000c      	movs	r4, r1
 8002f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002f5c:	e007      	b.n	8002f6e <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8002f5e:	2313      	movs	r3, #19
 8002f60:	2258      	movs	r2, #88	; 0x58
 8002f62:	4694      	mov	ip, r2
 8002f64:	44bc      	add	ip, r7
 8002f66:	4463      	add	r3, ip
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
            break;
 8002f6c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <UART_SetConfig+0xa6c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d909      	bls.n	8002f8a <UART_SetConfig+0x9e6>
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <UART_SetConfig+0xa70>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d805      	bhi.n	8002f8a <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	f000 fbbf 	bl	8003708 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 8002f8a:	2313      	movs	r3, #19
 8002f8c:	2258      	movs	r2, #88	; 0x58
 8002f8e:	4694      	mov	ip, r2
 8002f90:	44bc      	add	ip, r7
 8002f92:	4463      	add	r3, ip
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	f000 fbb6 	bl	8003708 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d000      	beq.n	8002faa <UART_SetConfig+0xa06>
 8002fa8:	e1e4      	b.n	8003374 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 8002faa:	231b      	movs	r3, #27
 8002fac:	2258      	movs	r2, #88	; 0x58
 8002fae:	4694      	mov	ip, r2
 8002fb0:	44bc      	add	ip, r7
 8002fb2:	4463      	add	r3, ip
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d100      	bne.n	8002fbc <UART_SetConfig+0xa18>
 8002fba:	e08e      	b.n	80030da <UART_SetConfig+0xb36>
 8002fbc:	dc02      	bgt.n	8002fc4 <UART_SetConfig+0xa20>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02a      	beq.n	8003018 <UART_SetConfig+0xa74>
 8002fc2:	e1a3      	b.n	800330c <UART_SetConfig+0xd68>
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d100      	bne.n	8002fca <UART_SetConfig+0xa26>
 8002fc8:	e0de      	b.n	8003188 <UART_SetConfig+0xbe4>
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d100      	bne.n	8002fd0 <UART_SetConfig+0xa2c>
 8002fce:	e13c      	b.n	800324a <UART_SetConfig+0xca6>
 8002fd0:	e19c      	b.n	800330c <UART_SetConfig+0xd68>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	f4240000 	.word	0xf4240000
 8002fdc:	01e84800 	.word	0x01e84800
 8002fe0:	03d09000 	.word	0x03d09000
 8002fe4:	07a12000 	.word	0x07a12000
 8002fe8:	0f424000 	.word	0x0f424000
 8002fec:	14585500 	.word	0x14585500
 8002ff0:	186a0000 	.word	0x186a0000
 8002ff4:	1e848000 	.word	0x1e848000
 8002ff8:	28b0aa00 	.word	0x28b0aa00
 8002ffc:	3d090000 	.word	0x3d090000
 8003000:	7a120000 	.word	0x7a120000
 8003004:	000aaa00 	.word	0x000aaa00
 8003008:	000ccc00 	.word	0x000ccc00
 800300c:	00155500 	.word	0x00155500
 8003010:	000002ff 	.word	0x000002ff
 8003014:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003018:	f7ff f8a0 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800301c:	0002      	movs	r2, r0
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <UART_SetConfig+0xb0c>
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b01      	cmp	r3, #1
 800302c:	d03e      	beq.n	80030ac <UART_SetConfig+0xb08>
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b02      	cmp	r3, #2
 8003034:	d038      	beq.n	80030a8 <UART_SetConfig+0xb04>
 8003036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b03      	cmp	r3, #3
 800303c:	d032      	beq.n	80030a4 <UART_SetConfig+0xb00>
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b04      	cmp	r3, #4
 8003044:	d02c      	beq.n	80030a0 <UART_SetConfig+0xafc>
 8003046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b05      	cmp	r3, #5
 800304c:	d026      	beq.n	800309c <UART_SetConfig+0xaf8>
 800304e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b06      	cmp	r3, #6
 8003054:	d020      	beq.n	8003098 <UART_SetConfig+0xaf4>
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b07      	cmp	r3, #7
 800305c:	d01a      	beq.n	8003094 <UART_SetConfig+0xaf0>
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b08      	cmp	r3, #8
 8003064:	d014      	beq.n	8003090 <UART_SetConfig+0xaec>
 8003066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b09      	cmp	r3, #9
 800306c:	d00e      	beq.n	800308c <UART_SetConfig+0xae8>
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b0a      	cmp	r3, #10
 8003074:	d008      	beq.n	8003088 <UART_SetConfig+0xae4>
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b0b      	cmp	r3, #11
 800307c:	d102      	bne.n	8003084 <UART_SetConfig+0xae0>
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	e016      	b.n	80030b2 <UART_SetConfig+0xb0e>
 8003084:	2301      	movs	r3, #1
 8003086:	e014      	b.n	80030b2 <UART_SetConfig+0xb0e>
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	e012      	b.n	80030b2 <UART_SetConfig+0xb0e>
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	e010      	b.n	80030b2 <UART_SetConfig+0xb0e>
 8003090:	2320      	movs	r3, #32
 8003092:	e00e      	b.n	80030b2 <UART_SetConfig+0xb0e>
 8003094:	2310      	movs	r3, #16
 8003096:	e00c      	b.n	80030b2 <UART_SetConfig+0xb0e>
 8003098:	230c      	movs	r3, #12
 800309a:	e00a      	b.n	80030b2 <UART_SetConfig+0xb0e>
 800309c:	230a      	movs	r3, #10
 800309e:	e008      	b.n	80030b2 <UART_SetConfig+0xb0e>
 80030a0:	2308      	movs	r3, #8
 80030a2:	e006      	b.n	80030b2 <UART_SetConfig+0xb0e>
 80030a4:	2306      	movs	r3, #6
 80030a6:	e004      	b.n	80030b2 <UART_SetConfig+0xb0e>
 80030a8:	2304      	movs	r3, #4
 80030aa:	e002      	b.n	80030b2 <UART_SetConfig+0xb0e>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e000      	b.n	80030b2 <UART_SetConfig+0xb0e>
 80030b0:	2301      	movs	r3, #1
 80030b2:	0019      	movs	r1, r3
 80030b4:	0010      	movs	r0, r2
 80030b6:	f7fd f825 	bl	8000104 <__udivsi3>
 80030ba:	0003      	movs	r3, r0
 80030bc:	005a      	lsls	r2, r3, #1
 80030be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	18d2      	adds	r2, r2, r3
 80030c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0019      	movs	r1, r3
 80030cc:	0010      	movs	r0, r2
 80030ce:	f7fd f819 	bl	8000104 <__udivsi3>
 80030d2:	0003      	movs	r3, r0
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80030d8:	e120      	b.n	800331c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d043      	beq.n	800316a <UART_SetConfig+0xbc6>
 80030e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d03d      	beq.n	8003166 <UART_SetConfig+0xbc2>
 80030ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d037      	beq.n	8003162 <UART_SetConfig+0xbbe>
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d031      	beq.n	800315e <UART_SetConfig+0xbba>
 80030fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d02b      	beq.n	800315a <UART_SetConfig+0xbb6>
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b05      	cmp	r3, #5
 8003108:	d025      	beq.n	8003156 <UART_SetConfig+0xbb2>
 800310a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b06      	cmp	r3, #6
 8003110:	d01f      	beq.n	8003152 <UART_SetConfig+0xbae>
 8003112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b07      	cmp	r3, #7
 8003118:	d019      	beq.n	800314e <UART_SetConfig+0xbaa>
 800311a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b08      	cmp	r3, #8
 8003120:	d013      	beq.n	800314a <UART_SetConfig+0xba6>
 8003122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b09      	cmp	r3, #9
 8003128:	d00d      	beq.n	8003146 <UART_SetConfig+0xba2>
 800312a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d007      	beq.n	8003142 <UART_SetConfig+0xb9e>
 8003132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b0b      	cmp	r3, #11
 8003138:	d101      	bne.n	800313e <UART_SetConfig+0xb9a>
 800313a:	4bba      	ldr	r3, [pc, #744]	; (8003424 <UART_SetConfig+0xe80>)
 800313c:	e016      	b.n	800316c <UART_SetConfig+0xbc8>
 800313e:	4bba      	ldr	r3, [pc, #744]	; (8003428 <UART_SetConfig+0xe84>)
 8003140:	e014      	b.n	800316c <UART_SetConfig+0xbc8>
 8003142:	4bba      	ldr	r3, [pc, #744]	; (800342c <UART_SetConfig+0xe88>)
 8003144:	e012      	b.n	800316c <UART_SetConfig+0xbc8>
 8003146:	4bba      	ldr	r3, [pc, #744]	; (8003430 <UART_SetConfig+0xe8c>)
 8003148:	e010      	b.n	800316c <UART_SetConfig+0xbc8>
 800314a:	4bba      	ldr	r3, [pc, #744]	; (8003434 <UART_SetConfig+0xe90>)
 800314c:	e00e      	b.n	800316c <UART_SetConfig+0xbc8>
 800314e:	4bba      	ldr	r3, [pc, #744]	; (8003438 <UART_SetConfig+0xe94>)
 8003150:	e00c      	b.n	800316c <UART_SetConfig+0xbc8>
 8003152:	4bba      	ldr	r3, [pc, #744]	; (800343c <UART_SetConfig+0xe98>)
 8003154:	e00a      	b.n	800316c <UART_SetConfig+0xbc8>
 8003156:	4bba      	ldr	r3, [pc, #744]	; (8003440 <UART_SetConfig+0xe9c>)
 8003158:	e008      	b.n	800316c <UART_SetConfig+0xbc8>
 800315a:	4bba      	ldr	r3, [pc, #744]	; (8003444 <UART_SetConfig+0xea0>)
 800315c:	e006      	b.n	800316c <UART_SetConfig+0xbc8>
 800315e:	4bba      	ldr	r3, [pc, #744]	; (8003448 <UART_SetConfig+0xea4>)
 8003160:	e004      	b.n	800316c <UART_SetConfig+0xbc8>
 8003162:	4bba      	ldr	r3, [pc, #744]	; (800344c <UART_SetConfig+0xea8>)
 8003164:	e002      	b.n	800316c <UART_SetConfig+0xbc8>
 8003166:	4bba      	ldr	r3, [pc, #744]	; (8003450 <UART_SetConfig+0xeac>)
 8003168:	e000      	b.n	800316c <UART_SetConfig+0xbc8>
 800316a:	4baf      	ldr	r3, [pc, #700]	; (8003428 <UART_SetConfig+0xe84>)
 800316c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	0852      	lsrs	r2, r2, #1
 8003172:	189a      	adds	r2, r3, r2
 8003174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0019      	movs	r1, r3
 800317a:	0010      	movs	r0, r2
 800317c:	f7fc ffc2 	bl	8000104 <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	b29b      	uxth	r3, r3
 8003184:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003186:	e0c9      	b.n	800331c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003188:	f7fe ff5c 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800318c:	0002      	movs	r2, r0
 800318e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d044      	beq.n	8003220 <UART_SetConfig+0xc7c>
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2b01      	cmp	r3, #1
 800319c:	d03e      	beq.n	800321c <UART_SetConfig+0xc78>
 800319e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d038      	beq.n	8003218 <UART_SetConfig+0xc74>
 80031a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d032      	beq.n	8003214 <UART_SetConfig+0xc70>
 80031ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d02c      	beq.n	8003210 <UART_SetConfig+0xc6c>
 80031b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d026      	beq.n	800320c <UART_SetConfig+0xc68>
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d020      	beq.n	8003208 <UART_SetConfig+0xc64>
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d01a      	beq.n	8003204 <UART_SetConfig+0xc60>
 80031ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d014      	beq.n	8003200 <UART_SetConfig+0xc5c>
 80031d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b09      	cmp	r3, #9
 80031dc:	d00e      	beq.n	80031fc <UART_SetConfig+0xc58>
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d008      	beq.n	80031f8 <UART_SetConfig+0xc54>
 80031e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b0b      	cmp	r3, #11
 80031ec:	d102      	bne.n	80031f4 <UART_SetConfig+0xc50>
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	e016      	b.n	8003222 <UART_SetConfig+0xc7e>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e014      	b.n	8003222 <UART_SetConfig+0xc7e>
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	e012      	b.n	8003222 <UART_SetConfig+0xc7e>
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	e010      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003200:	2320      	movs	r3, #32
 8003202:	e00e      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003204:	2310      	movs	r3, #16
 8003206:	e00c      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003208:	230c      	movs	r3, #12
 800320a:	e00a      	b.n	8003222 <UART_SetConfig+0xc7e>
 800320c:	230a      	movs	r3, #10
 800320e:	e008      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003210:	2308      	movs	r3, #8
 8003212:	e006      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003214:	2306      	movs	r3, #6
 8003216:	e004      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003218:	2304      	movs	r3, #4
 800321a:	e002      	b.n	8003222 <UART_SetConfig+0xc7e>
 800321c:	2302      	movs	r3, #2
 800321e:	e000      	b.n	8003222 <UART_SetConfig+0xc7e>
 8003220:	2301      	movs	r3, #1
 8003222:	0019      	movs	r1, r3
 8003224:	0010      	movs	r0, r2
 8003226:	f7fc ff6d 	bl	8000104 <__udivsi3>
 800322a:	0003      	movs	r3, r0
 800322c:	005a      	lsls	r2, r3, #1
 800322e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	18d2      	adds	r2, r2, r3
 8003236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0019      	movs	r1, r3
 800323c:	0010      	movs	r0, r2
 800323e:	f7fc ff61 	bl	8000104 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	b29b      	uxth	r3, r3
 8003246:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003248:	e068      	b.n	800331c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04c      	beq.n	80032ec <UART_SetConfig+0xd48>
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b01      	cmp	r3, #1
 8003258:	d045      	beq.n	80032e6 <UART_SetConfig+0xd42>
 800325a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b02      	cmp	r3, #2
 8003260:	d03e      	beq.n	80032e0 <UART_SetConfig+0xd3c>
 8003262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b03      	cmp	r3, #3
 8003268:	d038      	beq.n	80032dc <UART_SetConfig+0xd38>
 800326a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b04      	cmp	r3, #4
 8003270:	d031      	beq.n	80032d6 <UART_SetConfig+0xd32>
 8003272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b05      	cmp	r3, #5
 8003278:	d02b      	beq.n	80032d2 <UART_SetConfig+0xd2e>
 800327a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b06      	cmp	r3, #6
 8003280:	d025      	beq.n	80032ce <UART_SetConfig+0xd2a>
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b07      	cmp	r3, #7
 8003288:	d01e      	beq.n	80032c8 <UART_SetConfig+0xd24>
 800328a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b08      	cmp	r3, #8
 8003290:	d017      	beq.n	80032c2 <UART_SetConfig+0xd1e>
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b09      	cmp	r3, #9
 8003298:	d010      	beq.n	80032bc <UART_SetConfig+0xd18>
 800329a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b0a      	cmp	r3, #10
 80032a0:	d009      	beq.n	80032b6 <UART_SetConfig+0xd12>
 80032a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b0b      	cmp	r3, #11
 80032a8:	d102      	bne.n	80032b0 <UART_SetConfig+0xd0c>
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	e01f      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	e01c      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	e019      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	e016      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	e013      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	e010      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032ce:	4b61      	ldr	r3, [pc, #388]	; (8003454 <UART_SetConfig+0xeb0>)
 80032d0:	e00e      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <UART_SetConfig+0xeb4>)
 80032d4:	e00c      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	e009      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032dc:	4b5f      	ldr	r3, [pc, #380]	; (800345c <UART_SetConfig+0xeb8>)
 80032de:	e007      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	01db      	lsls	r3, r3, #7
 80032e4:	e004      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	e001      	b.n	80032f0 <UART_SetConfig+0xd4c>
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	025b      	lsls	r3, r3, #9
 80032f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032f2:	6852      	ldr	r2, [r2, #4]
 80032f4:	0852      	lsrs	r2, r2, #1
 80032f6:	189a      	adds	r2, r3, r2
 80032f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0019      	movs	r1, r3
 80032fe:	0010      	movs	r0, r2
 8003300:	f7fc ff00 	bl	8000104 <__udivsi3>
 8003304:	0003      	movs	r3, r0
 8003306:	b29b      	uxth	r3, r3
 8003308:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800330a:	e007      	b.n	800331c <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 800330c:	2313      	movs	r3, #19
 800330e:	2258      	movs	r2, #88	; 0x58
 8003310:	4694      	mov	ip, r2
 8003312:	44bc      	add	ip, r7
 8003314:	4463      	add	r3, ip
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	2b0f      	cmp	r3, #15
 8003320:	d920      	bls.n	8003364 <UART_SetConfig+0xdc0>
 8003322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003324:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <UART_SetConfig+0xebc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d81c      	bhi.n	8003364 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332c:	b29a      	uxth	r2, r3
 800332e:	200a      	movs	r0, #10
 8003330:	2458      	movs	r4, #88	; 0x58
 8003332:	193b      	adds	r3, r7, r4
 8003334:	181b      	adds	r3, r3, r0
 8003336:	210f      	movs	r1, #15
 8003338:	438a      	bics	r2, r1
 800333a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	2207      	movs	r2, #7
 8003344:	4013      	ands	r3, r2
 8003346:	b299      	uxth	r1, r3
 8003348:	193b      	adds	r3, r7, r4
 800334a:	181b      	adds	r3, r3, r0
 800334c:	193a      	adds	r2, r7, r4
 800334e:	1812      	adds	r2, r2, r0
 8003350:	8812      	ldrh	r2, [r2, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	193a      	adds	r2, r7, r4
 800335c:	1812      	adds	r2, r2, r0
 800335e:	8812      	ldrh	r2, [r2, #0]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e1d1      	b.n	8003708 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003364:	2313      	movs	r3, #19
 8003366:	2258      	movs	r2, #88	; 0x58
 8003368:	4694      	mov	ip, r2
 800336a:	44bc      	add	ip, r7
 800336c:	4463      	add	r3, ip
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e1c9      	b.n	8003708 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8003374:	231b      	movs	r3, #27
 8003376:	2258      	movs	r2, #88	; 0x58
 8003378:	4694      	mov	ip, r2
 800337a:	44bc      	add	ip, r7
 800337c:	4463      	add	r3, ip
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d100      	bne.n	8003386 <UART_SetConfig+0xde2>
 8003384:	e08d      	b.n	80034a2 <UART_SetConfig+0xefe>
 8003386:	dc02      	bgt.n	800338e <UART_SetConfig+0xdea>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <UART_SetConfig+0xdf8>
 800338c:	e1a1      	b.n	80036d2 <UART_SetConfig+0x112e>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d100      	bne.n	8003394 <UART_SetConfig+0xdf0>
 8003392:	e0dd      	b.n	8003550 <UART_SetConfig+0xfac>
 8003394:	2b08      	cmp	r3, #8
 8003396:	d100      	bne.n	800339a <UART_SetConfig+0xdf6>
 8003398:	e13b      	b.n	8003612 <UART_SetConfig+0x106e>
 800339a:	e19a      	b.n	80036d2 <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800339c:	f7fe fede 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 80033a0:	0002      	movs	r2, r0
 80033a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d100      	bne.n	80033ac <UART_SetConfig+0xe08>
 80033aa:	e065      	b.n	8003478 <UART_SetConfig+0xed4>
 80033ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d100      	bne.n	80033b6 <UART_SetConfig+0xe12>
 80033b4:	e05e      	b.n	8003474 <UART_SetConfig+0xed0>
 80033b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d058      	beq.n	8003470 <UART_SetConfig+0xecc>
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d052      	beq.n	800346c <UART_SetConfig+0xec8>
 80033c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d04c      	beq.n	8003468 <UART_SetConfig+0xec4>
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d046      	beq.n	8003464 <UART_SetConfig+0xec0>
 80033d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d020      	beq.n	8003420 <UART_SetConfig+0xe7c>
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	d01a      	beq.n	800341c <UART_SetConfig+0xe78>
 80033e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d014      	beq.n	8003418 <UART_SetConfig+0xe74>
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	d00e      	beq.n	8003414 <UART_SetConfig+0xe70>
 80033f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b0a      	cmp	r3, #10
 80033fc:	d008      	beq.n	8003410 <UART_SetConfig+0xe6c>
 80033fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b0b      	cmp	r3, #11
 8003404:	d102      	bne.n	800340c <UART_SetConfig+0xe68>
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	e036      	b.n	800347a <UART_SetConfig+0xed6>
 800340c:	2301      	movs	r3, #1
 800340e:	e034      	b.n	800347a <UART_SetConfig+0xed6>
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	e032      	b.n	800347a <UART_SetConfig+0xed6>
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	e030      	b.n	800347a <UART_SetConfig+0xed6>
 8003418:	2320      	movs	r3, #32
 800341a:	e02e      	b.n	800347a <UART_SetConfig+0xed6>
 800341c:	2310      	movs	r3, #16
 800341e:	e02c      	b.n	800347a <UART_SetConfig+0xed6>
 8003420:	230c      	movs	r3, #12
 8003422:	e02a      	b.n	800347a <UART_SetConfig+0xed6>
 8003424:	0001e848 	.word	0x0001e848
 8003428:	01e84800 	.word	0x01e84800
 800342c:	0003d090 	.word	0x0003d090
 8003430:	0007a120 	.word	0x0007a120
 8003434:	000f4240 	.word	0x000f4240
 8003438:	001e8480 	.word	0x001e8480
 800343c:	0028b0aa 	.word	0x0028b0aa
 8003440:	0030d400 	.word	0x0030d400
 8003444:	003d0900 	.word	0x003d0900
 8003448:	00516154 	.word	0x00516154
 800344c:	007a1200 	.word	0x007a1200
 8003450:	00f42400 	.word	0x00f42400
 8003454:	00001554 	.word	0x00001554
 8003458:	00001998 	.word	0x00001998
 800345c:	00002aaa 	.word	0x00002aaa
 8003460:	0000ffff 	.word	0x0000ffff
 8003464:	230a      	movs	r3, #10
 8003466:	e008      	b.n	800347a <UART_SetConfig+0xed6>
 8003468:	2308      	movs	r3, #8
 800346a:	e006      	b.n	800347a <UART_SetConfig+0xed6>
 800346c:	2306      	movs	r3, #6
 800346e:	e004      	b.n	800347a <UART_SetConfig+0xed6>
 8003470:	2304      	movs	r3, #4
 8003472:	e002      	b.n	800347a <UART_SetConfig+0xed6>
 8003474:	2302      	movs	r3, #2
 8003476:	e000      	b.n	800347a <UART_SetConfig+0xed6>
 8003478:	2301      	movs	r3, #1
 800347a:	0019      	movs	r1, r3
 800347c:	0010      	movs	r0, r2
 800347e:	f7fc fe41 	bl	8000104 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	001a      	movs	r2, r3
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	18d2      	adds	r2, r2, r3
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	0019      	movs	r1, r3
 8003494:	0010      	movs	r0, r2
 8003496:	f7fc fe35 	bl	8000104 <__udivsi3>
 800349a:	0003      	movs	r3, r0
 800349c:	b29b      	uxth	r3, r3
 800349e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80034a0:	e11f      	b.n	80036e2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d043      	beq.n	8003532 <UART_SetConfig+0xf8e>
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d03d      	beq.n	800352e <UART_SetConfig+0xf8a>
 80034b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d037      	beq.n	800352a <UART_SetConfig+0xf86>
 80034ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d031      	beq.n	8003526 <UART_SetConfig+0xf82>
 80034c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d02b      	beq.n	8003522 <UART_SetConfig+0xf7e>
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d025      	beq.n	800351e <UART_SetConfig+0xf7a>
 80034d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d01f      	beq.n	800351a <UART_SetConfig+0xf76>
 80034da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d019      	beq.n	8003516 <UART_SetConfig+0xf72>
 80034e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d013      	beq.n	8003512 <UART_SetConfig+0xf6e>
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d00d      	beq.n	800350e <UART_SetConfig+0xf6a>
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2b0a      	cmp	r3, #10
 80034f8:	d007      	beq.n	800350a <UART_SetConfig+0xf66>
 80034fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	d101      	bne.n	8003506 <UART_SetConfig+0xf62>
 8003502:	4b8d      	ldr	r3, [pc, #564]	; (8003738 <UART_SetConfig+0x1194>)
 8003504:	e016      	b.n	8003534 <UART_SetConfig+0xf90>
 8003506:	4b8d      	ldr	r3, [pc, #564]	; (800373c <UART_SetConfig+0x1198>)
 8003508:	e014      	b.n	8003534 <UART_SetConfig+0xf90>
 800350a:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <UART_SetConfig+0x119c>)
 800350c:	e012      	b.n	8003534 <UART_SetConfig+0xf90>
 800350e:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <UART_SetConfig+0x11a0>)
 8003510:	e010      	b.n	8003534 <UART_SetConfig+0xf90>
 8003512:	4b8d      	ldr	r3, [pc, #564]	; (8003748 <UART_SetConfig+0x11a4>)
 8003514:	e00e      	b.n	8003534 <UART_SetConfig+0xf90>
 8003516:	4b8d      	ldr	r3, [pc, #564]	; (800374c <UART_SetConfig+0x11a8>)
 8003518:	e00c      	b.n	8003534 <UART_SetConfig+0xf90>
 800351a:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <UART_SetConfig+0x11ac>)
 800351c:	e00a      	b.n	8003534 <UART_SetConfig+0xf90>
 800351e:	4b8d      	ldr	r3, [pc, #564]	; (8003754 <UART_SetConfig+0x11b0>)
 8003520:	e008      	b.n	8003534 <UART_SetConfig+0xf90>
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <UART_SetConfig+0x11b4>)
 8003524:	e006      	b.n	8003534 <UART_SetConfig+0xf90>
 8003526:	4b8d      	ldr	r3, [pc, #564]	; (800375c <UART_SetConfig+0x11b8>)
 8003528:	e004      	b.n	8003534 <UART_SetConfig+0xf90>
 800352a:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <UART_SetConfig+0x11bc>)
 800352c:	e002      	b.n	8003534 <UART_SetConfig+0xf90>
 800352e:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <UART_SetConfig+0x11c0>)
 8003530:	e000      	b.n	8003534 <UART_SetConfig+0xf90>
 8003532:	4b82      	ldr	r3, [pc, #520]	; (800373c <UART_SetConfig+0x1198>)
 8003534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003536:	6852      	ldr	r2, [r2, #4]
 8003538:	0852      	lsrs	r2, r2, #1
 800353a:	189a      	adds	r2, r3, r2
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0019      	movs	r1, r3
 8003542:	0010      	movs	r0, r2
 8003544:	f7fc fdde 	bl	8000104 <__udivsi3>
 8003548:	0003      	movs	r3, r0
 800354a:	b29b      	uxth	r3, r3
 800354c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800354e:	e0c8      	b.n	80036e2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003550:	f7fe fd78 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8003554:	0002      	movs	r2, r0
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d044      	beq.n	80035e8 <UART_SetConfig+0x1044>
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	d03e      	beq.n	80035e4 <UART_SetConfig+0x1040>
 8003566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b02      	cmp	r3, #2
 800356c:	d038      	beq.n	80035e0 <UART_SetConfig+0x103c>
 800356e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b03      	cmp	r3, #3
 8003574:	d032      	beq.n	80035dc <UART_SetConfig+0x1038>
 8003576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b04      	cmp	r3, #4
 800357c:	d02c      	beq.n	80035d8 <UART_SetConfig+0x1034>
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2b05      	cmp	r3, #5
 8003584:	d026      	beq.n	80035d4 <UART_SetConfig+0x1030>
 8003586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2b06      	cmp	r3, #6
 800358c:	d020      	beq.n	80035d0 <UART_SetConfig+0x102c>
 800358e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b07      	cmp	r3, #7
 8003594:	d01a      	beq.n	80035cc <UART_SetConfig+0x1028>
 8003596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b08      	cmp	r3, #8
 800359c:	d014      	beq.n	80035c8 <UART_SetConfig+0x1024>
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d00e      	beq.n	80035c4 <UART_SetConfig+0x1020>
 80035a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d008      	beq.n	80035c0 <UART_SetConfig+0x101c>
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b0b      	cmp	r3, #11
 80035b4:	d102      	bne.n	80035bc <UART_SetConfig+0x1018>
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	e016      	b.n	80035ea <UART_SetConfig+0x1046>
 80035bc:	2301      	movs	r3, #1
 80035be:	e014      	b.n	80035ea <UART_SetConfig+0x1046>
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	e012      	b.n	80035ea <UART_SetConfig+0x1046>
 80035c4:	2340      	movs	r3, #64	; 0x40
 80035c6:	e010      	b.n	80035ea <UART_SetConfig+0x1046>
 80035c8:	2320      	movs	r3, #32
 80035ca:	e00e      	b.n	80035ea <UART_SetConfig+0x1046>
 80035cc:	2310      	movs	r3, #16
 80035ce:	e00c      	b.n	80035ea <UART_SetConfig+0x1046>
 80035d0:	230c      	movs	r3, #12
 80035d2:	e00a      	b.n	80035ea <UART_SetConfig+0x1046>
 80035d4:	230a      	movs	r3, #10
 80035d6:	e008      	b.n	80035ea <UART_SetConfig+0x1046>
 80035d8:	2308      	movs	r3, #8
 80035da:	e006      	b.n	80035ea <UART_SetConfig+0x1046>
 80035dc:	2306      	movs	r3, #6
 80035de:	e004      	b.n	80035ea <UART_SetConfig+0x1046>
 80035e0:	2304      	movs	r3, #4
 80035e2:	e002      	b.n	80035ea <UART_SetConfig+0x1046>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e000      	b.n	80035ea <UART_SetConfig+0x1046>
 80035e8:	2301      	movs	r3, #1
 80035ea:	0019      	movs	r1, r3
 80035ec:	0010      	movs	r0, r2
 80035ee:	f7fc fd89 	bl	8000104 <__udivsi3>
 80035f2:	0003      	movs	r3, r0
 80035f4:	001a      	movs	r2, r3
 80035f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	18d2      	adds	r2, r2, r3
 80035fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0019      	movs	r1, r3
 8003604:	0010      	movs	r0, r2
 8003606:	f7fc fd7d 	bl	8000104 <__udivsi3>
 800360a:	0003      	movs	r3, r0
 800360c:	b29b      	uxth	r3, r3
 800360e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003610:	e067      	b.n	80036e2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d04b      	beq.n	80036b2 <UART_SetConfig+0x110e>
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b01      	cmp	r3, #1
 8003620:	d044      	beq.n	80036ac <UART_SetConfig+0x1108>
 8003622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b02      	cmp	r3, #2
 8003628:	d03d      	beq.n	80036a6 <UART_SetConfig+0x1102>
 800362a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b03      	cmp	r3, #3
 8003630:	d037      	beq.n	80036a2 <UART_SetConfig+0x10fe>
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b04      	cmp	r3, #4
 8003638:	d030      	beq.n	800369c <UART_SetConfig+0x10f8>
 800363a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b05      	cmp	r3, #5
 8003640:	d02a      	beq.n	8003698 <UART_SetConfig+0x10f4>
 8003642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b06      	cmp	r3, #6
 8003648:	d024      	beq.n	8003694 <UART_SetConfig+0x10f0>
 800364a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b07      	cmp	r3, #7
 8003650:	d01d      	beq.n	800368e <UART_SetConfig+0x10ea>
 8003652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b08      	cmp	r3, #8
 8003658:	d016      	beq.n	8003688 <UART_SetConfig+0x10e4>
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b09      	cmp	r3, #9
 8003660:	d00f      	beq.n	8003682 <UART_SetConfig+0x10de>
 8003662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d008      	beq.n	800367c <UART_SetConfig+0x10d8>
 800366a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b0b      	cmp	r3, #11
 8003670:	d101      	bne.n	8003676 <UART_SetConfig+0x10d2>
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	e01f      	b.n	80036b6 <UART_SetConfig+0x1112>
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	e01c      	b.n	80036b6 <UART_SetConfig+0x1112>
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	e019      	b.n	80036b6 <UART_SetConfig+0x1112>
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	e016      	b.n	80036b6 <UART_SetConfig+0x1112>
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	e013      	b.n	80036b6 <UART_SetConfig+0x1112>
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	e010      	b.n	80036b6 <UART_SetConfig+0x1112>
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <UART_SetConfig+0x11c4>)
 8003696:	e00e      	b.n	80036b6 <UART_SetConfig+0x1112>
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <UART_SetConfig+0x11c8>)
 800369a:	e00c      	b.n	80036b6 <UART_SetConfig+0x1112>
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	015b      	lsls	r3, r3, #5
 80036a0:	e009      	b.n	80036b6 <UART_SetConfig+0x1112>
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <UART_SetConfig+0x11cc>)
 80036a4:	e007      	b.n	80036b6 <UART_SetConfig+0x1112>
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	e004      	b.n	80036b6 <UART_SetConfig+0x1112>
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	e001      	b.n	80036b6 <UART_SetConfig+0x1112>
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	0852      	lsrs	r2, r2, #1
 80036bc:	189a      	adds	r2, r3, r2
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fc fd1d 	bl	8000104 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80036d0:	e007      	b.n	80036e2 <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 80036d2:	2313      	movs	r3, #19
 80036d4:	2258      	movs	r2, #88	; 0x58
 80036d6:	4694      	mov	ip, r2
 80036d8:	44bc      	add	ip, r7
 80036da:	4463      	add	r3, ip
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
        break;
 80036e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d908      	bls.n	80036fa <UART_SetConfig+0x1156>
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	4a22      	ldr	r2, [pc, #136]	; (8003774 <UART_SetConfig+0x11d0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d804      	bhi.n	80036fa <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 80036f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f6:	60da      	str	r2, [r3, #12]
 80036f8:	e006      	b.n	8003708 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 80036fa:	2313      	movs	r3, #19
 80036fc:	2258      	movs	r2, #88	; 0x58
 80036fe:	4694      	mov	ip, r2
 8003700:	44bc      	add	ip, r7
 8003702:	4463      	add	r3, ip
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370a:	226a      	movs	r2, #106	; 0x6a
 800370c:	2101      	movs	r1, #1
 800370e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003712:	2268      	movs	r2, #104	; 0x68
 8003714:	2101      	movs	r1, #1
 8003716:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371a:	2200      	movs	r2, #0
 800371c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800371e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003720:	2200      	movs	r2, #0
 8003722:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003724:	2313      	movs	r3, #19
 8003726:	2258      	movs	r2, #88	; 0x58
 8003728:	4694      	mov	ip, r2
 800372a:	44bc      	add	ip, r7
 800372c:	4463      	add	r3, ip
 800372e:	781b      	ldrb	r3, [r3, #0]
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b01f      	add	sp, #124	; 0x7c
 8003736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003738:	0000f424 	.word	0x0000f424
 800373c:	00f42400 	.word	0x00f42400
 8003740:	0001e848 	.word	0x0001e848
 8003744:	0003d090 	.word	0x0003d090
 8003748:	0007a120 	.word	0x0007a120
 800374c:	000f4240 	.word	0x000f4240
 8003750:	00145855 	.word	0x00145855
 8003754:	00186a00 	.word	0x00186a00
 8003758:	001e8480 	.word	0x001e8480
 800375c:	0028b0aa 	.word	0x0028b0aa
 8003760:	003d0900 	.word	0x003d0900
 8003764:	007a1200 	.word	0x007a1200
 8003768:	00000aaa 	.word	0x00000aaa
 800376c:	00000ccc 	.word	0x00000ccc
 8003770:	00001555 	.word	0x00001555
 8003774:	0000ffff 	.word	0x0000ffff

08003778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2201      	movs	r2, #1
 8003786:	4013      	ands	r3, r2
 8003788:	d00b      	beq.n	80037a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <UART_AdvFeatureConfig+0x144>)
 8003792:	4013      	ands	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	2202      	movs	r2, #2
 80037a8:	4013      	ands	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a43      	ldr	r2, [pc, #268]	; (80038c0 <UART_AdvFeatureConfig+0x148>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <UART_AdvFeatureConfig+0x14c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	2208      	movs	r2, #8
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00b      	beq.n	8003808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <UART_AdvFeatureConfig+0x150>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	2210      	movs	r2, #16
 800380e:	4013      	ands	r3, r2
 8003810:	d00b      	beq.n	800382a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <UART_AdvFeatureConfig+0x154>)
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	2220      	movs	r2, #32
 8003830:	4013      	ands	r3, r2
 8003832:	d00b      	beq.n	800384c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <UART_AdvFeatureConfig+0x158>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	4013      	ands	r3, r2
 8003854:	d01d      	beq.n	8003892 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <UART_AdvFeatureConfig+0x15c>)
 800385e:	4013      	ands	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	035b      	lsls	r3, r3, #13
 8003876:	429a      	cmp	r2, r3
 8003878:	d10b      	bne.n	8003892 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <UART_AdvFeatureConfig+0x160>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <UART_AdvFeatureConfig+0x164>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	fffdffff 	.word	0xfffdffff
 80038c0:	fffeffff 	.word	0xfffeffff
 80038c4:	fffbffff 	.word	0xfffbffff
 80038c8:	ffff7fff 	.word	0xffff7fff
 80038cc:	ffffefff 	.word	0xffffefff
 80038d0:	ffffdfff 	.word	0xffffdfff
 80038d4:	ffefffff 	.word	0xffefffff
 80038d8:	ff9fffff 	.word	0xff9fffff
 80038dc:	fff7ffff 	.word	0xfff7ffff

080038e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2288      	movs	r2, #136	; 0x88
 80038ec:	2100      	movs	r1, #0
 80038ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038f0:	f7fc ff04 	bl	80006fc <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2208      	movs	r2, #8
 8003900:	4013      	ands	r3, r2
 8003902:	2b08      	cmp	r3, #8
 8003904:	d10d      	bne.n	8003922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	0399      	lsls	r1, r3, #14
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <UART_CheckIdleState+0x90>)
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	0013      	movs	r3, r2
 8003914:	2200      	movs	r2, #0
 8003916:	f000 f82d 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e021      	b.n	8003966 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2204      	movs	r2, #4
 800392a:	4013      	ands	r3, r2
 800392c:	2b04      	cmp	r3, #4
 800392e:	d10d      	bne.n	800394c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	03d9      	lsls	r1, r3, #15
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <UART_CheckIdleState+0x90>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	0013      	movs	r3, r2
 800393e:	2200      	movs	r2, #0
 8003940:	f000 f818 	bl	8003974 <UART_WaitOnFlagUntilTimeout>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e00c      	b.n	8003966 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	2120      	movs	r1, #32
 8003952:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2284      	movs	r2, #132	; 0x84
 8003958:	2120      	movs	r1, #32
 800395a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	227c      	movs	r2, #124	; 0x7c
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	01ffffff 	.word	0x01ffffff

08003974 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003984:	e02b      	b.n	80039de <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3301      	adds	r3, #1
 800398a:	d028      	beq.n	80039de <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fc feb6 	bl	80006fc <HAL_GetTick>
 8003990:	0002      	movs	r2, r0
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11d      	bne.n	80039de <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <UART_WaitOnFlagUntilTimeout+0x94>)
 80039ae:	400a      	ands	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	438a      	bics	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	2120      	movs	r1, #32
 80039c8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2284      	movs	r2, #132	; 0x84
 80039ce:	2120      	movs	r1, #32
 80039d0:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	227c      	movs	r2, #124	; 0x7c
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e00f      	b.n	80039fe <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	425a      	negs	r2, r3
 80039ee:	4153      	adcs	r3, r2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	001a      	movs	r2, r3
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0c4      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	fffffe5f 	.word	0xfffffe5f

08003a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	227c      	movs	r2, #124	; 0x7c
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e027      	b.n	8003a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	227c      	movs	r2, #124	; 0x7c
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	2124      	movs	r1, #36	; 0x24
 8003a30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	438a      	bics	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	2120      	movs	r1, #32
 8003a66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	227c      	movs	r2, #124	; 0x7c
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	dfffffff 	.word	0xdfffffff

08003a80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	227c      	movs	r2, #124	; 0x7c
 8003a8e:	5c9b      	ldrb	r3, [r3, r2]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e02e      	b.n	8003af6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	227c      	movs	r2, #124	; 0x7c
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	2124      	movs	r1, #36	; 0x24
 8003aa6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	438a      	bics	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	08d9      	lsrs	r1, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f000 f854 	bl	8003b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	2120      	movs	r1, #32
 8003aea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	227c      	movs	r2, #124	; 0x7c
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b004      	add	sp, #16
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	227c      	movs	r2, #124	; 0x7c
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e02f      	b.n	8003b78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	227c      	movs	r2, #124	; 0x7c
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	2124      	movs	r1, #36	; 0x24
 8003b26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 f813 	bl	8003b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	227c      	movs	r2, #124	; 0x7c
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	f1ffffff 	.word	0xf1ffffff

08003b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b089      	sub	sp, #36	; 0x24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003b8c:	2314      	movs	r3, #20
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <UARTEx_SetNbDataToProcess+0xcc>)
 8003b92:	ca03      	ldmia	r2!, {r0, r1}
 8003b94:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003b96:	230c      	movs	r3, #12
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <UARTEx_SetNbDataToProcess+0xd0>)
 8003b9c:	ca03      	ldmia	r2!, {r0, r1}
 8003b9e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	226a      	movs	r2, #106	; 0x6a
 8003bac:	2101      	movs	r1, #1
 8003bae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2268      	movs	r2, #104	; 0x68
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bb8:	e046      	b.n	8003c48 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bba:	261f      	movs	r6, #31
 8003bbc:	19bb      	adds	r3, r7, r6
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bc2:	201e      	movs	r0, #30
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	0e5b      	lsrs	r3, r3, #25
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	241d      	movs	r4, #29
 8003bd6:	193b      	adds	r3, r7, r4
 8003bd8:	2107      	movs	r1, #7
 8003bda:	400a      	ands	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	0f5b      	lsrs	r3, r3, #29
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	251c      	movs	r5, #28
 8003bea:	197b      	adds	r3, r7, r5
 8003bec:	2107      	movs	r1, #7
 8003bee:	400a      	ands	r2, r1
 8003bf0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003bf2:	183b      	adds	r3, r7, r0
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	197a      	adds	r2, r7, r5
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	2114      	movs	r1, #20
 8003bfc:	1879      	adds	r1, r7, r1
 8003bfe:	5c8a      	ldrb	r2, [r1, r2]
 8003c00:	435a      	muls	r2, r3
 8003c02:	0010      	movs	r0, r2
 8003c04:	197b      	adds	r3, r7, r5
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	250c      	movs	r5, #12
 8003c0a:	197a      	adds	r2, r7, r5
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	0019      	movs	r1, r3
 8003c10:	f7fc fb02 	bl	8000218 <__divsi3>
 8003c14:	0003      	movs	r3, r0
 8003c16:	b299      	uxth	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	226a      	movs	r2, #106	; 0x6a
 8003c1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003c1e:	19bb      	adds	r3, r7, r6
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	193a      	adds	r2, r7, r4
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	2114      	movs	r1, #20
 8003c28:	1879      	adds	r1, r7, r1
 8003c2a:	5c8a      	ldrb	r2, [r1, r2]
 8003c2c:	435a      	muls	r2, r3
 8003c2e:	0010      	movs	r0, r2
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	197a      	adds	r2, r7, r5
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	0019      	movs	r1, r3
 8003c3a:	f7fc faed 	bl	8000218 <__divsi3>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	b299      	uxth	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2268      	movs	r2, #104	; 0x68
 8003c46:	5299      	strh	r1, [r3, r2]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b009      	add	sp, #36	; 0x24
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c50:	0800471c 	.word	0x0800471c
 8003c54:	08004724 	.word	0x08004724

08003c58 <I2CRead>:
//#include "nfc.h"
//#include "main.h"
#include "i2c.h"
//#include "stm32g0xx_hal.h"

void I2CRead(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60ba      	str	r2, [r7, #8]
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	250e      	movs	r5, #14
 8003c64:	197b      	adds	r3, r7, r5
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	200c      	movs	r0, #12
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	1c0a      	adds	r2, r1, #0
 8003c70:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	183a      	adds	r2, r7, r0
 8003c78:	8814      	ldrh	r4, [r2, #0]
 8003c7a:	197a      	adds	r2, r7, r5
 8003c7c:	8811      	ldrh	r1, [r2, #0]
 8003c7e:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <I2CRead+0x48>)
 8003c80:	2232      	movs	r2, #50	; 0x32
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	0022      	movs	r2, r4
 8003c8e:	f7fd f95b 	bl	8000f48 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003c92:	200a      	movs	r0, #10
 8003c94:	f7fc fd3c 	bl	8000710 <HAL_Delay>
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b004      	add	sp, #16
 8003c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca0:	2000002c 	.word	0x2000002c

08003ca4 <I2CWrite>:

void I2CWrite(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af04      	add	r7, sp, #16
 8003caa:	60ba      	str	r2, [r7, #8]
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	250e      	movs	r5, #14
 8003cb0:	197b      	adds	r3, r7, r5
 8003cb2:	1c02      	adds	r2, r0, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	200c      	movs	r0, #12
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	1c0a      	adds	r2, r1, #0
 8003cbc:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	183a      	adds	r2, r7, r0
 8003cc4:	8814      	ldrh	r4, [r2, #0]
 8003cc6:	197a      	adds	r2, r7, r5
 8003cc8:	8811      	ldrh	r1, [r2, #0]
 8003cca:	4808      	ldr	r0, [pc, #32]	; (8003cec <I2CWrite+0x48>)
 8003ccc:	2232      	movs	r2, #50	; 0x32
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	0022      	movs	r2, r4
 8003cda:	f7fd f807 	bl	8000cec <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003cde:	200a      	movs	r0, #10
 8003ce0:	f7fc fd16 	bl	8000710 <HAL_Delay>
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b004      	add	sp, #16
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}
 8003cec:	2000002c 	.word	0x2000002c

08003cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b093      	sub	sp, #76	; 0x4c
 8003cf4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf6:	f7fc fc87 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cfa:	f000 f8c7 	bl	8003e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cfe:	f000 f9b1 	bl	8004064 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003d02:	f000 f91f 	bl	8003f44 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003d06:	f000 f95d 	bl	8003fc4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer[6];
  buffer[0]= 0x4c;	//L
 8003d0a:	2540      	movs	r5, #64	; 0x40
 8003d0c:	197b      	adds	r3, r7, r5
 8003d0e:	224c      	movs	r2, #76	; 0x4c
 8003d10:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003d12:	197b      	adds	r3, r7, r5
 8003d14:	224f      	movs	r2, #79	; 0x4f
 8003d16:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003d18:	197b      	adds	r3, r7, r5
 8003d1a:	2255      	movs	r2, #85	; 0x55
 8003d1c:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003d1e:	197b      	adds	r3, r7, r5
 8003d20:	2249      	movs	r2, #73	; 0x49
 8003d22:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003d24:	197b      	adds	r3, r7, r5
 8003d26:	2253      	movs	r2, #83	; 0x53
 8003d28:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003d2a:	197b      	adds	r3, r7, r5
 8003d2c:	2231      	movs	r2, #49	; 0x31
 8003d2e:	715a      	strb	r2, [r3, #5]
  uint8_t buffer1[6];
  buffer1[0]= 0x48;	//H
 8003d30:	2438      	movs	r4, #56	; 0x38
 8003d32:	193b      	adds	r3, r7, r4
 8003d34:	2248      	movs	r2, #72	; 0x48
 8003d36:	701a      	strb	r2, [r3, #0]
  buffer1[1]= 0x45;	//E
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	2245      	movs	r2, #69	; 0x45
 8003d3c:	705a      	strb	r2, [r3, #1]
  buffer1[2]= 0x4c;	//L
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	224c      	movs	r2, #76	; 0x4c
 8003d42:	709a      	strb	r2, [r3, #2]
  buffer1[3]= 0x4c;	//L
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	224c      	movs	r2, #76	; 0x4c
 8003d48:	70da      	strb	r2, [r3, #3]
  buffer1[4]= 0x4f;	//O
 8003d4a:	193b      	adds	r3, r7, r4
 8003d4c:	224f      	movs	r2, #79	; 0x4f
 8003d4e:	711a      	strb	r2, [r3, #4]
  buffer1[5]= 0x33;	//3
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	2233      	movs	r2, #51	; 0x33
 8003d54:	715a      	strb	r2, [r3, #5]
  uint8_t empty[10];
  empty[0] = 0x0;
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
  empty[1] = 0x0;
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	2200      	movs	r2, #0
 8003d62:	705a      	strb	r2, [r3, #1]
  empty[2] = 0x0;
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2200      	movs	r2, #0
 8003d68:	709a      	strb	r2, [r3, #2]
  empty[3] = 0x0;
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	70da      	strb	r2, [r3, #3]
  empty[4] = 0x0;
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	2200      	movs	r2, #0
 8003d74:	711a      	strb	r2, [r3, #4]
  empty[5] = 0x0;
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	2200      	movs	r2, #0
 8003d7a:	715a      	strb	r2, [r3, #5]
  empty[6] = 0x0;
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	2200      	movs	r2, #0
 8003d80:	719a      	strb	r2, [r3, #6]
  empty[7] = 0x0;
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	2200      	movs	r2, #0
 8003d86:	71da      	strb	r2, [r3, #7]
  empty[8] = 0x0;
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	721a      	strb	r2, [r3, #8]
  empty[9] = 0x0;
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2200      	movs	r2, #0
 8003d92:	725a      	strb	r2, [r3, #9]
  //uint8_t oldPassword[8] = {0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08};
  uint8_t password[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
 8003d94:	2624      	movs	r6, #36	; 0x24
 8003d96:	19bb      	adds	r3, r7, r6
 8003d98:	0018      	movs	r0, r3
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f000 fca8 	bl	80046f4 <memset>
 8003da4:	19bb      	adds	r3, r7, r6
 8003da6:	2201      	movs	r2, #1
 8003da8:	71da      	strb	r2, [r3, #7]
  uint8_t ENDA[3];
  uint8_t I2CsecurityStatus[1];
  uint8_t data[1];

  //initNFC(&hi2c1, NFC_USERMEMORY);
  NFC04A1_setRFMode(password,RF_ENABLE);
 8003daa:	19bb      	adds	r3, r7, r6
 8003dac:	2100      	movs	r1, #0
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fabe 	bl	8004330 <NFC04A1_setRFMode>
  configFTM(password, FTM_DISABLE, 0x00);
 8003db4:	19bb      	adds	r3, r7, r6
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 faca 	bl	8004354 <configFTM>
  set1Area(password);
 8003dc0:	19bb      	adds	r3, r7, r6
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fb06 	bl	80043d4 <set1Area>
  readDynamicReg(I2C_SSO_DYN,I2CsecurityStatus);
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <main+0x198>)
 8003dcc:	0019      	movs	r1, r3
 8003dce:	0010      	movs	r0, r2
 8003dd0:	f000 fa68 	bl	80042a4 <readDynamicReg>
  readSystemMemory(MB_WDG,test2,1);
 8003dd4:	230c      	movs	r3, #12
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2201      	movs	r2, #1
 8003dda:	0019      	movs	r1, r3
 8003ddc:	200e      	movs	r0, #14
 8003dde:	f000 fa2b 	bl	8004238 <readSystemMemory>
  readSystemMemory(MB_MODE,test2+1,1);
 8003de2:	230c      	movs	r3, #12
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	2201      	movs	r2, #1
 8003dea:	0019      	movs	r1, r3
 8003dec:	200d      	movs	r0, #13
 8003dee:	f000 fa23 	bl	8004238 <readSystemMemory>
  //NFC04A1_setRFModeDyn(RF_ENABLE);
  //changeI2CPassword(oldPassword,password);
  //readI2CPassword(password,received);
  writeSystemMemory(I2CSS,password, 0x00);
 8003df2:	19bb      	adds	r3, r7, r6
 8003df4:	2200      	movs	r2, #0
 8003df6:	0019      	movs	r1, r3
 8003df8:	200b      	movs	r0, #11
 8003dfa:	f000 fa32 	bl	8004262 <writeSystemMemory>
  readSystemMemory(I2CSS, data,1);
 8003dfe:	003b      	movs	r3, r7
 8003e00:	2201      	movs	r2, #1
 8003e02:	0019      	movs	r1, r3
 8003e04:	200b      	movs	r0, #11
 8003e06:	f000 fa17 	bl	8004238 <readSystemMemory>
  set2Area(password, 64);
 8003e0a:	19bb      	adds	r3, r7, r6
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fb04 	bl	800441c <set2Area>
  I2CWrite(NFC_USERMEMORY,62,buffer1,2);
 8003e14:	193a      	adds	r2, r7, r4
 8003e16:	2302      	movs	r3, #2
 8003e18:	213e      	movs	r1, #62	; 0x3e
 8003e1a:	20a6      	movs	r0, #166	; 0xa6
 8003e1c:	f7ff ff42 	bl	8003ca4 <I2CWrite>
  I2CWrite(NFC_USERMEMORY,0x80,buffer1,4);
 8003e20:	193a      	adds	r2, r7, r4
 8003e22:	2304      	movs	r3, #4
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	20a6      	movs	r0, #166	; 0xa6
 8003e28:	f7ff ff3c 	bl	8003ca4 <I2CWrite>
  I2CRead(NFC_USERMEMORY,0x7E, test1, 6);
 8003e2c:	2410      	movs	r4, #16
 8003e2e:	193a      	adds	r2, r7, r4
 8003e30:	2306      	movs	r3, #6
 8003e32:	217e      	movs	r1, #126	; 0x7e
 8003e34:	20a6      	movs	r0, #166	; 0xa6
 8003e36:	f7ff ff0f 	bl	8003c58 <I2CRead>
  readUserMemory(1,0x80,test1,3);
 8003e3a:	193a      	adds	r2, r7, r4
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	2001      	movs	r0, #1
 8003e42:	f000 fa5b 	bl	80042fc <readUserMemory>
  lockI2CSecurity();
 8003e46:	f000 f9c3 	bl	80041d0 <lockI2CSecurity>
  readDynamicReg(I2C_SSO_DYN,I2CsecurityStatus);
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <main+0x198>)
 8003e4e:	0019      	movs	r1, r3
 8003e50:	0010      	movs	r0, r2
 8003e52:	f000 fa27 	bl	80042a4 <readDynamicReg>
  //writeSystemMemory(I2CSS,password, 0x55);
  readDynamicReg(I2C_SSO_DYN,I2CsecurityStatus);
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <main+0x198>)
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	0010      	movs	r0, r2
 8003e5e:	f000 fa21 	bl	80042a4 <readDynamicReg>
  writeUserMemory(1, 0x66, buffer, 6);
 8003e62:	197a      	adds	r2, r7, r5
 8003e64:	2306      	movs	r3, #6
 8003e66:	2166      	movs	r1, #102	; 0x66
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f000 fa2d 	bl	80042c8 <writeUserMemory>
  readSystemMemory(I2CSS, data,1);
 8003e6e:	003b      	movs	r3, r7
 8003e70:	2201      	movs	r2, #1
 8003e72:	0019      	movs	r1, r3
 8003e74:	200b      	movs	r0, #11
 8003e76:	f000 f9df 	bl	8004238 <readSystemMemory>
  readUserMemory(1, 0x66, test1, 6);
 8003e7a:	193a      	adds	r2, r7, r4
 8003e7c:	2306      	movs	r3, #6
 8003e7e:	2166      	movs	r1, #102	; 0x66
 8003e80:	2001      	movs	r0, #1
 8003e82:	f000 fa3b 	bl	80042fc <readUserMemory>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <main+0x196>
 8003e88:	00002004 	.word	0x00002004

08003e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b0a1      	sub	sp, #132	; 0x84
 8003e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e92:	2448      	movs	r4, #72	; 0x48
 8003e94:	193b      	adds	r3, r7, r4
 8003e96:	0018      	movs	r0, r3
 8003e98:	2338      	movs	r3, #56	; 0x38
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f000 fc29 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ea2:	2338      	movs	r3, #56	; 0x38
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	001a      	movs	r2, r3
 8003eac:	2100      	movs	r1, #0
 8003eae:	f000 fc21 	bl	80046f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	2334      	movs	r3, #52	; 0x34
 8003eb8:	001a      	movs	r2, r3
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f000 fc1a 	bl	80046f4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fd fc49 	bl	800175c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ed0:	193b      	adds	r3, r7, r4
 8003ed2:	22a0      	movs	r2, #160	; 0xa0
 8003ed4:	02d2      	lsls	r2, r2, #11
 8003ed6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7fd fc87 	bl	80017f4 <HAL_RCC_OscConfig>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d001      	beq.n	8003eee <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003eea:	f000 f933 	bl	8004154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eee:	2138      	movs	r1, #56	; 0x38
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	2201      	movs	r2, #1
 8003efa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7fd ff91 	bl	8001e34 <HAL_RCC_ClockConfig>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d001      	beq.n	8003f1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003f16:	f000 f91d 	bl	8004154 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2260      	movs	r2, #96	; 0x60
 8003f1e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fe f92a 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d001      	beq.n	8003f3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003f38:	f000 f90c 	bl	8004154 <Error_Handler>
  }
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b021      	add	sp, #132	; 0x84
 8003f42:	bd90      	pop	{r4, r7, pc}

08003f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <MX_I2C1_Init+0x78>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <MX_I2C1_Init+0x7c>)
 8003f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7fc fe1d 	bl	8000bc0 <HAL_I2C_Init>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d001      	beq.n	8003f8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f8a:	f000 f8e3 	bl	8004154 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003f90:	2100      	movs	r1, #0
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fd fb4a 	bl	800162c <HAL_I2CEx_ConfigAnalogFilter>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003f9c:	f000 f8da 	bl	8004154 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <MX_I2C1_Init+0x74>)
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fd fb8d 	bl	80016c4 <HAL_I2CEx_ConfigDigitalFilter>
 8003faa:	1e03      	subs	r3, r0, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003fae:	f000 f8d1 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	2000002c 	.word	0x2000002c
 8003fbc:	40005400 	.word	0x40005400
 8003fc0:	2000090e 	.word	0x2000090e

08003fc4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fca:	4a24      	ldr	r2, [pc, #144]	; (800405c <MX_LPUART1_UART_Init+0x98>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <MX_LPUART1_UART_Init+0x9c>)
 8003fd2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003fd4:	4b20      	ldr	r3, [pc, #128]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	0552      	lsls	r2, r2, #21
 8003fda:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003fea:	220c      	movs	r2, #12
 8003fec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ffa:	4b17      	ldr	r3, [pc, #92]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004000:	4b15      	ldr	r3, [pc, #84]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8004008:	2200      	movs	r2, #0
 800400a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 800400e:	0018      	movs	r0, r3
 8004010:	f7fe fa72 	bl	80024f8 <HAL_UART_Init>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004018:	f000 f89c 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 800401e:	2100      	movs	r1, #0
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff fd2d 	bl	8003a80 <HAL_UARTEx_SetTxFifoThreshold>
 8004026:	1e03      	subs	r3, r0, #0
 8004028:	d001      	beq.n	800402e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800402a:	f000 f893 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8004030:	2100      	movs	r1, #0
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff fd64 	bl	8003b00 <HAL_UARTEx_SetRxFifoThreshold>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d001      	beq.n	8004040 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800403c:	f000 f88a 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <MX_LPUART1_UART_Init+0x94>)
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fce2 	bl	8003a0c <HAL_UARTEx_DisableFifoMode>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800404c:	f000 f882 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	20000078 	.word	0x20000078
 800405c:	40008000 	.word	0x40008000
 8004060:	00033324 	.word	0x00033324

08004064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b08b      	sub	sp, #44	; 0x2c
 8004068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	2414      	movs	r4, #20
 800406c:	193b      	adds	r3, r7, r4
 800406e:	0018      	movs	r0, r3
 8004070:	2314      	movs	r3, #20
 8004072:	001a      	movs	r2, r3
 8004074:	2100      	movs	r1, #0
 8004076:	f000 fb3d 	bl	80046f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <MX_GPIO_Init+0xe8>)
 800407c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <MX_GPIO_Init+0xe8>)
 8004080:	2104      	movs	r1, #4
 8004082:	430a      	orrs	r2, r1
 8004084:	635a      	str	r2, [r3, #52]	; 0x34
 8004086:	4b31      	ldr	r3, [pc, #196]	; (800414c <MX_GPIO_Init+0xe8>)
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <MX_GPIO_Init+0xe8>)
 8004094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <MX_GPIO_Init+0xe8>)
 8004098:	2120      	movs	r1, #32
 800409a:	430a      	orrs	r2, r1
 800409c:	635a      	str	r2, [r3, #52]	; 0x34
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <MX_GPIO_Init+0xe8>)
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	2220      	movs	r2, #32
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <MX_GPIO_Init+0xe8>)
 80040ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <MX_GPIO_Init+0xe8>)
 80040b0:	2101      	movs	r1, #1
 80040b2:	430a      	orrs	r2, r1
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <MX_GPIO_Init+0xe8>)
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <MX_GPIO_Init+0xe8>)
 80040c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c6:	4b21      	ldr	r3, [pc, #132]	; (800414c <MX_GPIO_Init+0xe8>)
 80040c8:	2102      	movs	r1, #2
 80040ca:	430a      	orrs	r2, r1
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <MX_GPIO_Init+0xe8>)
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	2202      	movs	r2, #2
 80040d4:	4013      	ands	r3, r2
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	00d9      	lsls	r1, r3, #3
 80040de:	23a0      	movs	r3, #160	; 0xa0
 80040e0:	05db      	lsls	r3, r3, #23
 80040e2:	2200      	movs	r2, #0
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc fd4d 	bl	8000b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <MX_GPIO_Init+0xec>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	2130      	movs	r1, #48	; 0x30
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fc fd47 	bl	8000b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 80040f6:	193b      	adds	r3, r7, r4
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	00d2      	lsls	r2, r2, #3
 80040fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	2201      	movs	r2, #1
 8004102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	193b      	adds	r3, r7, r4
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410a:	193b      	adds	r3, r7, r4
 800410c:	2200      	movs	r2, #0
 800410e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 8004110:	193a      	adds	r2, r7, r4
 8004112:	23a0      	movs	r3, #160	; 0xa0
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f7fc fbcf 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 800411e:	0021      	movs	r1, r4
 8004120:	187b      	adds	r3, r7, r1
 8004122:	2230      	movs	r2, #48	; 0x30
 8004124:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004126:	187b      	adds	r3, r7, r1
 8004128:	2201      	movs	r2, #1
 800412a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	187b      	adds	r3, r7, r1
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	187b      	adds	r3, r7, r1
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004138:	187b      	adds	r3, r7, r1
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <MX_GPIO_Init+0xec>)
 800413c:	0019      	movs	r1, r3
 800413e:	0010      	movs	r0, r2
 8004140:	f7fc fbbc 	bl	80008bc <HAL_GPIO_Init>

}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b00b      	add	sp, #44	; 0x2c
 800414a:	bd90      	pop	{r4, r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	50000400 	.word	0x50000400

08004154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <unlockI2CSecurity>:

/**
 * @description present the i2c password and unlock i2c security session
 * @param password
 */
void unlockI2CSecurity(uint8_t *password){
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	; 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
		for( i = 0; i < 8; i++){
			pass[i] = password[i];
		}
		pass[8] = PRESENTPASS;
	}*/
	for(int i = 0; i < 8; i++){
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	e00c      	b.n	8004186 <unlockI2CSecurity+0x28>
		pass[i] = password[i];
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	7819      	ldrb	r1, [r3, #0]
 8004174:	230c      	movs	r3, #12
 8004176:	18fa      	adds	r2, r7, r3
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	1c0a      	adds	r2, r1, #0
 800417e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	3301      	adds	r3, #1
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2b07      	cmp	r3, #7
 800418a:	ddef      	ble.n	800416c <unlockI2CSecurity+0xe>
	}
	pass[8] = PRESENTPASS;
 800418c:	230c      	movs	r3, #12
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2209      	movs	r2, #9
 8004192:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	e00b      	b.n	80041b2 <unlockI2CSecurity+0x54>
		pass[i+9] = password[i];
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	18d2      	adds	r2, r2, r3
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	3309      	adds	r3, #9
 80041a4:	7811      	ldrb	r1, [r2, #0]
 80041a6:	220c      	movs	r2, #12
 80041a8:	18ba      	adds	r2, r7, r2
 80041aa:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	3301      	adds	r3, #1
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b07      	cmp	r3, #7
 80041b6:	ddf0      	ble.n	800419a <unlockI2CSecurity+0x3c>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, pass,17); //present i2c password
 80041b8:	230c      	movs	r3, #12
 80041ba:	18fa      	adds	r2, r7, r3
 80041bc:	2390      	movs	r3, #144	; 0x90
 80041be:	0119      	lsls	r1, r3, #4
 80041c0:	2311      	movs	r3, #17
 80041c2:	20ae      	movs	r0, #174	; 0xae
 80041c4:	f7ff fd6e 	bl	8003ca4 <I2CWrite>
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b00a      	add	sp, #40	; 0x28
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <lockI2CSecurity>:

/**
 * @description lock the i2c security session by presenting a wrong password
 * @param device address
 */
void lockI2CSecurity(){
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0

	uint8_t WrongPass[17];

	for(int i = 0; i < 8; i++){
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e00b      	b.n	80041f4 <lockI2CSecurity+0x24>
		WrongPass[i] = i+1;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	b2d9      	uxtb	r1, r3
 80041e4:	1d3a      	adds	r2, r7, #4
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	1c0a      	adds	r2, r1, #0
 80041ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b07      	cmp	r3, #7
 80041f8:	ddf0      	ble.n	80041dc <lockI2CSecurity+0xc>
	}
	WrongPass[8] = PRESENTPASS;
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	2209      	movs	r2, #9
 80041fe:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e00a      	b.n	800421c <lockI2CSecurity+0x4c>
		WrongPass[i+9] = i+3;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	3309      	adds	r3, #9
 800420e:	3203      	adds	r2, #3
 8004210:	b2d1      	uxtb	r1, r2
 8004212:	1d3a      	adds	r2, r7, #4
 8004214:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3301      	adds	r3, #1
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b07      	cmp	r3, #7
 8004220:	ddf1      	ble.n	8004206 <lockI2CSecurity+0x36>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, WrongPass,17); //present wrong i2c password
 8004222:	1d3a      	adds	r2, r7, #4
 8004224:	2390      	movs	r3, #144	; 0x90
 8004226:	0119      	lsls	r1, r3, #4
 8004228:	2311      	movs	r3, #17
 800422a:	20ae      	movs	r0, #174	; 0xae
 800422c:	f7ff fd3a 	bl	8003ca4 <I2CWrite>
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b008      	add	sp, #32
 8004236:	bd80      	pop	{r7, pc}

08004238 <readSystemMemory>:
 * @description read the value of register into the buffer
 * @param register address
 * @param buffer
 * @param number of bytes to read
 */
void readSystemMemory(uint16_t regAddress, uint8_t *buffer,int n){
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	210e      	movs	r1, #14
 8004244:	187b      	adds	r3, r7, r1
 8004246:	1c02      	adds	r2, r0, #0
 8004248:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_SYSTEMMEMORY, regAddress, buffer, n);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	187b      	adds	r3, r7, r1
 8004250:	8819      	ldrh	r1, [r3, #0]
 8004252:	0003      	movs	r3, r0
 8004254:	20ae      	movs	r0, #174	; 0xae
 8004256:	f7ff fcff 	bl	8003c58 <I2CRead>
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}

08004262 <writeSystemMemory>:
/**
 * @description write data into the system static register
 * @param register address
 * @param data to write
 */
void writeSystemMemory(uint16_t regAddress, uint8_t *password, uint8_t data){
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	0011      	movs	r1, r2
 800426c:	1dbb      	adds	r3, r7, #6
 800426e:	1c02      	adds	r2, r0, #0
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	1d7b      	adds	r3, r7, #5
 8004274:	1c0a      	adds	r2, r1, #0
 8004276:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[1];
	buffer[0] = data;
 8004278:	240c      	movs	r4, #12
 800427a:	193b      	adds	r3, r7, r4
 800427c:	1d7a      	adds	r2, r7, #5
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff ff6a 	bl	800415e <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY, regAddress, buffer, 1);
 800428a:	193a      	adds	r2, r7, r4
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	8819      	ldrh	r1, [r3, #0]
 8004290:	2301      	movs	r3, #1
 8004292:	20ae      	movs	r0, #174	; 0xae
 8004294:	f7ff fd06 	bl	8003ca4 <I2CWrite>
	lockI2CSecurity();
 8004298:	f7ff ff9a 	bl	80041d0 <lockI2CSecurity>
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b005      	add	sp, #20
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <readDynamicReg>:
/**
 * @description read the value of dynamic register into the buffer
 * @param register address
 * @param buffer
 */
void readDynamicReg(uint16_t regAddress, uint8_t *buffer){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	0002      	movs	r2, r0
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	1dbb      	adds	r3, r7, #6
 80042b0:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_DYNAMICMEMORY, regAddress, buffer, 1);
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	1dbb      	adds	r3, r7, #6
 80042b6:	8819      	ldrh	r1, [r3, #0]
 80042b8:	2301      	movs	r3, #1
 80042ba:	20a6      	movs	r0, #166	; 0xa6
 80042bc:	f7ff fccc 	bl	8003c58 <I2CRead>
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <writeUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to write
 * @param number of bytes to write
 */
void writeUserMemory(int area, uint16_t address, uint8_t *data, int n){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	230a      	movs	r3, #10
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	1c0a      	adds	r2, r1, #0
 80042da:	801a      	strh	r2, [r3, #0]

	if(area == 1){
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d108      	bne.n	80042f4 <writeUserMemory+0x2c>
		I2CWrite(NFC_USERMEMORY, address, data, n);
 80042e2:	6838      	ldr	r0, [r7, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	230a      	movs	r3, #10
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	8819      	ldrh	r1, [r3, #0]
 80042ec:	0003      	movs	r3, r0
 80042ee:	20a6      	movs	r0, #166	; 0xa6
 80042f0:	f7ff fcd8 	bl	8003ca4 <I2CWrite>
	}
	else{
		//waiting to implement
	}
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}

080042fc <readUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to read
 * @param number of bytes to read
 */
void readUserMemory(int area, uint16_t address, uint8_t *data, int n){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	230a      	movs	r3, #10
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	1c0a      	adds	r2, r1, #0
 800430e:	801a      	strh	r2, [r3, #0]

	if(area == 1){
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <readUserMemory+0x2c>
		I2CRead(NFC_USERMEMORY, address, data, n);
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	230a      	movs	r3, #10
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	8819      	ldrh	r1, [r3, #0]
 8004320:	0003      	movs	r3, r0
 8004322:	20a6      	movs	r0, #166	; 0xa6
 8004324:	f7ff fc98 	bl	8003c58 <I2CRead>
	}
	else{
		//waiting to implement
	}
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}

08004330 <NFC04A1_setRFMode>:

void NFC04A1_setRFMode(uint8_t *password, RF_MODE mode){
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	000a      	movs	r2, r1
 800433a:	1cfb      	adds	r3, r7, #3
 800433c:	701a      	strb	r2, [r3, #0]
	writeSystemMemory(RF_MNGT, password, mode);
 800433e:	1cfb      	adds	r3, r7, #3
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0019      	movs	r1, r3
 8004346:	2003      	movs	r0, #3
 8004348:	f7ff ff8b 	bl	8004262 <writeSystemMemory>
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b002      	add	sp, #8
 8004352:	bd80      	pop	{r7, pc}

08004354 <configFTM>:

void NFC04A1_setRFModeDyn(RF_MODE mode){
	writeDynamicReg(RF_MNGT_DYN, mode);
}

void configFTM(uint8_t *password, FTM_MODE mode, uint8_t wdgTime){
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	0008      	movs	r0, r1
 800435e:	0011      	movs	r1, r2
 8004360:	1cfb      	adds	r3, r7, #3
 8004362:	1c02      	adds	r2, r0, #0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	1cbb      	adds	r3, r7, #2
 8004368:	1c0a      	adds	r2, r1, #0
 800436a:	701a      	strb	r2, [r3, #0]

	uint8_t temp1[1];
	temp1[0] = mode;
 800436c:	240c      	movs	r4, #12
 800436e:	193b      	adds	r3, r7, r4
 8004370:	1cfa      	adds	r2, r7, #3
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	701a      	strb	r2, [r3, #0]
	uint8_t temp2[1];
	temp2[0] = wdgTime;
 8004376:	2508      	movs	r5, #8
 8004378:	197b      	adds	r3, r7, r5
 800437a:	1cba      	adds	r2, r7, #2
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f7ff feeb 	bl	800415e <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,MB_MODE, temp1, 1);
 8004388:	193a      	adds	r2, r7, r4
 800438a:	2301      	movs	r3, #1
 800438c:	210d      	movs	r1, #13
 800438e:	20ae      	movs	r0, #174	; 0xae
 8004390:	f7ff fc88 	bl	8003ca4 <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,MB_WDG,temp2, 1);
 8004394:	197a      	adds	r2, r7, r5
 8004396:	2301      	movs	r3, #1
 8004398:	210e      	movs	r1, #14
 800439a:	20ae      	movs	r0, #174	; 0xae
 800439c:	f7ff fc82 	bl	8003ca4 <I2CWrite>
	lockI2CSecurity();
 80043a0:	f7ff ff16 	bl	80041d0 <lockI2CSecurity>
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bdb0      	pop	{r4, r5, r7, pc}

080043ac <checkAreaSizeValidity>:

int checkAreaSizeValidity(int size){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	if( (size%32) == 0 && size <= 512){
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	221f      	movs	r2, #31
 80043b8:	4013      	ands	r3, r2
 80043ba:	d106      	bne.n	80043ca <checkAreaSizeValidity+0x1e>
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	429a      	cmp	r2, r3
 80043c4:	dc01      	bgt.n	80043ca <checkAreaSizeValidity+0x1e>
		return 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <checkAreaSizeValidity+0x20>
	}
	else{
		return 0;
 80043ca:	2300      	movs	r3, #0
	}
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <set1Area>:

/**
 * @brief configure the user memory into 1 area and the area cover all user memory
 * @param password to unlock I2C security
 */
void set1Area(uint8_t *password){
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

	uint8_t temp[2];
	temp[0] = 0x0f;
 80043dc:	240c      	movs	r4, #12
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	220f      	movs	r2, #15
 80043e2:	701a      	strb	r2, [r3, #0]
	//temp[1] = (size/32)-1;

	unlockI2CSecurity(password);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff feb9 	bl	800415e <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA3, temp, 1);
 80043ec:	193a      	adds	r2, r7, r4
 80043ee:	2301      	movs	r3, #1
 80043f0:	2109      	movs	r1, #9
 80043f2:	20ae      	movs	r0, #174	; 0xae
 80043f4:	f7ff fc56 	bl	8003ca4 <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA2, temp, 1);
 80043f8:	193a      	adds	r2, r7, r4
 80043fa:	2301      	movs	r3, #1
 80043fc:	2107      	movs	r1, #7
 80043fe:	20ae      	movs	r0, #174	; 0xae
 8004400:	f7ff fc50 	bl	8003ca4 <I2CWrite>
	I2CWrite(NFC_SYSTEMMEMORY,ENDA1, temp, 1);
 8004404:	193a      	adds	r2, r7, r4
 8004406:	2301      	movs	r3, #1
 8004408:	2105      	movs	r1, #5
 800440a:	20ae      	movs	r0, #174	; 0xae
 800440c:	f7ff fc4a 	bl	8003ca4 <I2CWrite>
	lockI2CSecurity();
 8004410:	f7ff fede 	bl	80041d0 <lockI2CSecurity>
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b005      	add	sp, #20
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <set2Area>:
/**
 * @brief configure the user memory into 2 area, area size must be multiple of 32bytes
 * @param password to unlock I2C security
 * @param size of area in bytes (multiple of 32)
 */
void set2Area(uint8_t *password, uint16_t size){
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	000a      	movs	r2, r1
 8004426:	1cbb      	adds	r3, r7, #2
 8004428:	801a      	strh	r2, [r3, #0]

	uint8_t temp[2];
	temp[0] = 0xf;
 800442a:	210c      	movs	r1, #12
 800442c:	187b      	adds	r3, r7, r1
 800442e:	220f      	movs	r2, #15
 8004430:	701a      	strb	r2, [r3, #0]
	temp[1] = (size/32)-1;
 8004432:	1cbb      	adds	r3, r7, #2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	187b      	adds	r3, r7, r1
 8004442:	705a      	strb	r2, [r3, #1]
	if( checkAreaSizeValidity(size) ){
 8004444:	1cbb      	adds	r3, r7, #2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	0018      	movs	r0, r3
 800444a:	f7ff ffaf 	bl	80043ac <checkAreaSizeValidity>
 800444e:	1e03      	subs	r3, r0, #0
 8004450:	d01a      	beq.n	8004488 <set2Area+0x6c>
		unlockI2CSecurity(password);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0018      	movs	r0, r3
 8004456:	f7ff fe82 	bl	800415e <unlockI2CSecurity>
		I2CWrite(NFC_SYSTEMMEMORY,ENDA3, temp, 1);
 800445a:	240c      	movs	r4, #12
 800445c:	193a      	adds	r2, r7, r4
 800445e:	2301      	movs	r3, #1
 8004460:	2109      	movs	r1, #9
 8004462:	20ae      	movs	r0, #174	; 0xae
 8004464:	f7ff fc1e 	bl	8003ca4 <I2CWrite>
		I2CWrite(NFC_SYSTEMMEMORY,ENDA2, temp, 1);
 8004468:	193a      	adds	r2, r7, r4
 800446a:	2301      	movs	r3, #1
 800446c:	2107      	movs	r1, #7
 800446e:	20ae      	movs	r0, #174	; 0xae
 8004470:	f7ff fc18 	bl	8003ca4 <I2CWrite>
		I2CWrite(NFC_SYSTEMMEMORY,ENDA1, temp+1, 1);
 8004474:	193a      	adds	r2, r7, r4
 8004476:	3201      	adds	r2, #1
 8004478:	2301      	movs	r3, #1
 800447a:	2105      	movs	r1, #5
 800447c:	20ae      	movs	r0, #174	; 0xae
 800447e:	f7ff fc11 	bl	8003ca4 <I2CWrite>
		lockI2CSecurity();
 8004482:	f7ff fea5 	bl	80041d0 <lockI2CSecurity>
	}
	else{
		set1Area(password);
	}
}
 8004486:	e003      	b.n	8004490 <set2Area+0x74>
		set1Area(password);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0018      	movs	r0, r3
 800448c:	f7ff ffa2 	bl	80043d4 <set1Area>
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b005      	add	sp, #20
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_MspInit+0x44>)
 80044a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <HAL_MspInit+0x44>)
 80044a4:	2101      	movs	r1, #1
 80044a6:	430a      	orrs	r2, r1
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_MspInit+0x44>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2201      	movs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_MspInit+0x44>)
 80044b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <HAL_MspInit+0x44>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0549      	lsls	r1, r1, #21
 80044c0:	430a      	orrs	r2, r1
 80044c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_MspInit+0x44>)
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	055b      	lsls	r3, r3, #21
 80044cc:	4013      	ands	r3, r2
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	40021000 	.word	0x40021000

080044e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	2314      	movs	r3, #20
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	0018      	movs	r0, r3
 80044ee:	2314      	movs	r3, #20
 80044f0:	001a      	movs	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f000 f8fe 	bl	80046f4 <memset>
  if(hi2c->Instance==I2C1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_I2C_MspInit+0x8c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d130      	bne.n	8004564 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_I2C_MspInit+0x90>)
 8004504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_I2C_MspInit+0x90>)
 8004508:	2102      	movs	r1, #2
 800450a:	430a      	orrs	r2, r1
 800450c:	635a      	str	r2, [r3, #52]	; 0x34
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_I2C_MspInit+0x90>)
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	2202      	movs	r2, #2
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800451a:	2114      	movs	r1, #20
 800451c:	187b      	adds	r3, r7, r1
 800451e:	22c0      	movs	r2, #192	; 0xc0
 8004520:	0092      	lsls	r2, r2, #2
 8004522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004524:	187b      	adds	r3, r7, r1
 8004526:	2212      	movs	r2, #18
 8004528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800452a:	187b      	adds	r3, r7, r1
 800452c:	2201      	movs	r2, #1
 800452e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	187b      	adds	r3, r7, r1
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004536:	187b      	adds	r3, r7, r1
 8004538:	2206      	movs	r2, #6
 800453a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	187b      	adds	r3, r7, r1
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <HAL_I2C_MspInit+0x94>)
 8004540:	0019      	movs	r1, r3
 8004542:	0010      	movs	r0, r2
 8004544:	f7fc f9ba 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_I2C_MspInit+0x90>)
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_I2C_MspInit+0x90>)
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	0389      	lsls	r1, r1, #14
 8004552:	430a      	orrs	r2, r1
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_I2C_MspInit+0x90>)
 8004558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	039b      	lsls	r3, r3, #14
 800455e:	4013      	ands	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	b00a      	add	sp, #40	; 0x28
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40005400 	.word	0x40005400
 8004570:	40021000 	.word	0x40021000
 8004574:	50000400 	.word	0x50000400

08004578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	2314      	movs	r3, #20
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	0018      	movs	r0, r3
 8004586:	2314      	movs	r3, #20
 8004588:	001a      	movs	r2, r3
 800458a:	2100      	movs	r1, #0
 800458c:	f000 f8b2 	bl	80046f4 <memset>
  if(huart->Instance==LPUART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_UART_MspInit+0x8c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d130      	bne.n	80045fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_UART_MspInit+0x90>)
 800459c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <HAL_UART_MspInit+0x90>)
 80045a0:	2180      	movs	r1, #128	; 0x80
 80045a2:	0349      	lsls	r1, r1, #13
 80045a4:	430a      	orrs	r2, r1
 80045a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <HAL_UART_MspInit+0x90>)
 80045aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	035b      	lsls	r3, r3, #13
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_UART_MspInit+0x90>)
 80045b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <HAL_UART_MspInit+0x90>)
 80045bc:	2101      	movs	r1, #1
 80045be:	430a      	orrs	r2, r1
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_UART_MspInit+0x90>)
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80045ce:	2114      	movs	r1, #20
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	220c      	movs	r2, #12
 80045d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	2202      	movs	r2, #2
 80045da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	2200      	movs	r2, #0
 80045e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2206      	movs	r2, #6
 80045ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ee:	187a      	adds	r2, r7, r1
 80045f0:	23a0      	movs	r3, #160	; 0xa0
 80045f2:	05db      	lsls	r3, r3, #23
 80045f4:	0011      	movs	r1, r2
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7fc f960 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b00a      	add	sp, #40	; 0x28
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40008000 	.word	0x40008000
 8004608:	40021000 	.word	0x40021000

0800460c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800461a:	e7fe      	b.n	800461a <HardFault_Handler+0x4>

0800461c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004634:	f7fc f852 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <SystemInit+0x14>)
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	0512      	lsls	r2, r2, #20
 800464a:	609a      	str	r2, [r3, #8]
#endif
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004658:	480d      	ldr	r0, [pc, #52]	; (8004690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800465a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800465c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800465e:	e003      	b.n	8004668 <LoopCopyDataInit>

08004660 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004662:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004664:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004666:	3104      	adds	r1, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <LoopForever+0xa>)
  ldr r3, =_edata
 800466a:	4b0c      	ldr	r3, [pc, #48]	; (800469c <LoopForever+0xe>)
  adds r2, r0, r1
 800466c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800466e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004670:	d3f6      	bcc.n	8004660 <CopyDataInit>
  ldr r2, =_sbss
 8004672:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <LoopForever+0x12>)
  b LoopFillZerobss
 8004674:	e002      	b.n	800467c <LoopFillZerobss>

08004676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004676:	2300      	movs	r3, #0
  str  r3, [r2]
 8004678:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800467a:	3204      	adds	r2, #4

0800467c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <LoopForever+0x16>)
  cmp r2, r3
 800467e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004680:	d3f9      	bcc.n	8004676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004682:	f7ff ffdd 	bl	8004640 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004686:	f000 f811 	bl	80046ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800468a:	f7ff fb31 	bl	8003cf0 <main>

0800468e <LoopForever>:

LoopForever:
    b LoopForever
 800468e:	e7fe      	b.n	800468e <LoopForever>
  ldr   r0, =_estack
 8004690:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004694:	0800479c 	.word	0x0800479c
  ldr r0, =_sdata
 8004698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800469c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80046a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80046a4:	20000104 	.word	0x20000104

080046a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046a8:	e7fe      	b.n	80046a8 <ADC1_COMP_IRQHandler>
	...

080046ac <__libc_init_array>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	2600      	movs	r6, #0
 80046b0:	4d0c      	ldr	r5, [pc, #48]	; (80046e4 <__libc_init_array+0x38>)
 80046b2:	4c0d      	ldr	r4, [pc, #52]	; (80046e8 <__libc_init_array+0x3c>)
 80046b4:	1b64      	subs	r4, r4, r5
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	42a6      	cmp	r6, r4
 80046ba:	d109      	bne.n	80046d0 <__libc_init_array+0x24>
 80046bc:	2600      	movs	r6, #0
 80046be:	f000 f821 	bl	8004704 <_init>
 80046c2:	4d0a      	ldr	r5, [pc, #40]	; (80046ec <__libc_init_array+0x40>)
 80046c4:	4c0a      	ldr	r4, [pc, #40]	; (80046f0 <__libc_init_array+0x44>)
 80046c6:	1b64      	subs	r4, r4, r5
 80046c8:	10a4      	asrs	r4, r4, #2
 80046ca:	42a6      	cmp	r6, r4
 80046cc:	d105      	bne.n	80046da <__libc_init_array+0x2e>
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	00b3      	lsls	r3, r6, #2
 80046d2:	58eb      	ldr	r3, [r5, r3]
 80046d4:	4798      	blx	r3
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7ee      	b.n	80046b8 <__libc_init_array+0xc>
 80046da:	00b3      	lsls	r3, r6, #2
 80046dc:	58eb      	ldr	r3, [r5, r3]
 80046de:	4798      	blx	r3
 80046e0:	3601      	adds	r6, #1
 80046e2:	e7f2      	b.n	80046ca <__libc_init_array+0x1e>
 80046e4:	08004794 	.word	0x08004794
 80046e8:	08004794 	.word	0x08004794
 80046ec:	08004794 	.word	0x08004794
 80046f0:	08004798 	.word	0x08004798

080046f4 <memset>:
 80046f4:	0003      	movs	r3, r0
 80046f6:	1812      	adds	r2, r2, r0
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	7019      	strb	r1, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <_init>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr

08004710 <_fini>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr
