
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005570  08005570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08005584  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08005584  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdb5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002061  00000000  00000000  0002cde9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002ee50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017de9  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af99  00000000  00000000  000483a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093570  00000000  00000000  0005333a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e68aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  000e6928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080051d0 	.word	0x080051d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080051d0 	.word	0x080051d0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	464f      	mov	r7, r9
 8000444:	4646      	mov	r6, r8
 8000446:	46d6      	mov	lr, sl
 8000448:	b5c0      	push	{r6, r7, lr}
 800044a:	0004      	movs	r4, r0
 800044c:	b082      	sub	sp, #8
 800044e:	000d      	movs	r5, r1
 8000450:	4691      	mov	r9, r2
 8000452:	4698      	mov	r8, r3
 8000454:	428b      	cmp	r3, r1
 8000456:	d82f      	bhi.n	80004b8 <__udivmoddi4+0x78>
 8000458:	d02c      	beq.n	80004b4 <__udivmoddi4+0x74>
 800045a:	4641      	mov	r1, r8
 800045c:	4648      	mov	r0, r9
 800045e:	f000 f8b1 	bl	80005c4 <__clzdi2>
 8000462:	0029      	movs	r1, r5
 8000464:	0006      	movs	r6, r0
 8000466:	0020      	movs	r0, r4
 8000468:	f000 f8ac 	bl	80005c4 <__clzdi2>
 800046c:	1a33      	subs	r3, r6, r0
 800046e:	469c      	mov	ip, r3
 8000470:	3b20      	subs	r3, #32
 8000472:	469a      	mov	sl, r3
 8000474:	d500      	bpl.n	8000478 <__udivmoddi4+0x38>
 8000476:	e076      	b.n	8000566 <__udivmoddi4+0x126>
 8000478:	464b      	mov	r3, r9
 800047a:	4652      	mov	r2, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	001f      	movs	r7, r3
 8000480:	464b      	mov	r3, r9
 8000482:	4662      	mov	r2, ip
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d828      	bhi.n	80004de <__udivmoddi4+0x9e>
 800048c:	d025      	beq.n	80004da <__udivmoddi4+0x9a>
 800048e:	4653      	mov	r3, sl
 8000490:	1ba4      	subs	r4, r4, r6
 8000492:	41bd      	sbcs	r5, r7
 8000494:	2b00      	cmp	r3, #0
 8000496:	da00      	bge.n	800049a <__udivmoddi4+0x5a>
 8000498:	e07b      	b.n	8000592 <__udivmoddi4+0x152>
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
 800049e:	9200      	str	r2, [sp, #0]
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4652      	mov	r2, sl
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	4662      	mov	r2, ip
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	e018      	b.n	80004e6 <__udivmoddi4+0xa6>
 80004b4:	4282      	cmp	r2, r0
 80004b6:	d9d0      	bls.n	800045a <__udivmoddi4+0x1a>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <__udivmoddi4+0x8a>
 80004c6:	601c      	str	r4, [r3, #0]
 80004c8:	605d      	str	r5, [r3, #4]
 80004ca:	9800      	ldr	r0, [sp, #0]
 80004cc:	9901      	ldr	r1, [sp, #4]
 80004ce:	b002      	add	sp, #8
 80004d0:	bc1c      	pop	{r2, r3, r4}
 80004d2:	4690      	mov	r8, r2
 80004d4:	4699      	mov	r9, r3
 80004d6:	46a2      	mov	sl, r4
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	42a3      	cmp	r3, r4
 80004dc:	d9d7      	bls.n	800048e <__udivmoddi4+0x4e>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	4663      	mov	r3, ip
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0e9      	beq.n	80004c0 <__udivmoddi4+0x80>
 80004ec:	07fb      	lsls	r3, r7, #31
 80004ee:	4698      	mov	r8, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0872      	lsrs	r2, r6, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	087b      	lsrs	r3, r7, #1
 80004f8:	4666      	mov	r6, ip
 80004fa:	e00e      	b.n	800051a <__udivmoddi4+0xda>
 80004fc:	42ab      	cmp	r3, r5
 80004fe:	d101      	bne.n	8000504 <__udivmoddi4+0xc4>
 8000500:	42a2      	cmp	r2, r4
 8000502:	d80c      	bhi.n	800051e <__udivmoddi4+0xde>
 8000504:	1aa4      	subs	r4, r4, r2
 8000506:	419d      	sbcs	r5, r3
 8000508:	2001      	movs	r0, #1
 800050a:	1924      	adds	r4, r4, r4
 800050c:	416d      	adcs	r5, r5
 800050e:	2100      	movs	r1, #0
 8000510:	3e01      	subs	r6, #1
 8000512:	1824      	adds	r4, r4, r0
 8000514:	414d      	adcs	r5, r1
 8000516:	2e00      	cmp	r6, #0
 8000518:	d006      	beq.n	8000528 <__udivmoddi4+0xe8>
 800051a:	42ab      	cmp	r3, r5
 800051c:	d9ee      	bls.n	80004fc <__udivmoddi4+0xbc>
 800051e:	3e01      	subs	r6, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2e00      	cmp	r6, #0
 8000526:	d1f8      	bne.n	800051a <__udivmoddi4+0xda>
 8000528:	9800      	ldr	r0, [sp, #0]
 800052a:	9901      	ldr	r1, [sp, #4]
 800052c:	4653      	mov	r3, sl
 800052e:	1900      	adds	r0, r0, r4
 8000530:	4169      	adcs	r1, r5
 8000532:	2b00      	cmp	r3, #0
 8000534:	db23      	blt.n	800057e <__udivmoddi4+0x13e>
 8000536:	002b      	movs	r3, r5
 8000538:	4652      	mov	r2, sl
 800053a:	40d3      	lsrs	r3, r2
 800053c:	002a      	movs	r2, r5
 800053e:	4664      	mov	r4, ip
 8000540:	40e2      	lsrs	r2, r4
 8000542:	001c      	movs	r4, r3
 8000544:	4653      	mov	r3, sl
 8000546:	0015      	movs	r5, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	db2d      	blt.n	80005a8 <__udivmoddi4+0x168>
 800054c:	0026      	movs	r6, r4
 800054e:	4657      	mov	r7, sl
 8000550:	40be      	lsls	r6, r7
 8000552:	0033      	movs	r3, r6
 8000554:	0026      	movs	r6, r4
 8000556:	4667      	mov	r7, ip
 8000558:	40be      	lsls	r6, r7
 800055a:	0032      	movs	r2, r6
 800055c:	1a80      	subs	r0, r0, r2
 800055e:	4199      	sbcs	r1, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	e7ac      	b.n	80004c0 <__udivmoddi4+0x80>
 8000566:	4662      	mov	r2, ip
 8000568:	2320      	movs	r3, #32
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	40da      	lsrs	r2, r3
 8000570:	4661      	mov	r1, ip
 8000572:	0013      	movs	r3, r2
 8000574:	4642      	mov	r2, r8
 8000576:	408a      	lsls	r2, r1
 8000578:	0017      	movs	r7, r2
 800057a:	431f      	orrs	r7, r3
 800057c:	e780      	b.n	8000480 <__udivmoddi4+0x40>
 800057e:	4662      	mov	r2, ip
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	002a      	movs	r2, r5
 8000586:	4666      	mov	r6, ip
 8000588:	409a      	lsls	r2, r3
 800058a:	0023      	movs	r3, r4
 800058c:	40f3      	lsrs	r3, r6
 800058e:	4313      	orrs	r3, r2
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0xfc>
 8000592:	4662      	mov	r2, ip
 8000594:	2320      	movs	r3, #32
 8000596:	2100      	movs	r1, #0
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	9100      	str	r1, [sp, #0]
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	40da      	lsrs	r2, r3
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	e780      	b.n	80004aa <__udivmoddi4+0x6a>
 80005a8:	2320      	movs	r3, #32
 80005aa:	4662      	mov	r2, ip
 80005ac:	0026      	movs	r6, r4
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	40de      	lsrs	r6, r3
 80005b2:	002f      	movs	r7, r5
 80005b4:	46b0      	mov	r8, r6
 80005b6:	4666      	mov	r6, ip
 80005b8:	40b7      	lsls	r7, r6
 80005ba:	4646      	mov	r6, r8
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7c8      	b.n	8000554 <__udivmoddi4+0x114>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzdi2>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d103      	bne.n	80005d2 <__clzdi2+0xe>
 80005ca:	f000 f807 	bl	80005dc <__clzsi2>
 80005ce:	3020      	adds	r0, #32
 80005d0:	e002      	b.n	80005d8 <__clzdi2+0x14>
 80005d2:	1c08      	adds	r0, r1, #0
 80005d4:	f000 f802 	bl	80005dc <__clzsi2>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_Init+0x3c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_Init+0x3c>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0049      	lsls	r1, r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f810 	bl	8000658 <HAL_InitTick>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d003      	beq.n	8000644 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f004 fc64 	bl	8004f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <HAL_InitTick+0x88>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02b      	beq.n	80006c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_InitTick+0x8c>)
 8000672:	681c      	ldr	r4, [r3, #0]
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <HAL_InitTick+0x88>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	0019      	movs	r1, r3
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	0098      	lsls	r0, r3, #2
 800067e:	f7ff fd49 	bl	8000114 <__udivsi3>
 8000682:	0003      	movs	r3, r0
 8000684:	0019      	movs	r1, r3
 8000686:	0020      	movs	r0, r4
 8000688:	f7ff fd44 	bl	8000114 <__udivsi3>
 800068c:	0003      	movs	r3, r0
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f935 	bl	80008fe <HAL_SYSTICK_Config>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d112      	bne.n	80006be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d80a      	bhi.n	80006b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	425b      	negs	r3, r3
 80006a4:	2200      	movs	r2, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f904 	bl	80008b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_InitTick+0x90>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	e00d      	b.n	80006d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e008      	b.n	80006d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006be:	230f      	movs	r3, #15
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e003      	b.n	80006d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006d0:	230f      	movs	r3, #15
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
}
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b005      	add	sp, #20
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <HAL_IncTick+0x18>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_IncTick+0x1c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_IncTick+0x18>)
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000028 	.word	0x20000028

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff fff0 	bl	800070c <HAL_GetTick>
 800072c:	0003      	movs	r3, r0
 800072e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	d004      	beq.n	8000744 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_Delay+0x40>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	f7ff ffe1 	bl	800070c <HAL_GetTick>
 800074a:	0002      	movs	r2, r0
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	429a      	cmp	r2, r3
 8000754:	d8f7      	bhi.n	8000746 <HAL_Delay+0x26>
  {
  }
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000004 	.word	0x20000004

08000764 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	231f      	movs	r3, #31
 8000778:	401a      	ands	r2, r3
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <NVIC_EnableIRQ+0x28>)
 800077c:	2101      	movs	r1, #1
 800077e:	4091      	lsls	r1, r2
 8000780:	000a      	movs	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	e000e100 	.word	0xe000e100

08000790 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b7f      	cmp	r3, #127	; 0x7f
 80007a4:	d932      	bls.n	800080c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <NVIC_SetPriority+0xd4>)
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	230f      	movs	r3, #15
 80007b0:	400b      	ands	r3, r1
 80007b2:	3b08      	subs	r3, #8
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	3306      	adds	r3, #6
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	18d3      	adds	r3, r2, r3
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1dfa      	adds	r2, r7, #7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	0011      	movs	r1, r2
 80007c6:	2203      	movs	r2, #3
 80007c8:	400a      	ands	r2, r1
 80007ca:	00d2      	lsls	r2, r2, #3
 80007cc:	21ff      	movs	r1, #255	; 0xff
 80007ce:	4091      	lsls	r1, r2
 80007d0:	000a      	movs	r2, r1
 80007d2:	43d2      	mvns	r2, r2
 80007d4:	401a      	ands	r2, r3
 80007d6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	401a      	ands	r2, r3
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0018      	movs	r0, r3
 80007e6:	2303      	movs	r3, #3
 80007e8:	4003      	ands	r3, r0
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	001c      	movs	r4, r3
 80007f6:	230f      	movs	r3, #15
 80007f8:	4023      	ands	r3, r4
 80007fa:	3b08      	subs	r3, #8
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	3306      	adds	r3, #6
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	18c3      	adds	r3, r0, r3
 8000806:	3304      	adds	r3, #4
 8000808:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800080a:	e027      	b.n	800085c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	33c0      	adds	r3, #192	; 0xc0
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	589b      	ldr	r3, [r3, r2]
 800081c:	1dfa      	adds	r2, r7, #7
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	0011      	movs	r1, r2
 8000822:	2203      	movs	r2, #3
 8000824:	400a      	ands	r2, r1
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	21ff      	movs	r1, #255	; 0xff
 800082a:	4091      	lsls	r1, r2
 800082c:	000a      	movs	r2, r1
 800082e:	43d2      	mvns	r2, r2
 8000830:	401a      	ands	r2, r3
 8000832:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	019b      	lsls	r3, r3, #6
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	401a      	ands	r2, r3
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0018      	movs	r0, r3
 8000842:	2303      	movs	r3, #3
 8000844:	4003      	ands	r3, r0
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <NVIC_SetPriority+0xd8>)
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	33c0      	adds	r3, #192	; 0xc0
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	501a      	str	r2, [r3, r0]
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b003      	add	sp, #12
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000e100 	.word	0xe000e100

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <SysTick_Config+0x40>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d901      	bls.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e010      	b.n	80008a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <SysTick_Config+0x44>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	3a01      	subs	r2, #1
 8000888:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	2301      	movs	r3, #1
 800088c:	425b      	negs	r3, r3
 800088e:	2103      	movs	r1, #3
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff7d 	bl	8000790 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SysTick_Config+0x44>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x44>)
 800089e:	2207      	movs	r2, #7
 80008a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b002      	add	sp, #8
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	00ffffff 	.word	0x00ffffff
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	210f      	movs	r1, #15
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	1c02      	adds	r2, r0, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff5d 	bl	8000790 <NVIC_SetPriority>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	0002      	movs	r2, r0
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff37 	bl	8000764 <NVIC_EnableIRQ>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ffaf 	bl	800086c <SysTick_Config>
 800090e:	0003      	movs	r3, r0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e147      	b.n	8000bb8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4091      	lsls	r1, r2
 8000932:	000a      	movs	r2, r1
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <HAL_GPIO_Init+0x28>
 800093e:	e138      	b.n	8000bb2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d003      	beq.n	8000950 <HAL_GPIO_Init+0x38>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b12      	cmp	r3, #18
 800094e:	d123      	bne.n	8000998 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	58d3      	ldr	r3, [r2, r3]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	2207      	movs	r2, #7
 8000962:	4013      	ands	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	220f      	movs	r2, #15
 8000968:	409a      	lsls	r2, r3
 800096a:	0013      	movs	r3, r2
 800096c:	43da      	mvns	r2, r3
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	691a      	ldr	r2, [r3, #16]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2107      	movs	r1, #7
 800097c:	400b      	ands	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	43da      	mvns	r2, r3
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d00b      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d007      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e0:	2b11      	cmp	r3, #17
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d130      	bne.n	8000a4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	409a      	lsls	r2, r3
 80009fa:	0013      	movs	r3, r2
 80009fc:	43da      	mvns	r2, r3
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	0013      	movs	r3, r2
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	2201      	movs	r2, #1
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	2203      	movs	r2, #3
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	055b      	lsls	r3, r3, #21
 8000a86:	4013      	ands	r3, r2
 8000a88:	d100      	bne.n	8000a8c <HAL_GPIO_Init+0x174>
 8000a8a:	e092      	b.n	8000bb2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3318      	adds	r3, #24
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	589b      	ldr	r3, [r3, r2]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x1ca>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a45      	ldr	r2, [pc, #276]	; (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x1c6>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	; (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x1c2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x1be>
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x1cc>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	400a      	ands	r2, r1
 8000aea:	00d2      	lsls	r2, r2, #3
 8000aec:	4093      	lsls	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000af4:	4936      	ldr	r1, [pc, #216]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3318      	adds	r3, #24
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	58d3      	ldr	r3, [r2, r3]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	025b      	lsls	r3, r3, #9
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b28:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000b30:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b32:	2384      	movs	r3, #132	; 0x84
 8000b34:	58d3      	ldr	r3, [r2, r3]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	029b      	lsls	r3, r3, #10
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b56:	491e      	ldr	r1, [pc, #120]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b58:	2284      	movs	r2, #132	; 0x84
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	035b      	lsls	r3, r3, #13
 8000b76:	4013      	ands	r3, r2
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43da      	mvns	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	039b      	lsls	r3, r3, #14
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	40da      	lsrs	r2, r3
 8000bc0:	1e13      	subs	r3, r2, #0
 8000bc2:	d000      	beq.n	8000bc6 <HAL_GPIO_Init+0x2ae>
 8000bc4:	e6b0      	b.n	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b006      	add	sp, #24
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	50000400 	.word	0x50000400
 8000bd8:	50000800 	.word	0x50000800
 8000bdc:	50000c00 	.word	0x50000c00

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	0008      	movs	r0, r1
 8000bea:	0011      	movs	r1, r2
 8000bec:	1cbb      	adds	r3, r7, #2
 8000bee:	1c02      	adds	r2, r0, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	1c7b      	adds	r3, r7, #1
 8000bf4:	1c0a      	adds	r2, r1, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf8:	1c7b      	adds	r3, r7, #1
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	1dba      	adds	r2, r7, #6
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	4013      	ands	r3, r2
 8000c32:	d008      	beq.n	8000c46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c36:	1dba      	adds	r2, r7, #6
 8000c38:	8812      	ldrh	r2, [r2, #0]
 8000c3a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f815 	bl	8000c70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	1dba      	adds	r2, r7, #6
 8000c4c:	8812      	ldrh	r2, [r2, #0]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d008      	beq.n	8000c64 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c54:	1dba      	adds	r2, r7, #6
 8000c56:	8812      	ldrh	r2, [r2, #0]
 8000c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f810 	bl	8000c84 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021800 	.word	0x40021800

08000c70 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	1dbb      	adds	r3, r7, #6
 8000c8e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e082      	b.n	8000db0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2241      	movs	r2, #65	; 0x41
 8000cae:	5c9b      	ldrb	r3, [r3, r2]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d107      	bne.n	8000cc6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f004 f949 	bl	8004f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2241      	movs	r2, #65	; 0x41
 8000cca:	2124      	movs	r1, #36	; 0x24
 8000ccc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4934      	ldr	r1, [pc, #208]	; (8000db8 <HAL_I2C_Init+0x120>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4931      	ldr	r1, [pc, #196]	; (8000dbc <HAL_I2C_Init+0x124>)
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0209      	lsls	r1, r1, #8
 8000d10:	430a      	orrs	r2, r1
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	e007      	b.n	8000d26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2184      	movs	r1, #132	; 0x84
 8000d20:	0209      	lsls	r1, r1, #8
 8000d22:	430a      	orrs	r2, r1
 8000d24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d104      	bne.n	8000d38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <HAL_I2C_Init+0x128>)
 8000d44:	430a      	orrs	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	491a      	ldr	r1, [pc, #104]	; (8000dbc <HAL_I2C_Init+0x124>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	021a      	lsls	r2, r3, #8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69d9      	ldr	r1, [r3, #28]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1a      	ldr	r2, [r3, #32]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2241      	movs	r2, #65	; 0x41
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2242      	movs	r2, #66	; 0x42
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	f0ffffff 	.word	0xf0ffffff
 8000dbc:	ffff7fff 	.word	0xffff7fff
 8000dc0:	02008000 	.word	0x02008000

08000dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	000c      	movs	r4, r1
 8000dce:	0010      	movs	r0, r2
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	1c22      	adds	r2, r4, #0
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	2308      	movs	r3, #8
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	801a      	strh	r2, [r3, #0]
 8000de2:	1dbb      	adds	r3, r7, #6
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2241      	movs	r2, #65	; 0x41
 8000dec:	5c9b      	ldrb	r3, [r3, r2]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d000      	beq.n	8000df6 <HAL_I2C_Mem_Write+0x32>
 8000df4:	e10c      	b.n	8001010 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_I2C_Mem_Write+0x42>
 8000dfc:	232c      	movs	r3, #44	; 0x2c
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0ff      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_I2C_Mem_Write+0x5c>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0f8      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	2101      	movs	r1, #1
 8000e26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e28:	f7ff fc70 	bl	800070c <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	0219      	lsls	r1, r3, #8
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2319      	movs	r3, #25
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f000 fb0b 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0e3      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2241      	movs	r2, #65	; 0x41
 8000e4e:	2121      	movs	r1, #33	; 0x21
 8000e50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2242      	movs	r2, #66	; 0x42
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	222c      	movs	r2, #44	; 0x2c
 8000e6a:	18ba      	adds	r2, r7, r2
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e76:	1dbb      	adds	r3, r7, #6
 8000e78:	881c      	ldrh	r4, [r3, #0]
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	230a      	movs	r3, #10
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	8819      	ldrh	r1, [r3, #0]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	0023      	movs	r3, r4
 8000e92:	f000 f9f9 	bl	8001288 <I2C_RequestMemoryWrite>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0b5      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d911      	bls.n	8000ed4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	045c      	lsls	r4, r3, #17
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	8819      	ldrh	r1, [r3, #0]
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	0023      	movs	r3, r4
 8000ece:	f000 fbe3 	bl	8001698 <I2C_TransferConfig>
 8000ed2:	e012      	b.n	8000efa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	049c      	lsls	r4, r3, #18
 8000ee8:	230a      	movs	r3, #10
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	8819      	ldrh	r1, [r3, #0]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	0023      	movs	r3, r4
 8000ef6:	f000 fbcf 	bl	8001698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fae8 	bl	80014d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e081      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03a      	beq.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d136      	bne.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	0013      	movs	r3, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f000 fa7b 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e053      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2bff      	cmp	r3, #255	; 0xff
 8000f72:	d911      	bls.n	8000f98 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	045c      	lsls	r4, r3, #17
 8000f84:	230a      	movs	r3, #10
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	0023      	movs	r3, r4
 8000f92:	f000 fb81 	bl	8001698 <I2C_TransferConfig>
 8000f96:	e012      	b.n	8000fbe <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	049c      	lsls	r4, r3, #18
 8000fac:	230a      	movs	r3, #10
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	8819      	ldrh	r1, [r3, #0]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	0023      	movs	r3, r4
 8000fba:	f000 fb6d 	bl	8001698 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d198      	bne.n	8000efa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fac0 	bl	8001554 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e01a      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	490b      	ldr	r1, [pc, #44]	; (800101c <HAL_I2C_Mem_Write+0x258>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2241      	movs	r2, #65	; 0x41
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2242      	movs	r2, #66	; 0x42
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001010:	2302      	movs	r3, #2
  }
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b007      	add	sp, #28
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	fe00e800 	.word	0xfe00e800

08001020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af02      	add	r7, sp, #8
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	000c      	movs	r4, r1
 800102a:	0010      	movs	r0, r2
 800102c:	0019      	movs	r1, r3
 800102e:	230a      	movs	r3, #10
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	1c22      	adds	r2, r4, #0
 8001034:	801a      	strh	r2, [r3, #0]
 8001036:	2308      	movs	r3, #8
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	801a      	strh	r2, [r3, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	1c0a      	adds	r2, r1, #0
 8001042:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2241      	movs	r2, #65	; 0x41
 8001048:	5c9b      	ldrb	r3, [r3, r2]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b20      	cmp	r3, #32
 800104e:	d000      	beq.n	8001052 <HAL_I2C_Mem_Read+0x32>
 8001050:	e110      	b.n	8001274 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_I2C_Mem_Read+0x42>
 8001058:	232c      	movs	r3, #44	; 0x2c
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d105      	bne.n	800106e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e103      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_I2C_Mem_Read+0x5c>
 8001078:	2302      	movs	r3, #2
 800107a:	e0fc      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	2101      	movs	r1, #1
 8001082:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001084:	f7ff fb42 	bl	800070c <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	0219      	lsls	r1, r3, #8
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2319      	movs	r3, #25
 8001098:	2201      	movs	r2, #1
 800109a:	f000 f9dd 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0e7      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2241      	movs	r2, #65	; 0x41
 80010aa:	2122      	movs	r1, #34	; 0x22
 80010ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2242      	movs	r2, #66	; 0x42
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	222c      	movs	r2, #44	; 0x2c
 80010c6:	18ba      	adds	r2, r7, r2
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	881c      	ldrh	r4, [r3, #0]
 80010d6:	2308      	movs	r3, #8
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	881a      	ldrh	r2, [r3, #0]
 80010dc:	230a      	movs	r3, #10
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	0023      	movs	r3, r4
 80010ee:	f000 f92f 	bl	8001350 <I2C_RequestMemoryRead>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d005      	beq.n	8001102 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0b9      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001106:	b29b      	uxth	r3, r3
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d911      	bls.n	8001130 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001116:	b2da      	uxtb	r2, r3
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	045c      	lsls	r4, r3, #17
 800111c:	230a      	movs	r3, #10
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_I2C_Mem_Read+0x260>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	0023      	movs	r3, r4
 800112a:	f000 fab5 	bl	8001698 <I2C_TransferConfig>
 800112e:	e012      	b.n	8001156 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001134:	b29a      	uxth	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113e:	b2da      	uxtb	r2, r3
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	049c      	lsls	r4, r3, #18
 8001144:	230a      	movs	r3, #10
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	8819      	ldrh	r1, [r3, #0]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_I2C_Mem_Read+0x260>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	0023      	movs	r3, r4
 8001152:	f000 faa1 	bl	8001698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	0013      	movs	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	2104      	movs	r1, #4
 8001164:	f000 f978 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e082      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118c:	3b01      	subs	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b01      	subs	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d03a      	beq.n	8001222 <HAL_I2C_Mem_Read+0x202>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d136      	bne.n	8001222 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	0013      	movs	r3, r2
 80011be:	2200      	movs	r2, #0
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	f000 f949 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e053      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2bff      	cmp	r3, #255	; 0xff
 80011d6:	d911      	bls.n	80011fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	045c      	lsls	r4, r3, #17
 80011e8:	230a      	movs	r3, #10
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	8819      	ldrh	r1, [r3, #0]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	0023      	movs	r3, r4
 80011f6:	f000 fa4f 	bl	8001698 <I2C_TransferConfig>
 80011fa:	e012      	b.n	8001222 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001200:	b29a      	uxth	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120a:	b2da      	uxtb	r2, r3
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	049c      	lsls	r4, r3, #18
 8001210:	230a      	movs	r3, #10
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	0023      	movs	r3, r4
 800121e:	f000 fa3b 	bl	8001698 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001226:	b29b      	uxth	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d194      	bne.n	8001156 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0018      	movs	r0, r3
 8001234:	f000 f98e 	bl	8001554 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e01a      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2220      	movs	r2, #32
 8001246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	490c      	ldr	r1, [pc, #48]	; (8001284 <HAL_I2C_Mem_Read+0x264>)
 8001254:	400a      	ands	r2, r1
 8001256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2241      	movs	r2, #65	; 0x41
 800125c:	2120      	movs	r1, #32
 800125e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2242      	movs	r2, #66	; 0x42
 8001264:	2100      	movs	r1, #0
 8001266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	2100      	movs	r1, #0
 800126e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001274:	2302      	movs	r3, #2
  }
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b007      	add	sp, #28
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	80002400 	.word	0x80002400
 8001284:	fe00e800 	.word	0xfe00e800

08001288 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	000c      	movs	r4, r1
 8001292:	0010      	movs	r0, r2
 8001294:	0019      	movs	r1, r3
 8001296:	250a      	movs	r5, #10
 8001298:	197b      	adds	r3, r7, r5
 800129a:	1c22      	adds	r2, r4, #0
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	2308      	movs	r3, #8
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	1c02      	adds	r2, r0, #0
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	1dbb      	adds	r3, r7, #6
 80012a8:	1c0a      	adds	r2, r1, #0
 80012aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	045c      	lsls	r4, r3, #17
 80012b6:	197b      	adds	r3, r7, r5
 80012b8:	8819      	ldrh	r1, [r3, #0]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <I2C_RequestMemoryWrite+0xc4>)
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	0023      	movs	r3, r4
 80012c2:	f000 f9e9 	bl	8001698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	6a39      	ldr	r1, [r7, #32]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 f902 	bl	80014d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d001      	beq.n	80012da <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e033      	b.n	8001342 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012da:	1dbb      	adds	r3, r7, #6
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012e2:	2308      	movs	r3, #8
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
 80012f0:	e019      	b.n	8001326 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012f2:	2308      	movs	r3, #8
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001306:	6a39      	ldr	r1, [r7, #32]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f8e3 	bl	80014d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e014      	b.n	8001342 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001318:	2308      	movs	r3, #8
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001326:	6a3a      	ldr	r2, [r7, #32]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	0013      	movs	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	f000 f890 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	80002000 	.word	0x80002000

08001350 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	000c      	movs	r4, r1
 800135a:	0010      	movs	r0, r2
 800135c:	0019      	movs	r1, r3
 800135e:	250a      	movs	r5, #10
 8001360:	197b      	adds	r3, r7, r5
 8001362:	1c22      	adds	r2, r4, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	2308      	movs	r3, #8
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	1dbb      	adds	r3, r7, #6
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	197b      	adds	r3, r7, r5
 800137c:	8819      	ldrh	r1, [r3, #0]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <I2C_RequestMemoryRead+0xc0>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	f000 f987 	bl	8001698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	6a39      	ldr	r1, [r7, #32]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	0018      	movs	r0, r3
 8001392:	f000 f8a0 	bl	80014d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013a6:	2308      	movs	r3, #8
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
 80013b4:	e019      	b.n	80013ea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013b6:	2308      	movs	r3, #8
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	6a39      	ldr	r1, [r7, #32]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 f881 	bl	80014d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d001      	beq.n	80013dc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e014      	b.n	8001406 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013dc:	2308      	movs	r3, #8
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013ea:	6a3a      	ldr	r2, [r7, #32]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	0013      	movs	r3, r2
 80013f4:	2200      	movs	r2, #0
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	f000 f82e 	bl	8001458 <I2C_WaitOnFlagUntilTimeout>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	80002000 	.word	0x80002000

08001414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d103      	bne.n	8001432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	2b01      	cmp	r3, #1
 800143e:	d007      	beq.n	8001450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	619a      	str	r2, [r3, #24]
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001468:	e021      	b.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	d01e      	beq.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001470:	f7ff f94c 	bl	800070c <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d302      	bcc.n	8001486 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d113      	bne.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	2220      	movs	r2, #32
 800148c:	431a      	orrs	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2241      	movs	r2, #65	; 0x41
 8001496:	2120      	movs	r1, #32
 8001498:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2242      	movs	r2, #66	; 0x42
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	2100      	movs	r1, #0
 80014a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4013      	ands	r3, r2
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	425a      	negs	r2, r3
 80014be:	4153      	adcs	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	001a      	movs	r2, r3
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d0ce      	beq.n	800146a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b004      	add	sp, #16
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014e2:	e02b      	b.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f86e 	bl	80015cc <I2C_IsAcknowledgeFailed>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e029      	b.n	800154c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3301      	adds	r3, #1
 80014fc:	d01e      	beq.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fe:	f7ff f905 	bl	800070c <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d302      	bcc.n	8001514 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d113      	bne.n	800153c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	2220      	movs	r2, #32
 800151a:	431a      	orrs	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2241      	movs	r2, #65	; 0x41
 8001524:	2120      	movs	r1, #32
 8001526:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2242      	movs	r2, #66	; 0x42
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e007      	b.n	800154c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d1cc      	bne.n	80014e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}

08001554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001560:	e028      	b.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	0018      	movs	r0, r3
 800156a:	f000 f82f 	bl	80015cc <I2C_IsAcknowledgeFailed>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e026      	b.n	80015c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001576:	f7ff f8c9 	bl	800070c <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	d302      	bcc.n	800158c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d113      	bne.n	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	2220      	movs	r2, #32
 8001592:	431a      	orrs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2241      	movs	r2, #65	; 0x41
 800159c:	2120      	movs	r1, #32
 800159e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2242      	movs	r2, #66	; 0x42
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2240      	movs	r2, #64	; 0x40
 80015ac:	2100      	movs	r1, #0
 80015ae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e007      	b.n	80015c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2220      	movs	r2, #32
 80015bc:	4013      	ands	r3, r2
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d1cf      	bne.n	8001562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}

080015cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2210      	movs	r2, #16
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d151      	bne.n	800168a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e6:	e021      	b.n	800162c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	d01e      	beq.n	800162c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ee:	f7ff f88d 	bl	800070c <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d302      	bcc.n	8001604 <I2C_IsAcknowledgeFailed+0x38>
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d113      	bne.n	800162c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	2220      	movs	r2, #32
 800160a:	431a      	orrs	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2241      	movs	r2, #65	; 0x41
 8001614:	2120      	movs	r1, #32
 8001616:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2242      	movs	r2, #66	; 0x42
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2100      	movs	r1, #0
 8001626:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e02f      	b.n	800168c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2220      	movs	r2, #32
 8001634:	4013      	ands	r3, r2
 8001636:	2b20      	cmp	r3, #32
 8001638:	d1d6      	bne.n	80015e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2210      	movs	r2, #16
 8001640:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fee1 	bl	8001414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	490d      	ldr	r1, [pc, #52]	; (8001694 <I2C_IsAcknowledgeFailed+0xc8>)
 800165e:	400a      	ands	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	2204      	movs	r2, #4
 8001668:	431a      	orrs	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	2120      	movs	r1, #32
 8001674:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2242      	movs	r2, #66	; 0x42
 800167a:	2100      	movs	r1, #0
 800167c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bd80      	pop	{r7, pc}
 8001694:	fe00e800 	.word	0xfe00e800

08001698 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	0008      	movs	r0, r1
 80016a2:	0011      	movs	r1, r2
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	240a      	movs	r4, #10
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	1c02      	adds	r2, r0, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	2009      	movs	r0, #9
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	1c0a      	adds	r2, r1, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	6a3a      	ldr	r2, [r7, #32]
 80016be:	0d51      	lsrs	r1, r2, #21
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	400a      	ands	r2, r1
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <I2C_TransferConfig+0x68>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	43d2      	mvns	r2, r2
 80016cc:	401a      	ands	r2, r3
 80016ce:	0011      	movs	r1, r2
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	059b      	lsls	r3, r3, #22
 80016d6:	0d9a      	lsrs	r2, r3, #22
 80016d8:	183b      	adds	r3, r7, r0
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	0418      	lsls	r0, r3, #16
 80016de:	23ff      	movs	r3, #255	; 0xff
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	4003      	ands	r3, r0
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b005      	add	sp, #20
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	03ff63ff 	.word	0x03ff63ff

08001704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2241      	movs	r2, #65	; 0x41
 8001712:	5c9b      	ldrb	r3, [r3, r2]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b20      	cmp	r3, #32
 8001718:	d138      	bne.n	800178c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001724:	2302      	movs	r3, #2
 8001726:	e032      	b.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2241      	movs	r2, #65	; 0x41
 8001734:	2124      	movs	r1, #36	; 0x24
 8001736:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	438a      	bics	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4911      	ldr	r1, [pc, #68]	; (8001798 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	2120      	movs	r1, #32
 800177e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
  }
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	ffffefff 	.word	0xffffefff

0800179c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2241      	movs	r2, #65	; 0x41
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d139      	bne.n	8001826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2240      	movs	r2, #64	; 0x40
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017bc:	2302      	movs	r3, #2
 80017be:	e033      	b.n	8001828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	2101      	movs	r1, #1
 80017c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2241      	movs	r2, #65	; 0x41
 80017cc:	2124      	movs	r1, #36	; 0x24
 80017ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	2120      	movs	r1, #32
 8001818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	2100      	movs	r1, #0
 8001820:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
  }
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	fffff0ff 	.word	0xfffff0ff

08001834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001842:	4013      	ands	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d11f      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	0013      	movs	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	189b      	adds	r3, r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4912      	ldr	r1, [pc, #72]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001866:	0018      	movs	r0, r3
 8001868:	f7fe fc54 	bl	8000114 <__udivsi3>
 800186c:	0003      	movs	r3, r0
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001872:	e008      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3b01      	subs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e001      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e009      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	401a      	ands	r2, r3
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	429a      	cmp	r2, r3
 8001896:	d0ed      	beq.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	40007000 	.word	0x40007000
 80018a8:	fffff9ff 	.word	0xfffff9ff
 80018ac:	20000008 	.word	0x20000008
 80018b0:	000f4240 	.word	0x000f4240

080018b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	23e0      	movs	r3, #224	; 0xe0
 80018be:	01db      	lsls	r3, r3, #7
 80018c0:	4013      	ands	r3, r2
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e304      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x1e>
 80018e8:	e07c      	b.n	80019e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4bc3      	ldr	r3, [pc, #780]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2238      	movs	r2, #56	; 0x38
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f4:	4bc0      	ldr	r3, [pc, #768]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4013      	ands	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b10      	cmp	r3, #16
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0x3e>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d002      	beq.n	8001910 <HAL_RCC_OscConfig+0x44>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4bb9      	ldr	r3, [pc, #740]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d062      	beq.n	80019e2 <HAL_RCC_OscConfig+0x116>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d15e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e2df      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	429a      	cmp	r2, r3
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x78>
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4baf      	ldr	r3, [pc, #700]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	0249      	lsls	r1, r1, #9
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e020      	b.n	8001986 <HAL_RCC_OscConfig+0xba>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	23a0      	movs	r3, #160	; 0xa0
 800194a:	02db      	lsls	r3, r3, #11
 800194c:	429a      	cmp	r2, r3
 800194e:	d10e      	bne.n	800196e <HAL_RCC_OscConfig+0xa2>
 8001950:	4ba9      	ldr	r3, [pc, #676]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4ba8      	ldr	r3, [pc, #672]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	02c9      	lsls	r1, r1, #11
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4ba5      	ldr	r3, [pc, #660]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0249      	lsls	r1, r1, #9
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0xba>
 800196e:	4ba2      	ldr	r3, [pc, #648]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4ba1      	ldr	r3, [pc, #644]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001974:	49a1      	ldr	r1, [pc, #644]	; (8001bfc <HAL_RCC_OscConfig+0x330>)
 8001976:	400a      	ands	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	4b9f      	ldr	r3, [pc, #636]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b9e      	ldr	r3, [pc, #632]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001980:	499f      	ldr	r1, [pc, #636]	; (8001c00 <HAL_RCC_OscConfig+0x334>)
 8001982:	400a      	ands	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d014      	beq.n	80019b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7fe febd 	bl	800070c <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7fe feb8 	bl	800070c <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e29e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xcc>
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7fe fea8 	bl	800070c <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c2:	f7fe fea3 	bl	800070c <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e289      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0xf6>
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d100      	bne.n	80019f0 <HAL_RCC_OscConfig+0x124>
 80019ee:	e099      	b.n	8001b24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2238      	movs	r2, #56	; 0x38
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fa:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2203      	movs	r2, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_OscConfig+0x144>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d002      	beq.n	8001a16 <HAL_RCC_OscConfig+0x14a>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d135      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x162>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e25c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a74      	ldr	r2, [pc, #464]	; (8001c04 <HAL_RCC_OscConfig+0x338>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	021a      	lsls	r2, r3, #8
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d112      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x33c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a5e:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0adb      	lsrs	r3, r3, #11
 8001a64:	2207      	movs	r2, #7
 8001a66:	4013      	ands	r3, r2
 8001a68:	4a68      	ldr	r2, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x340>)
 8001a6a:	40da      	lsrs	r2, r3
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x344>)
 8001a6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x348>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7fe fdef 	bl	8000658 <HAL_InitTick>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d051      	beq.n	8001b22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e232      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d030      	beq.n	8001aec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5e      	ldr	r2, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x33c>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0049      	lsls	r1, r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7fe fe2e 	bl	800070c <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7fe fe29 	bl	800070c <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e20f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x338>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	021a      	lsls	r2, r3, #8
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e01b      	b.n	8001b24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	4949      	ldr	r1, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x34c>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7fe fe08 	bl	800070c <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7fe fe03 	bl	800070c <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1e9      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x236>
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d047      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2238      	movs	r2, #56	; 0x38
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b18      	cmp	r3, #24
 8001b38:	d10a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d03c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d138      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e1cb      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d019      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7fe fdd2 	bl	800070c <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fdcd 	bl	800070c <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1b3      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0f1      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2a2>
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7fe fdb8 	bl	800070c <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fdb3 	bl	800070c <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e199      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1f1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <HAL_RCC_OscConfig+0x2fe>
 8001bc8:	e0c6      	b.n	8001d58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	231f      	movs	r3, #31
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2238      	movs	r2, #56	; 0x38
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d11e      	bne.n	8001c1c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x32c>)
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x31e>
 8001be8:	e0b6      	b.n	8001d58 <HAL_RCC_OscConfig+0x48c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d000      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x328>
 8001bf2:	e0b1      	b.n	8001d58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e177      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	fffeffff 	.word	0xfffeffff
 8001c00:	fffbffff 	.word	0xfffbffff
 8001c04:	ffff80ff 	.word	0xffff80ff
 8001c08:	ffffc7ff 	.word	0xffffc7ff
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000000 	.word	0x20000000
 8001c18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c1c:	4bb4      	ldr	r3, [pc, #720]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x360>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x362>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d011      	beq.n	8001c56 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4baf      	ldr	r3, [pc, #700]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c36:	4bae      	ldr	r3, [pc, #696]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0549      	lsls	r1, r1, #21
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c40:	4bab      	ldr	r3, [pc, #684]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c4e:	231f      	movs	r3, #31
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c56:	4ba7      	ldr	r3, [pc, #668]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d11a      	bne.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c62:	4ba4      	ldr	r3, [pc, #656]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0049      	lsls	r1, r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fd4c 	bl	800070c <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7fe fd47 	bl	800070c <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e12d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x3e2>
 8001ca0:	4b93      	ldr	r3, [pc, #588]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca4:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x404>
 8001cb6:	4b8e      	ldr	r3, [pc, #568]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc6:	4b8a      	ldr	r3, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
 8001cd0:	4b87      	ldr	r3, [pc, #540]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd4:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	438a      	bics	r2, r1
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cdc:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce0:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fd0c 	bl	800070c <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe fd07 	bl	800070c <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	4a7c      	ldr	r2, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0x62c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0ec      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0e:	4b78      	ldr	r3, [pc, #480]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x42e>
 8001d18:	e013      	b.n	8001d42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fcf7 	bl	800070c <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d22:	e009      	b.n	8001d38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe fcf2 	bl	800070c <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x62c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0d7      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d38:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d42:	231f      	movs	r3, #31
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d50:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d52:	496a      	ldr	r1, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x630>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <HAL_RCC_OscConfig+0x496>
 8001d60:	e0c1      	b.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4a4>
 8001d6e:	e081      	b.n	8001e74 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d156      	bne.n	8001e26 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001d7e:	4960      	ldr	r1, [pc, #384]	; (8001f00 <HAL_RCC_OscConfig+0x634>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7fe fcc2 	bl	800070c <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe fcbd 	bl	800070c <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0a3      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	049b      	lsls	r3, r3, #18
 8001da8:	4013      	ands	r3, r2
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a54      	ldr	r2, [pc, #336]	; (8001f04 <HAL_RCC_OscConfig+0x638>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1a      	ldr	r2, [r3, #32]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0449      	lsls	r1, r1, #17
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0549      	lsls	r1, r1, #21
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fc86 	bl	800070c <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe fc81 	bl	800070c <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	049b      	lsls	r3, r3, #18
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x53a>
 8001e24:	e05f      	b.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e2c:	4934      	ldr	r1, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x634>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e38:	2103      	movs	r1, #3
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e44:	4930      	ldr	r1, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x63c>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fc5f 	bl	800070c <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fc5a 	bl	800070c <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e040      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x588>
 8001e72:	e038      	b.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e033      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x624>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d126      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2270      	movs	r2, #112	; 0x70
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	23fe      	movs	r3, #254	; 0xfe
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	23f8      	movs	r3, #248	; 0xf8
 8001eb8:	039b      	lsls	r3, r3, #14
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10e      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	23e0      	movs	r3, #224	; 0xe0
 8001ec8:	051b      	lsls	r3, r3, #20
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	0f5b      	lsrs	r3, r3, #29
 8001ed8:	075a      	lsls	r2, r3, #29
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b008      	add	sp, #32
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	feffffff 	.word	0xfeffffff
 8001f04:	11c1808c 	.word	0x11c1808c
 8001f08:	eefeffff 	.word	0xeefeffff

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e9      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2207      	movs	r2, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d91e      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fbe4 	bl	800070c <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7fe fbdf 	bl	800070c <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0ca      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d015      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d006      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f80:	4b60      	ldr	r3, [pc, #384]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	21e0      	movs	r1, #224	; 0xe0
 8001f88:	01c9      	lsls	r1, r1, #7
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_ClockConfig+0x1fc>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d057      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d12b      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e097      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	049b      	lsls	r3, r3, #18
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d11f      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e08b      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe4:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d113      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07f      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d108      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e074      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e06d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2207      	movs	r2, #7
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7fe fb6e 	bl	800070c <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	e009      	b.n	800204a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe fb69 	bl	800070c <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e054      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	429a      	cmp	r2, r3
 800205a:	d1ec      	bne.n	8002036 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2207      	movs	r2, #7
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d21e      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2207      	movs	r2, #7
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800207c:	f7fe fb46 	bl	800070c <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002084:	e009      	b.n	800209a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002086:	f7fe fb41 	bl	800070c <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e02c      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_RCC_ClockConfig+0x200>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020c6:	f000 f829 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020ca:	0001      	movs	r1, r0
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	220f      	movs	r2, #15
 80020d4:	401a      	ands	r2, r3
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_ClockConfig+0x204>)
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	58d3      	ldr	r3, [r2, r3]
 80020dc:	221f      	movs	r2, #31
 80020de:	4013      	ands	r3, r2
 80020e0:	000a      	movs	r2, r1
 80020e2:	40da      	lsrs	r2, r3
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x208>)
 80020e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x20c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7fe fab3 	bl	8000658 <HAL_InitTick>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	00001388 	.word	0x00001388
 8002104:	40021000 	.word	0x40021000
 8002108:	fffff0ff 	.word	0xfffff0ff
 800210c:	ffff8fff 	.word	0xffff8fff
 8002110:	08005508 	.word	0x08005508
 8002114:	20000008 	.word	0x20000008
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002122:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2238      	movs	r2, #56	; 0x38
 8002128:	4013      	ands	r3, r2
 800212a:	d10f      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800212c:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0adb      	lsrs	r3, r3, #11
 8002132:	2207      	movs	r2, #7
 8002134:	4013      	ands	r3, r2
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	4835      	ldr	r0, [pc, #212]	; (8002218 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002142:	f7fd ffe7 	bl	8000114 <__udivsi3>
 8002146:	0003      	movs	r3, r0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e05d      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2238      	movs	r2, #56	; 0x38
 8002152:	4013      	ands	r3, r2
 8002154:	2b08      	cmp	r3, #8
 8002156:	d102      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_GetSysClockFreq+0x100>)
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e054      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2238      	movs	r2, #56	; 0x38
 8002164:	4013      	ands	r3, r2
 8002166:	2b10      	cmp	r3, #16
 8002168:	d138      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2203      	movs	r2, #3
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	2207      	movs	r2, #7
 800217c:	4013      	ands	r3, r2
 800217e:	3301      	adds	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4824      	ldr	r0, [pc, #144]	; (800221c <HAL_RCC_GetSysClockFreq+0x100>)
 800218c:	f7fd ffc2 	bl	8000114 <__udivsi3>
 8002190:	0003      	movs	r3, r0
 8002192:	0019      	movs	r1, r3
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	227f      	movs	r2, #127	; 0x7f
 800219c:	4013      	ands	r3, r2
 800219e:	434b      	muls	r3, r1
 80021a0:	617b      	str	r3, [r7, #20]
        break;
 80021a2:	e00d      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021a8:	f7fd ffb4 	bl	8000114 <__udivsi3>
 80021ac:	0003      	movs	r3, r0
 80021ae:	0019      	movs	r1, r3
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	227f      	movs	r2, #127	; 0x7f
 80021b8:	4013      	ands	r3, r2
 80021ba:	434b      	muls	r3, r1
 80021bc:	617b      	str	r3, [r7, #20]
        break;
 80021be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0f5b      	lsrs	r3, r3, #29
 80021c6:	2207      	movs	r2, #7
 80021c8:	4013      	ands	r3, r2
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7fd ff9f 	bl	8000114 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e015      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2238      	movs	r2, #56	; 0x38
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d103      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2238      	movs	r2, #56	; 0x38
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b18      	cmp	r3, #24
 80021fa:	d103      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021fc:	23fa      	movs	r3, #250	; 0xfa
 80021fe:	01db      	lsls	r3, r3, #7
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e001      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002208:	693b      	ldr	r3, [r7, #16]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b006      	add	sp, #24
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200

08002220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_RCC_GetHCLKFreq+0x10>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002238:	f7ff fff2 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 800223c:	0004      	movs	r4, r0
 800223e:	f7ff fb39 	bl	80018b4 <LL_RCC_GetAPB1Prescaler>
 8002242:	0003      	movs	r3, r0
 8002244:	0b1a      	lsrs	r2, r3, #12
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	58d3      	ldr	r3, [r2, r3]
 800224c:	221f      	movs	r2, #31
 800224e:	4013      	ands	r3, r2
 8002250:	40dc      	lsrs	r4, r3
 8002252:	0023      	movs	r3, r4
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	08005548 	.word	0x08005548

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002268:	2313      	movs	r3, #19
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2312      	movs	r3, #18
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	d100      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002284:	e0a4      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2311      	movs	r3, #17
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4bc3      	ldr	r3, [pc, #780]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	055b      	lsls	r3, r3, #21
 8002296:	4013      	ands	r3, r2
 8002298:	d111      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4bc0      	ldr	r3, [pc, #768]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229e:	4bbf      	ldr	r3, [pc, #764]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a8:	4bbc      	ldr	r3, [pc, #752]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2311      	movs	r3, #17
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022be:	4bb8      	ldr	r3, [pc, #736]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4bb7      	ldr	r3, [pc, #732]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fa1e 	bl	800070c <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d4:	e00b      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe fa19 	bl	800070c <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d904      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80022e4:	2313      	movs	r3, #19
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2203      	movs	r2, #3
 80022ea:	701a      	strb	r2, [r3, #0]
        break;
 80022ec:	e005      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ee:	4bac      	ldr	r3, [pc, #688]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0ed      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80022fa:	2313      	movs	r3, #19
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d154      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d014      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002320:	4b9e      	ldr	r3, [pc, #632]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800232a:	4b9c      	ldr	r3, [pc, #624]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232e:	4b9b      	ldr	r3, [pc, #620]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0249      	lsls	r1, r1, #9
 8002334:	430a      	orrs	r2, r1
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002338:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233c:	4b97      	ldr	r3, [pc, #604]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233e:	499a      	ldr	r1, [pc, #616]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002340:	400a      	ands	r2, r1
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002344:	4b95      	ldr	r3, [pc, #596]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d016      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe f9db 	bl	800070c <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	e00c      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe f9d6 	bl	800070c <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	4a91      	ldr	r2, [pc, #580]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d904      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800236c:	2313      	movs	r3, #19
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2203      	movs	r2, #3
 8002372:	701a      	strb	r2, [r3, #0]
            break;
 8002374:	e004      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d0ed      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002380:	2313      	movs	r3, #19
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239a:	430a      	orrs	r2, r1
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	2312      	movs	r3, #18
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2213      	movs	r2, #19
 80023a6:	18ba      	adds	r2, r7, r2
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e005      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ae:	2312      	movs	r3, #18
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2213      	movs	r2, #19
 80023b4:	18ba      	adds	r2, r7, r2
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ba:	2311      	movs	r3, #17
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c8:	4b74      	ldr	r3, [pc, #464]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	4979      	ldr	r1, [pc, #484]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023da:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	2203      	movs	r2, #3
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	220c      	movs	r2, #12
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	430a      	orrs	r2, r1
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002466:	430a      	orrs	r2, r1
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4013      	ands	r3, r2
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	0899      	lsrs	r1, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	4013      	ands	r3, r2
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	03db      	lsls	r3, r3, #15
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	0449      	lsls	r1, r1, #17
 8002516:	430a      	orrs	r2, r1
 8002518:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	03db      	lsls	r3, r3, #15
 8002522:	4013      	ands	r3, r2
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002536:	430a      	orrs	r2, r1
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	045b      	lsls	r3, r3, #17
 8002542:	429a      	cmp	r2, r3
 8002544:	d106      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0449      	lsls	r1, r1, #17
 8002550:	430a      	orrs	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4013      	ands	r3, r2
 800255e:	d016      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	430a      	orrs	r2, r1
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	0249      	lsls	r1, r1, #9
 800258a:	430a      	orrs	r2, r1
 800258c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800258e:	2312      	movs	r3, #18
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	fffffcff 	.word	0xfffffcff
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	00001388 	.word	0x00001388
 80025b0:	efffffff 	.word	0xefffffff
 80025b4:	fffff3ff 	.word	0xfffff3ff
 80025b8:	fff3ffff 	.word	0xfff3ffff
 80025bc:	ffcfffff 	.word	0xffcfffff
 80025c0:	ffffcfff 	.word	0xffffcfff
 80025c4:	ffbfffff 	.word	0xffbfffff
 80025c8:	feffffff 	.word	0xfeffffff
 80025cc:	ffff3fff 	.word	0xffff3fff

080025d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e046      	b.n	8002670 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	227c      	movs	r2, #124	; 0x7c
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 fcfa 	bl	8004ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	2124      	movs	r1, #36	; 0x24
 8002602:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f830 	bl	800267c <UART_SetConfig>
 800261c:	0003      	movs	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e024      	b.n	8002670 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f001 f90d 	bl	8003850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	490d      	ldr	r1, [pc, #52]	; (8002678 <HAL_UART_Init+0xa8>)
 8002642:	400a      	ands	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	212a      	movs	r1, #42	; 0x2a
 8002652:	438a      	bics	r2, r1
 8002654:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f001 f9a5 	bl	80039b8 <UART_CheckIdleState>
 800266e:	0003      	movs	r3, r0
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}
 8002678:	ffffb7ff 	.word	0xffffb7ff

0800267c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267e:	b09f      	sub	sp, #124	; 0x7c
 8002680:	af00      	add	r7, sp, #0
 8002682:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002684:	2300      	movs	r3, #0
 8002686:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002688:	2313      	movs	r3, #19
 800268a:	2258      	movs	r2, #88	; 0x58
 800268c:	18ba      	adds	r2, r7, r2
 800268e:	18d2      	adds	r2, r2, r3
 8002690:	2300      	movs	r3, #0
 8002692:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002694:	2300      	movs	r3, #0
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b6:	4313      	orrs	r3, r2
 80026b8:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4bba      	ldr	r3, [pc, #744]	; (80029ac <UART_SetConfig+0x330>)
 80026c2:	401a      	ands	r2, r3
 80026c4:	0011      	movs	r1, r2
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4bb6      	ldr	r3, [pc, #728]	; (80029b0 <UART_SetConfig+0x334>)
 80026d8:	401a      	ands	r2, r3
 80026da:	0010      	movs	r0, r2
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	0003      	movs	r3, r0
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4baf      	ldr	r3, [pc, #700]	; (80029b4 <UART_SetConfig+0x338>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d004      	beq.n	8002704 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	4313      	orrs	r3, r2
 8002702:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4bab      	ldr	r3, [pc, #684]	; (80029b8 <UART_SetConfig+0x33c>)
 800270c:	401a      	ands	r2, r3
 800270e:	0011      	movs	r1, r2
 8002710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002716:	430b      	orrs	r3, r1
 8002718:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	230f      	movs	r3, #15
 8002722:	439a      	bics	r2, r3
 8002724:	0010      	movs	r0, r2
 8002726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002728:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	0003      	movs	r3, r0
 8002730:	430b      	orrs	r3, r1
 8002732:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4ba0      	ldr	r3, [pc, #640]	; (80029bc <UART_SetConfig+0x340>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d12f      	bne.n	800279e <UART_SetConfig+0x122>
 800273e:	4ba0      	ldr	r3, [pc, #640]	; (80029c0 <UART_SetConfig+0x344>)
 8002740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002742:	2303      	movs	r3, #3
 8002744:	4013      	ands	r3, r2
 8002746:	2b01      	cmp	r3, #1
 8002748:	d013      	beq.n	8002772 <UART_SetConfig+0xf6>
 800274a:	d304      	bcc.n	8002756 <UART_SetConfig+0xda>
 800274c:	2b02      	cmp	r3, #2
 800274e:	d009      	beq.n	8002764 <UART_SetConfig+0xe8>
 8002750:	2b03      	cmp	r3, #3
 8002752:	d015      	beq.n	8002780 <UART_SetConfig+0x104>
 8002754:	e01b      	b.n	800278e <UART_SetConfig+0x112>
 8002756:	231b      	movs	r3, #27
 8002758:	2258      	movs	r2, #88	; 0x58
 800275a:	18ba      	adds	r2, r7, r2
 800275c:	18d2      	adds	r2, r2, r3
 800275e:	2300      	movs	r3, #0
 8002760:	7013      	strb	r3, [r2, #0]
 8002762:	e0b4      	b.n	80028ce <UART_SetConfig+0x252>
 8002764:	231b      	movs	r3, #27
 8002766:	2258      	movs	r2, #88	; 0x58
 8002768:	18ba      	adds	r2, r7, r2
 800276a:	18d2      	adds	r2, r2, r3
 800276c:	2302      	movs	r3, #2
 800276e:	7013      	strb	r3, [r2, #0]
 8002770:	e0ad      	b.n	80028ce <UART_SetConfig+0x252>
 8002772:	231b      	movs	r3, #27
 8002774:	2258      	movs	r2, #88	; 0x58
 8002776:	18ba      	adds	r2, r7, r2
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	2304      	movs	r3, #4
 800277c:	7013      	strb	r3, [r2, #0]
 800277e:	e0a6      	b.n	80028ce <UART_SetConfig+0x252>
 8002780:	231b      	movs	r3, #27
 8002782:	2258      	movs	r2, #88	; 0x58
 8002784:	18ba      	adds	r2, r7, r2
 8002786:	18d2      	adds	r2, r2, r3
 8002788:	2308      	movs	r3, #8
 800278a:	7013      	strb	r3, [r2, #0]
 800278c:	e09f      	b.n	80028ce <UART_SetConfig+0x252>
 800278e:	231b      	movs	r3, #27
 8002790:	2258      	movs	r2, #88	; 0x58
 8002792:	18ba      	adds	r2, r7, r2
 8002794:	18d2      	adds	r2, r2, r3
 8002796:	2310      	movs	r3, #16
 8002798:	7013      	strb	r3, [r2, #0]
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	e097      	b.n	80028ce <UART_SetConfig+0x252>
 800279e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <UART_SetConfig+0x348>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d132      	bne.n	800280e <UART_SetConfig+0x192>
 80027a8:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <UART_SetConfig+0x344>)
 80027aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ac:	230c      	movs	r3, #12
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d016      	beq.n	80027e2 <UART_SetConfig+0x166>
 80027b4:	d802      	bhi.n	80027bc <UART_SetConfig+0x140>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <UART_SetConfig+0x14a>
 80027ba:	e020      	b.n	80027fe <UART_SetConfig+0x182>
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d009      	beq.n	80027d4 <UART_SetConfig+0x158>
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d015      	beq.n	80027f0 <UART_SetConfig+0x174>
 80027c4:	e01b      	b.n	80027fe <UART_SetConfig+0x182>
 80027c6:	231b      	movs	r3, #27
 80027c8:	2258      	movs	r2, #88	; 0x58
 80027ca:	18ba      	adds	r2, r7, r2
 80027cc:	18d2      	adds	r2, r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	7013      	strb	r3, [r2, #0]
 80027d2:	e07c      	b.n	80028ce <UART_SetConfig+0x252>
 80027d4:	231b      	movs	r3, #27
 80027d6:	2258      	movs	r2, #88	; 0x58
 80027d8:	18ba      	adds	r2, r7, r2
 80027da:	18d2      	adds	r2, r2, r3
 80027dc:	2302      	movs	r3, #2
 80027de:	7013      	strb	r3, [r2, #0]
 80027e0:	e075      	b.n	80028ce <UART_SetConfig+0x252>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2258      	movs	r2, #88	; 0x58
 80027e6:	18ba      	adds	r2, r7, r2
 80027e8:	18d2      	adds	r2, r2, r3
 80027ea:	2304      	movs	r3, #4
 80027ec:	7013      	strb	r3, [r2, #0]
 80027ee:	e06e      	b.n	80028ce <UART_SetConfig+0x252>
 80027f0:	231b      	movs	r3, #27
 80027f2:	2258      	movs	r2, #88	; 0x58
 80027f4:	18ba      	adds	r2, r7, r2
 80027f6:	18d2      	adds	r2, r2, r3
 80027f8:	2308      	movs	r3, #8
 80027fa:	7013      	strb	r3, [r2, #0]
 80027fc:	e067      	b.n	80028ce <UART_SetConfig+0x252>
 80027fe:	231b      	movs	r3, #27
 8002800:	2258      	movs	r2, #88	; 0x58
 8002802:	18ba      	adds	r2, r7, r2
 8002804:	18d2      	adds	r2, r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	7013      	strb	r3, [r2, #0]
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	e05f      	b.n	80028ce <UART_SetConfig+0x252>
 800280e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <UART_SetConfig+0x34c>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <UART_SetConfig+0x1aa>
 8002818:	231b      	movs	r3, #27
 800281a:	2258      	movs	r2, #88	; 0x58
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	18d2      	adds	r2, r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	7013      	strb	r3, [r2, #0]
 8002824:	e053      	b.n	80028ce <UART_SetConfig+0x252>
 8002826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b68      	ldr	r3, [pc, #416]	; (80029cc <UART_SetConfig+0x350>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d106      	bne.n	800283e <UART_SetConfig+0x1c2>
 8002830:	231b      	movs	r3, #27
 8002832:	2258      	movs	r2, #88	; 0x58
 8002834:	18ba      	adds	r2, r7, r2
 8002836:	18d2      	adds	r2, r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	7013      	strb	r3, [r2, #0]
 800283c:	e047      	b.n	80028ce <UART_SetConfig+0x252>
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <UART_SetConfig+0x338>)
 8002844:	429a      	cmp	r2, r3
 8002846:	d13c      	bne.n	80028c2 <UART_SetConfig+0x246>
 8002848:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <UART_SetConfig+0x344>)
 800284a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	401a      	ands	r2, r3
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	429a      	cmp	r2, r3
 8002858:	d01d      	beq.n	8002896 <UART_SetConfig+0x21a>
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	429a      	cmp	r2, r3
 8002860:	d802      	bhi.n	8002868 <UART_SetConfig+0x1ec>
 8002862:	2a00      	cmp	r2, #0
 8002864:	d009      	beq.n	800287a <UART_SetConfig+0x1fe>
 8002866:	e024      	b.n	80028b2 <UART_SetConfig+0x236>
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	429a      	cmp	r2, r3
 800286e:	d00b      	beq.n	8002888 <UART_SetConfig+0x20c>
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	429a      	cmp	r2, r3
 8002876:	d015      	beq.n	80028a4 <UART_SetConfig+0x228>
 8002878:	e01b      	b.n	80028b2 <UART_SetConfig+0x236>
 800287a:	231b      	movs	r3, #27
 800287c:	2258      	movs	r2, #88	; 0x58
 800287e:	18ba      	adds	r2, r7, r2
 8002880:	18d2      	adds	r2, r2, r3
 8002882:	2300      	movs	r3, #0
 8002884:	7013      	strb	r3, [r2, #0]
 8002886:	e022      	b.n	80028ce <UART_SetConfig+0x252>
 8002888:	231b      	movs	r3, #27
 800288a:	2258      	movs	r2, #88	; 0x58
 800288c:	18ba      	adds	r2, r7, r2
 800288e:	18d2      	adds	r2, r2, r3
 8002890:	2302      	movs	r3, #2
 8002892:	7013      	strb	r3, [r2, #0]
 8002894:	e01b      	b.n	80028ce <UART_SetConfig+0x252>
 8002896:	231b      	movs	r3, #27
 8002898:	2258      	movs	r2, #88	; 0x58
 800289a:	18ba      	adds	r2, r7, r2
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	2304      	movs	r3, #4
 80028a0:	7013      	strb	r3, [r2, #0]
 80028a2:	e014      	b.n	80028ce <UART_SetConfig+0x252>
 80028a4:	231b      	movs	r3, #27
 80028a6:	2258      	movs	r2, #88	; 0x58
 80028a8:	18ba      	adds	r2, r7, r2
 80028aa:	18d2      	adds	r2, r2, r3
 80028ac:	2308      	movs	r3, #8
 80028ae:	7013      	strb	r3, [r2, #0]
 80028b0:	e00d      	b.n	80028ce <UART_SetConfig+0x252>
 80028b2:	231b      	movs	r3, #27
 80028b4:	2258      	movs	r2, #88	; 0x58
 80028b6:	18ba      	adds	r2, r7, r2
 80028b8:	18d2      	adds	r2, r2, r3
 80028ba:	2310      	movs	r3, #16
 80028bc:	7013      	strb	r3, [r2, #0]
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	e005      	b.n	80028ce <UART_SetConfig+0x252>
 80028c2:	231b      	movs	r3, #27
 80028c4:	2258      	movs	r2, #88	; 0x58
 80028c6:	18ba      	adds	r2, r7, r2
 80028c8:	18d2      	adds	r2, r2, r3
 80028ca:	2310      	movs	r3, #16
 80028cc:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <UART_SetConfig+0x338>)
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <UART_SetConfig+0x260>
 80028d8:	f000 fbcc 	bl	8003074 <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028dc:	231b      	movs	r3, #27
 80028de:	2258      	movs	r2, #88	; 0x58
 80028e0:	4694      	mov	ip, r2
 80028e2:	44bc      	add	ip, r7
 80028e4:	4463      	add	r3, ip
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d100      	bne.n	80028ee <UART_SetConfig+0x272>
 80028ec:	e070      	b.n	80029d0 <UART_SetConfig+0x354>
 80028ee:	dc02      	bgt.n	80028f6 <UART_SetConfig+0x27a>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <UART_SetConfig+0x288>
 80028f4:	e15f      	b.n	8002bb6 <UART_SetConfig+0x53a>
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d100      	bne.n	80028fc <UART_SetConfig+0x280>
 80028fa:	e0b4      	b.n	8002a66 <UART_SetConfig+0x3ea>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d100      	bne.n	8002902 <UART_SetConfig+0x286>
 8002900:	e105      	b.n	8002b0e <UART_SetConfig+0x492>
 8002902:	e158      	b.n	8002bb6 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002904:	f7ff fc96 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002908:	0002      	movs	r2, r0
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <UART_SetConfig+0x320>
 8002912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b01      	cmp	r3, #1
 8002918:	d03e      	beq.n	8002998 <UART_SetConfig+0x31c>
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b02      	cmp	r3, #2
 8002920:	d038      	beq.n	8002994 <UART_SetConfig+0x318>
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b03      	cmp	r3, #3
 8002928:	d032      	beq.n	8002990 <UART_SetConfig+0x314>
 800292a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2b04      	cmp	r3, #4
 8002930:	d02c      	beq.n	800298c <UART_SetConfig+0x310>
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b05      	cmp	r3, #5
 8002938:	d026      	beq.n	8002988 <UART_SetConfig+0x30c>
 800293a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b06      	cmp	r3, #6
 8002940:	d020      	beq.n	8002984 <UART_SetConfig+0x308>
 8002942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b07      	cmp	r3, #7
 8002948:	d01a      	beq.n	8002980 <UART_SetConfig+0x304>
 800294a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b08      	cmp	r3, #8
 8002950:	d014      	beq.n	800297c <UART_SetConfig+0x300>
 8002952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b09      	cmp	r3, #9
 8002958:	d00e      	beq.n	8002978 <UART_SetConfig+0x2fc>
 800295a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d008      	beq.n	8002974 <UART_SetConfig+0x2f8>
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b0b      	cmp	r3, #11
 8002968:	d102      	bne.n	8002970 <UART_SetConfig+0x2f4>
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	e016      	b.n	800299e <UART_SetConfig+0x322>
 8002970:	2301      	movs	r3, #1
 8002972:	e014      	b.n	800299e <UART_SetConfig+0x322>
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	e012      	b.n	800299e <UART_SetConfig+0x322>
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	e010      	b.n	800299e <UART_SetConfig+0x322>
 800297c:	2320      	movs	r3, #32
 800297e:	e00e      	b.n	800299e <UART_SetConfig+0x322>
 8002980:	2310      	movs	r3, #16
 8002982:	e00c      	b.n	800299e <UART_SetConfig+0x322>
 8002984:	230c      	movs	r3, #12
 8002986:	e00a      	b.n	800299e <UART_SetConfig+0x322>
 8002988:	230a      	movs	r3, #10
 800298a:	e008      	b.n	800299e <UART_SetConfig+0x322>
 800298c:	2308      	movs	r3, #8
 800298e:	e006      	b.n	800299e <UART_SetConfig+0x322>
 8002990:	2306      	movs	r3, #6
 8002992:	e004      	b.n	800299e <UART_SetConfig+0x322>
 8002994:	2304      	movs	r3, #4
 8002996:	e002      	b.n	800299e <UART_SetConfig+0x322>
 8002998:	2302      	movs	r3, #2
 800299a:	e000      	b.n	800299e <UART_SetConfig+0x322>
 800299c:	2301      	movs	r3, #1
 800299e:	0019      	movs	r1, r3
 80029a0:	0010      	movs	r0, r2
 80029a2:	f7fd fbb7 	bl	8000114 <__udivsi3>
 80029a6:	0003      	movs	r3, r0
 80029a8:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 80029aa:	e10b      	b.n	8002bc4 <UART_SetConfig+0x548>
 80029ac:	cfff69f3 	.word	0xcfff69f3
 80029b0:	ffffcfff 	.word	0xffffcfff
 80029b4:	40008000 	.word	0x40008000
 80029b8:	11fff4ff 	.word	0x11fff4ff
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80029d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d043      	beq.n	8002a60 <UART_SetConfig+0x3e4>
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d03d      	beq.n	8002a5c <UART_SetConfig+0x3e0>
 80029e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d037      	beq.n	8002a58 <UART_SetConfig+0x3dc>
 80029e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d031      	beq.n	8002a54 <UART_SetConfig+0x3d8>
 80029f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d02b      	beq.n	8002a50 <UART_SetConfig+0x3d4>
 80029f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d025      	beq.n	8002a4c <UART_SetConfig+0x3d0>
 8002a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d01f      	beq.n	8002a48 <UART_SetConfig+0x3cc>
 8002a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	d019      	beq.n	8002a44 <UART_SetConfig+0x3c8>
 8002a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d013      	beq.n	8002a40 <UART_SetConfig+0x3c4>
 8002a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d00d      	beq.n	8002a3c <UART_SetConfig+0x3c0>
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2b0a      	cmp	r3, #10
 8002a26:	d007      	beq.n	8002a38 <UART_SetConfig+0x3bc>
 8002a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b0b      	cmp	r3, #11
 8002a2e:	d101      	bne.n	8002a34 <UART_SetConfig+0x3b8>
 8002a30:	4baa      	ldr	r3, [pc, #680]	; (8002cdc <UART_SetConfig+0x660>)
 8002a32:	e016      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a34:	4baa      	ldr	r3, [pc, #680]	; (8002ce0 <UART_SetConfig+0x664>)
 8002a36:	e014      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a38:	4baa      	ldr	r3, [pc, #680]	; (8002ce4 <UART_SetConfig+0x668>)
 8002a3a:	e012      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a3c:	4baa      	ldr	r3, [pc, #680]	; (8002ce8 <UART_SetConfig+0x66c>)
 8002a3e:	e010      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a40:	4baa      	ldr	r3, [pc, #680]	; (8002cec <UART_SetConfig+0x670>)
 8002a42:	e00e      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a44:	4baa      	ldr	r3, [pc, #680]	; (8002cf0 <UART_SetConfig+0x674>)
 8002a46:	e00c      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a48:	4baa      	ldr	r3, [pc, #680]	; (8002cf4 <UART_SetConfig+0x678>)
 8002a4a:	e00a      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a4c:	4baa      	ldr	r3, [pc, #680]	; (8002cf8 <UART_SetConfig+0x67c>)
 8002a4e:	e008      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a50:	4baa      	ldr	r3, [pc, #680]	; (8002cfc <UART_SetConfig+0x680>)
 8002a52:	e006      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a54:	4baa      	ldr	r3, [pc, #680]	; (8002d00 <UART_SetConfig+0x684>)
 8002a56:	e004      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a58:	4baa      	ldr	r3, [pc, #680]	; (8002d04 <UART_SetConfig+0x688>)
 8002a5a:	e002      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a5c:	4baa      	ldr	r3, [pc, #680]	; (8002d08 <UART_SetConfig+0x68c>)
 8002a5e:	e000      	b.n	8002a62 <UART_SetConfig+0x3e6>
 8002a60:	4b9f      	ldr	r3, [pc, #636]	; (8002ce0 <UART_SetConfig+0x664>)
 8002a62:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002a64:	e0ae      	b.n	8002bc4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a66:	f7ff fb59 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d044      	beq.n	8002afe <UART_SetConfig+0x482>
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d03e      	beq.n	8002afa <UART_SetConfig+0x47e>
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d038      	beq.n	8002af6 <UART_SetConfig+0x47a>
 8002a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d032      	beq.n	8002af2 <UART_SetConfig+0x476>
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d02c      	beq.n	8002aee <UART_SetConfig+0x472>
 8002a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d026      	beq.n	8002aea <UART_SetConfig+0x46e>
 8002a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d020      	beq.n	8002ae6 <UART_SetConfig+0x46a>
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d01a      	beq.n	8002ae2 <UART_SetConfig+0x466>
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d014      	beq.n	8002ade <UART_SetConfig+0x462>
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d00e      	beq.n	8002ada <UART_SetConfig+0x45e>
 8002abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b0a      	cmp	r3, #10
 8002ac2:	d008      	beq.n	8002ad6 <UART_SetConfig+0x45a>
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b0b      	cmp	r3, #11
 8002aca:	d102      	bne.n	8002ad2 <UART_SetConfig+0x456>
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	e016      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e014      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	e012      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	e010      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e00e      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	e00c      	b.n	8002b00 <UART_SetConfig+0x484>
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	e00a      	b.n	8002b00 <UART_SetConfig+0x484>
 8002aea:	230a      	movs	r3, #10
 8002aec:	e008      	b.n	8002b00 <UART_SetConfig+0x484>
 8002aee:	2308      	movs	r3, #8
 8002af0:	e006      	b.n	8002b00 <UART_SetConfig+0x484>
 8002af2:	2306      	movs	r3, #6
 8002af4:	e004      	b.n	8002b00 <UART_SetConfig+0x484>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e002      	b.n	8002b00 <UART_SetConfig+0x484>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e000      	b.n	8002b00 <UART_SetConfig+0x484>
 8002afe:	2301      	movs	r3, #1
 8002b00:	0019      	movs	r1, r3
 8002b02:	0010      	movs	r0, r2
 8002b04:	f7fd fb06 	bl	8000114 <__udivsi3>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002b0c:	e05a      	b.n	8002bc4 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04b      	beq.n	8002bae <UART_SetConfig+0x532>
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d044      	beq.n	8002ba8 <UART_SetConfig+0x52c>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d03d      	beq.n	8002ba2 <UART_SetConfig+0x526>
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d037      	beq.n	8002b9e <UART_SetConfig+0x522>
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d030      	beq.n	8002b98 <UART_SetConfig+0x51c>
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d02a      	beq.n	8002b94 <UART_SetConfig+0x518>
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d024      	beq.n	8002b90 <UART_SetConfig+0x514>
 8002b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b07      	cmp	r3, #7
 8002b4c:	d01d      	beq.n	8002b8a <UART_SetConfig+0x50e>
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d016      	beq.n	8002b84 <UART_SetConfig+0x508>
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	d00f      	beq.n	8002b7e <UART_SetConfig+0x502>
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b0a      	cmp	r3, #10
 8002b64:	d008      	beq.n	8002b78 <UART_SetConfig+0x4fc>
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b0b      	cmp	r3, #11
 8002b6c:	d101      	bne.n	8002b72 <UART_SetConfig+0x4f6>
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	e01f      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	e01c      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	e019      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	e016      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	e013      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	e010      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b90:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <UART_SetConfig+0x690>)
 8002b92:	e00e      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b94:	4b5e      	ldr	r3, [pc, #376]	; (8002d10 <UART_SetConfig+0x694>)
 8002b96:	e00c      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	015b      	lsls	r3, r3, #5
 8002b9c:	e009      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <UART_SetConfig+0x698>)
 8002ba0:	e007      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	e004      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	e001      	b.n	8002bb2 <UART_SetConfig+0x536>
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002bb4:	e006      	b.n	8002bc4 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002bb6:	2313      	movs	r3, #19
 8002bb8:	2258      	movs	r2, #88	; 0x58
 8002bba:	18ba      	adds	r2, r7, r2
 8002bbc:	18d2      	adds	r2, r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	7013      	strb	r3, [r2, #0]
        break;
 8002bc2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <UART_SetConfig+0x552>
 8002bca:	f000 fe09 	bl	80037e0 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	189a      	adds	r2, r3, r2
 8002bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d305      	bcc.n	8002bea <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d908      	bls.n	8002bfc <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002bea:	2313      	movs	r3, #19
 8002bec:	2258      	movs	r2, #88	; 0x58
 8002bee:	4694      	mov	ip, r2
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	f000 fdf2 	bl	80037e0 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002bfc:	231b      	movs	r3, #27
 8002bfe:	2258      	movs	r2, #88	; 0x58
 8002c00:	4694      	mov	ip, r2
 8002c02:	44bc      	add	ip, r7
 8002c04:	4463      	add	r3, ip
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d100      	bne.n	8002c0e <UART_SetConfig+0x592>
 8002c0c:	e0a9      	b.n	8002d62 <UART_SetConfig+0x6e6>
 8002c0e:	dc02      	bgt.n	8002c16 <UART_SetConfig+0x59a>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <UART_SetConfig+0x5a8>
 8002c14:	e20f      	b.n	8003036 <UART_SetConfig+0x9ba>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d100      	bne.n	8002c1c <UART_SetConfig+0x5a0>
 8002c1a:	e10f      	b.n	8002e3c <UART_SetConfig+0x7c0>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d100      	bne.n	8002c22 <UART_SetConfig+0x5a6>
 8002c20:	e192      	b.n	8002f48 <UART_SetConfig+0x8cc>
 8002c22:	e208      	b.n	8003036 <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c24:	f7ff fb06 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d100      	bne.n	8002c3a <UART_SetConfig+0x5be>
 8002c38:	e06e      	b.n	8002d18 <UART_SetConfig+0x69c>
 8002c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d049      	beq.n	8002cd6 <UART_SetConfig+0x65a>
 8002c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d042      	beq.n	8002cd0 <UART_SetConfig+0x654>
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d03b      	beq.n	8002cca <UART_SetConfig+0x64e>
 8002c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d034      	beq.n	8002cc4 <UART_SetConfig+0x648>
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d02d      	beq.n	8002cbe <UART_SetConfig+0x642>
 8002c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d026      	beq.n	8002cb8 <UART_SetConfig+0x63c>
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b07      	cmp	r3, #7
 8002c70:	d01f      	beq.n	8002cb2 <UART_SetConfig+0x636>
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d018      	beq.n	8002cac <UART_SetConfig+0x630>
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d011      	beq.n	8002ca6 <UART_SetConfig+0x62a>
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b0a      	cmp	r3, #10
 8002c88:	d00a      	beq.n	8002ca0 <UART_SetConfig+0x624>
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b0b      	cmp	r3, #11
 8002c90:	d103      	bne.n	8002c9a <UART_SetConfig+0x61e>
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2400      	movs	r4, #0
 8002c98:	e040      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	e03d      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	2400      	movs	r4, #0
 8002ca4:	e03a      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	2400      	movs	r4, #0
 8002caa:	e037      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cac:	2320      	movs	r3, #32
 8002cae:	2400      	movs	r4, #0
 8002cb0:	e034      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	2400      	movs	r4, #0
 8002cb6:	e031      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cb8:	230c      	movs	r3, #12
 8002cba:	2400      	movs	r4, #0
 8002cbc:	e02e      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	e02b      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	2400      	movs	r4, #0
 8002cc8:	e028      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	2400      	movs	r4, #0
 8002cce:	e025      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	e022      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	2400      	movs	r4, #0
 8002cda:	e01f      	b.n	8002d1c <UART_SetConfig+0x6a0>
 8002cdc:	0000f424 	.word	0x0000f424
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	0001e848 	.word	0x0001e848
 8002ce8:	0003d090 	.word	0x0003d090
 8002cec:	0007a120 	.word	0x0007a120
 8002cf0:	000f4240 	.word	0x000f4240
 8002cf4:	00145855 	.word	0x00145855
 8002cf8:	00186a00 	.word	0x00186a00
 8002cfc:	001e8480 	.word	0x001e8480
 8002d00:	0028b0aa 	.word	0x0028b0aa
 8002d04:	003d0900 	.word	0x003d0900
 8002d08:	007a1200 	.word	0x007a1200
 8002d0c:	00000aaa 	.word	0x00000aaa
 8002d10:	00000ccc 	.word	0x00000ccc
 8002d14:	00001555 	.word	0x00001555
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	0023      	movs	r3, r4
 8002d20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d24:	f7fd fb6c 	bl	8000400 <__aeabi_uldivmod>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	000c      	movs	r4, r1
 8002d2c:	0e1a      	lsrs	r2, r3, #24
 8002d2e:	0226      	lsls	r6, r4, #8
 8002d30:	4316      	orrs	r6, r2
 8002d32:	021d      	lsls	r5, r3, #8
 8002d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d44:	1940      	adds	r0, r0, r5
 8002d46:	4171      	adcs	r1, r6
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d4e:	2300      	movs	r3, #0
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	f7fd fb53 	bl	8000400 <__aeabi_uldivmod>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	000c      	movs	r4, r1
 8002d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002d60:	e171      	b.n	8003046 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04f      	beq.n	8002e0a <UART_SetConfig+0x78e>
 8002d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d048      	beq.n	8002e04 <UART_SetConfig+0x788>
 8002d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d041      	beq.n	8002dfe <UART_SetConfig+0x782>
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d03a      	beq.n	8002df8 <UART_SetConfig+0x77c>
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d033      	beq.n	8002df2 <UART_SetConfig+0x776>
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d02c      	beq.n	8002dec <UART_SetConfig+0x770>
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d025      	beq.n	8002de6 <UART_SetConfig+0x76a>
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	d01e      	beq.n	8002de0 <UART_SetConfig+0x764>
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d017      	beq.n	8002dda <UART_SetConfig+0x75e>
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	d010      	beq.n	8002dd4 <UART_SetConfig+0x758>
 8002db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	2b0a      	cmp	r3, #10
 8002db8:	d009      	beq.n	8002dce <UART_SetConfig+0x752>
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b0b      	cmp	r3, #11
 8002dc0:	d102      	bne.n	8002dc8 <UART_SetConfig+0x74c>
 8002dc2:	4bba      	ldr	r3, [pc, #744]	; (80030ac <UART_SetConfig+0xa30>)
 8002dc4:	2400      	movs	r4, #0
 8002dc6:	e022      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dc8:	4bb9      	ldr	r3, [pc, #740]	; (80030b0 <UART_SetConfig+0xa34>)
 8002dca:	2400      	movs	r4, #0
 8002dcc:	e01f      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dce:	4bb9      	ldr	r3, [pc, #740]	; (80030b4 <UART_SetConfig+0xa38>)
 8002dd0:	2400      	movs	r4, #0
 8002dd2:	e01c      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dd4:	4bb8      	ldr	r3, [pc, #736]	; (80030b8 <UART_SetConfig+0xa3c>)
 8002dd6:	2400      	movs	r4, #0
 8002dd8:	e019      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dda:	4bb8      	ldr	r3, [pc, #736]	; (80030bc <UART_SetConfig+0xa40>)
 8002ddc:	2400      	movs	r4, #0
 8002dde:	e016      	b.n	8002e0e <UART_SetConfig+0x792>
 8002de0:	4bb7      	ldr	r3, [pc, #732]	; (80030c0 <UART_SetConfig+0xa44>)
 8002de2:	2400      	movs	r4, #0
 8002de4:	e013      	b.n	8002e0e <UART_SetConfig+0x792>
 8002de6:	4bb7      	ldr	r3, [pc, #732]	; (80030c4 <UART_SetConfig+0xa48>)
 8002de8:	2400      	movs	r4, #0
 8002dea:	e010      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dec:	4bb6      	ldr	r3, [pc, #728]	; (80030c8 <UART_SetConfig+0xa4c>)
 8002dee:	2400      	movs	r4, #0
 8002df0:	e00d      	b.n	8002e0e <UART_SetConfig+0x792>
 8002df2:	4bb6      	ldr	r3, [pc, #728]	; (80030cc <UART_SetConfig+0xa50>)
 8002df4:	2400      	movs	r4, #0
 8002df6:	e00a      	b.n	8002e0e <UART_SetConfig+0x792>
 8002df8:	4bb5      	ldr	r3, [pc, #724]	; (80030d0 <UART_SetConfig+0xa54>)
 8002dfa:	2400      	movs	r4, #0
 8002dfc:	e007      	b.n	8002e0e <UART_SetConfig+0x792>
 8002dfe:	4bb5      	ldr	r3, [pc, #724]	; (80030d4 <UART_SetConfig+0xa58>)
 8002e00:	2400      	movs	r4, #0
 8002e02:	e004      	b.n	8002e0e <UART_SetConfig+0x792>
 8002e04:	4bb4      	ldr	r3, [pc, #720]	; (80030d8 <UART_SetConfig+0xa5c>)
 8002e06:	2400      	movs	r4, #0
 8002e08:	e001      	b.n	8002e0e <UART_SetConfig+0x792>
 8002e0a:	4ba9      	ldr	r3, [pc, #676]	; (80030b0 <UART_SetConfig+0xa34>)
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	633a      	str	r2, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	637a      	str	r2, [r7, #52]	; 0x34
 8002e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e1e:	18c0      	adds	r0, r0, r3
 8002e20:	4161      	adcs	r1, r4
 8002e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	f7fd fae6 	bl	8000400 <__aeabi_uldivmod>
 8002e34:	0003      	movs	r3, r0
 8002e36:	000c      	movs	r4, r1
 8002e38:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002e3a:	e104      	b.n	8003046 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e3c:	f7ff f96e 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8002e40:	0003      	movs	r3, r0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d050      	beq.n	8002ef2 <UART_SetConfig+0x876>
 8002e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d049      	beq.n	8002eec <UART_SetConfig+0x870>
 8002e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d042      	beq.n	8002ee6 <UART_SetConfig+0x86a>
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d03b      	beq.n	8002ee0 <UART_SetConfig+0x864>
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d034      	beq.n	8002eda <UART_SetConfig+0x85e>
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d02d      	beq.n	8002ed4 <UART_SetConfig+0x858>
 8002e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d026      	beq.n	8002ece <UART_SetConfig+0x852>
 8002e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b07      	cmp	r3, #7
 8002e86:	d01f      	beq.n	8002ec8 <UART_SetConfig+0x84c>
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d018      	beq.n	8002ec2 <UART_SetConfig+0x846>
 8002e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d011      	beq.n	8002ebc <UART_SetConfig+0x840>
 8002e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b0a      	cmp	r3, #10
 8002e9e:	d00a      	beq.n	8002eb6 <UART_SetConfig+0x83a>
 8002ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b0b      	cmp	r3, #11
 8002ea6:	d103      	bne.n	8002eb0 <UART_SetConfig+0x834>
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2400      	movs	r4, #0
 8002eae:	e022      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	2400      	movs	r4, #0
 8002eb4:	e01f      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	2400      	movs	r4, #0
 8002eba:	e01c      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	e019      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	e016      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	2400      	movs	r4, #0
 8002ecc:	e013      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	e010      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ed4:	230a      	movs	r3, #10
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	e00d      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	2400      	movs	r4, #0
 8002ede:	e00a      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ee0:	2306      	movs	r3, #6
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	e007      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	2400      	movs	r4, #0
 8002eea:	e004      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002eec:	2302      	movs	r3, #2
 8002eee:	2400      	movs	r4, #0
 8002ef0:	e001      	b.n	8002ef6 <UART_SetConfig+0x87a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	0023      	movs	r3, r4
 8002efa:	6a38      	ldr	r0, [r7, #32]
 8002efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efe:	f7fd fa7f 	bl	8000400 <__aeabi_uldivmod>
 8002f02:	0003      	movs	r3, r0
 8002f04:	000c      	movs	r4, r1
 8002f06:	0e1a      	lsrs	r2, r3, #24
 8002f08:	0221      	lsls	r1, r4, #8
 8002f0a:	6579      	str	r1, [r7, #84]	; 0x54
 8002f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	6579      	str	r1, [r7, #84]	; 0x54
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	653b      	str	r3, [r7, #80]	; 0x50
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	69fc      	ldr	r4, [r7, #28]
 8002f2a:	18c0      	adds	r0, r0, r3
 8002f2c:	4161      	adcs	r1, r4
 8002f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f7fd fa60 	bl	8000400 <__aeabi_uldivmod>
 8002f40:	0003      	movs	r3, r0
 8002f42:	000c      	movs	r4, r1
 8002f44:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002f46:	e07e      	b.n	8003046 <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d058      	beq.n	8003002 <UART_SetConfig+0x986>
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d050      	beq.n	8002ffa <UART_SetConfig+0x97e>
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d048      	beq.n	8002ff2 <UART_SetConfig+0x976>
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d041      	beq.n	8002fec <UART_SetConfig+0x970>
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d039      	beq.n	8002fe4 <UART_SetConfig+0x968>
 8002f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d032      	beq.n	8002fde <UART_SetConfig+0x962>
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d02b      	beq.n	8002fd8 <UART_SetConfig+0x95c>
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d023      	beq.n	8002fd0 <UART_SetConfig+0x954>
 8002f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d01b      	beq.n	8002fc8 <UART_SetConfig+0x94c>
 8002f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d013      	beq.n	8002fc0 <UART_SetConfig+0x944>
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b0a      	cmp	r3, #10
 8002f9e:	d00b      	beq.n	8002fb8 <UART_SetConfig+0x93c>
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b0b      	cmp	r3, #11
 8002fa6:	d103      	bne.n	8002fb0 <UART_SetConfig+0x934>
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	2400      	movs	r4, #0
 8002fae:	e02b      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	e027      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	e023      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	029b      	lsls	r3, r3, #10
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	e01f      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	02db      	lsls	r3, r3, #11
 8002fcc:	2400      	movs	r4, #0
 8002fce:	e01b      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	031b      	lsls	r3, r3, #12
 8002fd4:	2400      	movs	r4, #0
 8002fd6:	e017      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <UART_SetConfig+0xa60>)
 8002fda:	2400      	movs	r4, #0
 8002fdc:	e014      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <UART_SetConfig+0xa64>)
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	e011      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	035b      	lsls	r3, r3, #13
 8002fe8:	2400      	movs	r4, #0
 8002fea:	e00d      	b.n	8003008 <UART_SetConfig+0x98c>
 8002fec:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <UART_SetConfig+0xa68>)
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e00a      	b.n	8003008 <UART_SetConfig+0x98c>
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	039b      	lsls	r3, r3, #14
 8002ff6:	2400      	movs	r4, #0
 8002ff8:	e006      	b.n	8003008 <UART_SetConfig+0x98c>
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	03db      	lsls	r3, r3, #15
 8002ffe:	2400      	movs	r4, #0
 8003000:	e002      	b.n	8003008 <UART_SetConfig+0x98c>
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	2400      	movs	r4, #0
 8003008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	0852      	lsrs	r2, r2, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	60fa      	str	r2, [r7, #12]
 8003014:	68b8      	ldr	r0, [r7, #8]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	18c0      	adds	r0, r0, r3
 800301a:	4161      	adcs	r1, r4
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f7fd f9e9 	bl	8000400 <__aeabi_uldivmod>
 800302e:	0003      	movs	r3, r0
 8003030:	000c      	movs	r4, r1
 8003032:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8003034:	e007      	b.n	8003046 <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 8003036:	2313      	movs	r3, #19
 8003038:	2258      	movs	r2, #88	; 0x58
 800303a:	4694      	mov	ip, r2
 800303c:	44bc      	add	ip, r7
 800303e:	4463      	add	r3, ip
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
            break;
 8003044:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <UART_SetConfig+0xa6c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d909      	bls.n	8003062 <UART_SetConfig+0x9e6>
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <UART_SetConfig+0xa70>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d805      	bhi.n	8003062 <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	f000 fbbf 	bl	80037e0 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 8003062:	2313      	movs	r3, #19
 8003064:	2258      	movs	r2, #88	; 0x58
 8003066:	4694      	mov	ip, r2
 8003068:	44bc      	add	ip, r7
 800306a:	4463      	add	r3, ip
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	f000 fbb6 	bl	80037e0 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	429a      	cmp	r2, r3
 800307e:	d000      	beq.n	8003082 <UART_SetConfig+0xa06>
 8003080:	e1e4      	b.n	800344c <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 8003082:	231b      	movs	r3, #27
 8003084:	2258      	movs	r2, #88	; 0x58
 8003086:	4694      	mov	ip, r2
 8003088:	44bc      	add	ip, r7
 800308a:	4463      	add	r3, ip
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d100      	bne.n	8003094 <UART_SetConfig+0xa18>
 8003092:	e08e      	b.n	80031b2 <UART_SetConfig+0xb36>
 8003094:	dc02      	bgt.n	800309c <UART_SetConfig+0xa20>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02a      	beq.n	80030f0 <UART_SetConfig+0xa74>
 800309a:	e1a3      	b.n	80033e4 <UART_SetConfig+0xd68>
 800309c:	2b04      	cmp	r3, #4
 800309e:	d100      	bne.n	80030a2 <UART_SetConfig+0xa26>
 80030a0:	e0de      	b.n	8003260 <UART_SetConfig+0xbe4>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d100      	bne.n	80030a8 <UART_SetConfig+0xa2c>
 80030a6:	e13c      	b.n	8003322 <UART_SetConfig+0xca6>
 80030a8:	e19c      	b.n	80033e4 <UART_SetConfig+0xd68>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	f4240000 	.word	0xf4240000
 80030b4:	01e84800 	.word	0x01e84800
 80030b8:	03d09000 	.word	0x03d09000
 80030bc:	07a12000 	.word	0x07a12000
 80030c0:	0f424000 	.word	0x0f424000
 80030c4:	14585500 	.word	0x14585500
 80030c8:	186a0000 	.word	0x186a0000
 80030cc:	1e848000 	.word	0x1e848000
 80030d0:	28b0aa00 	.word	0x28b0aa00
 80030d4:	3d090000 	.word	0x3d090000
 80030d8:	7a120000 	.word	0x7a120000
 80030dc:	000aaa00 	.word	0x000aaa00
 80030e0:	000ccc00 	.word	0x000ccc00
 80030e4:	00155500 	.word	0x00155500
 80030e8:	000002ff 	.word	0x000002ff
 80030ec:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f0:	f7ff f8a0 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80030f4:	0002      	movs	r2, r0
 80030f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d044      	beq.n	8003188 <UART_SetConfig+0xb0c>
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b01      	cmp	r3, #1
 8003104:	d03e      	beq.n	8003184 <UART_SetConfig+0xb08>
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b02      	cmp	r3, #2
 800310c:	d038      	beq.n	8003180 <UART_SetConfig+0xb04>
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b03      	cmp	r3, #3
 8003114:	d032      	beq.n	800317c <UART_SetConfig+0xb00>
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b04      	cmp	r3, #4
 800311c:	d02c      	beq.n	8003178 <UART_SetConfig+0xafc>
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b05      	cmp	r3, #5
 8003124:	d026      	beq.n	8003174 <UART_SetConfig+0xaf8>
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b06      	cmp	r3, #6
 800312c:	d020      	beq.n	8003170 <UART_SetConfig+0xaf4>
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b07      	cmp	r3, #7
 8003134:	d01a      	beq.n	800316c <UART_SetConfig+0xaf0>
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b08      	cmp	r3, #8
 800313c:	d014      	beq.n	8003168 <UART_SetConfig+0xaec>
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b09      	cmp	r3, #9
 8003144:	d00e      	beq.n	8003164 <UART_SetConfig+0xae8>
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d008      	beq.n	8003160 <UART_SetConfig+0xae4>
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b0b      	cmp	r3, #11
 8003154:	d102      	bne.n	800315c <UART_SetConfig+0xae0>
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	e016      	b.n	800318a <UART_SetConfig+0xb0e>
 800315c:	2301      	movs	r3, #1
 800315e:	e014      	b.n	800318a <UART_SetConfig+0xb0e>
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	e012      	b.n	800318a <UART_SetConfig+0xb0e>
 8003164:	2340      	movs	r3, #64	; 0x40
 8003166:	e010      	b.n	800318a <UART_SetConfig+0xb0e>
 8003168:	2320      	movs	r3, #32
 800316a:	e00e      	b.n	800318a <UART_SetConfig+0xb0e>
 800316c:	2310      	movs	r3, #16
 800316e:	e00c      	b.n	800318a <UART_SetConfig+0xb0e>
 8003170:	230c      	movs	r3, #12
 8003172:	e00a      	b.n	800318a <UART_SetConfig+0xb0e>
 8003174:	230a      	movs	r3, #10
 8003176:	e008      	b.n	800318a <UART_SetConfig+0xb0e>
 8003178:	2308      	movs	r3, #8
 800317a:	e006      	b.n	800318a <UART_SetConfig+0xb0e>
 800317c:	2306      	movs	r3, #6
 800317e:	e004      	b.n	800318a <UART_SetConfig+0xb0e>
 8003180:	2304      	movs	r3, #4
 8003182:	e002      	b.n	800318a <UART_SetConfig+0xb0e>
 8003184:	2302      	movs	r3, #2
 8003186:	e000      	b.n	800318a <UART_SetConfig+0xb0e>
 8003188:	2301      	movs	r3, #1
 800318a:	0019      	movs	r1, r3
 800318c:	0010      	movs	r0, r2
 800318e:	f7fc ffc1 	bl	8000114 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	005a      	lsls	r2, r3, #1
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	18d2      	adds	r2, r2, r3
 800319e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0019      	movs	r1, r3
 80031a4:	0010      	movs	r0, r2
 80031a6:	f7fc ffb5 	bl	8000114 <__udivsi3>
 80031aa:	0003      	movs	r3, r0
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80031b0:	e120      	b.n	80033f4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d043      	beq.n	8003242 <UART_SetConfig+0xbc6>
 80031ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d03d      	beq.n	800323e <UART_SetConfig+0xbc2>
 80031c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d037      	beq.n	800323a <UART_SetConfig+0xbbe>
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d031      	beq.n	8003236 <UART_SetConfig+0xbba>
 80031d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d02b      	beq.n	8003232 <UART_SetConfig+0xbb6>
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d025      	beq.n	800322e <UART_SetConfig+0xbb2>
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d01f      	beq.n	800322a <UART_SetConfig+0xbae>
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d019      	beq.n	8003226 <UART_SetConfig+0xbaa>
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d013      	beq.n	8003222 <UART_SetConfig+0xba6>
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d00d      	beq.n	800321e <UART_SetConfig+0xba2>
 8003202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b0a      	cmp	r3, #10
 8003208:	d007      	beq.n	800321a <UART_SetConfig+0xb9e>
 800320a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b0b      	cmp	r3, #11
 8003210:	d101      	bne.n	8003216 <UART_SetConfig+0xb9a>
 8003212:	4bba      	ldr	r3, [pc, #744]	; (80034fc <UART_SetConfig+0xe80>)
 8003214:	e016      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003216:	4bba      	ldr	r3, [pc, #744]	; (8003500 <UART_SetConfig+0xe84>)
 8003218:	e014      	b.n	8003244 <UART_SetConfig+0xbc8>
 800321a:	4bba      	ldr	r3, [pc, #744]	; (8003504 <UART_SetConfig+0xe88>)
 800321c:	e012      	b.n	8003244 <UART_SetConfig+0xbc8>
 800321e:	4bba      	ldr	r3, [pc, #744]	; (8003508 <UART_SetConfig+0xe8c>)
 8003220:	e010      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003222:	4bba      	ldr	r3, [pc, #744]	; (800350c <UART_SetConfig+0xe90>)
 8003224:	e00e      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003226:	4bba      	ldr	r3, [pc, #744]	; (8003510 <UART_SetConfig+0xe94>)
 8003228:	e00c      	b.n	8003244 <UART_SetConfig+0xbc8>
 800322a:	4bba      	ldr	r3, [pc, #744]	; (8003514 <UART_SetConfig+0xe98>)
 800322c:	e00a      	b.n	8003244 <UART_SetConfig+0xbc8>
 800322e:	4bba      	ldr	r3, [pc, #744]	; (8003518 <UART_SetConfig+0xe9c>)
 8003230:	e008      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003232:	4bba      	ldr	r3, [pc, #744]	; (800351c <UART_SetConfig+0xea0>)
 8003234:	e006      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003236:	4bba      	ldr	r3, [pc, #744]	; (8003520 <UART_SetConfig+0xea4>)
 8003238:	e004      	b.n	8003244 <UART_SetConfig+0xbc8>
 800323a:	4bba      	ldr	r3, [pc, #744]	; (8003524 <UART_SetConfig+0xea8>)
 800323c:	e002      	b.n	8003244 <UART_SetConfig+0xbc8>
 800323e:	4bba      	ldr	r3, [pc, #744]	; (8003528 <UART_SetConfig+0xeac>)
 8003240:	e000      	b.n	8003244 <UART_SetConfig+0xbc8>
 8003242:	4baf      	ldr	r3, [pc, #700]	; (8003500 <UART_SetConfig+0xe84>)
 8003244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003246:	6852      	ldr	r2, [r2, #4]
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	189a      	adds	r2, r3, r2
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0019      	movs	r1, r3
 8003252:	0010      	movs	r0, r2
 8003254:	f7fc ff5e 	bl	8000114 <__udivsi3>
 8003258:	0003      	movs	r3, r0
 800325a:	b29b      	uxth	r3, r3
 800325c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800325e:	e0c9      	b.n	80033f4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003260:	f7fe ff5c 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8003264:	0002      	movs	r2, r0
 8003266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d044      	beq.n	80032f8 <UART_SetConfig+0xc7c>
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d03e      	beq.n	80032f4 <UART_SetConfig+0xc78>
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b02      	cmp	r3, #2
 800327c:	d038      	beq.n	80032f0 <UART_SetConfig+0xc74>
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b03      	cmp	r3, #3
 8003284:	d032      	beq.n	80032ec <UART_SetConfig+0xc70>
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b04      	cmp	r3, #4
 800328c:	d02c      	beq.n	80032e8 <UART_SetConfig+0xc6c>
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b05      	cmp	r3, #5
 8003294:	d026      	beq.n	80032e4 <UART_SetConfig+0xc68>
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b06      	cmp	r3, #6
 800329c:	d020      	beq.n	80032e0 <UART_SetConfig+0xc64>
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	d01a      	beq.n	80032dc <UART_SetConfig+0xc60>
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d014      	beq.n	80032d8 <UART_SetConfig+0xc5c>
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	d00e      	beq.n	80032d4 <UART_SetConfig+0xc58>
 80032b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d008      	beq.n	80032d0 <UART_SetConfig+0xc54>
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b0b      	cmp	r3, #11
 80032c4:	d102      	bne.n	80032cc <UART_SetConfig+0xc50>
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	e016      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e014      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	e012      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	e010      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032d8:	2320      	movs	r3, #32
 80032da:	e00e      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032dc:	2310      	movs	r3, #16
 80032de:	e00c      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032e0:	230c      	movs	r3, #12
 80032e2:	e00a      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032e4:	230a      	movs	r3, #10
 80032e6:	e008      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032e8:	2308      	movs	r3, #8
 80032ea:	e006      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032ec:	2306      	movs	r3, #6
 80032ee:	e004      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032f0:	2304      	movs	r3, #4
 80032f2:	e002      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e000      	b.n	80032fa <UART_SetConfig+0xc7e>
 80032f8:	2301      	movs	r3, #1
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f7fc ff09 	bl	8000114 <__udivsi3>
 8003302:	0003      	movs	r3, r0
 8003304:	005a      	lsls	r2, r3, #1
 8003306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	18d2      	adds	r2, r2, r3
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f7fc fefd 	bl	8000114 <__udivsi3>
 800331a:	0003      	movs	r3, r0
 800331c:	b29b      	uxth	r3, r3
 800331e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003320:	e068      	b.n	80033f4 <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04c      	beq.n	80033c4 <UART_SetConfig+0xd48>
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b01      	cmp	r3, #1
 8003330:	d045      	beq.n	80033be <UART_SetConfig+0xd42>
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b02      	cmp	r3, #2
 8003338:	d03e      	beq.n	80033b8 <UART_SetConfig+0xd3c>
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b03      	cmp	r3, #3
 8003340:	d038      	beq.n	80033b4 <UART_SetConfig+0xd38>
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b04      	cmp	r3, #4
 8003348:	d031      	beq.n	80033ae <UART_SetConfig+0xd32>
 800334a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b05      	cmp	r3, #5
 8003350:	d02b      	beq.n	80033aa <UART_SetConfig+0xd2e>
 8003352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b06      	cmp	r3, #6
 8003358:	d025      	beq.n	80033a6 <UART_SetConfig+0xd2a>
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b07      	cmp	r3, #7
 8003360:	d01e      	beq.n	80033a0 <UART_SetConfig+0xd24>
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b08      	cmp	r3, #8
 8003368:	d017      	beq.n	800339a <UART_SetConfig+0xd1e>
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b09      	cmp	r3, #9
 8003370:	d010      	beq.n	8003394 <UART_SetConfig+0xd18>
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b0a      	cmp	r3, #10
 8003378:	d009      	beq.n	800338e <UART_SetConfig+0xd12>
 800337a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b0b      	cmp	r3, #11
 8003380:	d102      	bne.n	8003388 <UART_SetConfig+0xd0c>
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	e01f      	b.n	80033c8 <UART_SetConfig+0xd4c>
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	e01c      	b.n	80033c8 <UART_SetConfig+0xd4c>
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	e019      	b.n	80033c8 <UART_SetConfig+0xd4c>
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	e016      	b.n	80033c8 <UART_SetConfig+0xd4c>
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	e013      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	e010      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <UART_SetConfig+0xeb0>)
 80033a8:	e00e      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033aa:	4b61      	ldr	r3, [pc, #388]	; (8003530 <UART_SetConfig+0xeb4>)
 80033ac:	e00c      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	e009      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033b4:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <UART_SetConfig+0xeb8>)
 80033b6:	e007      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	e004      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	e001      	b.n	80033c8 <UART_SetConfig+0xd4c>
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	025b      	lsls	r3, r3, #9
 80033c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ca:	6852      	ldr	r2, [r2, #4]
 80033cc:	0852      	lsrs	r2, r2, #1
 80033ce:	189a      	adds	r2, r3, r2
 80033d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0019      	movs	r1, r3
 80033d6:	0010      	movs	r0, r2
 80033d8:	f7fc fe9c 	bl	8000114 <__udivsi3>
 80033dc:	0003      	movs	r3, r0
 80033de:	b29b      	uxth	r3, r3
 80033e0:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033e2:	e007      	b.n	80033f4 <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 80033e4:	2313      	movs	r3, #19
 80033e6:	2258      	movs	r2, #88	; 0x58
 80033e8:	4694      	mov	ip, r2
 80033ea:	44bc      	add	ip, r7
 80033ec:	4463      	add	r3, ip
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
        break;
 80033f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d920      	bls.n	800343c <UART_SetConfig+0xdc0>
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	4a4e      	ldr	r2, [pc, #312]	; (8003538 <UART_SetConfig+0xebc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d81c      	bhi.n	800343c <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	b29a      	uxth	r2, r3
 8003406:	200a      	movs	r0, #10
 8003408:	2458      	movs	r4, #88	; 0x58
 800340a:	193b      	adds	r3, r7, r4
 800340c:	181b      	adds	r3, r3, r0
 800340e:	210f      	movs	r1, #15
 8003410:	438a      	bics	r2, r1
 8003412:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	2207      	movs	r2, #7
 800341c:	4013      	ands	r3, r2
 800341e:	b299      	uxth	r1, r3
 8003420:	193b      	adds	r3, r7, r4
 8003422:	181b      	adds	r3, r3, r0
 8003424:	193a      	adds	r2, r7, r4
 8003426:	1812      	adds	r2, r2, r0
 8003428:	8812      	ldrh	r2, [r2, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	193a      	adds	r2, r7, r4
 8003434:	1812      	adds	r2, r2, r0
 8003436:	8812      	ldrh	r2, [r2, #0]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	e1d1      	b.n	80037e0 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 800343c:	2313      	movs	r3, #19
 800343e:	2258      	movs	r2, #88	; 0x58
 8003440:	4694      	mov	ip, r2
 8003442:	44bc      	add	ip, r7
 8003444:	4463      	add	r3, ip
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e1c9      	b.n	80037e0 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 800344c:	231b      	movs	r3, #27
 800344e:	2258      	movs	r2, #88	; 0x58
 8003450:	4694      	mov	ip, r2
 8003452:	44bc      	add	ip, r7
 8003454:	4463      	add	r3, ip
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d100      	bne.n	800345e <UART_SetConfig+0xde2>
 800345c:	e08d      	b.n	800357a <UART_SetConfig+0xefe>
 800345e:	dc02      	bgt.n	8003466 <UART_SetConfig+0xdea>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <UART_SetConfig+0xdf8>
 8003464:	e1a1      	b.n	80037aa <UART_SetConfig+0x112e>
 8003466:	2b04      	cmp	r3, #4
 8003468:	d100      	bne.n	800346c <UART_SetConfig+0xdf0>
 800346a:	e0dd      	b.n	8003628 <UART_SetConfig+0xfac>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d100      	bne.n	8003472 <UART_SetConfig+0xdf6>
 8003470:	e13b      	b.n	80036ea <UART_SetConfig+0x106e>
 8003472:	e19a      	b.n	80037aa <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003474:	f7fe fede 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8003478:	0002      	movs	r2, r0
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b00      	cmp	r3, #0
 8003480:	d100      	bne.n	8003484 <UART_SetConfig+0xe08>
 8003482:	e065      	b.n	8003550 <UART_SetConfig+0xed4>
 8003484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b01      	cmp	r3, #1
 800348a:	d100      	bne.n	800348e <UART_SetConfig+0xe12>
 800348c:	e05e      	b.n	800354c <UART_SetConfig+0xed0>
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b02      	cmp	r3, #2
 8003494:	d058      	beq.n	8003548 <UART_SetConfig+0xecc>
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b03      	cmp	r3, #3
 800349c:	d052      	beq.n	8003544 <UART_SetConfig+0xec8>
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d04c      	beq.n	8003540 <UART_SetConfig+0xec4>
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d046      	beq.n	800353c <UART_SetConfig+0xec0>
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d020      	beq.n	80034f8 <UART_SetConfig+0xe7c>
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d01a      	beq.n	80034f4 <UART_SetConfig+0xe78>
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d014      	beq.n	80034f0 <UART_SetConfig+0xe74>
 80034c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d00e      	beq.n	80034ec <UART_SetConfig+0xe70>
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d008      	beq.n	80034e8 <UART_SetConfig+0xe6c>
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b0b      	cmp	r3, #11
 80034dc:	d102      	bne.n	80034e4 <UART_SetConfig+0xe68>
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	e036      	b.n	8003552 <UART_SetConfig+0xed6>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e034      	b.n	8003552 <UART_SetConfig+0xed6>
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	e032      	b.n	8003552 <UART_SetConfig+0xed6>
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	e030      	b.n	8003552 <UART_SetConfig+0xed6>
 80034f0:	2320      	movs	r3, #32
 80034f2:	e02e      	b.n	8003552 <UART_SetConfig+0xed6>
 80034f4:	2310      	movs	r3, #16
 80034f6:	e02c      	b.n	8003552 <UART_SetConfig+0xed6>
 80034f8:	230c      	movs	r3, #12
 80034fa:	e02a      	b.n	8003552 <UART_SetConfig+0xed6>
 80034fc:	0001e848 	.word	0x0001e848
 8003500:	01e84800 	.word	0x01e84800
 8003504:	0003d090 	.word	0x0003d090
 8003508:	0007a120 	.word	0x0007a120
 800350c:	000f4240 	.word	0x000f4240
 8003510:	001e8480 	.word	0x001e8480
 8003514:	0028b0aa 	.word	0x0028b0aa
 8003518:	0030d400 	.word	0x0030d400
 800351c:	003d0900 	.word	0x003d0900
 8003520:	00516154 	.word	0x00516154
 8003524:	007a1200 	.word	0x007a1200
 8003528:	00f42400 	.word	0x00f42400
 800352c:	00001554 	.word	0x00001554
 8003530:	00001998 	.word	0x00001998
 8003534:	00002aaa 	.word	0x00002aaa
 8003538:	0000ffff 	.word	0x0000ffff
 800353c:	230a      	movs	r3, #10
 800353e:	e008      	b.n	8003552 <UART_SetConfig+0xed6>
 8003540:	2308      	movs	r3, #8
 8003542:	e006      	b.n	8003552 <UART_SetConfig+0xed6>
 8003544:	2306      	movs	r3, #6
 8003546:	e004      	b.n	8003552 <UART_SetConfig+0xed6>
 8003548:	2304      	movs	r3, #4
 800354a:	e002      	b.n	8003552 <UART_SetConfig+0xed6>
 800354c:	2302      	movs	r3, #2
 800354e:	e000      	b.n	8003552 <UART_SetConfig+0xed6>
 8003550:	2301      	movs	r3, #1
 8003552:	0019      	movs	r1, r3
 8003554:	0010      	movs	r0, r2
 8003556:	f7fc fddd 	bl	8000114 <__udivsi3>
 800355a:	0003      	movs	r3, r0
 800355c:	001a      	movs	r2, r3
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	18d2      	adds	r2, r2, r3
 8003566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0019      	movs	r1, r3
 800356c:	0010      	movs	r0, r2
 800356e:	f7fc fdd1 	bl	8000114 <__udivsi3>
 8003572:	0003      	movs	r3, r0
 8003574:	b29b      	uxth	r3, r3
 8003576:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003578:	e11f      	b.n	80037ba <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d043      	beq.n	800360a <UART_SetConfig+0xf8e>
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b01      	cmp	r3, #1
 8003588:	d03d      	beq.n	8003606 <UART_SetConfig+0xf8a>
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b02      	cmp	r3, #2
 8003590:	d037      	beq.n	8003602 <UART_SetConfig+0xf86>
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b03      	cmp	r3, #3
 8003598:	d031      	beq.n	80035fe <UART_SetConfig+0xf82>
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d02b      	beq.n	80035fa <UART_SetConfig+0xf7e>
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d025      	beq.n	80035f6 <UART_SetConfig+0xf7a>
 80035aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d01f      	beq.n	80035f2 <UART_SetConfig+0xf76>
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d019      	beq.n	80035ee <UART_SetConfig+0xf72>
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d013      	beq.n	80035ea <UART_SetConfig+0xf6e>
 80035c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	d00d      	beq.n	80035e6 <UART_SetConfig+0xf6a>
 80035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d007      	beq.n	80035e2 <UART_SetConfig+0xf66>
 80035d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b0b      	cmp	r3, #11
 80035d8:	d101      	bne.n	80035de <UART_SetConfig+0xf62>
 80035da:	4b8d      	ldr	r3, [pc, #564]	; (8003810 <UART_SetConfig+0x1194>)
 80035dc:	e016      	b.n	800360c <UART_SetConfig+0xf90>
 80035de:	4b8d      	ldr	r3, [pc, #564]	; (8003814 <UART_SetConfig+0x1198>)
 80035e0:	e014      	b.n	800360c <UART_SetConfig+0xf90>
 80035e2:	4b8d      	ldr	r3, [pc, #564]	; (8003818 <UART_SetConfig+0x119c>)
 80035e4:	e012      	b.n	800360c <UART_SetConfig+0xf90>
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <UART_SetConfig+0x11a0>)
 80035e8:	e010      	b.n	800360c <UART_SetConfig+0xf90>
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <UART_SetConfig+0x11a4>)
 80035ec:	e00e      	b.n	800360c <UART_SetConfig+0xf90>
 80035ee:	4b8d      	ldr	r3, [pc, #564]	; (8003824 <UART_SetConfig+0x11a8>)
 80035f0:	e00c      	b.n	800360c <UART_SetConfig+0xf90>
 80035f2:	4b8d      	ldr	r3, [pc, #564]	; (8003828 <UART_SetConfig+0x11ac>)
 80035f4:	e00a      	b.n	800360c <UART_SetConfig+0xf90>
 80035f6:	4b8d      	ldr	r3, [pc, #564]	; (800382c <UART_SetConfig+0x11b0>)
 80035f8:	e008      	b.n	800360c <UART_SetConfig+0xf90>
 80035fa:	4b8d      	ldr	r3, [pc, #564]	; (8003830 <UART_SetConfig+0x11b4>)
 80035fc:	e006      	b.n	800360c <UART_SetConfig+0xf90>
 80035fe:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <UART_SetConfig+0x11b8>)
 8003600:	e004      	b.n	800360c <UART_SetConfig+0xf90>
 8003602:	4b8d      	ldr	r3, [pc, #564]	; (8003838 <UART_SetConfig+0x11bc>)
 8003604:	e002      	b.n	800360c <UART_SetConfig+0xf90>
 8003606:	4b8d      	ldr	r3, [pc, #564]	; (800383c <UART_SetConfig+0x11c0>)
 8003608:	e000      	b.n	800360c <UART_SetConfig+0xf90>
 800360a:	4b82      	ldr	r3, [pc, #520]	; (8003814 <UART_SetConfig+0x1198>)
 800360c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800360e:	6852      	ldr	r2, [r2, #4]
 8003610:	0852      	lsrs	r2, r2, #1
 8003612:	189a      	adds	r2, r3, r2
 8003614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0019      	movs	r1, r3
 800361a:	0010      	movs	r0, r2
 800361c:	f7fc fd7a 	bl	8000114 <__udivsi3>
 8003620:	0003      	movs	r3, r0
 8003622:	b29b      	uxth	r3, r3
 8003624:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003626:	e0c8      	b.n	80037ba <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003628:	f7fe fd78 	bl	800211c <HAL_RCC_GetSysClockFreq>
 800362c:	0002      	movs	r2, r0
 800362e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <UART_SetConfig+0x1044>
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b01      	cmp	r3, #1
 800363c:	d03e      	beq.n	80036bc <UART_SetConfig+0x1040>
 800363e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b02      	cmp	r3, #2
 8003644:	d038      	beq.n	80036b8 <UART_SetConfig+0x103c>
 8003646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b03      	cmp	r3, #3
 800364c:	d032      	beq.n	80036b4 <UART_SetConfig+0x1038>
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b04      	cmp	r3, #4
 8003654:	d02c      	beq.n	80036b0 <UART_SetConfig+0x1034>
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b05      	cmp	r3, #5
 800365c:	d026      	beq.n	80036ac <UART_SetConfig+0x1030>
 800365e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b06      	cmp	r3, #6
 8003664:	d020      	beq.n	80036a8 <UART_SetConfig+0x102c>
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b07      	cmp	r3, #7
 800366c:	d01a      	beq.n	80036a4 <UART_SetConfig+0x1028>
 800366e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b08      	cmp	r3, #8
 8003674:	d014      	beq.n	80036a0 <UART_SetConfig+0x1024>
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b09      	cmp	r3, #9
 800367c:	d00e      	beq.n	800369c <UART_SetConfig+0x1020>
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b0a      	cmp	r3, #10
 8003684:	d008      	beq.n	8003698 <UART_SetConfig+0x101c>
 8003686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b0b      	cmp	r3, #11
 800368c:	d102      	bne.n	8003694 <UART_SetConfig+0x1018>
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	e016      	b.n	80036c2 <UART_SetConfig+0x1046>
 8003694:	2301      	movs	r3, #1
 8003696:	e014      	b.n	80036c2 <UART_SetConfig+0x1046>
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	e012      	b.n	80036c2 <UART_SetConfig+0x1046>
 800369c:	2340      	movs	r3, #64	; 0x40
 800369e:	e010      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036a0:	2320      	movs	r3, #32
 80036a2:	e00e      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036a4:	2310      	movs	r3, #16
 80036a6:	e00c      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036a8:	230c      	movs	r3, #12
 80036aa:	e00a      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036ac:	230a      	movs	r3, #10
 80036ae:	e008      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036b0:	2308      	movs	r3, #8
 80036b2:	e006      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036b4:	2306      	movs	r3, #6
 80036b6:	e004      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036b8:	2304      	movs	r3, #4
 80036ba:	e002      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036bc:	2302      	movs	r3, #2
 80036be:	e000      	b.n	80036c2 <UART_SetConfig+0x1046>
 80036c0:	2301      	movs	r3, #1
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fc fd25 	bl	8000114 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	001a      	movs	r2, r3
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	18d2      	adds	r2, r2, r3
 80036d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0019      	movs	r1, r3
 80036dc:	0010      	movs	r0, r2
 80036de:	f7fc fd19 	bl	8000114 <__udivsi3>
 80036e2:	0003      	movs	r3, r0
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80036e8:	e067      	b.n	80037ba <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04b      	beq.n	800378a <UART_SetConfig+0x110e>
 80036f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d044      	beq.n	8003784 <UART_SetConfig+0x1108>
 80036fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d03d      	beq.n	800377e <UART_SetConfig+0x1102>
 8003702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b03      	cmp	r3, #3
 8003708:	d037      	beq.n	800377a <UART_SetConfig+0x10fe>
 800370a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b04      	cmp	r3, #4
 8003710:	d030      	beq.n	8003774 <UART_SetConfig+0x10f8>
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b05      	cmp	r3, #5
 8003718:	d02a      	beq.n	8003770 <UART_SetConfig+0x10f4>
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b06      	cmp	r3, #6
 8003720:	d024      	beq.n	800376c <UART_SetConfig+0x10f0>
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b07      	cmp	r3, #7
 8003728:	d01d      	beq.n	8003766 <UART_SetConfig+0x10ea>
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b08      	cmp	r3, #8
 8003730:	d016      	beq.n	8003760 <UART_SetConfig+0x10e4>
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2b09      	cmp	r3, #9
 8003738:	d00f      	beq.n	800375a <UART_SetConfig+0x10de>
 800373a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x10d8>
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b0b      	cmp	r3, #11
 8003748:	d101      	bne.n	800374e <UART_SetConfig+0x10d2>
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	e01f      	b.n	800378e <UART_SetConfig+0x1112>
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	e01c      	b.n	800378e <UART_SetConfig+0x1112>
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	e019      	b.n	800378e <UART_SetConfig+0x1112>
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	e016      	b.n	800378e <UART_SetConfig+0x1112>
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	e013      	b.n	800378e <UART_SetConfig+0x1112>
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x1112>
 800376c:	4b34      	ldr	r3, [pc, #208]	; (8003840 <UART_SetConfig+0x11c4>)
 800376e:	e00e      	b.n	800378e <UART_SetConfig+0x1112>
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <UART_SetConfig+0x11c8>)
 8003772:	e00c      	b.n	800378e <UART_SetConfig+0x1112>
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	015b      	lsls	r3, r3, #5
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x1112>
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <UART_SetConfig+0x11cc>)
 800377c:	e007      	b.n	800378e <UART_SetConfig+0x1112>
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	e004      	b.n	800378e <UART_SetConfig+0x1112>
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	e001      	b.n	800378e <UART_SetConfig+0x1112>
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003790:	6852      	ldr	r2, [r2, #4]
 8003792:	0852      	lsrs	r2, r2, #1
 8003794:	189a      	adds	r2, r3, r2
 8003796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0019      	movs	r1, r3
 800379c:	0010      	movs	r0, r2
 800379e:	f7fc fcb9 	bl	8000114 <__udivsi3>
 80037a2:	0003      	movs	r3, r0
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80037a8:	e007      	b.n	80037ba <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 80037aa:	2313      	movs	r3, #19
 80037ac:	2258      	movs	r2, #88	; 0x58
 80037ae:	4694      	mov	ip, r2
 80037b0:	44bc      	add	ip, r7
 80037b2:	4463      	add	r3, ip
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
        break;
 80037b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d908      	bls.n	80037d2 <UART_SetConfig+0x1156>
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <UART_SetConfig+0x11d0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d804      	bhi.n	80037d2 <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 80037c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	e006      	b.n	80037e0 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 80037d2:	2313      	movs	r3, #19
 80037d4:	2258      	movs	r2, #88	; 0x58
 80037d6:	4694      	mov	ip, r2
 80037d8:	44bc      	add	ip, r7
 80037da:	4463      	add	r3, ip
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e2:	226a      	movs	r2, #106	; 0x6a
 80037e4:	2101      	movs	r1, #1
 80037e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ea:	2268      	movs	r2, #104	; 0x68
 80037ec:	2101      	movs	r1, #1
 80037ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f2:	2200      	movs	r2, #0
 80037f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	2200      	movs	r2, #0
 80037fa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80037fc:	2313      	movs	r3, #19
 80037fe:	2258      	movs	r2, #88	; 0x58
 8003800:	4694      	mov	ip, r2
 8003802:	44bc      	add	ip, r7
 8003804:	4463      	add	r3, ip
 8003806:	781b      	ldrb	r3, [r3, #0]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b01f      	add	sp, #124	; 0x7c
 800380e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003810:	0000f424 	.word	0x0000f424
 8003814:	00f42400 	.word	0x00f42400
 8003818:	0001e848 	.word	0x0001e848
 800381c:	0003d090 	.word	0x0003d090
 8003820:	0007a120 	.word	0x0007a120
 8003824:	000f4240 	.word	0x000f4240
 8003828:	00145855 	.word	0x00145855
 800382c:	00186a00 	.word	0x00186a00
 8003830:	001e8480 	.word	0x001e8480
 8003834:	0028b0aa 	.word	0x0028b0aa
 8003838:	003d0900 	.word	0x003d0900
 800383c:	007a1200 	.word	0x007a1200
 8003840:	00000aaa 	.word	0x00000aaa
 8003844:	00000ccc 	.word	0x00000ccc
 8003848:	00001555 	.word	0x00001555
 800384c:	0000ffff 	.word	0x0000ffff

08003850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d00b      	beq.n	800387a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a4a      	ldr	r2, [pc, #296]	; (8003994 <UART_AdvFeatureConfig+0x144>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	2202      	movs	r2, #2
 8003880:	4013      	ands	r3, r2
 8003882:	d00b      	beq.n	800389c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a43      	ldr	r2, [pc, #268]	; (8003998 <UART_AdvFeatureConfig+0x148>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <UART_AdvFeatureConfig+0x14c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	2208      	movs	r2, #8
 80038c4:	4013      	ands	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <UART_AdvFeatureConfig+0x150>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	2210      	movs	r2, #16
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <UART_AdvFeatureConfig+0x154>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <UART_AdvFeatureConfig+0x158>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	4013      	ands	r3, r2
 800392c:	d01d      	beq.n	800396a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <UART_AdvFeatureConfig+0x15c>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	035b      	lsls	r3, r3, #13
 800394e:	429a      	cmp	r2, r3
 8003950:	d10b      	bne.n	800396a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <UART_AdvFeatureConfig+0x160>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	4013      	ands	r3, r2
 8003972:	d00b      	beq.n	800398c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <UART_AdvFeatureConfig+0x164>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fffdffff 	.word	0xfffdffff
 8003998:	fffeffff 	.word	0xfffeffff
 800399c:	fffbffff 	.word	0xfffbffff
 80039a0:	ffff7fff 	.word	0xffff7fff
 80039a4:	ffffefff 	.word	0xffffefff
 80039a8:	ffffdfff 	.word	0xffffdfff
 80039ac:	ffefffff 	.word	0xffefffff
 80039b0:	ff9fffff 	.word	0xff9fffff
 80039b4:	fff7ffff 	.word	0xfff7ffff

080039b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2288      	movs	r2, #136	; 0x88
 80039c4:	2100      	movs	r1, #0
 80039c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039c8:	f7fc fea0 	bl	800070c <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	4013      	ands	r3, r2
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d10d      	bne.n	80039fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	0399      	lsls	r1, r3, #14
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <UART_CheckIdleState+0x90>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	0013      	movs	r3, r2
 80039ec:	2200      	movs	r2, #0
 80039ee:	f000 f82d 	bl	8003a4c <UART_WaitOnFlagUntilTimeout>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e021      	b.n	8003a3e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2204      	movs	r2, #4
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d10d      	bne.n	8003a24 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	03d9      	lsls	r1, r3, #15
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <UART_CheckIdleState+0x90>)
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	0013      	movs	r3, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	f000 f818 	bl	8003a4c <UART_WaitOnFlagUntilTimeout>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d001      	beq.n	8003a24 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e00c      	b.n	8003a3e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	2120      	movs	r1, #32
 8003a2a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2284      	movs	r2, #132	; 0x84
 8003a30:	2120      	movs	r1, #32
 8003a32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	227c      	movs	r2, #124	; 0x7c
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	01ffffff 	.word	0x01ffffff

08003a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5c:	e02b      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3301      	adds	r3, #1
 8003a62:	d028      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fc fe52 	bl	800070c <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2284      	movs	r2, #132	; 0x84
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	227c      	movs	r2, #124	; 0x7c
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e00f      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	425a      	negs	r2, r3
 8003ac6:	4153      	adcs	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d0c4      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	fffffe5f 	.word	0xfffffe5f

08003ae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	227c      	movs	r2, #124	; 0x7c
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_UARTEx_DisableFifoMode+0x16>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e027      	b.n	8003b4a <HAL_UARTEx_DisableFifoMode+0x66>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	227c      	movs	r2, #124	; 0x7c
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	2124      	movs	r1, #36	; 0x24
 8003b08:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	438a      	bics	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	227c      	movs	r2, #124	; 0x7c
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	dfffffff 	.word	0xdfffffff

08003b58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	227c      	movs	r2, #124	; 0x7c
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e02e      	b.n	8003bce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	227c      	movs	r2, #124	; 0x7c
 8003b74:	2101      	movs	r1, #1
 8003b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	2124      	movs	r1, #36	; 0x24
 8003b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2101      	movs	r1, #1
 8003b94:	438a      	bics	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	08d9      	lsrs	r1, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f854 	bl	8003c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	2120      	movs	r1, #32
 8003bc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	227c      	movs	r2, #124	; 0x7c
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	227c      	movs	r2, #124	; 0x7c
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e02f      	b.n	8003c50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	227c      	movs	r2, #124	; 0x7c
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	2124      	movs	r1, #36	; 0x24
 8003bfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f813 	bl	8003c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	2120      	movs	r1, #32
 8003c44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	227c      	movs	r2, #124	; 0x7c
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	f1ffffff 	.word	0xf1ffffff

08003c5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003c64:	2314      	movs	r3, #20
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	4a2f      	ldr	r2, [pc, #188]	; (8003d28 <UARTEx_SetNbDataToProcess+0xcc>)
 8003c6a:	ca03      	ldmia	r2!, {r0, r1}
 8003c6c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003c6e:	230c      	movs	r3, #12
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <UARTEx_SetNbDataToProcess+0xd0>)
 8003c74:	ca03      	ldmia	r2!, {r0, r1}
 8003c76:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	226a      	movs	r2, #106	; 0x6a
 8003c84:	2101      	movs	r1, #1
 8003c86:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2268      	movs	r2, #104	; 0x68
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c90:	e046      	b.n	8003d20 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c92:	261f      	movs	r6, #31
 8003c94:	19bb      	adds	r3, r7, r6
 8003c96:	2208      	movs	r2, #8
 8003c98:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c9a:	201e      	movs	r0, #30
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	241d      	movs	r4, #29
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2107      	movs	r1, #7
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	0f5b      	lsrs	r3, r3, #29
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	251c      	movs	r5, #28
 8003cc2:	197b      	adds	r3, r7, r5
 8003cc4:	2107      	movs	r1, #7
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003cca:	183b      	adds	r3, r7, r0
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	197a      	adds	r2, r7, r5
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	2114      	movs	r1, #20
 8003cd4:	1879      	adds	r1, r7, r1
 8003cd6:	5c8a      	ldrb	r2, [r1, r2]
 8003cd8:	435a      	muls	r2, r3
 8003cda:	0010      	movs	r0, r2
 8003cdc:	197b      	adds	r3, r7, r5
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	250c      	movs	r5, #12
 8003ce2:	197a      	adds	r2, r7, r5
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	f7fc fa9e 	bl	8000228 <__divsi3>
 8003cec:	0003      	movs	r3, r0
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	226a      	movs	r2, #106	; 0x6a
 8003cf4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003cf6:	19bb      	adds	r3, r7, r6
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	193a      	adds	r2, r7, r4
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	2114      	movs	r1, #20
 8003d00:	1879      	adds	r1, r7, r1
 8003d02:	5c8a      	ldrb	r2, [r1, r2]
 8003d04:	435a      	muls	r2, r3
 8003d06:	0010      	movs	r0, r2
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	197a      	adds	r2, r7, r5
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	0019      	movs	r1, r3
 8003d12:	f7fc fa89 	bl	8000228 <__divsi3>
 8003d16:	0003      	movs	r3, r0
 8003d18:	b299      	uxth	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2268      	movs	r2, #104	; 0x68
 8003d1e:	5299      	strh	r1, [r3, r2]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b009      	add	sp, #36	; 0x24
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d28:	080051e8 	.word	0x080051e8
 8003d2c:	080051f0 	.word	0x080051f0

08003d30 <I2CRead>:

#include "main.h"
#include "i2c.h"
//#include "stm32g0xx_hal.h"

void I2CRead(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af04      	add	r7, sp, #16
 8003d36:	60ba      	str	r2, [r7, #8]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	250e      	movs	r5, #14
 8003d3c:	197b      	adds	r3, r7, r5
 8003d3e:	1c02      	adds	r2, r0, #0
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	200c      	movs	r0, #12
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	1c0a      	adds	r2, r1, #0
 8003d48:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	183a      	adds	r2, r7, r0
 8003d50:	8814      	ldrh	r4, [r2, #0]
 8003d52:	197a      	adds	r2, r7, r5
 8003d54:	8811      	ldrh	r1, [r2, #0]
 8003d56:	4808      	ldr	r0, [pc, #32]	; (8003d78 <I2CRead+0x48>)
 8003d58:	2232      	movs	r2, #50	; 0x32
 8003d5a:	9202      	str	r2, [sp, #8]
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2302      	movs	r3, #2
 8003d64:	0022      	movs	r2, r4
 8003d66:	f7fd f95b 	bl	8001020 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003d6a:	200a      	movs	r0, #10
 8003d6c:	f7fc fcd8 	bl	8000720 <HAL_Delay>
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b004      	add	sp, #16
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}
 8003d78:	2000002c 	.word	0x2000002c

08003d7c <I2CWrite>:

void I2CWrite(uint16_t devAddress,uint16_t memAddress, uint8_t *data, int n){
 8003d7c:	b5b0      	push	{r4, r5, r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	60ba      	str	r2, [r7, #8]
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	250e      	movs	r5, #14
 8003d88:	197b      	adds	r3, r7, r5
 8003d8a:	1c02      	adds	r2, r0, #0
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	200c      	movs	r0, #12
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	1c0a      	adds	r2, r1, #0
 8003d94:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, devAddress, memAddress, 2, data, n, 50);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	183a      	adds	r2, r7, r0
 8003d9c:	8814      	ldrh	r4, [r2, #0]
 8003d9e:	197a      	adds	r2, r7, r5
 8003da0:	8811      	ldrh	r1, [r2, #0]
 8003da2:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <I2CWrite+0x48>)
 8003da4:	2232      	movs	r2, #50	; 0x32
 8003da6:	9202      	str	r2, [sp, #8]
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2302      	movs	r3, #2
 8003db0:	0022      	movs	r2, r4
 8003db2:	f7fd f807 	bl	8000dc4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003db6:	200a      	movs	r0, #10
 8003db8:	f7fc fcb2 	bl	8000720 <HAL_Delay>
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc4:	2000002c 	.word	0x2000002c

08003dc8 <NFC_Delay>:

void NFC_Delay(uint32_t delay){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc fca4 	bl	8000720 <HAL_Delay>
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	4cad      	ldr	r4, [pc, #692]	; (8004098 <main+0x2b8>)
 8003de4:	44a5      	add	sp, r4
 8003de6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003de8:	f7fc fc16 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dec:	f000 f97c 	bl	80040e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df0:	f000 fa74 	bl	80042dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8003df4:	f000 f9e2 	bl	80041bc <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003df8:	f000 fa20 	bl	800423c <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003dfc:	f000 f9d0 	bl	80041a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffer[6];
  buffer[0]= 0x4c;	//L
 8003e00:	25b2      	movs	r5, #178	; 0xb2
 8003e02:	00ad      	lsls	r5, r5, #2
 8003e04:	197b      	adds	r3, r7, r5
 8003e06:	224c      	movs	r2, #76	; 0x4c
 8003e08:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003e0a:	197b      	adds	r3, r7, r5
 8003e0c:	224f      	movs	r2, #79	; 0x4f
 8003e0e:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003e10:	197b      	adds	r3, r7, r5
 8003e12:	2255      	movs	r2, #85	; 0x55
 8003e14:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003e16:	197b      	adds	r3, r7, r5
 8003e18:	2249      	movs	r2, #73	; 0x49
 8003e1a:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003e1c:	197b      	adds	r3, r7, r5
 8003e1e:	2253      	movs	r2, #83	; 0x53
 8003e20:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003e22:	197b      	adds	r3, r7, r5
 8003e24:	2231      	movs	r2, #49	; 0x31
 8003e26:	715a      	strb	r2, [r3, #5]
  uint8_t buffer1[6];
  buffer1[0]= 0x48;	//H
 8003e28:	26b0      	movs	r6, #176	; 0xb0
 8003e2a:	00b6      	lsls	r6, r6, #2
 8003e2c:	19bb      	adds	r3, r7, r6
 8003e2e:	2248      	movs	r2, #72	; 0x48
 8003e30:	701a      	strb	r2, [r3, #0]
  buffer1[1]= 0x45;	//E
 8003e32:	19bb      	adds	r3, r7, r6
 8003e34:	2245      	movs	r2, #69	; 0x45
 8003e36:	705a      	strb	r2, [r3, #1]
  buffer1[2]= 0x4c;	//L
 8003e38:	19bb      	adds	r3, r7, r6
 8003e3a:	224c      	movs	r2, #76	; 0x4c
 8003e3c:	709a      	strb	r2, [r3, #2]
  buffer1[3]= 0x4c;	//L
 8003e3e:	19bb      	adds	r3, r7, r6
 8003e40:	224c      	movs	r2, #76	; 0x4c
 8003e42:	70da      	strb	r2, [r3, #3]
  buffer1[4]= 0x4f;	//O
 8003e44:	19bb      	adds	r3, r7, r6
 8003e46:	224f      	movs	r2, #79	; 0x4f
 8003e48:	711a      	strb	r2, [r3, #4]
  buffer1[5]= 0x33;	//3
 8003e4a:	19bb      	adds	r3, r7, r6
 8003e4c:	2233      	movs	r2, #51	; 0x33
 8003e4e:	715a      	strb	r2, [r3, #5]
  uint8_t buffer2[13];
  buffer2[0] = 0x50; //P
 8003e50:	24ac      	movs	r4, #172	; 0xac
 8003e52:	00a4      	lsls	r4, r4, #2
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2250      	movs	r2, #80	; 0x50
 8003e58:	701a      	strb	r2, [r3, #0]
  buffer2[1] = 0x61; //a
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	2261      	movs	r2, #97	; 0x61
 8003e5e:	705a      	strb	r2, [r3, #1]
  buffer2[2] = 0x63; //c
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	2263      	movs	r2, #99	; 0x63
 8003e64:	709a      	strb	r2, [r3, #2]
  buffer2[3] = 0x69; //i
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	2269      	movs	r2, #105	; 0x69
 8003e6a:	70da      	strb	r2, [r3, #3]
  buffer2[4] = 0x66; //f
 8003e6c:	193b      	adds	r3, r7, r4
 8003e6e:	2266      	movs	r2, #102	; 0x66
 8003e70:	711a      	strb	r2, [r3, #4]
  buffer2[5] = 0x69; //i
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	2269      	movs	r2, #105	; 0x69
 8003e76:	715a      	strb	r2, [r3, #5]
  buffer2[6] = 0x63; //c
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	2263      	movs	r2, #99	; 0x63
 8003e7c:	719a      	strb	r2, [r3, #6]
  buffer2[7] = 0x20; //
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	2220      	movs	r2, #32
 8003e82:	71da      	strb	r2, [r3, #7]
  buffer2[8] = 0x6f; //o
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	226f      	movs	r2, #111	; 0x6f
 8003e88:	721a      	strb	r2, [r3, #8]
  buffer2[9] = 0x63; //c
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	2263      	movs	r2, #99	; 0x63
 8003e8e:	725a      	strb	r2, [r3, #9]
  buffer2[10] = 0x65; //e
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	2265      	movs	r2, #101	; 0x65
 8003e94:	729a      	strb	r2, [r3, #10]
  buffer2[11] = 0x61; //a
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2261      	movs	r2, #97	; 0x61
 8003e9a:	72da      	strb	r2, [r3, #11]
  buffer2[12] = 0x6e; //n
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	226e      	movs	r2, #110	; 0x6e
 8003ea0:	731a      	strb	r2, [r3, #12]
  //uint8_t oldPassword[8] = {0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08};
  uint8_t password[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
 8003ea2:	23aa      	movs	r3, #170	; 0xaa
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	001c      	movs	r4, r3
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	0018      	movs	r0, r3
 8003eac:	2308      	movs	r3, #8
 8003eae:	001a      	movs	r2, r3
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f001 f985 	bl	80051c0 <memset>
 8003eb6:	0023      	movs	r3, r4
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	2201      	movs	r2, #1
 8003ebc:	71da      	strb	r2, [r3, #7]
  //uint8_t ENDA[3];
  //uint8_t I2CsecurityStatus[1];
  uint8_t data[1];

  //ndef message array - link
  char protocol[20] = "https://www.";
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <main+0x2bc>)
 8003ec0:	22b4      	movs	r2, #180	; 0xb4
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	18b9      	adds	r1, r7, r2
 8003ec6:	18c9      	adds	r1, r1, r3
 8003ec8:	4a75      	ldr	r2, [pc, #468]	; (80040a0 <main+0x2c0>)
 8003eca:	000b      	movs	r3, r1
 8003ecc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ece:	c331      	stmia	r3!, {r0, r4, r5}
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	230d      	movs	r3, #13
 8003ed6:	18cb      	adds	r3, r1, r3
 8003ed8:	2207      	movs	r2, #7
 8003eda:	2100      	movs	r1, #0
 8003edc:	0018      	movs	r0, r3
 8003ede:	f001 f96f 	bl	80051c0 <memset>
  char link[30] = "youtube.com";
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <main+0x2c4>)
 8003ee4:	22b4      	movs	r2, #180	; 0xb4
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	18b9      	adds	r1, r7, r2
 8003eea:	18c9      	adds	r1, r1, r3
 8003eec:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <main+0x2c8>)
 8003eee:	000b      	movs	r3, r1
 8003ef0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003ef2:	c331      	stmia	r3!, {r0, r4, r5}
 8003ef4:	310c      	adds	r1, #12
 8003ef6:	000b      	movs	r3, r1
 8003ef8:	2212      	movs	r2, #18
 8003efa:	2100      	movs	r1, #0
 8003efc:	0018      	movs	r0, r3
 8003efe:	f001 f95f 	bl	80051c0 <memset>
  char info[30] = "Video Web";
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <main+0x2cc>)
 8003f04:	22b4      	movs	r2, #180	; 0xb4
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	0015      	movs	r5, r2
 8003f0a:	18b9      	adds	r1, r7, r2
 8003f0c:	18c9      	adds	r1, r1, r3
 8003f0e:	4a68      	ldr	r2, [pc, #416]	; (80040b0 <main+0x2d0>)
 8003f10:	000b      	movs	r3, r1
 8003f12:	ca11      	ldmia	r2!, {r0, r4}
 8003f14:	c311      	stmia	r3!, {r0, r4}
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	18cb      	adds	r3, r1, r3
 8003f1e:	2214      	movs	r2, #20
 8003f20:	2100      	movs	r1, #0
 8003f22:	0018      	movs	r0, r3
 8003f24:	f001 f94c 	bl	80051c0 <memset>
  //ndef message array of "file"
  char protocol1[30] = "file://";
 8003f28:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <main+0x2d4>)
 8003f2a:	002a      	movs	r2, r5
 8003f2c:	0015      	movs	r5, r2
 8003f2e:	18b9      	adds	r1, r7, r2
 8003f30:	18c9      	adds	r1, r1, r3
 8003f32:	4a61      	ldr	r2, [pc, #388]	; (80040b8 <main+0x2d8>)
 8003f34:	000b      	movs	r3, r1
 8003f36:	ca11      	ldmia	r2!, {r0, r4}
 8003f38:	c311      	stmia	r3!, {r0, r4}
 8003f3a:	3108      	adds	r1, #8
 8003f3c:	000b      	movs	r3, r1
 8003f3e:	2216      	movs	r2, #22
 8003f40:	2100      	movs	r1, #0
 8003f42:	0018      	movs	r0, r3
 8003f44:	f001 f93c 	bl	80051c0 <memset>
  char link1[150] = "/storage/9016-4EF8/DCIM/Camera/nfc.jpg";
 8003f48:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <main+0x2dc>)
 8003f4a:	002a      	movs	r2, r5
 8003f4c:	18b9      	adds	r1, r7, r2
 8003f4e:	18c9      	adds	r1, r1, r3
 8003f50:	4a5b      	ldr	r2, [pc, #364]	; (80040c0 <main+0x2e0>)
 8003f52:	000b      	movs	r3, r1
 8003f54:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f56:	c331      	stmia	r3!, {r0, r4, r5}
 8003f58:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f5a:	c331      	stmia	r3!, {r0, r4, r5}
 8003f5c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003f5e:	c331      	stmia	r3!, {r0, r4, r5}
 8003f60:	8810      	ldrh	r0, [r2, #0]
 8003f62:	8018      	strh	r0, [r3, #0]
 8003f64:	7892      	ldrb	r2, [r2, #2]
 8003f66:	709a      	strb	r2, [r3, #2]
 8003f68:	2327      	movs	r3, #39	; 0x27
 8003f6a:	18cb      	adds	r3, r1, r3
 8003f6c:	226f      	movs	r2, #111	; 0x6f
 8003f6e:	2100      	movs	r1, #0
 8003f70:	0018      	movs	r0, r3
 8003f72:	f001 f925 	bl	80051c0 <memset>
  char info1[30] = "";
 8003f76:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <main+0x2e4>)
 8003f78:	21b4      	movs	r1, #180	; 0xb4
 8003f7a:	0089      	lsls	r1, r1, #2
 8003f7c:	468c      	mov	ip, r1
 8003f7e:	44bc      	add	ip, r7
 8003f80:	4463      	add	r3, ip
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	3304      	adds	r3, #4
 8003f88:	221a      	movs	r2, #26
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f001 f917 	bl	80051c0 <memset>
  //ndef message array of "tel:"
  char protocol2[30] = "tel::";
 8003f92:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <main+0x2e8>)
 8003f94:	22b4      	movs	r2, #180	; 0xb4
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	0014      	movs	r4, r2
 8003f9a:	18b9      	adds	r1, r7, r2
 8003f9c:	18c9      	adds	r1, r1, r3
 8003f9e:	4a4b      	ldr	r2, [pc, #300]	; (80040cc <main+0x2ec>)
 8003fa0:	000b      	movs	r3, r1
 8003fa2:	6810      	ldr	r0, [r2, #0]
 8003fa4:	6018      	str	r0, [r3, #0]
 8003fa6:	8892      	ldrh	r2, [r2, #4]
 8003fa8:	809a      	strh	r2, [r3, #4]
 8003faa:	2306      	movs	r3, #6
 8003fac:	18cb      	adds	r3, r1, r3
 8003fae:	2218      	movs	r2, #24
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f001 f904 	bl	80051c0 <memset>
  char link2[50] = "01121312856";
 8003fb8:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <main+0x2f0>)
 8003fba:	0022      	movs	r2, r4
 8003fbc:	18ba      	adds	r2, r7, r2
 8003fbe:	18d1      	adds	r1, r2, r3
 8003fc0:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <main+0x2f4>)
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003fc6:	c331      	stmia	r3!, {r0, r4, r5}
 8003fc8:	310c      	adds	r1, #12
 8003fca:	000b      	movs	r3, r1
 8003fcc:	2226      	movs	r2, #38	; 0x26
 8003fce:	2100      	movs	r1, #0
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f001 f8f5 	bl	80051c0 <memset>
  char info2[30] = "";
 8003fd6:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <main+0x2f8>)
 8003fd8:	22b4      	movs	r2, #180	; 0xb4
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4694      	mov	ip, r2
 8003fde:	44bc      	add	ip, r7
 8003fe0:	4463      	add	r3, ip
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	221a      	movs	r2, #26
 8003fea:	2100      	movs	r1, #0
 8003fec:	0018      	movs	r0, r3
 8003fee:	f001 f8e7 	bl	80051c0 <memset>

  //initNFC(&hi2c1, NFC_USERMEMORY);
  HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,0);
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <main+0x2fc>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fc fdf1 	bl	8000be0 <HAL_GPIO_WritePin>
  //disableMailBox(password);
  //setDefaultArea(password);
  //i2CWriteProtectUserArea(password, NO_WRITEPROTECT);
  //writeURI(protocol1,link1,info1);
  writeURI(protocol2,link2,info2);
 8003ffe:	003a      	movs	r2, r7
 8004000:	2120      	movs	r1, #32
 8004002:	1879      	adds	r1, r7, r1
 8004004:	2054      	movs	r0, #84	; 0x54
 8004006:	183b      	adds	r3, r7, r0
 8004008:	0018      	movs	r0, r3
 800400a:	f000 fdc1 	bl	8004b90 <writeURI>
  //writeT5TCCFile(ONE_BYTE_ADDRESSING,512);
  //setArea(password, 4,NA,NA);
  //setArea(password, 2,4,6);
  //rfWriteProtectUserArea(password,RFAREA_WRITEFORBIDDEN,RFAREA_NOPROTECT,RFAREA_WRITEPROTECT,RFAREA_WRITEPROTECT);
  //i2CWriteProtectUserArea(password, AREA1_WRITEPROTECT|AREA2_WRITEPROTECT);
  readSystemMemory(I2CSS, data,1);
 800400e:	22d0      	movs	r2, #208	; 0xd0
 8004010:	0052      	lsls	r2, r2, #1
 8004012:	18bb      	adds	r3, r7, r2
 8004014:	2201      	movs	r2, #1
 8004016:	0019      	movs	r1, r3
 8004018:	200b      	movs	r0, #11
 800401a:	f000 fe5a 	bl	8004cd2 <readSystemMemory>
  //configFastTransferMode(password, FTM_ENABLE, 0x00);
  writeUserMemory(0x66,buffer,5);
 800401e:	25b2      	movs	r5, #178	; 0xb2
 8004020:	00ad      	lsls	r5, r5, #2
 8004022:	197b      	adds	r3, r7, r5
 8004024:	2205      	movs	r2, #5
 8004026:	0019      	movs	r1, r3
 8004028:	2066      	movs	r0, #102	; 0x66
 800402a:	f000 fe9a 	bl	8004d62 <writeUserMemory>
  readDatafromMailbox(0x2008,received,30);
 800402e:	25d4      	movs	r5, #212	; 0xd4
 8004030:	006d      	lsls	r5, r5, #1
 8004032:	197b      	adds	r3, r7, r5
 8004034:	482a      	ldr	r0, [pc, #168]	; (80040e0 <main+0x300>)
 8004036:	221e      	movs	r2, #30
 8004038:	0019      	movs	r1, r3
 800403a:	f000 fefd 	bl	8004e38 <readDatafromMailbox>
  resetMailBox();
 800403e:	f000 febb 	bl	8004db8 <resetMailBox>
  readDatafromMailbox(0x2008,received, 30);
 8004042:	197b      	adds	r3, r7, r5
 8004044:	4826      	ldr	r0, [pc, #152]	; (80040e0 <main+0x300>)
 8004046:	221e      	movs	r2, #30
 8004048:	0019      	movs	r1, r3
 800404a:	f000 fef5 	bl	8004e38 <readDatafromMailbox>
  writeDatatoMailbox(buffer2,13);
 800404e:	24ac      	movs	r4, #172	; 0xac
 8004050:	00a4      	lsls	r4, r4, #2
 8004052:	193b      	adds	r3, r7, r4
 8004054:	210d      	movs	r1, #13
 8004056:	0018      	movs	r0, r3
 8004058:	f000 feca 	bl	8004df0 <writeDatatoMailbox>
  writeDatatoMailbox(buffer1,5);
 800405c:	19bb      	adds	r3, r7, r6
 800405e:	2105      	movs	r1, #5
 8004060:	0018      	movs	r0, r3
 8004062:	f000 fec5 	bl	8004df0 <writeDatatoMailbox>
  getMailBoxMessage(received);
 8004066:	197b      	adds	r3, r7, r5
 8004068:	0018      	movs	r0, r3
 800406a:	f000 ff09 	bl	8004e80 <getMailBoxMessage>
  //readDatafromMailbox(0x2018,received, 30);
  //NFC04A1_setRFMode(password,RF_ENABLE);
  //enableMailBox(password);
  //configFastTransferMode(password, FTM_ENABLE, 0x00);
  //getMailBoxMessage(received);
  HAL_Delay(50);
 800406e:	2032      	movs	r0, #50	; 0x32
 8004070:	f7fc fb56 	bl	8000720 <HAL_Delay>
  //enableInterrupt(password);
  //configureInterrupt(password,RF_PUT_MSG_EN|GPO_EN);
  writeSystemMemory(I2CSS,password, 0x00);
 8004074:	23aa      	movs	r3, #170	; 0xaa
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2200      	movs	r2, #0
 800407c:	0019      	movs	r1, r3
 800407e:	200b      	movs	r0, #11
 8004080:	f000 fe3c 	bl	8004cfc <writeSystemMemory>
  I2CRead(NFC_USERMEMORY, MB_LEN_DYN,test2,1);
 8004084:	23d2      	movs	r3, #210	; 0xd2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	18fa      	adds	r2, r7, r3
 800408a:	4916      	ldr	r1, [pc, #88]	; (80040e4 <main+0x304>)
 800408c:	2301      	movs	r3, #1
 800408e:	20a6      	movs	r0, #166	; 0xa6
 8004090:	f7ff fe4e 	bl	8003d30 <I2CRead>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004094:	e7fe      	b.n	8004094 <main+0x2b4>
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	fffffd2c 	.word	0xfffffd2c
 800409c:	fffffebc 	.word	0xfffffebc
 80040a0:	080051f8 	.word	0x080051f8
 80040a4:	fffffe9c 	.word	0xfffffe9c
 80040a8:	0800520c 	.word	0x0800520c
 80040ac:	fffffe7c 	.word	0xfffffe7c
 80040b0:	0800522c 	.word	0x0800522c
 80040b4:	fffffe5c 	.word	0xfffffe5c
 80040b8:	0800524c 	.word	0x0800524c
 80040bc:	fffffdc4 	.word	0xfffffdc4
 80040c0:	0800526c 	.word	0x0800526c
 80040c4:	fffffda4 	.word	0xfffffda4
 80040c8:	fffffd84 	.word	0xfffffd84
 80040cc:	08005304 	.word	0x08005304
 80040d0:	fffffd50 	.word	0xfffffd50
 80040d4:	08005324 	.word	0x08005324
 80040d8:	fffffd30 	.word	0xfffffd30
 80040dc:	50000400 	.word	0x50000400
 80040e0:	00002008 	.word	0x00002008
 80040e4:	00002007 	.word	0x00002007

080040e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b0a1      	sub	sp, #132	; 0x84
 80040ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ee:	2448      	movs	r4, #72	; 0x48
 80040f0:	193b      	adds	r3, r7, r4
 80040f2:	0018      	movs	r0, r3
 80040f4:	2338      	movs	r3, #56	; 0x38
 80040f6:	001a      	movs	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	f001 f861 	bl	80051c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040fe:	2338      	movs	r3, #56	; 0x38
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	0018      	movs	r0, r3
 8004104:	2310      	movs	r3, #16
 8004106:	001a      	movs	r2, r3
 8004108:	2100      	movs	r1, #0
 800410a:	f001 f859 	bl	80051c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	0018      	movs	r0, r3
 8004112:	2334      	movs	r3, #52	; 0x34
 8004114:	001a      	movs	r2, r3
 8004116:	2100      	movs	r1, #0
 8004118:	f001 f852 	bl	80051c0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	0018      	movs	r0, r3
 8004122:	f7fd fb87 	bl	8001834 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004126:	193b      	adds	r3, r7, r4
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800412c:	193b      	adds	r3, r7, r4
 800412e:	22a0      	movs	r2, #160	; 0xa0
 8004130:	02d2      	lsls	r2, r2, #11
 8004132:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004134:	193b      	adds	r3, r7, r4
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800413a:	193b      	adds	r3, r7, r4
 800413c:	0018      	movs	r0, r3
 800413e:	f7fd fbc5 	bl	80018cc <HAL_RCC_OscConfig>
 8004142:	1e03      	subs	r3, r0, #0
 8004144:	d001      	beq.n	800414a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004146:	f000 f955 	bl	80043f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800414a:	2138      	movs	r1, #56	; 0x38
 800414c:	187b      	adds	r3, r7, r1
 800414e:	2207      	movs	r2, #7
 8004150:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004152:	187b      	adds	r3, r7, r1
 8004154:	2201      	movs	r2, #1
 8004156:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004158:	187b      	adds	r3, r7, r1
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800415e:	187b      	adds	r3, r7, r1
 8004160:	2200      	movs	r2, #0
 8004162:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004164:	187b      	adds	r3, r7, r1
 8004166:	2100      	movs	r1, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f7fd fecf 	bl	8001f0c <HAL_RCC_ClockConfig>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004172:	f000 f93f 	bl	80043f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2260      	movs	r2, #96	; 0x60
 800417a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	0018      	movs	r0, r3
 800418c:	f7fe f868 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8004194:	f000 f92e 	bl	80043f4 <Error_Handler>
  }
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b021      	add	sp, #132	; 0x84
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2101      	movs	r1, #1
 80041a8:	2007      	movs	r0, #7
 80041aa:	f7fc fb83 	bl	80008b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80041ae:	2007      	movs	r0, #7
 80041b0:	f7fc fb95 	bl	80008de <HAL_NVIC_EnableIRQ>
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <MX_I2C1_Init+0x74>)
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <MX_I2C1_Init+0x78>)
 80041c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <MX_I2C1_Init+0x74>)
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <MX_I2C1_Init+0x7c>)
 80041ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <MX_I2C1_Init+0x74>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_I2C1_Init+0x74>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <MX_I2C1_Init+0x74>)
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_I2C1_Init+0x74>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_I2C1_Init+0x74>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_I2C1_Init+0x74>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <MX_I2C1_Init+0x74>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_I2C1_Init+0x74>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7fc fd4d 	bl	8000c98 <HAL_I2C_Init>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d001      	beq.n	8004206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004202:	f000 f8f7 	bl	80043f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_I2C1_Init+0x74>)
 8004208:	2100      	movs	r1, #0
 800420a:	0018      	movs	r0, r3
 800420c:	f7fd fa7a 	bl	8001704 <HAL_I2CEx_ConfigAnalogFilter>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004214:	f000 f8ee 	bl	80043f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <MX_I2C1_Init+0x74>)
 800421a:	2100      	movs	r1, #0
 800421c:	0018      	movs	r0, r3
 800421e:	f7fd fabd 	bl	800179c <HAL_I2CEx_ConfigDigitalFilter>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004226:	f000 f8e5 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000002c 	.word	0x2000002c
 8004234:	40005400 	.word	0x40005400
 8004238:	2000090e 	.word	0x2000090e

0800423c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <MX_LPUART1_UART_Init+0x98>)
 8004244:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <MX_LPUART1_UART_Init+0x9c>)
 800424a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	0552      	lsls	r2, r2, #21
 8004252:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800425a:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004262:	220c      	movs	r2, #12
 8004264:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 800426e:	2200      	movs	r2, #0
 8004270:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004272:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004274:	2200      	movs	r2, #0
 8004276:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 800427a:	2200      	movs	r2, #0
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004280:	2200      	movs	r2, #0
 8004282:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004286:	0018      	movs	r0, r3
 8004288:	f7fe f9a2 	bl	80025d0 <HAL_UART_Init>
 800428c:	1e03      	subs	r3, r0, #0
 800428e:	d001      	beq.n	8004294 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004290:	f000 f8b0 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 8004296:	2100      	movs	r1, #0
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff fc5d 	bl	8003b58 <HAL_UARTEx_SetTxFifoThreshold>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d001      	beq.n	80042a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80042a2:	f000 f8a7 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 80042a8:	2100      	movs	r1, #0
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7ff fc94 	bl	8003bd8 <HAL_UARTEx_SetRxFifoThreshold>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d001      	beq.n	80042b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042b4:	f000 f89e 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <MX_LPUART1_UART_Init+0x94>)
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff fc12 	bl	8003ae4 <HAL_UARTEx_DisableFifoMode>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042c4:	f000 f896 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	20000078 	.word	0x20000078
 80042d4:	40008000 	.word	0x40008000
 80042d8:	00033324 	.word	0x00033324

080042dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b08b      	sub	sp, #44	; 0x2c
 80042e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e2:	2414      	movs	r4, #20
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	0018      	movs	r0, r3
 80042e8:	2314      	movs	r3, #20
 80042ea:	001a      	movs	r2, r3
 80042ec:	2100      	movs	r1, #0
 80042ee:	f000 ff67 	bl	80051c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <MX_GPIO_Init+0x10c>)
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	4b3c      	ldr	r3, [pc, #240]	; (80043e8 <MX_GPIO_Init+0x10c>)
 80042f8:	2104      	movs	r1, #4
 80042fa:	430a      	orrs	r2, r1
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34
 80042fe:	4b3a      	ldr	r3, [pc, #232]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <MX_GPIO_Init+0x10c>)
 800430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004310:	2120      	movs	r1, #32
 8004312:	430a      	orrs	r2, r1
 8004314:	635a      	str	r2, [r3, #52]	; 0x34
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	2220      	movs	r2, #32
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004326:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004328:	2101      	movs	r1, #1
 800432a:	430a      	orrs	r2, r1
 800432c:	635a      	str	r2, [r3, #52]	; 0x34
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	2201      	movs	r2, #1
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <MX_GPIO_Init+0x10c>)
 800433c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004340:	2102      	movs	r1, #2
 8004342:	430a      	orrs	r2, r1
 8004344:	635a      	str	r2, [r3, #52]	; 0x34
 8004346:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <MX_GPIO_Init+0x10c>)
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	00d9      	lsls	r1, r3, #3
 8004356:	23a0      	movs	r3, #160	; 0xa0
 8004358:	05db      	lsls	r3, r3, #23
 800435a:	2200      	movs	r2, #0
 800435c:	0018      	movs	r0, r3
 800435e:	f7fc fc3f 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <MX_GPIO_Init+0x110>)
 8004364:	2200      	movs	r2, #0
 8004366:	2130      	movs	r1, #48	; 0x30
 8004368:	0018      	movs	r0, r3
 800436a:	f7fc fc39 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_IT_Pin */
  GPIO_InitStruct.Pin = RF_IT_Pin;
 800436e:	193b      	adds	r3, r7, r4
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004374:	193b      	adds	r3, r7, r4
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <MX_GPIO_Init+0x114>)
 8004378:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RF_IT_GPIO_Port, &GPIO_InitStruct);
 8004380:	193a      	adds	r2, r7, r4
 8004382:	23a0      	movs	r3, #160	; 0xa0
 8004384:	05db      	lsls	r3, r3, #23
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f7fc fac5 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800438e:	0021      	movs	r1, r4
 8004390:	187b      	adds	r3, r7, r1
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	00d2      	lsls	r2, r2, #3
 8004396:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004398:	187b      	adds	r3, r7, r1
 800439a:	2201      	movs	r2, #1
 800439c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 80043aa:	000c      	movs	r4, r1
 80043ac:	187a      	adds	r2, r7, r1
 80043ae:	23a0      	movs	r3, #160	; 0xa0
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	0011      	movs	r1, r2
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7fc faaf 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 80043ba:	0021      	movs	r1, r4
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	2230      	movs	r2, #48	; 0x30
 80043c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	2201      	movs	r2, #1
 80043c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	4a05      	ldr	r2, [pc, #20]	; (80043ec <MX_GPIO_Init+0x110>)
 80043d8:	0019      	movs	r1, r3
 80043da:	0010      	movs	r0, r2
 80043dc:	f7fc fa9c 	bl	8000918 <HAL_GPIO_Init>

}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b00b      	add	sp, #44	; 0x2c
 80043e6:	bd90      	pop	{r4, r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	50000400 	.word	0x50000400
 80043f0:	10210000 	.word	0x10210000

080043f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <writeT5TCCFile>:
#include <string.h>

/*
 * @brief Ndef area has to be multiple of 8bytes
 */
uint16_t writeT5TCCFile(ADDRESSING_MODE address_mode, uint16_t ndef_area){
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	0002      	movs	r2, r0
 8004406:	1dfb      	adds	r3, r7, #7
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	1c0a      	adds	r2, r1, #0
 800440e:	801a      	strh	r2, [r3, #0]

	uint8_t buffer[4];
	buffer[0] = address_mode;
 8004410:	230c      	movs	r3, #12
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	1dfa      	adds	r2, r7, #7
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]

	if( (ndef_area%8) != 0 || ndef_area > 512){
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	2207      	movs	r2, #7
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <writeT5TCCFile+0x36>
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d901      	bls.n	8004438 <writeT5TCCFile+0x3a>
		return NDEF_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e014      	b.n	8004462 <writeT5TCCFile+0x64>
	}
	else{
		buffer[2] = ndef_area/8;
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	08db      	lsrs	r3, r3, #3
 800443e:	b29b      	uxth	r3, r3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	210c      	movs	r1, #12
 8004444:	187b      	adds	r3, r7, r1
 8004446:	709a      	strb	r2, [r3, #2]
		//byte 1 = NFC forum tag type V version , v 1.0
		buffer[1] = NFCT5_VERSION_V1_0;
 8004448:	187b      	adds	r3, r7, r1
 800444a:	2240      	movs	r2, #64	; 0x40
 800444c:	705a      	strb	r2, [r3, #1]
		//byte 2 = additional features, Multiple block read command = 0x01
		buffer[3] = 0x01;
 800444e:	187b      	adds	r3, r7, r1
 8004450:	2201      	movs	r2, #1
 8004452:	70da      	strb	r2, [r3, #3]
		writeUserMemory(0x00,buffer,4);
 8004454:	187b      	adds	r3, r7, r1
 8004456:	2204      	movs	r2, #4
 8004458:	0019      	movs	r1, r3
 800445a:	2000      	movs	r0, #0
 800445c:	f000 fc81 	bl	8004d62 <writeUserMemory>
		return NDEF_OK;
 8004460:	2300      	movs	r3, #0
	}

}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b004      	add	sp, #16
 8004468:	bd80      	pop	{r7, pc}

0800446a <writeT5TLVBlock>:

uint8_t writeT5TLVBlock(TAG5_TLV type,uint16_t length){
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	0002      	movs	r2, r0
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	1c0a      	adds	r2, r1, #0
 800447a:	801a      	strh	r2, [r3, #0]
	 * L = length field = the length of messages in tag field
	 * V = value of message which is the ndef message
	 */
	uint8_t TLV[4];
	//Tag filed
	TLV[0] = type;
 800447c:	230c      	movs	r3, #12
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	1dfa      	adds	r2, r7, #7
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]

	//length field
	if( length >255){
 8004486:	1d3b      	adds	r3, r7, #4
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	2bff      	cmp	r3, #255	; 0xff
 800448c:	d917      	bls.n	80044be <writeT5TLVBlock+0x54>
		TLV[1] = 0xff;
 800448e:	210c      	movs	r1, #12
 8004490:	187b      	adds	r3, r7, r1
 8004492:	22ff      	movs	r2, #255	; 0xff
 8004494:	705a      	strb	r2, [r3, #1]
		TLV[2] = (length & 0xFF00) >> 8;
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	709a      	strb	r2, [r3, #2]
		TLV[3] = length & 0x00FF;
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	70da      	strb	r2, [r3, #3]
		writeUserMemory(0x04,TLV,4);
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2204      	movs	r2, #4
 80044b2:	0019      	movs	r1, r3
 80044b4:	2004      	movs	r0, #4
 80044b6:	f000 fc54 	bl	8004d62 <writeUserMemory>
		return 4;
 80044ba:	2304      	movs	r3, #4
 80044bc:	e00c      	b.n	80044d8 <writeT5TLVBlock+0x6e>
	}else{
		TLV[1] = length;
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	210c      	movs	r1, #12
 80044c6:	187b      	adds	r3, r7, r1
 80044c8:	705a      	strb	r2, [r3, #1]
		writeUserMemory(0x04,TLV,2);
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	2202      	movs	r2, #2
 80044ce:	0019      	movs	r1, r3
 80044d0:	2004      	movs	r0, #4
 80044d2:	f000 fc46 	bl	8004d62 <writeUserMemory>
		return 2;
 80044d6:	2302      	movs	r3, #2
	}
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}

080044e0 <generateURINdef>:

uint16_t generateURINdef(char *protocol, char *link, char *tittle, uint8_t *ndef){
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]

	//static uint8_t ndef[200];
	uint16_t uriType;
	uint32_t uriSize=0,tittleSize=0,totalSize=0, index =0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
	 *  RECORD HEADER = FLAGS | TYPE LENGTH | PAYLOAD LENGTH x4 | ID LENGTH | PAYLOAD TYPE | PAYLOAD ID
	 *  FLAGS = MB | ME | CF | SR | ID LENGTH | TNF ( Well Known type = 0x01)
	 *  PAY LOAD TYPE = "U": URI 0x55, "T": test 0x54, "Sp": smart poster 0x5370
	 */

	uriType = getURIProtocol(protocol);
 80044fe:	2516      	movs	r5, #22
 8004500:	197c      	adds	r4, r7, r5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 f995 	bl	8004834 <getURIProtocol>
 800450a:	0003      	movs	r3, r0
 800450c:	8023      	strh	r3, [r4, #0]

	 if( uriType != URI_ERROR )
 800450e:	197b      	adds	r3, r7, r5
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	2bff      	cmp	r3, #255	; 0xff
 8004514:	d007      	beq.n	8004526 <generateURINdef+0x46>
	   uriSize = 1 + strlen(link);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0018      	movs	r0, r3
 800451a:	f7fb fdf3 	bl	8000104 <strlen>
 800451e:	0003      	movs	r3, r0
 8004520:	3301      	adds	r3, #1
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	e00c      	b.n	8004540 <generateURINdef+0x60>
	 else /*: 1+protocol+URI else*/
	   uriSize = 1 + strlen(protocol) + strlen(link);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	0018      	movs	r0, r3
 800452a:	f7fb fdeb 	bl	8000104 <strlen>
 800452e:	0004      	movs	r4, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0018      	movs	r0, r3
 8004534:	f7fb fde6 	bl	8000104 <strlen>
 8004538:	0003      	movs	r3, r0
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	3301      	adds	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24

	 /*Check if smart poster type is needed*/
	 if(tittle[0] != '\0'){
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d061      	beq.n	800460c <generateURINdef+0x12c>
		 tittleSize = 1 + 2 + strlen(tittle);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7fb fdda 	bl	8000104 <strlen>
 8004550:	0003      	movs	r3, r0
 8004552:	3303      	adds	r3, #3
 8004554:	623b      	str	r3, [r7, #32]
		 totalSize = 4 + uriSize + 4 + tittleSize;
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	18d3      	adds	r3, r2, r3
 800455c:	3308      	adds	r3, #8
 800455e:	61bb      	str	r3, [r7, #24]

		 //Smart Poster Header
		 if(totalSize > 255){
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d931      	bls.n	80045ca <generateURINdef+0xea>
			 ndef[index++] = 0xC1;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	61fa      	str	r2, [r7, #28]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	22c1      	movs	r2, #193	; 0xc1
 8004572:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = SMART_POSTER_TYPE_LENGTH;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	61fa      	str	r2, [r7, #28]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	18d3      	adds	r3, r2, r3
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = (totalSize & 0xFF000000) >> 24;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	0e19      	lsrs	r1, r3, #24
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	18d3      	adds	r3, r2, r3
 8004590:	b2ca      	uxtb	r2, r1
 8004592:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = (totalSize & 0x00FF0000) >> 16;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	0c19      	lsrs	r1, r3, #16
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	b2ca      	uxtb	r2, r1
 80045a4:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = (totalSize & 0x0000FF00) >> 8;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	0a19      	lsrs	r1, r3, #8
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	61fa      	str	r2, [r7, #28]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	18d3      	adds	r3, r2, r3
 80045b4:	b2ca      	uxtb	r2, r1
 80045b6:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = totalSize & 0x000000FF;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	61fa      	str	r2, [r7, #28]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e015      	b.n	80045f6 <generateURINdef+0x116>

		 }
		 else{
			 ndef[index++] = 0xD1;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	61fa      	str	r2, [r7, #28]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	22d1      	movs	r2, #209	; 0xd1
 80045d6:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = SMART_POSTER_TYPE_LENGTH;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	61fa      	str	r2, [r7, #28]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	18d3      	adds	r3, r2, r3
 80045e2:	2202      	movs	r2, #2
 80045e4:	701a      	strb	r2, [r3, #0]
			 ndef[index++] = (uint8_t)totalSize;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	18d3      	adds	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
		 }
		 memcpy(&ndef[index] , SMART_POSTER_TYPE,SMART_POSTER_TYPE_LENGTH);
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	4989      	ldr	r1, [pc, #548]	; (8004824 <generateURINdef+0x344>)
 80045fe:	2202      	movs	r2, #2
 8004600:	0018      	movs	r0, r3
 8004602:	f000 fdd4 	bl	80051ae <memcpy>
		 index += SMART_POSTER_TYPE_LENGTH;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3302      	adds	r3, #2
 800460a:	61fb      	str	r3, [r7, #28]
	 }

	  /* URI header */
	  ndef[index] = 0x81;
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	18d3      	adds	r3, r2, r3
 8004612:	2281      	movs	r2, #129	; 0x81
 8004614:	701a      	strb	r2, [r3, #0]
	  if( uriSize < 256 ) ndef[index] |= 0x10;           // Set the SR bit
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	2bff      	cmp	r3, #255	; 0xff
 800461a:	d80a      	bhi.n	8004632 <generateURINdef+0x152>
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	18d3      	adds	r3, r2, r3
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	18cb      	adds	r3, r1, r3
 800462a:	2110      	movs	r1, #16
 800462c:	430a      	orrs	r2, r1
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
	  if( tittle[0] == '\0' ) ndef[index] |= 0x40;       // Set the ME bit
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <generateURINdef+0x170>
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	18d3      	adds	r3, r2, r3
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	18cb      	adds	r3, r1, r3
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	430a      	orrs	r2, r1
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
	  index++;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3301      	adds	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]

	  ndef[index++] = URI_TYPE_LENGTH;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	18d3      	adds	r3, r2, r3
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
	  if( uriSize > 255 )
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	2bff      	cmp	r3, #255	; 0xff
 8004668:	d923      	bls.n	80046b2 <generateURINdef+0x1d2>
	  {
	    ndef[index++] = (uriSize & 0xFF000000) >> 24;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	0e19      	lsrs	r1, r3, #24
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	61fa      	str	r2, [r7, #28]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	18d3      	adds	r3, r2, r3
 8004678:	b2ca      	uxtb	r2, r1
 800467a:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = (uriSize & 0x00FF0000) >> 16;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	0c19      	lsrs	r1, r3, #16
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	b2ca      	uxtb	r2, r1
 800468c:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = (uriSize & 0x0000FF00) >> 8;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	0a19      	lsrs	r1, r3, #8
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	61fa      	str	r2, [r7, #28]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	b2ca      	uxtb	r2, r1
 800469e:	701a      	strb	r2, [r3, #0]
	    ndef[index++] = uriSize & 0x000000FF;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	61fa      	str	r2, [r7, #28]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	18d3      	adds	r3, r2, r3
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e007      	b.n	80046c2 <generateURINdef+0x1e2>
	  }
	  else
	  {
		  ndef[index++] = (uint8_t)uriSize;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	61fa      	str	r2, [r7, #28]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	18d3      	adds	r3, r2, r3
 80046bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
	  }
	  memcpy( &ndef[index], URI_TYPE, URI_TYPE_LENGTH );
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	4957      	ldr	r1, [pc, #348]	; (8004828 <generateURINdef+0x348>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 fd6e 	bl	80051ae <memcpy>
	  index += URI_TYPE_LENGTH;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]

	  ndef[index++] = uriType;	//the URI identification code of protocol
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	18d3      	adds	r3, r2, r3
 80046e2:	2216      	movs	r2, #22
 80046e4:	18ba      	adds	r2, r7, r2
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
	  memcpy( &ndef[index], link, strlen(link) );
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	18d4      	adds	r4, r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd05 	bl	8000104 <strlen>
 80046fa:	0002      	movs	r2, r0
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	0019      	movs	r1, r3
 8004700:	0020      	movs	r0, r4
 8004702:	f000 fd54 	bl	80051ae <memcpy>
	  index += strlen(link);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	0018      	movs	r0, r3
 800470a:	f7fb fcfb 	bl	8000104 <strlen>
 800470e:	0002      	movs	r2, r0
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	189b      	adds	r3, r3, r2
 8004714:	61fb      	str	r3, [r7, #28]

	  //Information header
	  if(tittle[0] != '\0'){
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d07c      	beq.n	8004818 <generateURINdef+0x338>
		  if(tittleSize> 255){
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2bff      	cmp	r3, #255	; 0xff
 8004722:	d931      	bls.n	8004788 <generateURINdef+0x2a8>
			  ndef[index++] = 0x41;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	61fa      	str	r2, [r7, #28]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	2241      	movs	r2, #65	; 0x41
 8004730:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = TEXT_TYPE_LENGTH;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	61fa      	str	r2, [r7, #28]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	18d3      	adds	r3, r2, r3
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = (tittleSize & 0xFF000000) >> 24;
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	0e19      	lsrs	r1, r3, #24
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	b2ca      	uxtb	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = (tittleSize & 0x00FF0000) >> 16;
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	0c19      	lsrs	r1, r3, #16
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	18d3      	adds	r3, r2, r3
 8004760:	b2ca      	uxtb	r2, r1
 8004762:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = (tittleSize & 0x0000FF00) >> 8;
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	0a19      	lsrs	r1, r3, #8
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	61fa      	str	r2, [r7, #28]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	b2ca      	uxtb	r2, r1
 8004774:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = tittleSize & 0x000000FF;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	61fa      	str	r2, [r7, #28]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e015      	b.n	80047b4 <generateURINdef+0x2d4>
		  }
		  else{
			  ndef[index++] = 0x51;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	61fa      	str	r2, [r7, #28]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	18d3      	adds	r3, r2, r3
 8004792:	2251      	movs	r2, #81	; 0x51
 8004794:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = TEXT_TYPE_LENGTH;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	61fa      	str	r2, [r7, #28]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	18d3      	adds	r3, r2, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
			  ndef[index++] = tittleSize;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	61fa      	str	r2, [r7, #28]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
		  }

		  memcpy( &ndef[index], TEXT_TYPE, TEXT_TYPE_LENGTH );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	18d3      	adds	r3, r2, r3
 80047ba:	491c      	ldr	r1, [pc, #112]	; (800482c <generateURINdef+0x34c>)
 80047bc:	2201      	movs	r2, #1
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 fcf5 	bl	80051ae <memcpy>
		  index+=TEXT_TYPE_LENGTH;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	3301      	adds	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
		  ndef[index++] = ISO_ENGLISH_CODE_LENGTH; /* UTF-8 with x byte language code */
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	61fa      	str	r2, [r7, #28]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	18d3      	adds	r3, r2, r3
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]
		  memcpy( &ndef[index], ISO_ENGLISH_CODE, ISO_ENGLISH_CODE_LENGTH );
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	4914      	ldr	r1, [pc, #80]	; (8004830 <generateURINdef+0x350>)
 80047e0:	2202      	movs	r2, #2
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 fce3 	bl	80051ae <memcpy>
		  index += ISO_ENGLISH_CODE_LENGTH;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3302      	adds	r3, #2
 80047ec:	61fb      	str	r3, [r7, #28]

		  //Information payload
		  memcpy( &ndef[index], tittle, strlen(tittle) );
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	18d4      	adds	r4, r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7fb fc84 	bl	8000104 <strlen>
 80047fc:	0002      	movs	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0019      	movs	r1, r3
 8004802:	0020      	movs	r0, r4
 8004804:	f000 fcd3 	bl	80051ae <memcpy>
		  index+= strlen(tittle);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0018      	movs	r0, r3
 800480c:	f7fb fc7a 	bl	8000104 <strlen>
 8004810:	0002      	movs	r2, r0
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	189b      	adds	r3, r3, r2
 8004816:	61fb      	str	r3, [r7, #28]
	  }

	 return (uint16_t)index;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	b29b      	uxth	r3, r3
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b00a      	add	sp, #40	; 0x28
 8004822:	bdb0      	pop	{r4, r5, r7, pc}
 8004824:	08005358 	.word	0x08005358
 8004828:	0800535c 	.word	0x0800535c
 800482c:	08005360 	.word	0x08005360
 8004830:	08005364 	.word	0x08005364

08004834 <getURIProtocol>:

uint16_t getURIProtocol(char *protocol){
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

	  if( !memcmp( protocol, URI_0x01_STRING, strlen(URI_0x01_STRING) ) ) return URI_0x01;
 800483c:	49ae      	ldr	r1, [pc, #696]	; (8004af8 <getURIProtocol+0x2c4>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	220b      	movs	r2, #11
 8004842:	0018      	movs	r0, r3
 8004844:	f000 fca4 	bl	8005190 <memcmp>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d101      	bne.n	8004850 <getURIProtocol+0x1c>
 800484c:	2301      	movs	r3, #1
 800484e:	e19a      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x02_STRING, strlen(URI_0x02_STRING) ) ) return URI_0x02;
 8004850:	49aa      	ldr	r1, [pc, #680]	; (8004afc <getURIProtocol+0x2c8>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	220c      	movs	r2, #12
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fc9a 	bl	8005190 <memcmp>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d101      	bne.n	8004864 <getURIProtocol+0x30>
 8004860:	2302      	movs	r3, #2
 8004862:	e190      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x03_STRING, strlen(URI_0x03_STRING) ) ) return URI_0x03;
 8004864:	49a6      	ldr	r1, [pc, #664]	; (8004b00 <getURIProtocol+0x2cc>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2207      	movs	r2, #7
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fc90 	bl	8005190 <memcmp>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d101      	bne.n	8004878 <getURIProtocol+0x44>
 8004874:	2303      	movs	r3, #3
 8004876:	e186      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x04_STRING, strlen(URI_0x04_STRING) ) ) return URI_0x04;
 8004878:	49a2      	ldr	r1, [pc, #648]	; (8004b04 <getURIProtocol+0x2d0>)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	0018      	movs	r0, r3
 8004880:	f000 fc86 	bl	8005190 <memcmp>
 8004884:	1e03      	subs	r3, r0, #0
 8004886:	d101      	bne.n	800488c <getURIProtocol+0x58>
 8004888:	2304      	movs	r3, #4
 800488a:	e17c      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x05_STRING, strlen(URI_0x05_STRING) ) ) return URI_0x05;
 800488c:	499e      	ldr	r1, [pc, #632]	; (8004b08 <getURIProtocol+0x2d4>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2204      	movs	r2, #4
 8004892:	0018      	movs	r0, r3
 8004894:	f000 fc7c 	bl	8005190 <memcmp>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d101      	bne.n	80048a0 <getURIProtocol+0x6c>
 800489c:	2305      	movs	r3, #5
 800489e:	e172      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x06_STRING, strlen(URI_0x06_STRING) ) ) return URI_0x06;
 80048a0:	499a      	ldr	r1, [pc, #616]	; (8004b0c <getURIProtocol+0x2d8>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2207      	movs	r2, #7
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 fc72 	bl	8005190 <memcmp>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d101      	bne.n	80048b4 <getURIProtocol+0x80>
 80048b0:	2306      	movs	r3, #6
 80048b2:	e168      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x07_STRING, strlen(URI_0x07_STRING) ) ) return URI_0x07;
 80048b4:	4996      	ldr	r1, [pc, #600]	; (8004b10 <getURIProtocol+0x2dc>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	221a      	movs	r2, #26
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 fc68 	bl	8005190 <memcmp>
 80048c0:	1e03      	subs	r3, r0, #0
 80048c2:	d101      	bne.n	80048c8 <getURIProtocol+0x94>
 80048c4:	2307      	movs	r3, #7
 80048c6:	e15e      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x08_STRING, strlen(URI_0x08_STRING) ) ) return URI_0x08;
 80048c8:	4992      	ldr	r1, [pc, #584]	; (8004b14 <getURIProtocol+0x2e0>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220a      	movs	r2, #10
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fc5e 	bl	8005190 <memcmp>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d101      	bne.n	80048dc <getURIProtocol+0xa8>
 80048d8:	2308      	movs	r3, #8
 80048da:	e154      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x09_STRING, strlen(URI_0x09_STRING) ) ) return URI_0x09;
 80048dc:	498e      	ldr	r1, [pc, #568]	; (8004b18 <getURIProtocol+0x2e4>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2207      	movs	r2, #7
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fc54 	bl	8005190 <memcmp>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d101      	bne.n	80048f0 <getURIProtocol+0xbc>
 80048ec:	2309      	movs	r3, #9
 80048ee:	e14a      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0A_STRING, strlen(URI_0x0A_STRING) ) ) return URI_0x0A;
 80048f0:	498a      	ldr	r1, [pc, #552]	; (8004b1c <getURIProtocol+0x2e8>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2207      	movs	r2, #7
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fc4a 	bl	8005190 <memcmp>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d101      	bne.n	8004904 <getURIProtocol+0xd0>
 8004900:	230a      	movs	r3, #10
 8004902:	e140      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0B_STRING, strlen(URI_0x0B_STRING) ) ) return URI_0x0B;
 8004904:	4986      	ldr	r1, [pc, #536]	; (8004b20 <getURIProtocol+0x2ec>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2206      	movs	r2, #6
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fc40 	bl	8005190 <memcmp>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d101      	bne.n	8004918 <getURIProtocol+0xe4>
 8004914:	230b      	movs	r3, #11
 8004916:	e136      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0C_STRING, strlen(URI_0x0C_STRING) ) ) return URI_0x0C;
 8004918:	4982      	ldr	r1, [pc, #520]	; (8004b24 <getURIProtocol+0x2f0>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2206      	movs	r2, #6
 800491e:	0018      	movs	r0, r3
 8004920:	f000 fc36 	bl	8005190 <memcmp>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d101      	bne.n	800492c <getURIProtocol+0xf8>
 8004928:	230c      	movs	r3, #12
 800492a:	e12c      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0D_STRING, strlen(URI_0x0D_STRING) ) ) return URI_0x0D;
 800492c:	497e      	ldr	r1, [pc, #504]	; (8004b28 <getURIProtocol+0x2f4>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2206      	movs	r2, #6
 8004932:	0018      	movs	r0, r3
 8004934:	f000 fc2c 	bl	8005190 <memcmp>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d101      	bne.n	8004940 <getURIProtocol+0x10c>
 800493c:	230d      	movs	r3, #13
 800493e:	e122      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0E_STRING, strlen(URI_0x0E_STRING) ) ) return URI_0x0E;
 8004940:	497a      	ldr	r1, [pc, #488]	; (8004b2c <getURIProtocol+0x2f8>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2206      	movs	r2, #6
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fc22 	bl	8005190 <memcmp>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d101      	bne.n	8004954 <getURIProtocol+0x120>
 8004950:	230e      	movs	r3, #14
 8004952:	e118      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x0F_STRING, strlen(URI_0x0F_STRING) ) ) return URI_0x0F;
 8004954:	4976      	ldr	r1, [pc, #472]	; (8004b30 <getURIProtocol+0x2fc>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2205      	movs	r2, #5
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fc18 	bl	8005190 <memcmp>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d101      	bne.n	8004968 <getURIProtocol+0x134>
 8004964:	230f      	movs	r3, #15
 8004966:	e10e      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x10_STRING, strlen(URI_0x10_STRING) ) ) return URI_0x10;
 8004968:	4972      	ldr	r1, [pc, #456]	; (8004b34 <getURIProtocol+0x300>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2209      	movs	r2, #9
 800496e:	0018      	movs	r0, r3
 8004970:	f000 fc0e 	bl	8005190 <memcmp>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d101      	bne.n	800497c <getURIProtocol+0x148>
 8004978:	2310      	movs	r3, #16
 800497a:	e104      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x11_STRING, strlen(URI_0x11_STRING) ) ) return URI_0x11;
 800497c:	496e      	ldr	r1, [pc, #440]	; (8004b38 <getURIProtocol+0x304>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2205      	movs	r2, #5
 8004982:	0018      	movs	r0, r3
 8004984:	f000 fc04 	bl	8005190 <memcmp>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d101      	bne.n	8004990 <getURIProtocol+0x15c>
 800498c:	2311      	movs	r3, #17
 800498e:	e0fa      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x12_STRING, strlen(URI_0x12_STRING) ) ) return URI_0x12;
 8004990:	496a      	ldr	r1, [pc, #424]	; (8004b3c <getURIProtocol+0x308>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2207      	movs	r2, #7
 8004996:	0018      	movs	r0, r3
 8004998:	f000 fbfa 	bl	8005190 <memcmp>
 800499c:	1e03      	subs	r3, r0, #0
 800499e:	d101      	bne.n	80049a4 <getURIProtocol+0x170>
 80049a0:	2312      	movs	r3, #18
 80049a2:	e0f0      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x13_STRING, strlen(URI_0x13_STRING) ) ) return URI_0x13;
 80049a4:	4966      	ldr	r1, [pc, #408]	; (8004b40 <getURIProtocol+0x30c>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fbf0 	bl	8005190 <memcmp>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d101      	bne.n	80049b8 <getURIProtocol+0x184>
 80049b4:	2313      	movs	r3, #19
 80049b6:	e0e6      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x14_STRING, strlen(URI_0x14_STRING) ) ) return URI_0x14;
 80049b8:	4962      	ldr	r1, [pc, #392]	; (8004b44 <getURIProtocol+0x310>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 fbe6 	bl	8005190 <memcmp>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d101      	bne.n	80049cc <getURIProtocol+0x198>
 80049c8:	2314      	movs	r3, #20
 80049ca:	e0dc      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x15_STRING, strlen(URI_0x15_STRING) ) ) return URI_0x15;
 80049cc:	495e      	ldr	r1, [pc, #376]	; (8004b48 <getURIProtocol+0x314>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2204      	movs	r2, #4
 80049d2:	0018      	movs	r0, r3
 80049d4:	f000 fbdc 	bl	8005190 <memcmp>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d101      	bne.n	80049e0 <getURIProtocol+0x1ac>
 80049dc:	2315      	movs	r3, #21
 80049de:	e0d2      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x16_STRING, strlen(URI_0x16_STRING) ) ) return URI_0x16;
 80049e0:	495a      	ldr	r1, [pc, #360]	; (8004b4c <getURIProtocol+0x318>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2205      	movs	r2, #5
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fbd2 	bl	8005190 <memcmp>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d101      	bne.n	80049f4 <getURIProtocol+0x1c0>
 80049f0:	2316      	movs	r3, #22
 80049f2:	e0c8      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x17_STRING, strlen(URI_0x17_STRING) ) ) return URI_0x17;
 80049f4:	4956      	ldr	r1, [pc, #344]	; (8004b50 <getURIProtocol+0x31c>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2205      	movs	r2, #5
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fbc8 	bl	8005190 <memcmp>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d101      	bne.n	8004a08 <getURIProtocol+0x1d4>
 8004a04:	2317      	movs	r3, #23
 8004a06:	e0be      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x18_STRING, strlen(URI_0x18_STRING) ) ) return URI_0x18;
 8004a08:	4952      	ldr	r1, [pc, #328]	; (8004b54 <getURIProtocol+0x320>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fbbe 	bl	8005190 <memcmp>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d101      	bne.n	8004a1c <getURIProtocol+0x1e8>
 8004a18:	2318      	movs	r3, #24
 8004a1a:	e0b4      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x19_STRING, strlen(URI_0x19_STRING) ) ) return URI_0x19;
 8004a1c:	494e      	ldr	r1, [pc, #312]	; (8004b58 <getURIProtocol+0x324>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	220a      	movs	r2, #10
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fbb4 	bl	8005190 <memcmp>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d101      	bne.n	8004a30 <getURIProtocol+0x1fc>
 8004a2c:	2319      	movs	r3, #25
 8004a2e:	e0aa      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1A_STRING, strlen(URI_0x1A_STRING) ) ) return URI_0x1A;
 8004a30:	494a      	ldr	r1, [pc, #296]	; (8004b5c <getURIProtocol+0x328>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2209      	movs	r2, #9
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 fbaa 	bl	8005190 <memcmp>
 8004a3c:	1e03      	subs	r3, r0, #0
 8004a3e:	d101      	bne.n	8004a44 <getURIProtocol+0x210>
 8004a40:	231a      	movs	r3, #26
 8004a42:	e0a0      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1B_STRING, strlen(URI_0x1B_STRING) ) ) return URI_0x1B;
 8004a44:	4946      	ldr	r1, [pc, #280]	; (8004b60 <getURIProtocol+0x32c>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	220a      	movs	r2, #10
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fba0 	bl	8005190 <memcmp>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d101      	bne.n	8004a58 <getURIProtocol+0x224>
 8004a54:	231b      	movs	r3, #27
 8004a56:	e096      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1C_STRING, strlen(URI_0x1C_STRING) ) ) return URI_0x1C;
 8004a58:	4942      	ldr	r1, [pc, #264]	; (8004b64 <getURIProtocol+0x330>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	220b      	movs	r2, #11
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fb96 	bl	8005190 <memcmp>
 8004a64:	1e03      	subs	r3, r0, #0
 8004a66:	d101      	bne.n	8004a6c <getURIProtocol+0x238>
 8004a68:	231c      	movs	r3, #28
 8004a6a:	e08c      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1D_STRING, strlen(URI_0x1D_STRING) ) ) return URI_0x1D;
 8004a6c:	493e      	ldr	r1, [pc, #248]	; (8004b68 <getURIProtocol+0x334>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2207      	movs	r2, #7
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 fb8c 	bl	8005190 <memcmp>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d101      	bne.n	8004a80 <getURIProtocol+0x24c>
 8004a7c:	231d      	movs	r3, #29
 8004a7e:	e082      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1E_STRING, strlen(URI_0x1E_STRING) ) ) return URI_0x1E;
 8004a80:	493a      	ldr	r1, [pc, #232]	; (8004b6c <getURIProtocol+0x338>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	220b      	movs	r2, #11
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 fb82 	bl	8005190 <memcmp>
 8004a8c:	1e03      	subs	r3, r0, #0
 8004a8e:	d101      	bne.n	8004a94 <getURIProtocol+0x260>
 8004a90:	231e      	movs	r3, #30
 8004a92:	e078      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x1F_STRING, strlen(URI_0x1F_STRING) ) ) return URI_0x1F;
 8004a94:	4936      	ldr	r1, [pc, #216]	; (8004b70 <getURIProtocol+0x33c>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	220b      	movs	r2, #11
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 fb78 	bl	8005190 <memcmp>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d101      	bne.n	8004aa8 <getURIProtocol+0x274>
 8004aa4:	231f      	movs	r3, #31
 8004aa6:	e06e      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x20_STRING, strlen(URI_0x20_STRING) ) ) return URI_0x20;
 8004aa8:	4932      	ldr	r1, [pc, #200]	; (8004b74 <getURIProtocol+0x340>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	220c      	movs	r2, #12
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 fb6e 	bl	8005190 <memcmp>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d101      	bne.n	8004abc <getURIProtocol+0x288>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	e064      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x21_STRING, strlen(URI_0x21_STRING) ) ) return URI_0x21;
 8004abc:	492e      	ldr	r1, [pc, #184]	; (8004b78 <getURIProtocol+0x344>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	220c      	movs	r2, #12
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 fb64 	bl	8005190 <memcmp>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d101      	bne.n	8004ad0 <getURIProtocol+0x29c>
 8004acc:	2321      	movs	r3, #33	; 0x21
 8004ace:	e05a      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x22_STRING, strlen(URI_0x22_STRING) ) ) return URI_0x22;
 8004ad0:	492a      	ldr	r1, [pc, #168]	; (8004b7c <getURIProtocol+0x348>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fb5a 	bl	8005190 <memcmp>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d101      	bne.n	8004ae4 <getURIProtocol+0x2b0>
 8004ae0:	2322      	movs	r3, #34	; 0x22
 8004ae2:	e050      	b.n	8004b86 <getURIProtocol+0x352>
	  else if( !memcmp( protocol, URI_0x23_STRING, strlen(URI_0x23_STRING) ) ) return URI_0x23;
 8004ae4:	4926      	ldr	r1, [pc, #152]	; (8004b80 <getURIProtocol+0x34c>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 fb50 	bl	8005190 <memcmp>
 8004af0:	1e03      	subs	r3, r0, #0
 8004af2:	d147      	bne.n	8004b84 <getURIProtocol+0x350>
 8004af4:	2323      	movs	r3, #35	; 0x23
 8004af6:	e046      	b.n	8004b86 <getURIProtocol+0x352>
 8004af8:	08005368 	.word	0x08005368
 8004afc:	08005378 	.word	0x08005378
 8004b00:	08005388 	.word	0x08005388
 8004b04:	08005394 	.word	0x08005394
 8004b08:	080053a0 	.word	0x080053a0
 8004b0c:	080053a8 	.word	0x080053a8
 8004b10:	080053b4 	.word	0x080053b4
 8004b14:	080053d0 	.word	0x080053d0
 8004b18:	080053dc 	.word	0x080053dc
 8004b1c:	080053e8 	.word	0x080053e8
 8004b20:	080053f4 	.word	0x080053f4
 8004b24:	080053fc 	.word	0x080053fc
 8004b28:	08005404 	.word	0x08005404
 8004b2c:	0800540c 	.word	0x0800540c
 8004b30:	08005414 	.word	0x08005414
 8004b34:	0800541c 	.word	0x0800541c
 8004b38:	08005428 	.word	0x08005428
 8004b3c:	08005430 	.word	0x08005430
 8004b40:	0800543c 	.word	0x0800543c
 8004b44:	08005444 	.word	0x08005444
 8004b48:	0800544c 	.word	0x0800544c
 8004b4c:	08005454 	.word	0x08005454
 8004b50:	0800545c 	.word	0x0800545c
 8004b54:	08005464 	.word	0x08005464
 8004b58:	08005470 	.word	0x08005470
 8004b5c:	0800547c 	.word	0x0800547c
 8004b60:	08005488 	.word	0x08005488
 8004b64:	08005494 	.word	0x08005494
 8004b68:	080054a4 	.word	0x080054a4
 8004b6c:	080054b0 	.word	0x080054b0
 8004b70:	080054c0 	.word	0x080054c0
 8004b74:	080054d0 	.word	0x080054d0
 8004b78:	080054e0 	.word	0x080054e0
 8004b7c:	080054f0 	.word	0x080054f0
 8004b80:	080054fc 	.word	0x080054fc
	  else return URI_ERROR;
 8004b84:	23ff      	movs	r3, #255	; 0xff
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)

08004b90 <writeURI>:

void writeURI(char *protocol, char *link, char *tittle){
 8004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b92:	b0c5      	sub	sp, #276	; 0x114
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]

	writeT5TCCFile(ONE_BYTE_ADDRESSING, 512);
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	20e1      	movs	r0, #225	; 0xe1
 8004ba4:	f7ff fc2b 	bl	80043fe <writeT5TCCFile>
	uint8_t ndef[250];
	uint16_t size;
	uint8_t offset;
	size = generateURINdef(protocol,link,tittle,ndef);
 8004ba8:	2587      	movs	r5, #135	; 0x87
 8004baa:	006d      	lsls	r5, r5, #1
 8004bac:	197c      	adds	r4, r7, r5
 8004bae:	2610      	movs	r6, #16
 8004bb0:	19bb      	adds	r3, r7, r6
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff fc92 	bl	80044e0 <generateURINdef>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	8023      	strh	r3, [r4, #0]
	offset= writeT5TLVBlock(NFC_TAG5_TLV_NDEF_MSG,size);
 8004bc0:	230e      	movs	r3, #14
 8004bc2:	33ff      	adds	r3, #255	; 0xff
 8004bc4:	18fc      	adds	r4, r7, r3
 8004bc6:	197b      	adds	r3, r7, r5
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	0019      	movs	r1, r3
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f7ff fc4c 	bl	800446a <writeT5TLVBlock>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	7023      	strb	r3, [r4, #0]
	writeUserMemory((0x04+offset), ndef, size);
 8004bd6:	230e      	movs	r3, #14
 8004bd8:	33ff      	adds	r3, #255	; 0xff
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3304      	adds	r3, #4
 8004be2:	b298      	uxth	r0, r3
 8004be4:	197b      	adds	r3, r7, r5
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	19bb      	adds	r3, r7, r6
 8004bea:	0019      	movs	r1, r3
 8004bec:	f000 f8b9 	bl	8004d62 <writeUserMemory>
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b045      	add	sp, #276	; 0x114
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf8 <unlockI2CSecurity>:

/**
 * @description present the i2c password and unlock i2c security session
 * @param password
 */
void unlockI2CSecurity(uint8_t *password){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
		for( i = 0; i < 8; i++){
			pass[i] = password[i];
		}
		pass[8] = PRESENTPASS;
	}*/
	for(int i = 0; i < 8; i++){
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
 8004c04:	e00c      	b.n	8004c20 <unlockI2CSecurity+0x28>
		pass[i] = password[i];
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	7819      	ldrb	r1, [r3, #0]
 8004c0e:	230c      	movs	r3, #12
 8004c10:	18fa      	adds	r2, r7, r3
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	1c0a      	adds	r2, r1, #0
 8004c18:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	ddef      	ble.n	8004c06 <unlockI2CSecurity+0xe>
	}
	pass[8] = PRESENTPASS;
 8004c26:	230c      	movs	r3, #12
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2209      	movs	r2, #9
 8004c2c:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 8004c2e:	2300      	movs	r3, #0
 8004c30:	623b      	str	r3, [r7, #32]
 8004c32:	e00b      	b.n	8004c4c <unlockI2CSecurity+0x54>
		pass[i+9] = password[i];
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	18d2      	adds	r2, r2, r3
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	3309      	adds	r3, #9
 8004c3e:	7811      	ldrb	r1, [r2, #0]
 8004c40:	220c      	movs	r2, #12
 8004c42:	18ba      	adds	r2, r7, r2
 8004c44:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	ddf0      	ble.n	8004c34 <unlockI2CSecurity+0x3c>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, pass,17); //present i2c password
 8004c52:	230c      	movs	r3, #12
 8004c54:	18fa      	adds	r2, r7, r3
 8004c56:	2390      	movs	r3, #144	; 0x90
 8004c58:	0119      	lsls	r1, r3, #4
 8004c5a:	2311      	movs	r3, #17
 8004c5c:	20ae      	movs	r0, #174	; 0xae
 8004c5e:	f7ff f88d 	bl	8003d7c <I2CWrite>
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b00a      	add	sp, #40	; 0x28
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <lockI2CSecurity>:

/**
 * @description lock the i2c security session by presenting a wrong password
 * @param device address
 */
void lockI2CSecurity(){
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0

	uint8_t WrongPass[17];

	for(int i = 0; i < 8; i++){
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e00b      	b.n	8004c8e <lockI2CSecurity+0x24>
		WrongPass[i] = i+1;
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b2d9      	uxtb	r1, r3
 8004c7e:	1d3a      	adds	r2, r7, #4
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	18d3      	adds	r3, r2, r3
 8004c84:	1c0a      	adds	r2, r1, #0
 8004c86:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b07      	cmp	r3, #7
 8004c92:	ddf0      	ble.n	8004c76 <lockI2CSecurity+0xc>
	}
	WrongPass[8] = PRESENTPASS;
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	2209      	movs	r2, #9
 8004c98:	721a      	strb	r2, [r3, #8]
	for(int i = 0; i < 8; i++){
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e00a      	b.n	8004cb6 <lockI2CSecurity+0x4c>
		WrongPass[i+9] = i+3;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	3309      	adds	r3, #9
 8004ca8:	3203      	adds	r2, #3
 8004caa:	b2d1      	uxtb	r1, r2
 8004cac:	1d3a      	adds	r2, r7, #4
 8004cae:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++){
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	ddf1      	ble.n	8004ca0 <lockI2CSecurity+0x36>
	}

	I2CWrite(NFC_SYSTEMMEMORY, I2C_PWD, WrongPass,17); //present wrong i2c password
 8004cbc:	1d3a      	adds	r2, r7, #4
 8004cbe:	2390      	movs	r3, #144	; 0x90
 8004cc0:	0119      	lsls	r1, r3, #4
 8004cc2:	2311      	movs	r3, #17
 8004cc4:	20ae      	movs	r0, #174	; 0xae
 8004cc6:	f7ff f859 	bl	8003d7c <I2CWrite>
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b008      	add	sp, #32
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <readSystemMemory>:
 * @description read the value of register into the buffer
 * @param register address
 * @param buffer
 * @param number of bytes to read
 */
void readSystemMemory(uint16_t regAddress, uint8_t *buffer,int n){
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	210e      	movs	r1, #14
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	1c02      	adds	r2, r0, #0
 8004ce2:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_SYSTEMMEMORY, regAddress, buffer, n);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	8819      	ldrh	r1, [r3, #0]
 8004cec:	0003      	movs	r3, r0
 8004cee:	20ae      	movs	r0, #174	; 0xae
 8004cf0:	f7ff f81e 	bl	8003d30 <I2CRead>
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <writeSystemMemory>:
/**
 * @description write data into the system static register
 * @param register address
 * @param data to write
 */
void writeSystemMemory(uint16_t regAddress, uint8_t *password, uint8_t data){
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6039      	str	r1, [r7, #0]
 8004d04:	0011      	movs	r1, r2
 8004d06:	1dbb      	adds	r3, r7, #6
 8004d08:	1c02      	adds	r2, r0, #0
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	1d7b      	adds	r3, r7, #5
 8004d0e:	1c0a      	adds	r2, r1, #0
 8004d10:	701a      	strb	r2, [r3, #0]

	uint8_t buffer[1];
	buffer[0] = data;
 8004d12:	240c      	movs	r4, #12
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	1d7a      	adds	r2, r7, #5
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]

	unlockI2CSecurity(password);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff ff6a 	bl	8004bf8 <unlockI2CSecurity>
	I2CWrite(NFC_SYSTEMMEMORY, regAddress, buffer, 1);
 8004d24:	193a      	adds	r2, r7, r4
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	8819      	ldrh	r1, [r3, #0]
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	20ae      	movs	r0, #174	; 0xae
 8004d2e:	f7ff f825 	bl	8003d7c <I2CWrite>
	lockI2CSecurity();
 8004d32:	f7ff ff9a 	bl	8004c6a <lockI2CSecurity>
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b005      	add	sp, #20
 8004d3c:	bd90      	pop	{r4, r7, pc}

08004d3e <readDynamicReg>:
/**
 * @description read the value of dynamic register into the buffer
 * @param register address
 * @param buffer
 */
void readDynamicReg(uint16_t regAddress, uint8_t *buffer){
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	0002      	movs	r2, r0
 8004d46:	6039      	str	r1, [r7, #0]
 8004d48:	1dbb      	adds	r3, r7, #6
 8004d4a:	801a      	strh	r2, [r3, #0]

	I2CRead(NFC_DYNAMICMEMORY, regAddress, buffer, 1);
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	1dbb      	adds	r3, r7, #6
 8004d50:	8819      	ldrh	r1, [r3, #0]
 8004d52:	2301      	movs	r3, #1
 8004d54:	20a6      	movs	r0, #166	; 0xa6
 8004d56:	f7fe ffeb 	bl	8003d30 <I2CRead>
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <writeUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to write
 * @param number of bytes to write
 */
void writeUserMemory(uint16_t address, uint8_t *data, int n){
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	210e      	movs	r1, #14
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	1c02      	adds	r2, r0, #0
 8004d72:	801a      	strh	r2, [r3, #0]

		I2CWrite(NFC_USERMEMORY, address, data, n);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	8819      	ldrh	r1, [r3, #0]
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	20a6      	movs	r0, #166	; 0xa6
 8004d80:	f7fe fffc 	bl	8003d7c <I2CWrite>
		//waiting to implement
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b004      	add	sp, #16
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <readUserMemory>:
 * @param area of user memory (1 ~ 4)
 * @param address to write
 * @param pointer to data to read
 * @param number of bytes to read
 */
void readUserMemory(uint16_t address, uint8_t *data, int n){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	210e      	movs	r1, #14
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	1c02      	adds	r2, r0, #0
 8004d9c:	801a      	strh	r2, [r3, #0]

		I2CRead(NFC_USERMEMORY, address, data, n);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	8819      	ldrh	r1, [r3, #0]
 8004da6:	0003      	movs	r3, r0
 8004da8:	20a6      	movs	r0, #166	; 0xa6
 8004daa:	f7fe ffc1 	bl	8003d30 <I2CRead>
		//waiting to implement
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <resetMailBox>:
	unlockI2CSecurity(password);
	I2CWrite(NFC_SYSTEMMEMORY,MB_WDG, temp, 1);
	lockI2CSecurity();
}

void resetMailBox(){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0

	uint8_t temp[2] = {0x00,0x01};
 8004dbe:	1d3b      	adds	r3, r7, #4
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	705a      	strb	r2, [r3, #1]

	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp, 1);
 8004dca:	1d3a      	adds	r2, r7, #4
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <resetMailBox+0x34>)
 8004dce:	2301      	movs	r3, #1
 8004dd0:	20a6      	movs	r0, #166	; 0xa6
 8004dd2:	f7fe ffd3 	bl	8003d7c <I2CWrite>
	I2CWrite(NFC_DYNAMICMEMORY,MB_CTRL_DYN, temp+1, 1);
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	3201      	adds	r2, #1
 8004dda:	4904      	ldr	r1, [pc, #16]	; (8004dec <resetMailBox+0x34>)
 8004ddc:	2301      	movs	r3, #1
 8004dde:	20a6      	movs	r0, #166	; 0xa6
 8004de0:	f7fe ffcc 	bl	8003d7c <I2CWrite>
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b002      	add	sp, #8
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00002006 	.word	0x00002006

08004df0 <writeDatatoMailbox>:
		NFC_Delay(100);
	}
	readDynamicReg(MB_LEN_DYN,temp+1);
}

void writeDatatoMailbox(uint8_t *data, int n){
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]

	uint8_t MBstatus[1];

	getMailBoxStatus(MBstatus);
 8004dfa:	240c      	movs	r4, #12
 8004dfc:	193b      	adds	r3, r7, r4
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 f82e 	bl	8004e60 <getMailBoxStatus>
	if( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	001a      	movs	r2, r3
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d10c      	bne.n	8004e2a <writeDatatoMailbox+0x3a>
 8004e10:	230c      	movs	r3, #12
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	001a      	movs	r2, r3
 8004e18:	2302      	movs	r3, #2
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d105      	bne.n	8004e2a <writeDatatoMailbox+0x3a>
		I2CWrite(NFC_DYNAMICMEMORY, NFC_MAILBOX, data, n);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4904      	ldr	r1, [pc, #16]	; (8004e34 <writeDatatoMailbox+0x44>)
 8004e24:	20a6      	movs	r0, #166	; 0xa6
 8004e26:	f7fe ffa9 	bl	8003d7c <I2CWrite>
	}else{

	}
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b005      	add	sp, #20
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	00002008 	.word	0x00002008

08004e38 <readDatafromMailbox>:

/**
 * Mail box address is only between 0x2008 to 0x2107
 */
void readDatafromMailbox(uint16_t address, uint8_t *data, int n){
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	240e      	movs	r4, #14
 8004e44:	193b      	adds	r3, r7, r4
 8004e46:	1c02      	adds	r2, r0, #0
 8004e48:	801a      	strh	r2, [r3, #0]

	readUserMemory(address, data, n);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	193b      	adds	r3, r7, r4
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7ff ff9a 	bl	8004d8c <readUserMemory>
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b005      	add	sp, #20
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <getMailBoxStatus>:

void getMailBoxStatus(uint8_t *status){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	I2CRead(NFC_DYNAMICMEMORY, MB_CTRL_DYN, status, 1);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4904      	ldr	r1, [pc, #16]	; (8004e7c <getMailBoxStatus+0x1c>)
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	20a6      	movs	r0, #166	; 0xa6
 8004e70:	f7fe ff5e 	bl	8003d30 <I2CRead>
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00002006 	.word	0x00002006

08004e80 <getMailBoxMessage>:

void getMailBoxMessage(uint8_t *data){
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	uint8_t temp[1];
	uint8_t MBstatus[1];

	getMailBoxStatus(MBstatus);
 8004e88:	2308      	movs	r3, #8
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff ffe7 	bl	8004e60 <getMailBoxStatus>
	while( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 8004e92:	e009      	b.n	8004ea8 <getMailBoxMessage+0x28>
		getMailBoxStatus(MBstatus);
 8004e94:	2308      	movs	r3, #8
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7ff ffe1 	bl	8004e60 <getMailBoxStatus>
		NFC_Delay(500);
 8004e9e:	23fa      	movs	r3, #250	; 0xfa
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fe ff90 	bl	8003dc8 <NFC_Delay>
	while( !(MBstatus[0] & RF_PUT_MESSAGE_MASK) && !(MBstatus[0] & HOST_PUT_MESSAGE_MASK) ){
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	001a      	movs	r2, r3
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d106      	bne.n	8004ec4 <getMailBoxMessage+0x44>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d0e7      	beq.n	8004e94 <getMailBoxMessage+0x14>
	}
	if((MBstatus[0] & RF_PUT_MESSAGE_MASK) || (MBstatus[0] & HOST_PUT_MESSAGE_MASK)){
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	001a      	movs	r2, r3
 8004ecc:	2304      	movs	r3, #4
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d106      	bne.n	8004ee0 <getMailBoxMessage+0x60>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2302      	movs	r3, #2
 8004edc:	4013      	ands	r3, r2
 8004ede:	d00e      	beq.n	8004efe <getMailBoxMessage+0x7e>
		readDynamicReg(MB_LEN_DYN,temp);
 8004ee0:	240c      	movs	r4, #12
 8004ee2:	193b      	adds	r3, r7, r4
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <getMailBoxMessage+0x88>)
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	0010      	movs	r0, r2
 8004eea:	f7ff ff28 	bl	8004d3e <readDynamicReg>
		readUserMemory(NFC_MAILBOX,data,(temp[0])+1);
 8004eee:	193b      	adds	r3, r7, r4
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4805      	ldr	r0, [pc, #20]	; (8004f0c <getMailBoxMessage+0x8c>)
 8004ef8:	0019      	movs	r1, r3
 8004efa:	f7ff ff47 	bl	8004d8c <readUserMemory>
	}
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b005      	add	sp, #20
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	00002007 	.word	0x00002007
 8004f0c:	00002008 	.word	0x00002008

08004f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f16:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_MspInit+0x44>)
 8004f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <HAL_MspInit+0x44>)
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_MspInit+0x44>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2201      	movs	r2, #1
 8004f28:	4013      	ands	r3, r2
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_MspInit+0x44>)
 8004f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_MspInit+0x44>)
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	0549      	lsls	r1, r1, #21
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_MspInit+0x44>)
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	055b      	lsls	r3, r3, #21
 8004f44:	4013      	ands	r3, r2
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	2314      	movs	r3, #20
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	0018      	movs	r0, r3
 8004f66:	2314      	movs	r3, #20
 8004f68:	001a      	movs	r2, r3
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f000 f928 	bl	80051c0 <memset>
  if(hi2c->Instance==I2C1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	; (8004fe4 <HAL_I2C_MspInit+0x8c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d130      	bne.n	8004fdc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004f80:	2102      	movs	r1, #2
 8004f82:	430a      	orrs	r2, r1
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34
 8004f86:	4b18      	ldr	r3, [pc, #96]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f92:	2114      	movs	r1, #20
 8004f94:	187b      	adds	r3, r7, r1
 8004f96:	22c0      	movs	r2, #192	; 0xc0
 8004f98:	0092      	lsls	r2, r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	2212      	movs	r2, #18
 8004fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa8:	187b      	adds	r3, r7, r1
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2206      	movs	r2, #6
 8004fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <HAL_I2C_MspInit+0x94>)
 8004fb8:	0019      	movs	r1, r3
 8004fba:	0010      	movs	r0, r2
 8004fbc:	f7fb fcac 	bl	8000918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004fc6:	2180      	movs	r1, #128	; 0x80
 8004fc8:	0389      	lsls	r1, r1, #14
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_I2C_MspInit+0x90>)
 8004fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	039b      	lsls	r3, r3, #14
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b00a      	add	sp, #40	; 0x28
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40005400 	.word	0x40005400
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	50000400 	.word	0x50000400

08004ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	2314      	movs	r3, #20
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	2314      	movs	r3, #20
 8005000:	001a      	movs	r2, r3
 8005002:	2100      	movs	r1, #0
 8005004:	f000 f8dc 	bl	80051c0 <memset>
  if(huart->Instance==LPUART1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_UART_MspInit+0x8c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d130      	bne.n	8005074 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_UART_MspInit+0x90>)
 8005014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_UART_MspInit+0x90>)
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	0349      	lsls	r1, r1, #13
 800501c:	430a      	orrs	r2, r1
 800501e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005020:	4b17      	ldr	r3, [pc, #92]	; (8005080 <HAL_UART_MspInit+0x90>)
 8005022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	035b      	lsls	r3, r3, #13
 8005028:	4013      	ands	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <HAL_UART_MspInit+0x90>)
 8005030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_UART_MspInit+0x90>)
 8005034:	2101      	movs	r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	635a      	str	r2, [r3, #52]	; 0x34
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <HAL_UART_MspInit+0x90>)
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8005046:	2114      	movs	r1, #20
 8005048:	187b      	adds	r3, r7, r1
 800504a:	220c      	movs	r2, #12
 800504c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	187b      	adds	r3, r7, r1
 8005050:	2202      	movs	r2, #2
 8005052:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505a:	187b      	adds	r3, r7, r1
 800505c:	2200      	movs	r2, #0
 800505e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8005060:	187b      	adds	r3, r7, r1
 8005062:	2206      	movs	r2, #6
 8005064:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005066:	187a      	adds	r2, r7, r1
 8005068:	23a0      	movs	r3, #160	; 0xa0
 800506a:	05db      	lsls	r3, r3, #23
 800506c:	0011      	movs	r1, r2
 800506e:	0018      	movs	r0, r3
 8005070:	f7fb fc52 	bl	8000918 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b00a      	add	sp, #40	; 0x28
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40008000 	.word	0x40008000
 8005080:	40021000 	.word	0x40021000

08005084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005092:	e7fe      	b.n	8005092 <HardFault_Handler+0x4>

08005094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050ac:	f7fb fb1e 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b0c0      	sub	sp, #256	; 0x100
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	uint8_t buffer[256];
	//getMailBoxMessage(buffer);
	HAL_GPIO_WritePin(NFC_LED1_GPIO_Port,NFC_LED1_Pin,1);
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <EXTI4_15_IRQHandler+0x20>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	2110      	movs	r1, #16
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fb fd8b 	bl	8000be0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80050ca:	2040      	movs	r0, #64	; 0x40
 80050cc:	f7fb fda6 	bl	8000c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b040      	add	sp, #256	; 0x100
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	50000400 	.word	0x50000400

080050dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050e0:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <SystemInit+0x14>)
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	0512      	lsls	r2, r2, #20
 80050e6:	609a      	str	r2, [r3, #8]
#endif
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80050f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80050fa:	e003      	b.n	8005104 <LoopCopyDataInit>

080050fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80050fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005100:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005102:	3104      	adds	r1, #4

08005104 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005104:	480b      	ldr	r0, [pc, #44]	; (8005134 <LoopForever+0xa>)
  ldr r3, =_edata
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <LoopForever+0xe>)
  adds r2, r0, r1
 8005108:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800510a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800510c:	d3f6      	bcc.n	80050fc <CopyDataInit>
  ldr r2, =_sbss
 800510e:	4a0b      	ldr	r2, [pc, #44]	; (800513c <LoopForever+0x12>)
  b LoopFillZerobss
 8005110:	e002      	b.n	8005118 <LoopFillZerobss>

08005112 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  str  r3, [r2]
 8005114:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005116:	3204      	adds	r2, #4

08005118 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <LoopForever+0x16>)
  cmp r2, r3
 800511a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800511c:	d3f9      	bcc.n	8005112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800511e:	f7ff ffdd 	bl	80050dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005122:	f000 f811 	bl	8005148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005126:	f7fe fe5b 	bl	8003de0 <main>

0800512a <LoopForever>:

LoopForever:
    b LoopForever
 800512a:	e7fe      	b.n	800512a <LoopForever>
  ldr   r0, =_estack
 800512c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8005130:	08005578 	.word	0x08005578
  ldr r0, =_sdata
 8005134:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005138:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800513c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8005140:	20000104 	.word	0x20000104

08005144 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005144:	e7fe      	b.n	8005144 <ADC1_COMP_IRQHandler>
	...

08005148 <__libc_init_array>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	2600      	movs	r6, #0
 800514c:	4d0c      	ldr	r5, [pc, #48]	; (8005180 <__libc_init_array+0x38>)
 800514e:	4c0d      	ldr	r4, [pc, #52]	; (8005184 <__libc_init_array+0x3c>)
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	42a6      	cmp	r6, r4
 8005156:	d109      	bne.n	800516c <__libc_init_array+0x24>
 8005158:	2600      	movs	r6, #0
 800515a:	f000 f839 	bl	80051d0 <_init>
 800515e:	4d0a      	ldr	r5, [pc, #40]	; (8005188 <__libc_init_array+0x40>)
 8005160:	4c0a      	ldr	r4, [pc, #40]	; (800518c <__libc_init_array+0x44>)
 8005162:	1b64      	subs	r4, r4, r5
 8005164:	10a4      	asrs	r4, r4, #2
 8005166:	42a6      	cmp	r6, r4
 8005168:	d105      	bne.n	8005176 <__libc_init_array+0x2e>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	00b3      	lsls	r3, r6, #2
 800516e:	58eb      	ldr	r3, [r5, r3]
 8005170:	4798      	blx	r3
 8005172:	3601      	adds	r6, #1
 8005174:	e7ee      	b.n	8005154 <__libc_init_array+0xc>
 8005176:	00b3      	lsls	r3, r6, #2
 8005178:	58eb      	ldr	r3, [r5, r3]
 800517a:	4798      	blx	r3
 800517c:	3601      	adds	r6, #1
 800517e:	e7f2      	b.n	8005166 <__libc_init_array+0x1e>
 8005180:	08005570 	.word	0x08005570
 8005184:	08005570 	.word	0x08005570
 8005188:	08005570 	.word	0x08005570
 800518c:	08005574 	.word	0x08005574

08005190 <memcmp>:
 8005190:	b530      	push	{r4, r5, lr}
 8005192:	2400      	movs	r4, #0
 8005194:	42a2      	cmp	r2, r4
 8005196:	d101      	bne.n	800519c <memcmp+0xc>
 8005198:	2000      	movs	r0, #0
 800519a:	e005      	b.n	80051a8 <memcmp+0x18>
 800519c:	5d03      	ldrb	r3, [r0, r4]
 800519e:	1c65      	adds	r5, r4, #1
 80051a0:	5d0c      	ldrb	r4, [r1, r4]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d001      	beq.n	80051aa <memcmp+0x1a>
 80051a6:	1b18      	subs	r0, r3, r4
 80051a8:	bd30      	pop	{r4, r5, pc}
 80051aa:	002c      	movs	r4, r5
 80051ac:	e7f2      	b.n	8005194 <memcmp+0x4>

080051ae <memcpy>:
 80051ae:	2300      	movs	r3, #0
 80051b0:	b510      	push	{r4, lr}
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d100      	bne.n	80051b8 <memcpy+0xa>
 80051b6:	bd10      	pop	{r4, pc}
 80051b8:	5ccc      	ldrb	r4, [r1, r3]
 80051ba:	54c4      	strb	r4, [r0, r3]
 80051bc:	3301      	adds	r3, #1
 80051be:	e7f8      	b.n	80051b2 <memcpy+0x4>

080051c0 <memset>:
 80051c0:	0003      	movs	r3, r0
 80051c2:	1812      	adds	r2, r2, r0
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d100      	bne.n	80051ca <memset+0xa>
 80051c8:	4770      	bx	lr
 80051ca:	7019      	strb	r1, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	e7f9      	b.n	80051c4 <memset+0x4>

080051d0 <_init>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr

080051dc <_fini>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr
