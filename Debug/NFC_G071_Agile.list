
NFC_G071_Agile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004594  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c8  080046c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080046dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080046dc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af6c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bec  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002cb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168ac  00000000  00000000  0002dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a04b  00000000  00000000  00044894  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e3b1  00000000  00000000  0004e8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcc90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000257c  00000000  00000000  000dcd0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004638 	.word	0x08004638

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004638 	.word	0x08004638

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f003 feca 	bl	80043cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f8ed 	bl	800085e <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f8cc 	bl	8000834 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028

08000710 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b7f      	cmp	r3, #127	; 0x7f
 8000724:	d932      	bls.n	800078c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	230f      	movs	r3, #15
 8000730:	400b      	ands	r3, r1
 8000732:	3b08      	subs	r3, #8
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	3306      	adds	r3, #6
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	3304      	adds	r3, #4
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1dfa      	adds	r2, r7, #7
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	0011      	movs	r1, r2
 8000746:	2203      	movs	r2, #3
 8000748:	400a      	ands	r2, r1
 800074a:	00d2      	lsls	r2, r2, #3
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	4091      	lsls	r1, r2
 8000750:	000a      	movs	r2, r1
 8000752:	43d2      	mvns	r2, r2
 8000754:	401a      	ands	r2, r3
 8000756:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	019b      	lsls	r3, r3, #6
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	401a      	ands	r2, r3
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0018      	movs	r0, r3
 8000766:	2303      	movs	r3, #3
 8000768:	4003      	ands	r3, r0
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <NVIC_SetPriority+0xd4>)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001c      	movs	r4, r3
 8000776:	230f      	movs	r3, #15
 8000778:	4023      	ands	r3, r4
 800077a:	3b08      	subs	r3, #8
 800077c:	089b      	lsrs	r3, r3, #2
 800077e:	430a      	orrs	r2, r1
 8000780:	3306      	adds	r3, #6
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	18c3      	adds	r3, r0, r3
 8000786:	3304      	adds	r3, #4
 8000788:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e027      	b.n	80007dc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	33c0      	adds	r3, #192	; 0xc0
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	589b      	ldr	r3, [r3, r2]
 800079c:	1dfa      	adds	r2, r7, #7
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	0011      	movs	r1, r2
 80007a2:	2203      	movs	r2, #3
 80007a4:	400a      	ands	r2, r1
 80007a6:	00d2      	lsls	r2, r2, #3
 80007a8:	21ff      	movs	r1, #255	; 0xff
 80007aa:	4091      	lsls	r1, r2
 80007ac:	000a      	movs	r2, r1
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	401a      	ands	r2, r3
 80007b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	401a      	ands	r2, r3
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0018      	movs	r0, r3
 80007c2:	2303      	movs	r3, #3
 80007c4:	4003      	ands	r3, r0
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <NVIC_SetPriority+0xd8>)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	33c0      	adds	r3, #192	; 0xc0
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	501a      	str	r2, [r3, r0]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b003      	add	sp, #12
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	e000e100 	.word	0xe000e100

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <SysTick_Config+0x40>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d901      	bls.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e010      	b.n	8000824 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <SysTick_Config+0x44>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	3a01      	subs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	2301      	movs	r3, #1
 800080c:	425b      	negs	r3, r3
 800080e:	2103      	movs	r1, #3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7d 	bl	8000710 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SysTick_Config+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x44>)
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	00ffffff 	.word	0x00ffffff
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	210f      	movs	r1, #15
 8000840:	187b      	adds	r3, r7, r1
 8000842:	1c02      	adds	r2, r0, #0
 8000844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	187b      	adds	r3, r7, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <NVIC_SetPriority>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffbf 	bl	80007ec <SysTick_Config>
 800086e:	0003      	movs	r3, r0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e147      	b.n	8000b18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x28>
 800089e:	e138      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0x38>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d123      	bne.n	80008f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	08da      	lsrs	r2, r3, #3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3208      	adds	r2, #8
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	58d3      	ldr	r3, [r2, r3]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2207      	movs	r2, #7
 80008c2:	4013      	ands	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	220f      	movs	r2, #15
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	2107      	movs	r1, #7
 80008dc:	400b      	ands	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	6939      	ldr	r1, [r7, #16]
 80008f6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2203      	movs	r2, #3
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <HAL_GPIO_Init+0xd4>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d007      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2b11      	cmp	r3, #17
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	43da      	mvns	r2, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	2201      	movs	r2, #1
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	055b      	lsls	r3, r3, #21
 80009e6:	4013      	ands	r3, r2
 80009e8:	d100      	bne.n	80009ec <HAL_GPIO_Init+0x174>
 80009ea:	e092      	b.n	8000b12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3318      	adds	r3, #24
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	589b      	ldr	r3, [r3, r2]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2203      	movs	r2, #3
 80009fe:	4013      	ands	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	220f      	movs	r2, #15
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	23a0      	movs	r3, #160	; 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x1ca>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <HAL_GPIO_Init+0x2bc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x1c6>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <HAL_GPIO_Init+0x2c0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x1c2>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <HAL_GPIO_Init+0x2c4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x1be>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e006      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e004      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <HAL_GPIO_Init+0x1cc>
 8000a42:	2300      	movs	r3, #0
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	2103      	movs	r1, #3
 8000a48:	400a      	ands	r2, r1
 8000a4a:	00d2      	lsls	r2, r2, #3
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a54:	4936      	ldr	r1, [pc, #216]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	58d3      	ldr	r3, [r2, r3]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	025b      	lsls	r3, r3, #9
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a88:	4929      	ldr	r1, [pc, #164]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000a92:	2384      	movs	r3, #132	; 0x84
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	029b      	lsls	r3, r3, #10
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ab8:	2284      	movs	r2, #132	; 0x84
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	035b      	lsls	r3, r3, #13
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43da      	mvns	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	039b      	lsls	r3, r3, #14
 8000b00:	4013      	ands	r3, r2
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	1e13      	subs	r3, r2, #0
 8000b22:	d000      	beq.n	8000b26 <HAL_GPIO_Init+0x2ae>
 8000b24:	e6b0      	b.n	8000888 <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b006      	add	sp, #24
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40021800 	.word	0x40021800
 8000b34:	50000400 	.word	0x50000400
 8000b38:	50000800 	.word	0x50000800
 8000b3c:	50000c00 	.word	0x50000c00

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	0008      	movs	r0, r1
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	1cbb      	adds	r3, r7, #2
 8000b4e:	1c02      	adds	r2, r0, #0
 8000b50:	801a      	strh	r2, [r3, #0]
 8000b52:	1c7b      	adds	r3, r7, #1
 8000b54:	1c0a      	adds	r2, r1, #0
 8000b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b58:	1c7b      	adds	r3, r7, #1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e082      	b.n	8000c94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2241      	movs	r2, #65	; 0x41
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f003 fc35 	bl	8004414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2241      	movs	r2, #65	; 0x41
 8000bae:	2124      	movs	r1, #36	; 0x24
 8000bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4934      	ldr	r1, [pc, #208]	; (8000c9c <HAL_I2C_Init+0x120>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4931      	ldr	r1, [pc, #196]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d108      	bne.n	8000bfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0209      	lsls	r1, r1, #8
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	e007      	b.n	8000c0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2184      	movs	r1, #132	; 0x84
 8000c04:	0209      	lsls	r1, r1, #8
 8000c06:	430a      	orrs	r2, r1
 8000c08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d104      	bne.n	8000c1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	491f      	ldr	r1, [pc, #124]	; (8000ca4 <HAL_I2C_Init+0x128>)
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <HAL_I2C_Init+0x124>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	0011      	movs	r1, r2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	021a      	lsls	r2, r3, #8
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69d9      	ldr	r1, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2241      	movs	r2, #65	; 0x41
 8000c80:	2120      	movs	r1, #32
 8000c82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2242      	movs	r2, #66	; 0x42
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	f0ffffff 	.word	0xf0ffffff
 8000ca0:	ffff7fff 	.word	0xffff7fff
 8000ca4:	02008000 	.word	0x02008000

08000ca8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	0010      	movs	r0, r2
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	1c22      	adds	r2, r4, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	1dbb      	adds	r3, r7, #6
 8000cc8:	1c0a      	adds	r2, r1, #0
 8000cca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2241      	movs	r2, #65	; 0x41
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d000      	beq.n	8000cda <HAL_I2C_Mem_Write+0x32>
 8000cd8:	e10c      	b.n	8000ef4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_I2C_Mem_Write+0x42>
 8000ce0:	232c      	movs	r3, #44	; 0x2c
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0ff      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_I2C_Mem_Write+0x5c>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e0f8      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	2101      	movs	r1, #1
 8000d0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000d0c:	f7ff fcf6 	bl	80006fc <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	0219      	lsls	r1, r3, #8
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2319      	movs	r3, #25
 8000d20:	2201      	movs	r2, #1
 8000d22:	f000 fc25 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0e3      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2241      	movs	r2, #65	; 0x41
 8000d32:	2121      	movs	r1, #33	; 0x21
 8000d34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2242      	movs	r2, #66	; 0x42
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	222c      	movs	r2, #44	; 0x2c
 8000d4e:	18ba      	adds	r2, r7, r2
 8000d50:	8812      	ldrh	r2, [r2, #0]
 8000d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	881c      	ldrh	r4, [r3, #0]
 8000d5e:	2308      	movs	r3, #8
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	881a      	ldrh	r2, [r3, #0]
 8000d64:	230a      	movs	r3, #10
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	8819      	ldrh	r1, [r3, #0]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	0023      	movs	r3, r4
 8000d76:	f000 fb13 	bl	80013a0 <I2C_RequestMemoryWrite>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e0b5      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2bff      	cmp	r3, #255	; 0xff
 8000d92:	d911      	bls.n	8000db8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	045c      	lsls	r4, r3, #17
 8000da4:	230a      	movs	r3, #10
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	8819      	ldrh	r1, [r3, #0]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	2300      	movs	r3, #0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	0023      	movs	r3, r4
 8000db2:	f000 fcfd 	bl	80017b0 <I2C_TransferConfig>
 8000db6:	e012      	b.n	8000dde <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	049c      	lsls	r4, r3, #18
 8000dcc:	230a      	movs	r3, #10
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	8819      	ldrh	r1, [r3, #0]
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	0023      	movs	r3, r4
 8000dda:	f000 fce9 	bl	80017b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 fc02 	bl	80015ee <I2C_WaitOnTXISFlagUntilTimeout>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e081      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d03a      	beq.n	8000ea2 <HAL_I2C_Mem_Write+0x1fa>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d136      	bne.n	8000ea2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	f000 fb95 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e053      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	2bff      	cmp	r3, #255	; 0xff
 8000e56:	d911      	bls.n	8000e7c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	045c      	lsls	r4, r3, #17
 8000e68:	230a      	movs	r3, #10
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	8819      	ldrh	r1, [r3, #0]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	0023      	movs	r3, r4
 8000e76:	f000 fc9b 	bl	80017b0 <I2C_TransferConfig>
 8000e7a:	e012      	b.n	8000ea2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	049c      	lsls	r4, r3, #18
 8000e90:	230a      	movs	r3, #10
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	8819      	ldrh	r1, [r3, #0]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	0023      	movs	r3, r4
 8000e9e:	f000 fc87 	bl	80017b0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d198      	bne.n	8000dde <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fbda 	bl	800166c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e01a      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <HAL_I2C_Mem_Write+0x258>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2241      	movs	r2, #65	; 0x41
 8000edc:	2120      	movs	r1, #32
 8000ede:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2242      	movs	r2, #66	; 0x42
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e000      	b.n	8000ef6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8000ef4:	2302      	movs	r3, #2
  }
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b007      	add	sp, #28
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	fe00e800 	.word	0xfe00e800

08000f04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	0010      	movs	r0, r2
 8000f10:	0019      	movs	r1, r3
 8000f12:	230a      	movs	r3, #10
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	1c22      	adds	r2, r4, #0
 8000f18:	801a      	strh	r2, [r3, #0]
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	1c02      	adds	r2, r0, #0
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	1c0a      	adds	r2, r1, #0
 8000f26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2241      	movs	r2, #65	; 0x41
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b20      	cmp	r3, #32
 8000f32:	d000      	beq.n	8000f36 <HAL_I2C_Mem_Read+0x32>
 8000f34:	e110      	b.n	8001158 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <HAL_I2C_Mem_Read+0x42>
 8000f3c:	232c      	movs	r3, #44	; 0x2c
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d105      	bne.n	8000f52 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e103      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	5c9b      	ldrb	r3, [r3, r2]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_I2C_Mem_Read+0x5c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e0fc      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	2101      	movs	r1, #1
 8000f66:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f68:	f7ff fbc8 	bl	80006fc <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	0219      	lsls	r1, r3, #8
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2319      	movs	r3, #25
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f000 faf7 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0e7      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2241      	movs	r2, #65	; 0x41
 8000f8e:	2122      	movs	r1, #34	; 0x22
 8000f90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2242      	movs	r2, #66	; 0x42
 8000f96:	2140      	movs	r1, #64	; 0x40
 8000f98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	222c      	movs	r2, #44	; 0x2c
 8000faa:	18ba      	adds	r2, r7, r2
 8000fac:	8812      	ldrh	r2, [r2, #0]
 8000fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	881c      	ldrh	r4, [r3, #0]
 8000fba:	2308      	movs	r3, #8
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	8819      	ldrh	r1, [r3, #0]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	0023      	movs	r3, r4
 8000fd2:	f000 fa49 	bl	8001468 <I2C_RequestMemoryRead>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2240      	movs	r2, #64	; 0x40
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0b9      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2bff      	cmp	r3, #255	; 0xff
 8000fee:	d911      	bls.n	8001014 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	045c      	lsls	r4, r3, #17
 8001000:	230a      	movs	r3, #10
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_I2C_Mem_Read+0x260>)
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	0023      	movs	r3, r4
 800100e:	f000 fbcf 	bl	80017b0 <I2C_TransferConfig>
 8001012:	e012      	b.n	800103a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001018:	b29a      	uxth	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001022:	b2da      	uxtb	r2, r3
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	049c      	lsls	r4, r3, #18
 8001028:	230a      	movs	r3, #10
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	8819      	ldrh	r1, [r3, #0]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_I2C_Mem_Read+0x260>)
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	0023      	movs	r3, r4
 8001036:	f000 fbbb 	bl	80017b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800103a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	0013      	movs	r3, r2
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	f000 fa92 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e082      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	3b01      	subs	r3, #1
 8001072:	b29a      	uxth	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107c:	b29b      	uxth	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b29a      	uxth	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108a:	b29b      	uxth	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d03a      	beq.n	8001106 <HAL_I2C_Mem_Read+0x202>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	2b00      	cmp	r3, #0
 8001096:	d136      	bne.n	8001106 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	0013      	movs	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	f000 fa63 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e053      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	2bff      	cmp	r3, #255	; 0xff
 80010ba:	d911      	bls.n	80010e0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	045c      	lsls	r4, r3, #17
 80010cc:	230a      	movs	r3, #10
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	8819      	ldrh	r1, [r3, #0]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	0023      	movs	r3, r4
 80010da:	f000 fb69 	bl	80017b0 <I2C_TransferConfig>
 80010de:	e012      	b.n	8001106 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	049c      	lsls	r4, r3, #18
 80010f4:	230a      	movs	r3, #10
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	8819      	ldrh	r1, [r3, #0]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	0023      	movs	r3, r4
 8001102:	f000 fb55 	bl	80017b0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d194      	bne.n	800103a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	0018      	movs	r0, r3
 8001118:	f000 faa8 	bl	800166c <I2C_WaitOnSTOPFlagUntilTimeout>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e01a      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2220      	movs	r2, #32
 800112a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	490c      	ldr	r1, [pc, #48]	; (8001168 <HAL_I2C_Mem_Read+0x264>)
 8001138:	400a      	ands	r2, r1
 800113a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2241      	movs	r2, #65	; 0x41
 8001140:	2120      	movs	r1, #32
 8001142:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2242      	movs	r2, #66	; 0x42
 8001148:	2100      	movs	r1, #0
 800114a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2240      	movs	r2, #64	; 0x40
 8001150:	2100      	movs	r1, #0
 8001152:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e000      	b.n	800115a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001158:	2302      	movs	r3, #2
  }
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b007      	add	sp, #28
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	80002400 	.word	0x80002400
 8001168:	fe00e800 	.word	0xfe00e800

0800116c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	230a      	movs	r3, #10
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	1c0a      	adds	r2, r1, #0
 800117e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2241      	movs	r2, #65	; 0x41
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b20      	cmp	r3, #32
 800118e:	d000      	beq.n	8001192 <HAL_I2C_IsDeviceReady+0x26>
 8001190:	e0fe      	b.n	8001390 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699a      	ldr	r2, [r3, #24]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	401a      	ands	r2, r3
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d101      	bne.n	80011aa <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80011a6:	2302      	movs	r3, #2
 80011a8:	e0f3      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	5c9b      	ldrb	r3, [r3, r2]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_I2C_IsDeviceReady+0x4c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e0ec      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	2101      	movs	r1, #1
 80011be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2241      	movs	r2, #65	; 0x41
 80011c4:	2124      	movs	r1, #36	; 0x24
 80011c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_IsDeviceReady+0x7a>
 80011d6:	230a      	movs	r3, #10
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	059b      	lsls	r3, r3, #22
 80011de:	0d9b      	lsrs	r3, r3, #22
 80011e0:	4a6e      	ldr	r2, [pc, #440]	; (800139c <HAL_I2C_IsDeviceReady+0x230>)
 80011e2:	431a      	orrs	r2, r3
 80011e4:	e007      	b.n	80011f6 <HAL_I2C_IsDeviceReady+0x8a>
 80011e6:	230a      	movs	r3, #10
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	059b      	lsls	r3, r3, #22
 80011ee:	0d9b      	lsrs	r3, r3, #22
 80011f0:	22a0      	movs	r2, #160	; 0xa0
 80011f2:	0192      	lsls	r2, r2, #6
 80011f4:	431a      	orrs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff fa7e 	bl	80006fc <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2220      	movs	r2, #32
 800120c:	4013      	ands	r3, r2
 800120e:	3b20      	subs	r3, #32
 8001210:	425a      	negs	r2, r3
 8001212:	4153      	adcs	r3, r2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	231f      	movs	r3, #31
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2210      	movs	r2, #16
 8001224:	4013      	ands	r3, r2
 8001226:	3b10      	subs	r3, #16
 8001228:	425a      	negs	r2, r3
 800122a:	4153      	adcs	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	231e      	movs	r3, #30
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001234:	e035      	b.n	80012a2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	d01a      	beq.n	8001272 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800123c:	f7ff fa5e 	bl	80006fc <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d302      	bcc.n	8001252 <HAL_I2C_IsDeviceReady+0xe6>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2241      	movs	r2, #65	; 0x41
 8001256:	2120      	movs	r1, #32
 8001258:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	2220      	movs	r2, #32
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e08f      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2220      	movs	r2, #32
 800127a:	4013      	ands	r3, r2
 800127c:	3b20      	subs	r3, #32
 800127e:	425a      	negs	r2, r3
 8001280:	4153      	adcs	r3, r2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	231f      	movs	r3, #31
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2210      	movs	r2, #16
 8001292:	4013      	ands	r3, r2
 8001294:	3b10      	subs	r3, #16
 8001296:	425a      	negs	r2, r3
 8001298:	4153      	adcs	r3, r2
 800129a:	b2da      	uxtb	r2, r3
 800129c:	231e      	movs	r3, #30
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012a2:	231f      	movs	r3, #31
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d104      	bne.n	80012b6 <HAL_I2C_IsDeviceReady+0x14a>
 80012ac:	231e      	movs	r3, #30
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0bf      	beq.n	8001236 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2210      	movs	r2, #16
 80012be:	4013      	ands	r3, r2
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d01a      	beq.n	80012fa <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	0013      	movs	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	2120      	movs	r1, #32
 80012d2:	f000 f94d 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e059      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2220      	movs	r2, #32
 80012e4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2241      	movs	r2, #65	; 0x41
 80012ea:	2120      	movs	r1, #32
 80012ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	2100      	movs	r1, #0
 80012f4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e04b      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	0013      	movs	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	f000 f932 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e03e      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2210      	movs	r2, #16
 800131a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2220      	movs	r2, #32
 8001322:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d119      	bne.n	8001360 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	01c9      	lsls	r1, r1, #7
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	0013      	movs	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	2120      	movs	r1, #32
 800134c:	f000 f910 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e01c      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2220      	movs	r2, #32
 800135e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d900      	bls.n	8001370 <HAL_I2C_IsDeviceReady+0x204>
 800136e:	e72e      	b.n	80011ce <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2241      	movs	r2, #65	; 0x41
 8001374:	2120      	movs	r1, #32
 8001376:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	2220      	movs	r2, #32
 800137e:	431a      	orrs	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	2100      	movs	r1, #0
 800138a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001390:	2302      	movs	r3, #2
  }
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b008      	add	sp, #32
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	02002000 	.word	0x02002000

080013a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	000c      	movs	r4, r1
 80013aa:	0010      	movs	r0, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	250a      	movs	r5, #10
 80013b0:	197b      	adds	r3, r7, r5
 80013b2:	1c22      	adds	r2, r4, #0
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	2308      	movs	r3, #8
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	1c0a      	adds	r2, r1, #0
 80013c2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	045c      	lsls	r4, r3, #17
 80013ce:	197b      	adds	r3, r7, r5
 80013d0:	8819      	ldrh	r1, [r3, #0]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <I2C_RequestMemoryWrite+0xc4>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	0023      	movs	r3, r4
 80013da:	f000 f9e9 	bl	80017b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 f902 	bl	80015ee <I2C_WaitOnTXISFlagUntilTimeout>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e033      	b.n	800145a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013fa:	2308      	movs	r3, #8
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
 8001408:	e019      	b.n	800143e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800140a:	2308      	movs	r3, #8
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	0018      	movs	r0, r3
 8001424:	f000 f8e3 	bl	80015ee <I2C_WaitOnTXISFlagUntilTimeout>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e014      	b.n	800145a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001430:	2308      	movs	r3, #8
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	0013      	movs	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	f000 f890 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	80002000 	.word	0x80002000

08001468 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	000c      	movs	r4, r1
 8001472:	0010      	movs	r0, r2
 8001474:	0019      	movs	r1, r3
 8001476:	250a      	movs	r5, #10
 8001478:	197b      	adds	r3, r7, r5
 800147a:	1c22      	adds	r2, r4, #0
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	2308      	movs	r3, #8
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	1c02      	adds	r2, r0, #0
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	1c0a      	adds	r2, r1, #0
 800148a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800148c:	1dbb      	adds	r3, r7, #6
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	197b      	adds	r3, r7, r5
 8001494:	8819      	ldrh	r1, [r3, #0]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <I2C_RequestMemoryRead+0xc0>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	f000 f987 	bl	80017b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	6a39      	ldr	r1, [r7, #32]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 f8a0 	bl	80015ee <I2C_WaitOnTXISFlagUntilTimeout>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e033      	b.n	800151e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014b6:	1dbb      	adds	r3, r7, #6
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014be:	2308      	movs	r3, #8
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
 80014cc:	e019      	b.n	8001502 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014ce:	2308      	movs	r3, #8
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	6a39      	ldr	r1, [r7, #32]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f881 	bl	80015ee <I2C_WaitOnTXISFlagUntilTimeout>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e014      	b.n	800151e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f4:	2308      	movs	r3, #8
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	0013      	movs	r3, r2
 800150c:	2200      	movs	r2, #0
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	f000 f82e 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d001      	beq.n	800151c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bdb0      	pop	{r4, r5, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	80002000 	.word	0x80002000

0800152c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d103      	bne.n	800154a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	2b01      	cmp	r3, #1
 8001556:	d007      	beq.n	8001568 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	619a      	str	r2, [r3, #24]
  }
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	e021      	b.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	d01e      	beq.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001588:	f7ff f8b8 	bl	80006fc <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d302      	bcc.n	800159e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d113      	bne.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	2220      	movs	r2, #32
 80015a4:	431a      	orrs	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2241      	movs	r2, #65	; 0x41
 80015ae:	2120      	movs	r1, #32
 80015b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2242      	movs	r2, #66	; 0x42
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4013      	ands	r3, r2
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	425a      	negs	r2, r3
 80015d6:	4153      	adcs	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	001a      	movs	r2, r3
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d0ce      	beq.n	8001582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b004      	add	sp, #16
 80015ec:	bd80      	pop	{r7, pc}

080015ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015fa:	e02b      	b.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f86e 	bl	80016e4 <I2C_IsAcknowledgeFailed>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d001      	beq.n	8001610 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e029      	b.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3301      	adds	r3, #1
 8001614:	d01e      	beq.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7ff f871 	bl	80006fc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d113      	bne.n	8001654 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	2220      	movs	r2, #32
 8001632:	431a      	orrs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2241      	movs	r2, #65	; 0x41
 800163c:	2120      	movs	r1, #32
 800163e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2242      	movs	r2, #66	; 0x42
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	2100      	movs	r1, #0
 800164e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e007      	b.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d1cc      	bne.n	80015fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b004      	add	sp, #16
 800166a:	bd80      	pop	{r7, pc}

0800166c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001678:	e028      	b.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f82f 	bl	80016e4 <I2C_IsAcknowledgeFailed>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e026      	b.n	80016dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168e:	f7ff f835 	bl	80006fc <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d302      	bcc.n	80016a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d113      	bne.n	80016cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	2220      	movs	r2, #32
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2241      	movs	r2, #65	; 0x41
 80016b4:	2120      	movs	r1, #32
 80016b6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2242      	movs	r2, #66	; 0x42
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	2100      	movs	r1, #0
 80016c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e007      	b.n	80016dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2220      	movs	r2, #32
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d1cf      	bne.n	800167a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2210      	movs	r2, #16
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d151      	bne.n	80017a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fe:	e021      	b.n	8001744 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	d01e      	beq.n	8001744 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7fe fff9 	bl	80006fc <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_IsAcknowledgeFailed+0x38>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d113      	bne.n	8001744 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	2220      	movs	r2, #32
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2241      	movs	r2, #65	; 0x41
 800172c:	2120      	movs	r1, #32
 800172e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2242      	movs	r2, #66	; 0x42
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e02f      	b.n	80017a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2220      	movs	r2, #32
 800174c:	4013      	ands	r3, r2
 800174e:	2b20      	cmp	r3, #32
 8001750:	d1d6      	bne.n	8001700 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2210      	movs	r2, #16
 8001758:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2220      	movs	r2, #32
 8001760:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fee1 	bl	800152c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	490d      	ldr	r1, [pc, #52]	; (80017ac <I2C_IsAcknowledgeFailed+0xc8>)
 8001776:	400a      	ands	r2, r1
 8001778:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	2204      	movs	r2, #4
 8001780:	431a      	orrs	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2241      	movs	r2, #65	; 0x41
 800178a:	2120      	movs	r1, #32
 800178c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2242      	movs	r2, #66	; 0x42
 8001792:	2100      	movs	r1, #0
 8001794:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	2100      	movs	r1, #0
 800179c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	fe00e800 	.word	0xfe00e800

080017b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	0008      	movs	r0, r1
 80017ba:	0011      	movs	r1, r2
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	240a      	movs	r4, #10
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	2009      	movs	r0, #9
 80017c8:	183b      	adds	r3, r7, r0
 80017ca:	1c0a      	adds	r2, r1, #0
 80017cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6a3a      	ldr	r2, [r7, #32]
 80017d6:	0d51      	lsrs	r1, r2, #21
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	00d2      	lsls	r2, r2, #3
 80017dc:	400a      	ands	r2, r1
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <I2C_TransferConfig+0x68>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	43d2      	mvns	r2, r2
 80017e4:	401a      	ands	r2, r3
 80017e6:	0011      	movs	r1, r2
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	059b      	lsls	r3, r3, #22
 80017ee:	0d9a      	lsrs	r2, r3, #22
 80017f0:	183b      	adds	r3, r7, r0
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	0418      	lsls	r0, r3, #16
 80017f6:	23ff      	movs	r3, #255	; 0xff
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	4003      	ands	r3, r0
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	431a      	orrs	r2, r3
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b005      	add	sp, #20
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	03ff63ff 	.word	0x03ff63ff

0800181c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2241      	movs	r2, #65	; 0x41
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b20      	cmp	r3, #32
 8001830:	d138      	bne.n	80018a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800183c:	2302      	movs	r3, #2
 800183e:	e032      	b.n	80018a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2241      	movs	r2, #65	; 0x41
 800184c:	2124      	movs	r1, #36	; 0x24
 800184e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4911      	ldr	r1, [pc, #68]	; (80018b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800186c:	400a      	ands	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2241      	movs	r2, #65	; 0x41
 8001894:	2120      	movs	r1, #32
 8001896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	ffffefff 	.word	0xffffefff

080018b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2241      	movs	r2, #65	; 0x41
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d139      	bne.n	800193e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2240      	movs	r2, #64	; 0x40
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e033      	b.n	8001940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	2101      	movs	r1, #1
 80018de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2241      	movs	r2, #65	; 0x41
 80018e4:	2124      	movs	r1, #36	; 0x24
 80018e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	438a      	bics	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2241      	movs	r2, #65	; 0x41
 800192e:	2120      	movs	r1, #32
 8001930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800193e:	2302      	movs	r3, #2
  }
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}
 8001948:	fffff0ff 	.word	0xfffff0ff

0800194c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d11f      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	0013      	movs	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	189b      	adds	r3, r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4912      	ldr	r1, [pc, #72]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800197e:	0018      	movs	r0, r3
 8001980:	f7fe fbc0 	bl	8000104 <__udivsi3>
 8001984:	0003      	movs	r3, r0
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198a:	e008      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3b01      	subs	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e001      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e009      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	401a      	ands	r2, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d0ed      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40007000 	.word	0x40007000
 80019c0:	fffff9ff 	.word	0xfffff9ff
 80019c4:	20000008 	.word	0x20000008
 80019c8:	000f4240 	.word	0x000f4240

080019cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	23e0      	movs	r3, #224	; 0xe0
 80019d6:	01db      	lsls	r3, r3, #7
 80019d8:	4013      	ands	r3, r2
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e304      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d100      	bne.n	8001a02 <HAL_RCC_OscConfig+0x1e>
 8001a00:	e07c      	b.n	8001afc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a02:	4bc3      	ldr	r3, [pc, #780]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2238      	movs	r2, #56	; 0x38
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0c:	4bc0      	ldr	r3, [pc, #768]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2203      	movs	r2, #3
 8001a12:	4013      	ands	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b10      	cmp	r3, #16
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3e>
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_OscConfig+0x44>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d10b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	4bb9      	ldr	r3, [pc, #740]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	029b      	lsls	r3, r3, #10
 8001a30:	4013      	ands	r3, r2
 8001a32:	d062      	beq.n	8001afa <HAL_RCC_OscConfig+0x116>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d15e      	bne.n	8001afa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e2df      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x78>
 8001a4c:	4bb0      	ldr	r3, [pc, #704]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4baf      	ldr	r3, [pc, #700]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0249      	lsls	r1, r1, #9
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e020      	b.n	8001a9e <HAL_RCC_OscConfig+0xba>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	23a0      	movs	r3, #160	; 0xa0
 8001a62:	02db      	lsls	r3, r3, #11
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10e      	bne.n	8001a86 <HAL_RCC_OscConfig+0xa2>
 8001a68:	4ba9      	ldr	r3, [pc, #676]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	02c9      	lsls	r1, r1, #11
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	4ba6      	ldr	r3, [pc, #664]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4ba5      	ldr	r3, [pc, #660]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0249      	lsls	r1, r1, #9
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0xba>
 8001a86:	4ba2      	ldr	r3, [pc, #648]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4ba1      	ldr	r3, [pc, #644]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	49a1      	ldr	r1, [pc, #644]	; (8001d14 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	4b9f      	ldr	r3, [pc, #636]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b9e      	ldr	r3, [pc, #632]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	499f      	ldr	r1, [pc, #636]	; (8001d18 <HAL_RCC_OscConfig+0x334>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d014      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fe29 	bl	80006fc <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fe24 	bl	80006fc <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e29e      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac2:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xcc>
 8001ace:	e015      	b.n	8001afc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fe14 	bl	80006fc <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ada:	f7fe fe0f 	bl	80006fc <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e289      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aec:	4b88      	ldr	r3, [pc, #544]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0xf6>
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x124>
 8001b06:	e099      	b.n	8001c3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2238      	movs	r2, #56	; 0x38
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b12:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2203      	movs	r2, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0x144>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d002      	beq.n	8001b2e <HAL_RCC_OscConfig+0x14a>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d135      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x162>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e25c      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a74      	ldr	r2, [pc, #464]	; (8001d1c <HAL_RCC_OscConfig+0x338>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	021a      	lsls	r2, r3, #8
 8001b56:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b62:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x33c>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0adb      	lsrs	r3, r3, #11
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	4a68      	ldr	r2, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x340>)
 8001b82:	40da      	lsrs	r2, r3
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x344>)
 8001b86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x348>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fd5b 	bl	8000648 <HAL_InitTick>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d051      	beq.n	8001c3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e232      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d030      	beq.n	8001c04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5e      	ldr	r2, [pc, #376]	; (8001d20 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bb6:	4b56      	ldr	r3, [pc, #344]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0049      	lsls	r1, r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fd9a 	bl	80006fc <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bce:	f7fe fd95 	bl	80006fc <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e20f      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_RCC_OscConfig+0x338>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	021a      	lsls	r2, r3, #8
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	e01b      	b.n	8001c3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	4949      	ldr	r1, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x34c>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe fd74 	bl	80006fc <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7fe fd6f 	bl	80006fc <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1e9      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2c:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4013      	ands	r3, r2
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x236>
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	d047      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b18      	cmp	r3, #24
 8001c50:	d10a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d03c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2f2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d138      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e1cb      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d019      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe fd3e 	bl	80006fc <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7fe fd39 	bl	80006fc <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1b3      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0f1      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2a2>
 8001ca2:	e018      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fd24 	bl	80006fc <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cba:	f7fe fd1f 	bl	80006fc <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e199      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f1      	bne.n	8001cba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2fe>
 8001ce0:	e0c6      	b.n	8001e70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	; 0x38
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d11e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <HAL_RCC_OscConfig+0x31e>
 8001d00:	e0b6      	b.n	8001e70 <HAL_RCC_OscConfig+0x48c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d000      	beq.n	8001d0c <HAL_RCC_OscConfig+0x328>
 8001d0a:	e0b1      	b.n	8001e70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e177      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	fffeffff 	.word	0xfffeffff
 8001d18:	fffbffff 	.word	0xfffbffff
 8001d1c:	ffff80ff 	.word	0xffff80ff
 8001d20:	ffffc7ff 	.word	0xffffc7ff
 8001d24:	00f42400 	.word	0x00f42400
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d34:	4bb4      	ldr	r3, [pc, #720]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	055b      	lsls	r3, r3, #21
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x360>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x362>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d011      	beq.n	8001d6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4baf      	ldr	r3, [pc, #700]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4e:	4bae      	ldr	r3, [pc, #696]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0549      	lsls	r1, r1, #21
 8001d54:	430a      	orrs	r2, r1
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d58:	4bab      	ldr	r3, [pc, #684]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d66:	231f      	movs	r3, #31
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6e:	4ba7      	ldr	r3, [pc, #668]	; (800200c <HAL_RCC_OscConfig+0x628>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d11a      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7a:	4ba4      	ldr	r3, [pc, #656]	; (800200c <HAL_RCC_OscConfig+0x628>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4ba3      	ldr	r3, [pc, #652]	; (800200c <HAL_RCC_OscConfig+0x628>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0049      	lsls	r1, r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fcb8 	bl	80006fc <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7fe fcb3 	bl	80006fc <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e12d      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da4:	4b99      	ldr	r3, [pc, #612]	; (800200c <HAL_RCC_OscConfig+0x628>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3e2>
 8001db8:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dc4:	e01c      	b.n	8001e00 <HAL_RCC_OscConfig+0x41c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x404>
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd2:	4b8d      	ldr	r3, [pc, #564]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dde:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0x41c>
 8001de8:	4b87      	ldr	r3, [pc, #540]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d014      	beq.n	8001e32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fc78 	bl	80006fc <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe fc73 	bl	80006fc <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	4a7c      	ldr	r2, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x62c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0ec      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x42e>
 8001e30:	e013      	b.n	8001e5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe fc63 	bl	80006fc <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e3a:	e009      	b.n	8001e50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7fe fc5e 	bl	80006fc <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x62c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0d7      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e5a:	231f      	movs	r3, #31
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e68:	4b67      	ldr	r3, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e6a:	496a      	ldr	r1, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x630>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x496>
 8001e78:	e0c1      	b.n	8001ffe <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2238      	movs	r2, #56	; 0x38
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d100      	bne.n	8001e88 <HAL_RCC_OscConfig+0x4a4>
 8001e86:	e081      	b.n	8001f8c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d156      	bne.n	8001f3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001e96:	4960      	ldr	r1, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x634>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fc2e 	bl	80006fc <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe fc29 	bl	80006fc <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0a3      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	049b      	lsls	r3, r3, #18
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_RCC_OscConfig+0x638>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0449      	lsls	r1, r1, #17
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0549      	lsls	r1, r1, #21
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe fbf2 	bl	80006fc <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fbed 	bl	80006fc <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e067      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	049b      	lsls	r3, r3, #18
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x53a>
 8001f3c:	e05f      	b.n	8001ffe <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f44:	4934      	ldr	r1, [pc, #208]	; (8002018 <HAL_RCC_OscConfig+0x634>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f50:	2103      	movs	r1, #3
 8001f52:	438a      	bics	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f5c:	4930      	ldr	r1, [pc, #192]	; (8002020 <HAL_RCC_OscConfig+0x63c>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe fbcb 	bl	80006fc <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fbc6 	bl	80006fc <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e040      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	049b      	lsls	r3, r3, #18
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x588>
 8001f8a:	e038      	b.n	8001ffe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e033      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x624>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d126      	bne.n	8001ffa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2270      	movs	r2, #112	; 0x70
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d11f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	23fe      	movs	r3, #254	; 0xfe
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	23f8      	movs	r3, #248	; 0xf8
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10e      	bne.n	8001ffa <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	23e0      	movs	r3, #224	; 0xe0
 8001fe0:	051b      	lsls	r3, r3, #20
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0f5b      	lsrs	r3, r3, #29
 8001ff0:	075a      	lsls	r2, r3, #29
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b008      	add	sp, #32
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	00001388 	.word	0x00001388
 8002014:	efffffff 	.word	0xefffffff
 8002018:	feffffff 	.word	0xfeffffff
 800201c:	11c1808c 	.word	0x11c1808c
 8002020:	eefeffff 	.word	0xeefeffff

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0e9      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2207      	movs	r2, #7
 800203e:	4013      	ands	r3, r2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d91e      	bls.n	8002084 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2207      	movs	r2, #7
 800204c:	4393      	bics	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002058:	f7fe fb50 	bl	80006fc <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002060:	e009      	b.n	8002076 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7fe fb4b 	bl	80006fc <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0ca      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2207      	movs	r2, #7
 800207c:	4013      	ands	r3, r2
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d015      	beq.n	80020ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d006      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	21e0      	movs	r1, #224	; 0xe0
 80020a0:	01c9      	lsls	r1, r1, #7
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_RCC_ClockConfig+0x1fc>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d057      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e097      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	049b      	lsls	r3, r3, #18
 80020ec:	4013      	ands	r3, r2
 80020ee:	d11f      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e08b      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4013      	ands	r3, r2
 8002106:	d113      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e07f      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d106      	bne.n	8002122 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002114:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e074      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e06d      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2207      	movs	r2, #7
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fada 	bl	80006fc <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	e009      	b.n	8002162 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7fe fad5 	bl	80006fc <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e054      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	; 0x38
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2207      	movs	r2, #7
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d21e      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2207      	movs	r2, #7
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002194:	f7fe fab2 	bl	80006fc <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219e:	f7fe faad 	bl	80006fc <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e02c      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2207      	movs	r2, #7
 80021b8:	4013      	ands	r3, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_RCC_ClockConfig+0x200>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	f000 f829 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021e2:	0001      	movs	r1, r0
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	220f      	movs	r2, #15
 80021ec:	401a      	ands	r2, r3
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x204>)
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	58d3      	ldr	r3, [r2, r3]
 80021f4:	221f      	movs	r2, #31
 80021f6:	4013      	ands	r3, r2
 80021f8:	000a      	movs	r2, r1
 80021fa:	40da      	lsrs	r2, r3
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x208>)
 80021fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x20c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fa1f 	bl	8000648 <HAL_InitTick>
 800220a:	0003      	movs	r3, r0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40022000 	.word	0x40022000
 8002218:	00001388 	.word	0x00001388
 800221c:	40021000 	.word	0x40021000
 8002220:	fffff0ff 	.word	0xfffff0ff
 8002224:	ffff8fff 	.word	0xffff8fff
 8002228:	08004660 	.word	0x08004660
 800222c:	20000008 	.word	0x20000008
 8002230:	20000000 	.word	0x20000000

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2238      	movs	r2, #56	; 0x38
 8002240:	4013      	ands	r3, r2
 8002242:	d10f      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0adb      	lsrs	r3, r3, #11
 800224a:	2207      	movs	r2, #7
 800224c:	4013      	ands	r3, r2
 800224e:	2201      	movs	r2, #1
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	4835      	ldr	r0, [pc, #212]	; (8002330 <HAL_RCC_GetSysClockFreq+0xfc>)
 800225a:	f7fd ff53 	bl	8000104 <__udivsi3>
 800225e:	0003      	movs	r3, r0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e05d      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2238      	movs	r2, #56	; 0x38
 800226a:	4013      	ands	r3, r2
 800226c:	2b08      	cmp	r3, #8
 800226e:	d102      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_GetSysClockFreq+0x100>)
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e054      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2238      	movs	r2, #56	; 0x38
 800227c:	4013      	ands	r3, r2
 800227e:	2b10      	cmp	r3, #16
 8002280:	d138      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2203      	movs	r2, #3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	2207      	movs	r2, #7
 8002294:	4013      	ands	r3, r2
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4824      	ldr	r0, [pc, #144]	; (8002334 <HAL_RCC_GetSysClockFreq+0x100>)
 80022a4:	f7fd ff2e 	bl	8000104 <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	227f      	movs	r2, #127	; 0x7f
 80022b4:	4013      	ands	r3, r2
 80022b6:	434b      	muls	r3, r1
 80022b8:	617b      	str	r3, [r7, #20]
        break;
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	481c      	ldr	r0, [pc, #112]	; (8002330 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022c0:	f7fd ff20 	bl	8000104 <__udivsi3>
 80022c4:	0003      	movs	r3, r0
 80022c6:	0019      	movs	r1, r3
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	227f      	movs	r2, #127	; 0x7f
 80022d0:	4013      	ands	r3, r2
 80022d2:	434b      	muls	r3, r1
 80022d4:	617b      	str	r3, [r7, #20]
        break;
 80022d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0f5b      	lsrs	r3, r3, #29
 80022de:	2207      	movs	r2, #7
 80022e0:	4013      	ands	r3, r2
 80022e2:	3301      	adds	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7fd ff0b 	bl	8000104 <__udivsi3>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e015      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2238      	movs	r2, #56	; 0x38
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d103      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2238      	movs	r2, #56	; 0x38
 800230e:	4013      	ands	r3, r2
 8002310:	2b18      	cmp	r3, #24
 8002312:	d103      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002314:	23fa      	movs	r3, #250	; 0xfa
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e001      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002320:	693b      	ldr	r3, [r7, #16]
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b006      	add	sp, #24
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	40021000 	.word	0x40021000
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCC_GetHCLKFreq+0x10>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	20000008 	.word	0x20000008

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002350:	f7ff fff2 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002354:	0004      	movs	r4, r0
 8002356:	f7ff fb39 	bl	80019cc <LL_RCC_GetAPB1Prescaler>
 800235a:	0003      	movs	r3, r0
 800235c:	0b1a      	lsrs	r2, r3, #12
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	58d3      	ldr	r3, [r2, r3]
 8002364:	221f      	movs	r2, #31
 8002366:	4013      	ands	r3, r2
 8002368:	40dc      	lsrs	r4, r3
 800236a:	0023      	movs	r3, r4
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	080046a0 	.word	0x080046a0

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002380:	2313      	movs	r3, #19
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002388:	2312      	movs	r3, #18
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	d100      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800239c:	e0a4      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2311      	movs	r3, #17
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4bc3      	ldr	r3, [pc, #780]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	4bc0      	ldr	r3, [pc, #768]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b6:	4bbf      	ldr	r3, [pc, #764]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0549      	lsls	r1, r1, #21
 80023bc:	430a      	orrs	r2, r1
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
 80023c0:	4bbc      	ldr	r3, [pc, #752]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2311      	movs	r3, #17
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d6:	4bb8      	ldr	r3, [pc, #736]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4bb7      	ldr	r3, [pc, #732]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0049      	lsls	r1, r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e4:	f7fe f98a 	bl	80006fc <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ec:	e00b      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7fe f985 	bl	80006fc <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d904      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80023fc:	2313      	movs	r3, #19
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2203      	movs	r2, #3
 8002402:	701a      	strb	r2, [r3, #0]
        break;
 8002404:	e005      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002406:	4bac      	ldr	r3, [pc, #688]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d0ed      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002412:	2313      	movs	r3, #19
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d154      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241c:	4ba5      	ldr	r3, [pc, #660]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d014      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	4a9f      	ldr	r2, [pc, #636]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800243e:	4013      	ands	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002442:	4b9c      	ldr	r3, [pc, #624]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002446:	4b9b      	ldr	r3, [pc, #620]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0249      	lsls	r1, r1, #9
 800244c:	430a      	orrs	r2, r1
 800244e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002450:	4b98      	ldr	r3, [pc, #608]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002454:	4b97      	ldr	r3, [pc, #604]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	499a      	ldr	r1, [pc, #616]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002458:	400a      	ands	r2, r1
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800245c:	4b95      	ldr	r3, [pc, #596]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d016      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe f947 	bl	80006fc <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	e00c      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe f942 	bl	80006fc <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a91      	ldr	r2, [pc, #580]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d904      	bls.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002484:	2313      	movs	r3, #19
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2203      	movs	r2, #3
 800248a:	701a      	strb	r2, [r3, #0]
            break;
 800248c:	e004      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d0ed      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002498:	2313      	movs	r3, #19
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a2:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	4a85      	ldr	r2, [pc, #532]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b0:	4b80      	ldr	r3, [pc, #512]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80024b6:	e00c      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b8:	2312      	movs	r3, #18
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2213      	movs	r2, #19
 80024be:	18ba      	adds	r2, r7, r2
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e005      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c6:	2312      	movs	r3, #18
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2213      	movs	r2, #19
 80024cc:	18ba      	adds	r2, r7, r2
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d2:	2311      	movs	r3, #17
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024e0:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e2:	4979      	ldr	r1, [pc, #484]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	2203      	movs	r2, #3
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	430a      	orrs	r2, r1
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	220c      	movs	r2, #12
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002520:	430a      	orrs	r2, r1
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2220      	movs	r2, #32
 800252a:	4013      	ands	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002534:	4013      	ands	r3, r2
 8002536:	0019      	movs	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253e:	430a      	orrs	r2, r1
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d009      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254e:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	4a5f      	ldr	r2, [pc, #380]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800255e:	430a      	orrs	r2, r1
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4013      	ands	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	4013      	ands	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258c:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	4a51      	ldr	r2, [pc, #324]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259c:	430a      	orrs	r2, r1
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	01db      	lsls	r3, r3, #7
 80025a8:	4013      	ands	r3, r2
 80025aa:	d015      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ac:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	0899      	lsrs	r1, r3, #2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ba:	430a      	orrs	r2, r1
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	05db      	lsls	r3, r3, #23
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ca:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0249      	lsls	r1, r1, #9
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	031b      	lsls	r3, r3, #12
 80025e0:	4013      	ands	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4393      	bics	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	039b      	lsls	r3, r3, #14
 8002600:	4013      	ands	r3, r2
 8002602:	d016      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	430a      	orrs	r2, r1
 8002616:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	03db      	lsls	r3, r3, #15
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	0449      	lsls	r1, r1, #17
 800262e:	430a      	orrs	r2, r1
 8002630:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	03db      	lsls	r3, r3, #15
 800263a:	4013      	ands	r3, r2
 800263c:	d016      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264e:	430a      	orrs	r2, r1
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	045b      	lsls	r3, r3, #17
 800265a:	429a      	cmp	r2, r3
 800265c:	d106      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0449      	lsls	r1, r1, #17
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d016      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002688:	430a      	orrs	r2, r1
 800268a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	01db      	lsls	r3, r3, #7
 8002694:	429a      	cmp	r2, r3
 8002696:	d106      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	0249      	lsls	r1, r1, #9
 80026a2:	430a      	orrs	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80026a6:	2312      	movs	r3, #18
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b006      	add	sp, #24
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40007000 	.word	0x40007000
 80026bc:	fffffcff 	.word	0xfffffcff
 80026c0:	fffeffff 	.word	0xfffeffff
 80026c4:	00001388 	.word	0x00001388
 80026c8:	efffffff 	.word	0xefffffff
 80026cc:	fffff3ff 	.word	0xfffff3ff
 80026d0:	fff3ffff 	.word	0xfff3ffff
 80026d4:	ffcfffff 	.word	0xffcfffff
 80026d8:	ffffcfff 	.word	0xffffcfff
 80026dc:	ffbfffff 	.word	0xffbfffff
 80026e0:	feffffff 	.word	0xfeffffff
 80026e4:	ffff3fff 	.word	0xffff3fff

080026e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e046      	b.n	8002788 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	589b      	ldr	r3, [r3, r2]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	227c      	movs	r2, #124	; 0x7c
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f001 fecc 	bl	80044ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	2124      	movs	r1, #36	; 0x24
 800271a:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f830 	bl	8002794 <UART_SetConfig>
 8002734:	0003      	movs	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e024      	b.n	8002788 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0018      	movs	r0, r3
 800274a:	f001 f90d 	bl	8003968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	490d      	ldr	r1, [pc, #52]	; (8002790 <HAL_UART_Init+0xa8>)
 800275a:	400a      	ands	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	212a      	movs	r1, #42	; 0x2a
 800276a:	438a      	bics	r2, r1
 800276c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f001 f9a5 	bl	8003ad0 <UART_CheckIdleState>
 8002786:	0003      	movs	r3, r0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	ffffb7ff 	.word	0xffffb7ff

08002794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b09f      	sub	sp, #124	; 0x7c
 8002798:	af00      	add	r7, sp, #0
 800279a:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800279c:	2300      	movs	r3, #0
 800279e:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80027a0:	2313      	movs	r3, #19
 80027a2:	2258      	movs	r2, #88	; 0x58
 80027a4:	18ba      	adds	r2, r7, r2
 80027a6:	18d2      	adds	r2, r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	431a      	orrs	r2, r3
 80027c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
  tmpreg |= (uint32_t)huart->FifoMode;
 80027c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	4313      	orrs	r3, r2
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4bba      	ldr	r3, [pc, #744]	; (8002ac4 <UART_SetConfig+0x330>)
 80027da:	401a      	ands	r2, r3
 80027dc:	0011      	movs	r1, r2
 80027de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4bb6      	ldr	r3, [pc, #728]	; (8002ac8 <UART_SetConfig+0x334>)
 80027f0:	401a      	ands	r2, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	68d9      	ldr	r1, [r3, #12]
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	0003      	movs	r3, r0
 80027fe:	430b      	orrs	r3, r1
 8002800:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4baf      	ldr	r3, [pc, #700]	; (8002acc <UART_SetConfig+0x338>)
 800280e:	429a      	cmp	r2, r3
 8002810:	d004      	beq.n	800281c <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	6a1a      	ldr	r2, [r3, #32]
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	4313      	orrs	r3, r2
 800281a:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800281c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	4bab      	ldr	r3, [pc, #684]	; (8002ad0 <UART_SetConfig+0x33c>)
 8002824:	401a      	ands	r2, r3
 8002826:	0011      	movs	r1, r2
 8002828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282e:	430b      	orrs	r3, r1
 8002830:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	230f      	movs	r3, #15
 800283a:	439a      	bics	r2, r3
 800283c:	0010      	movs	r0, r2
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	0003      	movs	r3, r0
 8002848:	430b      	orrs	r3, r1
 800284a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800284c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4ba0      	ldr	r3, [pc, #640]	; (8002ad4 <UART_SetConfig+0x340>)
 8002852:	429a      	cmp	r2, r3
 8002854:	d12f      	bne.n	80028b6 <UART_SetConfig+0x122>
 8002856:	4ba0      	ldr	r3, [pc, #640]	; (8002ad8 <UART_SetConfig+0x344>)
 8002858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800285a:	2303      	movs	r3, #3
 800285c:	4013      	ands	r3, r2
 800285e:	2b01      	cmp	r3, #1
 8002860:	d013      	beq.n	800288a <UART_SetConfig+0xf6>
 8002862:	d304      	bcc.n	800286e <UART_SetConfig+0xda>
 8002864:	2b02      	cmp	r3, #2
 8002866:	d009      	beq.n	800287c <UART_SetConfig+0xe8>
 8002868:	2b03      	cmp	r3, #3
 800286a:	d015      	beq.n	8002898 <UART_SetConfig+0x104>
 800286c:	e01b      	b.n	80028a6 <UART_SetConfig+0x112>
 800286e:	231b      	movs	r3, #27
 8002870:	2258      	movs	r2, #88	; 0x58
 8002872:	18ba      	adds	r2, r7, r2
 8002874:	18d2      	adds	r2, r2, r3
 8002876:	2300      	movs	r3, #0
 8002878:	7013      	strb	r3, [r2, #0]
 800287a:	e0b4      	b.n	80029e6 <UART_SetConfig+0x252>
 800287c:	231b      	movs	r3, #27
 800287e:	2258      	movs	r2, #88	; 0x58
 8002880:	18ba      	adds	r2, r7, r2
 8002882:	18d2      	adds	r2, r2, r3
 8002884:	2302      	movs	r3, #2
 8002886:	7013      	strb	r3, [r2, #0]
 8002888:	e0ad      	b.n	80029e6 <UART_SetConfig+0x252>
 800288a:	231b      	movs	r3, #27
 800288c:	2258      	movs	r2, #88	; 0x58
 800288e:	18ba      	adds	r2, r7, r2
 8002890:	18d2      	adds	r2, r2, r3
 8002892:	2304      	movs	r3, #4
 8002894:	7013      	strb	r3, [r2, #0]
 8002896:	e0a6      	b.n	80029e6 <UART_SetConfig+0x252>
 8002898:	231b      	movs	r3, #27
 800289a:	2258      	movs	r2, #88	; 0x58
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	18d2      	adds	r2, r2, r3
 80028a0:	2308      	movs	r3, #8
 80028a2:	7013      	strb	r3, [r2, #0]
 80028a4:	e09f      	b.n	80029e6 <UART_SetConfig+0x252>
 80028a6:	231b      	movs	r3, #27
 80028a8:	2258      	movs	r2, #88	; 0x58
 80028aa:	18ba      	adds	r2, r7, r2
 80028ac:	18d2      	adds	r2, r2, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	7013      	strb	r3, [r2, #0]
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	e097      	b.n	80029e6 <UART_SetConfig+0x252>
 80028b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <UART_SetConfig+0x348>)
 80028bc:	429a      	cmp	r2, r3
 80028be:	d132      	bne.n	8002926 <UART_SetConfig+0x192>
 80028c0:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <UART_SetConfig+0x344>)
 80028c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028c4:	230c      	movs	r3, #12
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d016      	beq.n	80028fa <UART_SetConfig+0x166>
 80028cc:	d802      	bhi.n	80028d4 <UART_SetConfig+0x140>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <UART_SetConfig+0x14a>
 80028d2:	e020      	b.n	8002916 <UART_SetConfig+0x182>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d009      	beq.n	80028ec <UART_SetConfig+0x158>
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	d015      	beq.n	8002908 <UART_SetConfig+0x174>
 80028dc:	e01b      	b.n	8002916 <UART_SetConfig+0x182>
 80028de:	231b      	movs	r3, #27
 80028e0:	2258      	movs	r2, #88	; 0x58
 80028e2:	18ba      	adds	r2, r7, r2
 80028e4:	18d2      	adds	r2, r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	7013      	strb	r3, [r2, #0]
 80028ea:	e07c      	b.n	80029e6 <UART_SetConfig+0x252>
 80028ec:	231b      	movs	r3, #27
 80028ee:	2258      	movs	r2, #88	; 0x58
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	18d2      	adds	r2, r2, r3
 80028f4:	2302      	movs	r3, #2
 80028f6:	7013      	strb	r3, [r2, #0]
 80028f8:	e075      	b.n	80029e6 <UART_SetConfig+0x252>
 80028fa:	231b      	movs	r3, #27
 80028fc:	2258      	movs	r2, #88	; 0x58
 80028fe:	18ba      	adds	r2, r7, r2
 8002900:	18d2      	adds	r2, r2, r3
 8002902:	2304      	movs	r3, #4
 8002904:	7013      	strb	r3, [r2, #0]
 8002906:	e06e      	b.n	80029e6 <UART_SetConfig+0x252>
 8002908:	231b      	movs	r3, #27
 800290a:	2258      	movs	r2, #88	; 0x58
 800290c:	18ba      	adds	r2, r7, r2
 800290e:	18d2      	adds	r2, r2, r3
 8002910:	2308      	movs	r3, #8
 8002912:	7013      	strb	r3, [r2, #0]
 8002914:	e067      	b.n	80029e6 <UART_SetConfig+0x252>
 8002916:	231b      	movs	r3, #27
 8002918:	2258      	movs	r2, #88	; 0x58
 800291a:	18ba      	adds	r2, r7, r2
 800291c:	18d2      	adds	r2, r2, r3
 800291e:	2310      	movs	r3, #16
 8002920:	7013      	strb	r3, [r2, #0]
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	e05f      	b.n	80029e6 <UART_SetConfig+0x252>
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <UART_SetConfig+0x34c>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d106      	bne.n	800293e <UART_SetConfig+0x1aa>
 8002930:	231b      	movs	r3, #27
 8002932:	2258      	movs	r2, #88	; 0x58
 8002934:	18ba      	adds	r2, r7, r2
 8002936:	18d2      	adds	r2, r2, r3
 8002938:	2300      	movs	r3, #0
 800293a:	7013      	strb	r3, [r2, #0]
 800293c:	e053      	b.n	80029e6 <UART_SetConfig+0x252>
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <UART_SetConfig+0x350>)
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <UART_SetConfig+0x1c2>
 8002948:	231b      	movs	r3, #27
 800294a:	2258      	movs	r2, #88	; 0x58
 800294c:	18ba      	adds	r2, r7, r2
 800294e:	18d2      	adds	r2, r2, r3
 8002950:	2300      	movs	r3, #0
 8002952:	7013      	strb	r3, [r2, #0]
 8002954:	e047      	b.n	80029e6 <UART_SetConfig+0x252>
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <UART_SetConfig+0x338>)
 800295c:	429a      	cmp	r2, r3
 800295e:	d13c      	bne.n	80029da <UART_SetConfig+0x246>
 8002960:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <UART_SetConfig+0x344>)
 8002962:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002964:	23c0      	movs	r3, #192	; 0xc0
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	401a      	ands	r2, r3
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	429a      	cmp	r2, r3
 8002970:	d01d      	beq.n	80029ae <UART_SetConfig+0x21a>
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	429a      	cmp	r2, r3
 8002978:	d802      	bhi.n	8002980 <UART_SetConfig+0x1ec>
 800297a:	2a00      	cmp	r2, #0
 800297c:	d009      	beq.n	8002992 <UART_SetConfig+0x1fe>
 800297e:	e024      	b.n	80029ca <UART_SetConfig+0x236>
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	429a      	cmp	r2, r3
 8002986:	d00b      	beq.n	80029a0 <UART_SetConfig+0x20c>
 8002988:	23c0      	movs	r3, #192	; 0xc0
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	429a      	cmp	r2, r3
 800298e:	d015      	beq.n	80029bc <UART_SetConfig+0x228>
 8002990:	e01b      	b.n	80029ca <UART_SetConfig+0x236>
 8002992:	231b      	movs	r3, #27
 8002994:	2258      	movs	r2, #88	; 0x58
 8002996:	18ba      	adds	r2, r7, r2
 8002998:	18d2      	adds	r2, r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	7013      	strb	r3, [r2, #0]
 800299e:	e022      	b.n	80029e6 <UART_SetConfig+0x252>
 80029a0:	231b      	movs	r3, #27
 80029a2:	2258      	movs	r2, #88	; 0x58
 80029a4:	18ba      	adds	r2, r7, r2
 80029a6:	18d2      	adds	r2, r2, r3
 80029a8:	2302      	movs	r3, #2
 80029aa:	7013      	strb	r3, [r2, #0]
 80029ac:	e01b      	b.n	80029e6 <UART_SetConfig+0x252>
 80029ae:	231b      	movs	r3, #27
 80029b0:	2258      	movs	r2, #88	; 0x58
 80029b2:	18ba      	adds	r2, r7, r2
 80029b4:	18d2      	adds	r2, r2, r3
 80029b6:	2304      	movs	r3, #4
 80029b8:	7013      	strb	r3, [r2, #0]
 80029ba:	e014      	b.n	80029e6 <UART_SetConfig+0x252>
 80029bc:	231b      	movs	r3, #27
 80029be:	2258      	movs	r2, #88	; 0x58
 80029c0:	18ba      	adds	r2, r7, r2
 80029c2:	18d2      	adds	r2, r2, r3
 80029c4:	2308      	movs	r3, #8
 80029c6:	7013      	strb	r3, [r2, #0]
 80029c8:	e00d      	b.n	80029e6 <UART_SetConfig+0x252>
 80029ca:	231b      	movs	r3, #27
 80029cc:	2258      	movs	r2, #88	; 0x58
 80029ce:	18ba      	adds	r2, r7, r2
 80029d0:	18d2      	adds	r2, r2, r3
 80029d2:	2310      	movs	r3, #16
 80029d4:	7013      	strb	r3, [r2, #0]
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	e005      	b.n	80029e6 <UART_SetConfig+0x252>
 80029da:	231b      	movs	r3, #27
 80029dc:	2258      	movs	r2, #88	; 0x58
 80029de:	18ba      	adds	r2, r7, r2
 80029e0:	18d2      	adds	r2, r2, r3
 80029e2:	2310      	movs	r3, #16
 80029e4:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <UART_SetConfig+0x338>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <UART_SetConfig+0x260>
 80029f0:	f000 fbcc 	bl	800318c <UART_SetConfig+0x9f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029f4:	231b      	movs	r3, #27
 80029f6:	2258      	movs	r2, #88	; 0x58
 80029f8:	4694      	mov	ip, r2
 80029fa:	44bc      	add	ip, r7
 80029fc:	4463      	add	r3, ip
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d100      	bne.n	8002a06 <UART_SetConfig+0x272>
 8002a04:	e070      	b.n	8002ae8 <UART_SetConfig+0x354>
 8002a06:	dc02      	bgt.n	8002a0e <UART_SetConfig+0x27a>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <UART_SetConfig+0x288>
 8002a0c:	e15f      	b.n	8002cce <UART_SetConfig+0x53a>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d100      	bne.n	8002a14 <UART_SetConfig+0x280>
 8002a12:	e0b4      	b.n	8002b7e <UART_SetConfig+0x3ea>
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d100      	bne.n	8002a1a <UART_SetConfig+0x286>
 8002a18:	e105      	b.n	8002c26 <UART_SetConfig+0x492>
 8002a1a:	e158      	b.n	8002cce <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a1c:	f7ff fc96 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8002a20:	0002      	movs	r2, r0
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <UART_SetConfig+0x320>
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d03e      	beq.n	8002ab0 <UART_SetConfig+0x31c>
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d038      	beq.n	8002aac <UART_SetConfig+0x318>
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d032      	beq.n	8002aa8 <UART_SetConfig+0x314>
 8002a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d02c      	beq.n	8002aa4 <UART_SetConfig+0x310>
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d026      	beq.n	8002aa0 <UART_SetConfig+0x30c>
 8002a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d020      	beq.n	8002a9c <UART_SetConfig+0x308>
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d01a      	beq.n	8002a98 <UART_SetConfig+0x304>
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d014      	beq.n	8002a94 <UART_SetConfig+0x300>
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d00e      	beq.n	8002a90 <UART_SetConfig+0x2fc>
 8002a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d008      	beq.n	8002a8c <UART_SetConfig+0x2f8>
 8002a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2b0b      	cmp	r3, #11
 8002a80:	d102      	bne.n	8002a88 <UART_SetConfig+0x2f4>
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	e016      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e014      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	e012      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a90:	2340      	movs	r3, #64	; 0x40
 8002a92:	e010      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a94:	2320      	movs	r3, #32
 8002a96:	e00e      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a98:	2310      	movs	r3, #16
 8002a9a:	e00c      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	e00a      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	e008      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	e006      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	e004      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002aac:	2304      	movs	r3, #4
 8002aae:	e002      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e000      	b.n	8002ab6 <UART_SetConfig+0x322>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f7fd fb23 	bl	8000104 <__udivsi3>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002ac2:	e10b      	b.n	8002cdc <UART_SetConfig+0x548>
 8002ac4:	cfff69f3 	.word	0xcfff69f3
 8002ac8:	ffffcfff 	.word	0xffffcfff
 8002acc:	40008000 	.word	0x40008000
 8002ad0:	11fff4ff 	.word	0x11fff4ff
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40004400 	.word	0x40004400
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d043      	beq.n	8002b78 <UART_SetConfig+0x3e4>
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d03d      	beq.n	8002b74 <UART_SetConfig+0x3e0>
 8002af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d037      	beq.n	8002b70 <UART_SetConfig+0x3dc>
 8002b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d031      	beq.n	8002b6c <UART_SetConfig+0x3d8>
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d02b      	beq.n	8002b68 <UART_SetConfig+0x3d4>
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d025      	beq.n	8002b64 <UART_SetConfig+0x3d0>
 8002b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d01f      	beq.n	8002b60 <UART_SetConfig+0x3cc>
 8002b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d019      	beq.n	8002b5c <UART_SetConfig+0x3c8>
 8002b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d013      	beq.n	8002b58 <UART_SetConfig+0x3c4>
 8002b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d00d      	beq.n	8002b54 <UART_SetConfig+0x3c0>
 8002b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	2b0a      	cmp	r3, #10
 8002b3e:	d007      	beq.n	8002b50 <UART_SetConfig+0x3bc>
 8002b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b0b      	cmp	r3, #11
 8002b46:	d101      	bne.n	8002b4c <UART_SetConfig+0x3b8>
 8002b48:	4baa      	ldr	r3, [pc, #680]	; (8002df4 <UART_SetConfig+0x660>)
 8002b4a:	e016      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b4c:	4baa      	ldr	r3, [pc, #680]	; (8002df8 <UART_SetConfig+0x664>)
 8002b4e:	e014      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b50:	4baa      	ldr	r3, [pc, #680]	; (8002dfc <UART_SetConfig+0x668>)
 8002b52:	e012      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b54:	4baa      	ldr	r3, [pc, #680]	; (8002e00 <UART_SetConfig+0x66c>)
 8002b56:	e010      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b58:	4baa      	ldr	r3, [pc, #680]	; (8002e04 <UART_SetConfig+0x670>)
 8002b5a:	e00e      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b5c:	4baa      	ldr	r3, [pc, #680]	; (8002e08 <UART_SetConfig+0x674>)
 8002b5e:	e00c      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b60:	4baa      	ldr	r3, [pc, #680]	; (8002e0c <UART_SetConfig+0x678>)
 8002b62:	e00a      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b64:	4baa      	ldr	r3, [pc, #680]	; (8002e10 <UART_SetConfig+0x67c>)
 8002b66:	e008      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b68:	4baa      	ldr	r3, [pc, #680]	; (8002e14 <UART_SetConfig+0x680>)
 8002b6a:	e006      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b6c:	4baa      	ldr	r3, [pc, #680]	; (8002e18 <UART_SetConfig+0x684>)
 8002b6e:	e004      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b70:	4baa      	ldr	r3, [pc, #680]	; (8002e1c <UART_SetConfig+0x688>)
 8002b72:	e002      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b74:	4baa      	ldr	r3, [pc, #680]	; (8002e20 <UART_SetConfig+0x68c>)
 8002b76:	e000      	b.n	8002b7a <UART_SetConfig+0x3e6>
 8002b78:	4b9f      	ldr	r3, [pc, #636]	; (8002df8 <UART_SetConfig+0x664>)
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002b7c:	e0ae      	b.n	8002cdc <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b7e:	f7ff fb59 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002b82:	0002      	movs	r2, r0
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d044      	beq.n	8002c16 <UART_SetConfig+0x482>
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d03e      	beq.n	8002c12 <UART_SetConfig+0x47e>
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d038      	beq.n	8002c0e <UART_SetConfig+0x47a>
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d032      	beq.n	8002c0a <UART_SetConfig+0x476>
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d02c      	beq.n	8002c06 <UART_SetConfig+0x472>
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d026      	beq.n	8002c02 <UART_SetConfig+0x46e>
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d020      	beq.n	8002bfe <UART_SetConfig+0x46a>
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d01a      	beq.n	8002bfa <UART_SetConfig+0x466>
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d014      	beq.n	8002bf6 <UART_SetConfig+0x462>
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d00e      	beq.n	8002bf2 <UART_SetConfig+0x45e>
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b0a      	cmp	r3, #10
 8002bda:	d008      	beq.n	8002bee <UART_SetConfig+0x45a>
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b0b      	cmp	r3, #11
 8002be2:	d102      	bne.n	8002bea <UART_SetConfig+0x456>
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	e016      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e014      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	e012      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	e010      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e00e      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	e00c      	b.n	8002c18 <UART_SetConfig+0x484>
 8002bfe:	230c      	movs	r3, #12
 8002c00:	e00a      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c02:	230a      	movs	r3, #10
 8002c04:	e008      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c06:	2308      	movs	r3, #8
 8002c08:	e006      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e004      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e002      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e000      	b.n	8002c18 <UART_SetConfig+0x484>
 8002c16:	2301      	movs	r3, #1
 8002c18:	0019      	movs	r1, r3
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	f7fd fa72 	bl	8000104 <__udivsi3>
 8002c20:	0003      	movs	r3, r0
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002c24:	e05a      	b.n	8002cdc <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04b      	beq.n	8002cc6 <UART_SetConfig+0x532>
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d044      	beq.n	8002cc0 <UART_SetConfig+0x52c>
 8002c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d03d      	beq.n	8002cba <UART_SetConfig+0x526>
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d037      	beq.n	8002cb6 <UART_SetConfig+0x522>
 8002c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d030      	beq.n	8002cb0 <UART_SetConfig+0x51c>
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d02a      	beq.n	8002cac <UART_SetConfig+0x518>
 8002c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d024      	beq.n	8002ca8 <UART_SetConfig+0x514>
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	d01d      	beq.n	8002ca2 <UART_SetConfig+0x50e>
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d016      	beq.n	8002c9c <UART_SetConfig+0x508>
 8002c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d00f      	beq.n	8002c96 <UART_SetConfig+0x502>
 8002c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	d008      	beq.n	8002c90 <UART_SetConfig+0x4fc>
 8002c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b0b      	cmp	r3, #11
 8002c84:	d101      	bne.n	8002c8a <UART_SetConfig+0x4f6>
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	e01f      	b.n	8002cca <UART_SetConfig+0x536>
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	e01c      	b.n	8002cca <UART_SetConfig+0x536>
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	e019      	b.n	8002cca <UART_SetConfig+0x536>
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	e016      	b.n	8002cca <UART_SetConfig+0x536>
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	e013      	b.n	8002cca <UART_SetConfig+0x536>
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	e010      	b.n	8002cca <UART_SetConfig+0x536>
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <UART_SetConfig+0x690>)
 8002caa:	e00e      	b.n	8002cca <UART_SetConfig+0x536>
 8002cac:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <UART_SetConfig+0x694>)
 8002cae:	e00c      	b.n	8002cca <UART_SetConfig+0x536>
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	015b      	lsls	r3, r3, #5
 8002cb4:	e009      	b.n	8002cca <UART_SetConfig+0x536>
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <UART_SetConfig+0x698>)
 8002cb8:	e007      	b.n	8002cca <UART_SetConfig+0x536>
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	e004      	b.n	8002cca <UART_SetConfig+0x536>
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	e001      	b.n	8002cca <UART_SetConfig+0x536>
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
        break;
 8002ccc:	e006      	b.n	8002cdc <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002cce:	2313      	movs	r3, #19
 8002cd0:	2258      	movs	r2, #88	; 0x58
 8002cd2:	18ba      	adds	r2, r7, r2
 8002cd4:	18d2      	adds	r2, r2, r3
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	7013      	strb	r3, [r2, #0]
        break;
 8002cda:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <UART_SetConfig+0x552>
 8002ce2:	f000 fe09 	bl	80038f8 <UART_SetConfig+0x1164>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	0013      	movs	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	189a      	adds	r2, r3, r2
 8002cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d305      	bcc.n	8002d02 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d908      	bls.n	8002d14 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002d02:	2313      	movs	r3, #19
 8002d04:	2258      	movs	r2, #88	; 0x58
 8002d06:	4694      	mov	ip, r2
 8002d08:	44bc      	add	ip, r7
 8002d0a:	4463      	add	r3, ip
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	f000 fdf2 	bl	80038f8 <UART_SetConfig+0x1164>
      }
      else
      {
        switch (clocksource)
 8002d14:	231b      	movs	r3, #27
 8002d16:	2258      	movs	r2, #88	; 0x58
 8002d18:	4694      	mov	ip, r2
 8002d1a:	44bc      	add	ip, r7
 8002d1c:	4463      	add	r3, ip
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d100      	bne.n	8002d26 <UART_SetConfig+0x592>
 8002d24:	e0a9      	b.n	8002e7a <UART_SetConfig+0x6e6>
 8002d26:	dc02      	bgt.n	8002d2e <UART_SetConfig+0x59a>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <UART_SetConfig+0x5a8>
 8002d2c:	e20f      	b.n	800314e <UART_SetConfig+0x9ba>
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d100      	bne.n	8002d34 <UART_SetConfig+0x5a0>
 8002d32:	e10f      	b.n	8002f54 <UART_SetConfig+0x7c0>
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d100      	bne.n	8002d3a <UART_SetConfig+0x5a6>
 8002d38:	e192      	b.n	8003060 <UART_SetConfig+0x8cc>
 8002d3a:	e208      	b.n	800314e <UART_SetConfig+0x9ba>
        {
          case UART_CLOCKSOURCE_PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d3c:	f7ff fb06 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8002d40:	0003      	movs	r3, r0
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d44:	2300      	movs	r3, #0
 8002d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d100      	bne.n	8002d52 <UART_SetConfig+0x5be>
 8002d50:	e06e      	b.n	8002e30 <UART_SetConfig+0x69c>
 8002d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d049      	beq.n	8002dee <UART_SetConfig+0x65a>
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d042      	beq.n	8002de8 <UART_SetConfig+0x654>
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d03b      	beq.n	8002de2 <UART_SetConfig+0x64e>
 8002d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d034      	beq.n	8002ddc <UART_SetConfig+0x648>
 8002d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d02d      	beq.n	8002dd6 <UART_SetConfig+0x642>
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d026      	beq.n	8002dd0 <UART_SetConfig+0x63c>
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	d01f      	beq.n	8002dca <UART_SetConfig+0x636>
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d018      	beq.n	8002dc4 <UART_SetConfig+0x630>
 8002d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b09      	cmp	r3, #9
 8002d98:	d011      	beq.n	8002dbe <UART_SetConfig+0x62a>
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b0a      	cmp	r3, #10
 8002da0:	d00a      	beq.n	8002db8 <UART_SetConfig+0x624>
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b0b      	cmp	r3, #11
 8002da8:	d103      	bne.n	8002db2 <UART_SetConfig+0x61e>
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2400      	movs	r4, #0
 8002db0:	e040      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002db2:	2301      	movs	r3, #1
 8002db4:	2400      	movs	r4, #0
 8002db6:	e03d      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	2400      	movs	r4, #0
 8002dbc:	e03a      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	2400      	movs	r4, #0
 8002dc2:	e037      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	e034      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dca:	2310      	movs	r3, #16
 8002dcc:	2400      	movs	r4, #0
 8002dce:	e031      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	e02e      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	2400      	movs	r4, #0
 8002dda:	e02b      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002ddc:	2308      	movs	r3, #8
 8002dde:	2400      	movs	r4, #0
 8002de0:	e028      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002de2:	2306      	movs	r3, #6
 8002de4:	2400      	movs	r4, #0
 8002de6:	e025      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002de8:	2304      	movs	r3, #4
 8002dea:	2400      	movs	r4, #0
 8002dec:	e022      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002dee:	2302      	movs	r3, #2
 8002df0:	2400      	movs	r4, #0
 8002df2:	e01f      	b.n	8002e34 <UART_SetConfig+0x6a0>
 8002df4:	0000f424 	.word	0x0000f424
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	0001e848 	.word	0x0001e848
 8002e00:	0003d090 	.word	0x0003d090
 8002e04:	0007a120 	.word	0x0007a120
 8002e08:	000f4240 	.word	0x000f4240
 8002e0c:	00145855 	.word	0x00145855
 8002e10:	00186a00 	.word	0x00186a00
 8002e14:	001e8480 	.word	0x001e8480
 8002e18:	0028b0aa 	.word	0x0028b0aa
 8002e1c:	003d0900 	.word	0x003d0900
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	00000aaa 	.word	0x00000aaa
 8002e28:	00000ccc 	.word	0x00000ccc
 8002e2c:	00001555 	.word	0x00001555
 8002e30:	2301      	movs	r3, #1
 8002e32:	2400      	movs	r4, #0
 8002e34:	001a      	movs	r2, r3
 8002e36:	0023      	movs	r3, r4
 8002e38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e3c:	f7fd fad8 	bl	80003f0 <__aeabi_uldivmod>
 8002e40:	0003      	movs	r3, r0
 8002e42:	000c      	movs	r4, r1
 8002e44:	0e1a      	lsrs	r2, r3, #24
 8002e46:	0226      	lsls	r6, r4, #8
 8002e48:	4316      	orrs	r6, r2
 8002e4a:	021d      	lsls	r5, r3, #8
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
 8002e54:	2300      	movs	r3, #0
 8002e56:	647b      	str	r3, [r7, #68]	; 0x44
 8002e58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e5c:	1940      	adds	r0, r0, r5
 8002e5e:	4171      	adcs	r1, r6
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e66:	2300      	movs	r3, #0
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6e:	f7fd fabf 	bl	80003f0 <__aeabi_uldivmod>
 8002e72:	0003      	movs	r3, r0
 8002e74:	000c      	movs	r4, r1
 8002e76:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002e78:	e171      	b.n	800315e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04f      	beq.n	8002f22 <UART_SetConfig+0x78e>
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d048      	beq.n	8002f1c <UART_SetConfig+0x788>
 8002e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d041      	beq.n	8002f16 <UART_SetConfig+0x782>
 8002e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d03a      	beq.n	8002f10 <UART_SetConfig+0x77c>
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d033      	beq.n	8002f0a <UART_SetConfig+0x776>
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d02c      	beq.n	8002f04 <UART_SetConfig+0x770>
 8002eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d025      	beq.n	8002efe <UART_SetConfig+0x76a>
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b07      	cmp	r3, #7
 8002eb8:	d01e      	beq.n	8002ef8 <UART_SetConfig+0x764>
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d017      	beq.n	8002ef2 <UART_SetConfig+0x75e>
 8002ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	d010      	beq.n	8002eec <UART_SetConfig+0x758>
 8002eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d009      	beq.n	8002ee6 <UART_SetConfig+0x752>
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b0b      	cmp	r3, #11
 8002ed8:	d102      	bne.n	8002ee0 <UART_SetConfig+0x74c>
 8002eda:	4bba      	ldr	r3, [pc, #744]	; (80031c4 <UART_SetConfig+0xa30>)
 8002edc:	2400      	movs	r4, #0
 8002ede:	e022      	b.n	8002f26 <UART_SetConfig+0x792>
 8002ee0:	4bb9      	ldr	r3, [pc, #740]	; (80031c8 <UART_SetConfig+0xa34>)
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	e01f      	b.n	8002f26 <UART_SetConfig+0x792>
 8002ee6:	4bb9      	ldr	r3, [pc, #740]	; (80031cc <UART_SetConfig+0xa38>)
 8002ee8:	2400      	movs	r4, #0
 8002eea:	e01c      	b.n	8002f26 <UART_SetConfig+0x792>
 8002eec:	4bb8      	ldr	r3, [pc, #736]	; (80031d0 <UART_SetConfig+0xa3c>)
 8002eee:	2400      	movs	r4, #0
 8002ef0:	e019      	b.n	8002f26 <UART_SetConfig+0x792>
 8002ef2:	4bb8      	ldr	r3, [pc, #736]	; (80031d4 <UART_SetConfig+0xa40>)
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e016      	b.n	8002f26 <UART_SetConfig+0x792>
 8002ef8:	4bb7      	ldr	r3, [pc, #732]	; (80031d8 <UART_SetConfig+0xa44>)
 8002efa:	2400      	movs	r4, #0
 8002efc:	e013      	b.n	8002f26 <UART_SetConfig+0x792>
 8002efe:	4bb7      	ldr	r3, [pc, #732]	; (80031dc <UART_SetConfig+0xa48>)
 8002f00:	2400      	movs	r4, #0
 8002f02:	e010      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f04:	4bb6      	ldr	r3, [pc, #728]	; (80031e0 <UART_SetConfig+0xa4c>)
 8002f06:	2400      	movs	r4, #0
 8002f08:	e00d      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f0a:	4bb6      	ldr	r3, [pc, #728]	; (80031e4 <UART_SetConfig+0xa50>)
 8002f0c:	2400      	movs	r4, #0
 8002f0e:	e00a      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f10:	4bb5      	ldr	r3, [pc, #724]	; (80031e8 <UART_SetConfig+0xa54>)
 8002f12:	2400      	movs	r4, #0
 8002f14:	e007      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f16:	4bb5      	ldr	r3, [pc, #724]	; (80031ec <UART_SetConfig+0xa58>)
 8002f18:	2400      	movs	r4, #0
 8002f1a:	e004      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f1c:	4bb4      	ldr	r3, [pc, #720]	; (80031f0 <UART_SetConfig+0xa5c>)
 8002f1e:	2400      	movs	r4, #0
 8002f20:	e001      	b.n	8002f26 <UART_SetConfig+0x792>
 8002f22:	4ba9      	ldr	r3, [pc, #676]	; (80031c8 <UART_SetConfig+0xa34>)
 8002f24:	2400      	movs	r4, #0
 8002f26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	0852      	lsrs	r2, r2, #1
 8002f2c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f2e:	2200      	movs	r2, #0
 8002f30:	637a      	str	r2, [r7, #52]	; 0x34
 8002f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f36:	18c0      	adds	r0, r0, r3
 8002f38:	4161      	adcs	r1, r4
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	f7fd fa52 	bl	80003f0 <__aeabi_uldivmod>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	000c      	movs	r4, r1
 8002f50:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8002f52:	e104      	b.n	800315e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_SYSCLK:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f54:	f7ff f96e 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d050      	beq.n	800300a <UART_SetConfig+0x876>
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d049      	beq.n	8003004 <UART_SetConfig+0x870>
 8002f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d042      	beq.n	8002ffe <UART_SetConfig+0x86a>
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d03b      	beq.n	8002ff8 <UART_SetConfig+0x864>
 8002f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d034      	beq.n	8002ff2 <UART_SetConfig+0x85e>
 8002f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d02d      	beq.n	8002fec <UART_SetConfig+0x858>
 8002f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d026      	beq.n	8002fe6 <UART_SetConfig+0x852>
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d01f      	beq.n	8002fe0 <UART_SetConfig+0x84c>
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d018      	beq.n	8002fda <UART_SetConfig+0x846>
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	d011      	beq.n	8002fd4 <UART_SetConfig+0x840>
 8002fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b0a      	cmp	r3, #10
 8002fb6:	d00a      	beq.n	8002fce <UART_SetConfig+0x83a>
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2b0b      	cmp	r3, #11
 8002fbe:	d103      	bne.n	8002fc8 <UART_SetConfig+0x834>
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	e022      	b.n	800300e <UART_SetConfig+0x87a>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e01f      	b.n	800300e <UART_SetConfig+0x87a>
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	e01c      	b.n	800300e <UART_SetConfig+0x87a>
 8002fd4:	2340      	movs	r3, #64	; 0x40
 8002fd6:	2400      	movs	r4, #0
 8002fd8:	e019      	b.n	800300e <UART_SetConfig+0x87a>
 8002fda:	2320      	movs	r3, #32
 8002fdc:	2400      	movs	r4, #0
 8002fde:	e016      	b.n	800300e <UART_SetConfig+0x87a>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	2400      	movs	r4, #0
 8002fe4:	e013      	b.n	800300e <UART_SetConfig+0x87a>
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	2400      	movs	r4, #0
 8002fea:	e010      	b.n	800300e <UART_SetConfig+0x87a>
 8002fec:	230a      	movs	r3, #10
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x87a>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	2400      	movs	r4, #0
 8002ff6:	e00a      	b.n	800300e <UART_SetConfig+0x87a>
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	2400      	movs	r4, #0
 8002ffc:	e007      	b.n	800300e <UART_SetConfig+0x87a>
 8002ffe:	2304      	movs	r3, #4
 8003000:	2400      	movs	r4, #0
 8003002:	e004      	b.n	800300e <UART_SetConfig+0x87a>
 8003004:	2302      	movs	r3, #2
 8003006:	2400      	movs	r4, #0
 8003008:	e001      	b.n	800300e <UART_SetConfig+0x87a>
 800300a:	2301      	movs	r3, #1
 800300c:	2400      	movs	r4, #0
 800300e:	001a      	movs	r2, r3
 8003010:	0023      	movs	r3, r4
 8003012:	6a38      	ldr	r0, [r7, #32]
 8003014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003016:	f7fd f9eb 	bl	80003f0 <__aeabi_uldivmod>
 800301a:	0003      	movs	r3, r0
 800301c:	000c      	movs	r4, r1
 800301e:	0e1a      	lsrs	r2, r3, #24
 8003020:	0221      	lsls	r1, r4, #8
 8003022:	6579      	str	r1, [r7, #84]	; 0x54
 8003024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003026:	4311      	orrs	r1, r2
 8003028:	6579      	str	r1, [r7, #84]	; 0x54
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	653b      	str	r3, [r7, #80]	; 0x50
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800303c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	69fc      	ldr	r4, [r7, #28]
 8003042:	18c0      	adds	r0, r0, r3
 8003044:	4161      	adcs	r1, r4
 8003046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f7fd f9cc 	bl	80003f0 <__aeabi_uldivmod>
 8003058:	0003      	movs	r3, r0
 800305a:	000c      	movs	r4, r1
 800305c:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800305e:	e07e      	b.n	800315e <UART_SetConfig+0x9ca>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d058      	beq.n	800311a <UART_SetConfig+0x986>
 8003068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d050      	beq.n	8003112 <UART_SetConfig+0x97e>
 8003070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b02      	cmp	r3, #2
 8003076:	d048      	beq.n	800310a <UART_SetConfig+0x976>
 8003078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b03      	cmp	r3, #3
 800307e:	d041      	beq.n	8003104 <UART_SetConfig+0x970>
 8003080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b04      	cmp	r3, #4
 8003086:	d039      	beq.n	80030fc <UART_SetConfig+0x968>
 8003088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b05      	cmp	r3, #5
 800308e:	d032      	beq.n	80030f6 <UART_SetConfig+0x962>
 8003090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b06      	cmp	r3, #6
 8003096:	d02b      	beq.n	80030f0 <UART_SetConfig+0x95c>
 8003098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b07      	cmp	r3, #7
 800309e:	d023      	beq.n	80030e8 <UART_SetConfig+0x954>
 80030a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d01b      	beq.n	80030e0 <UART_SetConfig+0x94c>
 80030a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	d013      	beq.n	80030d8 <UART_SetConfig+0x944>
 80030b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b0a      	cmp	r3, #10
 80030b6:	d00b      	beq.n	80030d0 <UART_SetConfig+0x93c>
 80030b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2b0b      	cmp	r3, #11
 80030be:	d103      	bne.n	80030c8 <UART_SetConfig+0x934>
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	2400      	movs	r4, #0
 80030c6:	e02b      	b.n	8003120 <UART_SetConfig+0x98c>
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	2400      	movs	r4, #0
 80030ce:	e027      	b.n	8003120 <UART_SetConfig+0x98c>
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	025b      	lsls	r3, r3, #9
 80030d4:	2400      	movs	r4, #0
 80030d6:	e023      	b.n	8003120 <UART_SetConfig+0x98c>
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	2400      	movs	r4, #0
 80030de:	e01f      	b.n	8003120 <UART_SetConfig+0x98c>
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	02db      	lsls	r3, r3, #11
 80030e4:	2400      	movs	r4, #0
 80030e6:	e01b      	b.n	8003120 <UART_SetConfig+0x98c>
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	031b      	lsls	r3, r3, #12
 80030ec:	2400      	movs	r4, #0
 80030ee:	e017      	b.n	8003120 <UART_SetConfig+0x98c>
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <UART_SetConfig+0xa60>)
 80030f2:	2400      	movs	r4, #0
 80030f4:	e014      	b.n	8003120 <UART_SetConfig+0x98c>
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <UART_SetConfig+0xa64>)
 80030f8:	2400      	movs	r4, #0
 80030fa:	e011      	b.n	8003120 <UART_SetConfig+0x98c>
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	035b      	lsls	r3, r3, #13
 8003100:	2400      	movs	r4, #0
 8003102:	e00d      	b.n	8003120 <UART_SetConfig+0x98c>
 8003104:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <UART_SetConfig+0xa68>)
 8003106:	2400      	movs	r4, #0
 8003108:	e00a      	b.n	8003120 <UART_SetConfig+0x98c>
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	039b      	lsls	r3, r3, #14
 800310e:	2400      	movs	r4, #0
 8003110:	e006      	b.n	8003120 <UART_SetConfig+0x98c>
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	03db      	lsls	r3, r3, #15
 8003116:	2400      	movs	r4, #0
 8003118:	e002      	b.n	8003120 <UART_SetConfig+0x98c>
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	2400      	movs	r4, #0
 8003120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003122:	6852      	ldr	r2, [r2, #4]
 8003124:	0852      	lsrs	r2, r2, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	60fa      	str	r2, [r7, #12]
 800312c:	68b8      	ldr	r0, [r7, #8]
 800312e:	68f9      	ldr	r1, [r7, #12]
 8003130:	18c0      	adds	r0, r0, r3
 8003132:	4161      	adcs	r1, r4
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f7fd f955 	bl	80003f0 <__aeabi_uldivmod>
 8003146:	0003      	movs	r3, r0
 8003148:	000c      	movs	r4, r1
 800314a:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800314c:	e007      	b.n	800315e <UART_SetConfig+0x9ca>
          default:
            ret = HAL_ERROR;
 800314e:	2313      	movs	r3, #19
 8003150:	2258      	movs	r2, #88	; 0x58
 8003152:	4694      	mov	ip, r2
 8003154:	44bc      	add	ip, r7
 8003156:	4463      	add	r3, ip
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
            break;
 800315c:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800315e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <UART_SetConfig+0xa6c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d909      	bls.n	800317a <UART_SetConfig+0x9e6>
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <UART_SetConfig+0xa70>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d805      	bhi.n	800317a <UART_SetConfig+0x9e6>
        {
          huart->Instance->BRR = usartdiv;
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	f000 fbbf 	bl	80038f8 <UART_SetConfig+0x1164>
        }
        else
        {
          ret = HAL_ERROR;
 800317a:	2313      	movs	r3, #19
 800317c:	2258      	movs	r2, #88	; 0x58
 800317e:	4694      	mov	ip, r2
 8003180:	44bc      	add	ip, r7
 8003182:	4463      	add	r3, ip
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	f000 fbb6 	bl	80038f8 <UART_SetConfig+0x1164>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	429a      	cmp	r2, r3
 8003196:	d000      	beq.n	800319a <UART_SetConfig+0xa06>
 8003198:	e1e4      	b.n	8003564 <UART_SetConfig+0xdd0>
  {
    switch (clocksource)
 800319a:	231b      	movs	r3, #27
 800319c:	2258      	movs	r2, #88	; 0x58
 800319e:	4694      	mov	ip, r2
 80031a0:	44bc      	add	ip, r7
 80031a2:	4463      	add	r3, ip
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d100      	bne.n	80031ac <UART_SetConfig+0xa18>
 80031aa:	e08e      	b.n	80032ca <UART_SetConfig+0xb36>
 80031ac:	dc02      	bgt.n	80031b4 <UART_SetConfig+0xa20>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02a      	beq.n	8003208 <UART_SetConfig+0xa74>
 80031b2:	e1a3      	b.n	80034fc <UART_SetConfig+0xd68>
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d100      	bne.n	80031ba <UART_SetConfig+0xa26>
 80031b8:	e0de      	b.n	8003378 <UART_SetConfig+0xbe4>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d100      	bne.n	80031c0 <UART_SetConfig+0xa2c>
 80031be:	e13c      	b.n	800343a <UART_SetConfig+0xca6>
 80031c0:	e19c      	b.n	80034fc <UART_SetConfig+0xd68>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	f4240000 	.word	0xf4240000
 80031cc:	01e84800 	.word	0x01e84800
 80031d0:	03d09000 	.word	0x03d09000
 80031d4:	07a12000 	.word	0x07a12000
 80031d8:	0f424000 	.word	0x0f424000
 80031dc:	14585500 	.word	0x14585500
 80031e0:	186a0000 	.word	0x186a0000
 80031e4:	1e848000 	.word	0x1e848000
 80031e8:	28b0aa00 	.word	0x28b0aa00
 80031ec:	3d090000 	.word	0x3d090000
 80031f0:	7a120000 	.word	0x7a120000
 80031f4:	000aaa00 	.word	0x000aaa00
 80031f8:	000ccc00 	.word	0x000ccc00
 80031fc:	00155500 	.word	0x00155500
 8003200:	000002ff 	.word	0x000002ff
 8003204:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003208:	f7ff f8a0 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 800320c:	0002      	movs	r2, r0
 800320e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d044      	beq.n	80032a0 <UART_SetConfig+0xb0c>
 8003216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b01      	cmp	r3, #1
 800321c:	d03e      	beq.n	800329c <UART_SetConfig+0xb08>
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b02      	cmp	r3, #2
 8003224:	d038      	beq.n	8003298 <UART_SetConfig+0xb04>
 8003226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b03      	cmp	r3, #3
 800322c:	d032      	beq.n	8003294 <UART_SetConfig+0xb00>
 800322e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b04      	cmp	r3, #4
 8003234:	d02c      	beq.n	8003290 <UART_SetConfig+0xafc>
 8003236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b05      	cmp	r3, #5
 800323c:	d026      	beq.n	800328c <UART_SetConfig+0xaf8>
 800323e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b06      	cmp	r3, #6
 8003244:	d020      	beq.n	8003288 <UART_SetConfig+0xaf4>
 8003246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b07      	cmp	r3, #7
 800324c:	d01a      	beq.n	8003284 <UART_SetConfig+0xaf0>
 800324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b08      	cmp	r3, #8
 8003254:	d014      	beq.n	8003280 <UART_SetConfig+0xaec>
 8003256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b09      	cmp	r3, #9
 800325c:	d00e      	beq.n	800327c <UART_SetConfig+0xae8>
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b0a      	cmp	r3, #10
 8003264:	d008      	beq.n	8003278 <UART_SetConfig+0xae4>
 8003266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b0b      	cmp	r3, #11
 800326c:	d102      	bne.n	8003274 <UART_SetConfig+0xae0>
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	e016      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003274:	2301      	movs	r3, #1
 8003276:	e014      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	e012      	b.n	80032a2 <UART_SetConfig+0xb0e>
 800327c:	2340      	movs	r3, #64	; 0x40
 800327e:	e010      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003280:	2320      	movs	r3, #32
 8003282:	e00e      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003284:	2310      	movs	r3, #16
 8003286:	e00c      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003288:	230c      	movs	r3, #12
 800328a:	e00a      	b.n	80032a2 <UART_SetConfig+0xb0e>
 800328c:	230a      	movs	r3, #10
 800328e:	e008      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003290:	2308      	movs	r3, #8
 8003292:	e006      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003294:	2306      	movs	r3, #6
 8003296:	e004      	b.n	80032a2 <UART_SetConfig+0xb0e>
 8003298:	2304      	movs	r3, #4
 800329a:	e002      	b.n	80032a2 <UART_SetConfig+0xb0e>
 800329c:	2302      	movs	r3, #2
 800329e:	e000      	b.n	80032a2 <UART_SetConfig+0xb0e>
 80032a0:	2301      	movs	r3, #1
 80032a2:	0019      	movs	r1, r3
 80032a4:	0010      	movs	r0, r2
 80032a6:	f7fc ff2d 	bl	8000104 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	005a      	lsls	r2, r3, #1
 80032ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	18d2      	adds	r2, r2, r3
 80032b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0019      	movs	r1, r3
 80032bc:	0010      	movs	r0, r2
 80032be:	f7fc ff21 	bl	8000104 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80032c8:	e120      	b.n	800350c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d043      	beq.n	800335a <UART_SetConfig+0xbc6>
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d03d      	beq.n	8003356 <UART_SetConfig+0xbc2>
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d037      	beq.n	8003352 <UART_SetConfig+0xbbe>
 80032e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d031      	beq.n	800334e <UART_SetConfig+0xbba>
 80032ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d02b      	beq.n	800334a <UART_SetConfig+0xbb6>
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d025      	beq.n	8003346 <UART_SetConfig+0xbb2>
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d01f      	beq.n	8003342 <UART_SetConfig+0xbae>
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b07      	cmp	r3, #7
 8003308:	d019      	beq.n	800333e <UART_SetConfig+0xbaa>
 800330a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b08      	cmp	r3, #8
 8003310:	d013      	beq.n	800333a <UART_SetConfig+0xba6>
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b09      	cmp	r3, #9
 8003318:	d00d      	beq.n	8003336 <UART_SetConfig+0xba2>
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d007      	beq.n	8003332 <UART_SetConfig+0xb9e>
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b0b      	cmp	r3, #11
 8003328:	d101      	bne.n	800332e <UART_SetConfig+0xb9a>
 800332a:	4bba      	ldr	r3, [pc, #744]	; (8003614 <UART_SetConfig+0xe80>)
 800332c:	e016      	b.n	800335c <UART_SetConfig+0xbc8>
 800332e:	4bba      	ldr	r3, [pc, #744]	; (8003618 <UART_SetConfig+0xe84>)
 8003330:	e014      	b.n	800335c <UART_SetConfig+0xbc8>
 8003332:	4bba      	ldr	r3, [pc, #744]	; (800361c <UART_SetConfig+0xe88>)
 8003334:	e012      	b.n	800335c <UART_SetConfig+0xbc8>
 8003336:	4bba      	ldr	r3, [pc, #744]	; (8003620 <UART_SetConfig+0xe8c>)
 8003338:	e010      	b.n	800335c <UART_SetConfig+0xbc8>
 800333a:	4bba      	ldr	r3, [pc, #744]	; (8003624 <UART_SetConfig+0xe90>)
 800333c:	e00e      	b.n	800335c <UART_SetConfig+0xbc8>
 800333e:	4bba      	ldr	r3, [pc, #744]	; (8003628 <UART_SetConfig+0xe94>)
 8003340:	e00c      	b.n	800335c <UART_SetConfig+0xbc8>
 8003342:	4bba      	ldr	r3, [pc, #744]	; (800362c <UART_SetConfig+0xe98>)
 8003344:	e00a      	b.n	800335c <UART_SetConfig+0xbc8>
 8003346:	4bba      	ldr	r3, [pc, #744]	; (8003630 <UART_SetConfig+0xe9c>)
 8003348:	e008      	b.n	800335c <UART_SetConfig+0xbc8>
 800334a:	4bba      	ldr	r3, [pc, #744]	; (8003634 <UART_SetConfig+0xea0>)
 800334c:	e006      	b.n	800335c <UART_SetConfig+0xbc8>
 800334e:	4bba      	ldr	r3, [pc, #744]	; (8003638 <UART_SetConfig+0xea4>)
 8003350:	e004      	b.n	800335c <UART_SetConfig+0xbc8>
 8003352:	4bba      	ldr	r3, [pc, #744]	; (800363c <UART_SetConfig+0xea8>)
 8003354:	e002      	b.n	800335c <UART_SetConfig+0xbc8>
 8003356:	4bba      	ldr	r3, [pc, #744]	; (8003640 <UART_SetConfig+0xeac>)
 8003358:	e000      	b.n	800335c <UART_SetConfig+0xbc8>
 800335a:	4baf      	ldr	r3, [pc, #700]	; (8003618 <UART_SetConfig+0xe84>)
 800335c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800335e:	6852      	ldr	r2, [r2, #4]
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	189a      	adds	r2, r3, r2
 8003364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0019      	movs	r1, r3
 800336a:	0010      	movs	r0, r2
 800336c:	f7fc feca 	bl	8000104 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	b29b      	uxth	r3, r3
 8003374:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003376:	e0c9      	b.n	800350c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003378:	f7fe ff5c 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 800337c:	0002      	movs	r2, r0
 800337e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d044      	beq.n	8003410 <UART_SetConfig+0xc7c>
 8003386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b01      	cmp	r3, #1
 800338c:	d03e      	beq.n	800340c <UART_SetConfig+0xc78>
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b02      	cmp	r3, #2
 8003394:	d038      	beq.n	8003408 <UART_SetConfig+0xc74>
 8003396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b03      	cmp	r3, #3
 800339c:	d032      	beq.n	8003404 <UART_SetConfig+0xc70>
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d02c      	beq.n	8003400 <UART_SetConfig+0xc6c>
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d026      	beq.n	80033fc <UART_SetConfig+0xc68>
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d020      	beq.n	80033f8 <UART_SetConfig+0xc64>
 80033b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d01a      	beq.n	80033f4 <UART_SetConfig+0xc60>
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d014      	beq.n	80033f0 <UART_SetConfig+0xc5c>
 80033c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b09      	cmp	r3, #9
 80033cc:	d00e      	beq.n	80033ec <UART_SetConfig+0xc58>
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b0a      	cmp	r3, #10
 80033d4:	d008      	beq.n	80033e8 <UART_SetConfig+0xc54>
 80033d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b0b      	cmp	r3, #11
 80033dc:	d102      	bne.n	80033e4 <UART_SetConfig+0xc50>
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	e016      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e014      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	e012      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033ec:	2340      	movs	r3, #64	; 0x40
 80033ee:	e010      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033f0:	2320      	movs	r3, #32
 80033f2:	e00e      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033f4:	2310      	movs	r3, #16
 80033f6:	e00c      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033f8:	230c      	movs	r3, #12
 80033fa:	e00a      	b.n	8003412 <UART_SetConfig+0xc7e>
 80033fc:	230a      	movs	r3, #10
 80033fe:	e008      	b.n	8003412 <UART_SetConfig+0xc7e>
 8003400:	2308      	movs	r3, #8
 8003402:	e006      	b.n	8003412 <UART_SetConfig+0xc7e>
 8003404:	2306      	movs	r3, #6
 8003406:	e004      	b.n	8003412 <UART_SetConfig+0xc7e>
 8003408:	2304      	movs	r3, #4
 800340a:	e002      	b.n	8003412 <UART_SetConfig+0xc7e>
 800340c:	2302      	movs	r3, #2
 800340e:	e000      	b.n	8003412 <UART_SetConfig+0xc7e>
 8003410:	2301      	movs	r3, #1
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f7fc fe75 	bl	8000104 <__udivsi3>
 800341a:	0003      	movs	r3, r0
 800341c:	005a      	lsls	r2, r3, #1
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	18d2      	adds	r2, r2, r3
 8003426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f7fc fe69 	bl	8000104 <__udivsi3>
 8003432:	0003      	movs	r3, r0
 8003434:	b29b      	uxth	r3, r3
 8003436:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003438:	e068      	b.n	800350c <UART_SetConfig+0xd78>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800343a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d04c      	beq.n	80034dc <UART_SetConfig+0xd48>
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b01      	cmp	r3, #1
 8003448:	d045      	beq.n	80034d6 <UART_SetConfig+0xd42>
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b02      	cmp	r3, #2
 8003450:	d03e      	beq.n	80034d0 <UART_SetConfig+0xd3c>
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b03      	cmp	r3, #3
 8003458:	d038      	beq.n	80034cc <UART_SetConfig+0xd38>
 800345a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b04      	cmp	r3, #4
 8003460:	d031      	beq.n	80034c6 <UART_SetConfig+0xd32>
 8003462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b05      	cmp	r3, #5
 8003468:	d02b      	beq.n	80034c2 <UART_SetConfig+0xd2e>
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b06      	cmp	r3, #6
 8003470:	d025      	beq.n	80034be <UART_SetConfig+0xd2a>
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b07      	cmp	r3, #7
 8003478:	d01e      	beq.n	80034b8 <UART_SetConfig+0xd24>
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b08      	cmp	r3, #8
 8003480:	d017      	beq.n	80034b2 <UART_SetConfig+0xd1e>
 8003482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b09      	cmp	r3, #9
 8003488:	d010      	beq.n	80034ac <UART_SetConfig+0xd18>
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d009      	beq.n	80034a6 <UART_SetConfig+0xd12>
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b0b      	cmp	r3, #11
 8003498:	d102      	bne.n	80034a0 <UART_SetConfig+0xd0c>
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	e01f      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	025b      	lsls	r3, r3, #9
 80034a4:	e01c      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	e019      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	e016      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	015b      	lsls	r3, r3, #5
 80034bc:	e010      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034be:	4b61      	ldr	r3, [pc, #388]	; (8003644 <UART_SetConfig+0xeb0>)
 80034c0:	e00e      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <UART_SetConfig+0xeb4>)
 80034c4:	e00c      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	e009      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034cc:	4b5f      	ldr	r3, [pc, #380]	; (800364c <UART_SetConfig+0xeb8>)
 80034ce:	e007      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	01db      	lsls	r3, r3, #7
 80034d4:	e004      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	e001      	b.n	80034e0 <UART_SetConfig+0xd4c>
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	025b      	lsls	r3, r3, #9
 80034e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034e2:	6852      	ldr	r2, [r2, #4]
 80034e4:	0852      	lsrs	r2, r2, #1
 80034e6:	189a      	adds	r2, r3, r2
 80034e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0019      	movs	r1, r3
 80034ee:	0010      	movs	r0, r2
 80034f0:	f7fc fe08 	bl	8000104 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80034fa:	e007      	b.n	800350c <UART_SetConfig+0xd78>
      default:
        ret = HAL_ERROR;
 80034fc:	2313      	movs	r3, #19
 80034fe:	2258      	movs	r2, #88	; 0x58
 8003500:	4694      	mov	ip, r2
 8003502:	44bc      	add	ip, r7
 8003504:	4463      	add	r3, ip
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
        break;
 800350a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d920      	bls.n	8003554 <UART_SetConfig+0xdc0>
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <UART_SetConfig+0xebc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d81c      	bhi.n	8003554 <UART_SetConfig+0xdc0>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	b29a      	uxth	r2, r3
 800351e:	200a      	movs	r0, #10
 8003520:	2458      	movs	r4, #88	; 0x58
 8003522:	193b      	adds	r3, r7, r4
 8003524:	181b      	adds	r3, r3, r0
 8003526:	210f      	movs	r1, #15
 8003528:	438a      	bics	r2, r1
 800352a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	2207      	movs	r2, #7
 8003534:	4013      	ands	r3, r2
 8003536:	b299      	uxth	r1, r3
 8003538:	193b      	adds	r3, r7, r4
 800353a:	181b      	adds	r3, r3, r0
 800353c:	193a      	adds	r2, r7, r4
 800353e:	1812      	adds	r2, r2, r0
 8003540:	8812      	ldrh	r2, [r2, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	193a      	adds	r2, r7, r4
 800354c:	1812      	adds	r2, r2, r0
 800354e:	8812      	ldrh	r2, [r2, #0]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	e1d1      	b.n	80038f8 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 8003554:	2313      	movs	r3, #19
 8003556:	2258      	movs	r2, #88	; 0x58
 8003558:	4694      	mov	ip, r2
 800355a:	44bc      	add	ip, r7
 800355c:	4463      	add	r3, ip
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e1c9      	b.n	80038f8 <UART_SetConfig+0x1164>
    }
  }
  else
  {
    switch (clocksource)
 8003564:	231b      	movs	r3, #27
 8003566:	2258      	movs	r2, #88	; 0x58
 8003568:	4694      	mov	ip, r2
 800356a:	44bc      	add	ip, r7
 800356c:	4463      	add	r3, ip
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d100      	bne.n	8003576 <UART_SetConfig+0xde2>
 8003574:	e08d      	b.n	8003692 <UART_SetConfig+0xefe>
 8003576:	dc02      	bgt.n	800357e <UART_SetConfig+0xdea>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <UART_SetConfig+0xdf8>
 800357c:	e1a1      	b.n	80038c2 <UART_SetConfig+0x112e>
 800357e:	2b04      	cmp	r3, #4
 8003580:	d100      	bne.n	8003584 <UART_SetConfig+0xdf0>
 8003582:	e0dd      	b.n	8003740 <UART_SetConfig+0xfac>
 8003584:	2b08      	cmp	r3, #8
 8003586:	d100      	bne.n	800358a <UART_SetConfig+0xdf6>
 8003588:	e13b      	b.n	8003802 <UART_SetConfig+0x106e>
 800358a:	e19a      	b.n	80038c2 <UART_SetConfig+0x112e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800358c:	f7fe fede 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8003590:	0002      	movs	r2, r0
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d100      	bne.n	800359c <UART_SetConfig+0xe08>
 800359a:	e065      	b.n	8003668 <UART_SetConfig+0xed4>
 800359c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d100      	bne.n	80035a6 <UART_SetConfig+0xe12>
 80035a4:	e05e      	b.n	8003664 <UART_SetConfig+0xed0>
 80035a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d058      	beq.n	8003660 <UART_SetConfig+0xecc>
 80035ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d052      	beq.n	800365c <UART_SetConfig+0xec8>
 80035b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d04c      	beq.n	8003658 <UART_SetConfig+0xec4>
 80035be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d046      	beq.n	8003654 <UART_SetConfig+0xec0>
 80035c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d020      	beq.n	8003610 <UART_SetConfig+0xe7c>
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b07      	cmp	r3, #7
 80035d4:	d01a      	beq.n	800360c <UART_SetConfig+0xe78>
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d014      	beq.n	8003608 <UART_SetConfig+0xe74>
 80035de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	d00e      	beq.n	8003604 <UART_SetConfig+0xe70>
 80035e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b0a      	cmp	r3, #10
 80035ec:	d008      	beq.n	8003600 <UART_SetConfig+0xe6c>
 80035ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b0b      	cmp	r3, #11
 80035f4:	d102      	bne.n	80035fc <UART_SetConfig+0xe68>
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	e036      	b.n	800366a <UART_SetConfig+0xed6>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e034      	b.n	800366a <UART_SetConfig+0xed6>
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	e032      	b.n	800366a <UART_SetConfig+0xed6>
 8003604:	2340      	movs	r3, #64	; 0x40
 8003606:	e030      	b.n	800366a <UART_SetConfig+0xed6>
 8003608:	2320      	movs	r3, #32
 800360a:	e02e      	b.n	800366a <UART_SetConfig+0xed6>
 800360c:	2310      	movs	r3, #16
 800360e:	e02c      	b.n	800366a <UART_SetConfig+0xed6>
 8003610:	230c      	movs	r3, #12
 8003612:	e02a      	b.n	800366a <UART_SetConfig+0xed6>
 8003614:	0001e848 	.word	0x0001e848
 8003618:	01e84800 	.word	0x01e84800
 800361c:	0003d090 	.word	0x0003d090
 8003620:	0007a120 	.word	0x0007a120
 8003624:	000f4240 	.word	0x000f4240
 8003628:	001e8480 	.word	0x001e8480
 800362c:	0028b0aa 	.word	0x0028b0aa
 8003630:	0030d400 	.word	0x0030d400
 8003634:	003d0900 	.word	0x003d0900
 8003638:	00516154 	.word	0x00516154
 800363c:	007a1200 	.word	0x007a1200
 8003640:	00f42400 	.word	0x00f42400
 8003644:	00001554 	.word	0x00001554
 8003648:	00001998 	.word	0x00001998
 800364c:	00002aaa 	.word	0x00002aaa
 8003650:	0000ffff 	.word	0x0000ffff
 8003654:	230a      	movs	r3, #10
 8003656:	e008      	b.n	800366a <UART_SetConfig+0xed6>
 8003658:	2308      	movs	r3, #8
 800365a:	e006      	b.n	800366a <UART_SetConfig+0xed6>
 800365c:	2306      	movs	r3, #6
 800365e:	e004      	b.n	800366a <UART_SetConfig+0xed6>
 8003660:	2304      	movs	r3, #4
 8003662:	e002      	b.n	800366a <UART_SetConfig+0xed6>
 8003664:	2302      	movs	r3, #2
 8003666:	e000      	b.n	800366a <UART_SetConfig+0xed6>
 8003668:	2301      	movs	r3, #1
 800366a:	0019      	movs	r1, r3
 800366c:	0010      	movs	r0, r2
 800366e:	f7fc fd49 	bl	8000104 <__udivsi3>
 8003672:	0003      	movs	r3, r0
 8003674:	001a      	movs	r2, r3
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	18d2      	adds	r2, r2, r3
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0019      	movs	r1, r3
 8003684:	0010      	movs	r0, r2
 8003686:	f7fc fd3d 	bl	8000104 <__udivsi3>
 800368a:	0003      	movs	r3, r0
 800368c:	b29b      	uxth	r3, r3
 800368e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003690:	e11f      	b.n	80038d2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d043      	beq.n	8003722 <UART_SetConfig+0xf8e>
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d03d      	beq.n	800371e <UART_SetConfig+0xf8a>
 80036a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d037      	beq.n	800371a <UART_SetConfig+0xf86>
 80036aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d031      	beq.n	8003716 <UART_SetConfig+0xf82>
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d02b      	beq.n	8003712 <UART_SetConfig+0xf7e>
 80036ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d025      	beq.n	800370e <UART_SetConfig+0xf7a>
 80036c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d01f      	beq.n	800370a <UART_SetConfig+0xf76>
 80036ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b07      	cmp	r3, #7
 80036d0:	d019      	beq.n	8003706 <UART_SetConfig+0xf72>
 80036d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d013      	beq.n	8003702 <UART_SetConfig+0xf6e>
 80036da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b09      	cmp	r3, #9
 80036e0:	d00d      	beq.n	80036fe <UART_SetConfig+0xf6a>
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b0a      	cmp	r3, #10
 80036e8:	d007      	beq.n	80036fa <UART_SetConfig+0xf66>
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b0b      	cmp	r3, #11
 80036f0:	d101      	bne.n	80036f6 <UART_SetConfig+0xf62>
 80036f2:	4b8d      	ldr	r3, [pc, #564]	; (8003928 <UART_SetConfig+0x1194>)
 80036f4:	e016      	b.n	8003724 <UART_SetConfig+0xf90>
 80036f6:	4b8d      	ldr	r3, [pc, #564]	; (800392c <UART_SetConfig+0x1198>)
 80036f8:	e014      	b.n	8003724 <UART_SetConfig+0xf90>
 80036fa:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <UART_SetConfig+0x119c>)
 80036fc:	e012      	b.n	8003724 <UART_SetConfig+0xf90>
 80036fe:	4b8d      	ldr	r3, [pc, #564]	; (8003934 <UART_SetConfig+0x11a0>)
 8003700:	e010      	b.n	8003724 <UART_SetConfig+0xf90>
 8003702:	4b8d      	ldr	r3, [pc, #564]	; (8003938 <UART_SetConfig+0x11a4>)
 8003704:	e00e      	b.n	8003724 <UART_SetConfig+0xf90>
 8003706:	4b8d      	ldr	r3, [pc, #564]	; (800393c <UART_SetConfig+0x11a8>)
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0xf90>
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <UART_SetConfig+0x11ac>)
 800370c:	e00a      	b.n	8003724 <UART_SetConfig+0xf90>
 800370e:	4b8d      	ldr	r3, [pc, #564]	; (8003944 <UART_SetConfig+0x11b0>)
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0xf90>
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <UART_SetConfig+0x11b4>)
 8003714:	e006      	b.n	8003724 <UART_SetConfig+0xf90>
 8003716:	4b8d      	ldr	r3, [pc, #564]	; (800394c <UART_SetConfig+0x11b8>)
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0xf90>
 800371a:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <UART_SetConfig+0x11bc>)
 800371c:	e002      	b.n	8003724 <UART_SetConfig+0xf90>
 800371e:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <UART_SetConfig+0x11c0>)
 8003720:	e000      	b.n	8003724 <UART_SetConfig+0xf90>
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <UART_SetConfig+0x1198>)
 8003724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003726:	6852      	ldr	r2, [r2, #4]
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	189a      	adds	r2, r3, r2
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7fc fce6 	bl	8000104 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	b29b      	uxth	r3, r3
 800373c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800373e:	e0c8      	b.n	80038d2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003740:	f7fe fd78 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8003744:	0002      	movs	r2, r0
 8003746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <UART_SetConfig+0x1044>
 800374e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b01      	cmp	r3, #1
 8003754:	d03e      	beq.n	80037d4 <UART_SetConfig+0x1040>
 8003756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b02      	cmp	r3, #2
 800375c:	d038      	beq.n	80037d0 <UART_SetConfig+0x103c>
 800375e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b03      	cmp	r3, #3
 8003764:	d032      	beq.n	80037cc <UART_SetConfig+0x1038>
 8003766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b04      	cmp	r3, #4
 800376c:	d02c      	beq.n	80037c8 <UART_SetConfig+0x1034>
 800376e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b05      	cmp	r3, #5
 8003774:	d026      	beq.n	80037c4 <UART_SetConfig+0x1030>
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b06      	cmp	r3, #6
 800377c:	d020      	beq.n	80037c0 <UART_SetConfig+0x102c>
 800377e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b07      	cmp	r3, #7
 8003784:	d01a      	beq.n	80037bc <UART_SetConfig+0x1028>
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b08      	cmp	r3, #8
 800378c:	d014      	beq.n	80037b8 <UART_SetConfig+0x1024>
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b09      	cmp	r3, #9
 8003794:	d00e      	beq.n	80037b4 <UART_SetConfig+0x1020>
 8003796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b0a      	cmp	r3, #10
 800379c:	d008      	beq.n	80037b0 <UART_SetConfig+0x101c>
 800379e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b0b      	cmp	r3, #11
 80037a4:	d102      	bne.n	80037ac <UART_SetConfig+0x1018>
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	e016      	b.n	80037da <UART_SetConfig+0x1046>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e014      	b.n	80037da <UART_SetConfig+0x1046>
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	e012      	b.n	80037da <UART_SetConfig+0x1046>
 80037b4:	2340      	movs	r3, #64	; 0x40
 80037b6:	e010      	b.n	80037da <UART_SetConfig+0x1046>
 80037b8:	2320      	movs	r3, #32
 80037ba:	e00e      	b.n	80037da <UART_SetConfig+0x1046>
 80037bc:	2310      	movs	r3, #16
 80037be:	e00c      	b.n	80037da <UART_SetConfig+0x1046>
 80037c0:	230c      	movs	r3, #12
 80037c2:	e00a      	b.n	80037da <UART_SetConfig+0x1046>
 80037c4:	230a      	movs	r3, #10
 80037c6:	e008      	b.n	80037da <UART_SetConfig+0x1046>
 80037c8:	2308      	movs	r3, #8
 80037ca:	e006      	b.n	80037da <UART_SetConfig+0x1046>
 80037cc:	2306      	movs	r3, #6
 80037ce:	e004      	b.n	80037da <UART_SetConfig+0x1046>
 80037d0:	2304      	movs	r3, #4
 80037d2:	e002      	b.n	80037da <UART_SetConfig+0x1046>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e000      	b.n	80037da <UART_SetConfig+0x1046>
 80037d8:	2301      	movs	r3, #1
 80037da:	0019      	movs	r1, r3
 80037dc:	0010      	movs	r0, r2
 80037de:	f7fc fc91 	bl	8000104 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	001a      	movs	r2, r3
 80037e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	18d2      	adds	r2, r2, r3
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0019      	movs	r1, r3
 80037f4:	0010      	movs	r0, r2
 80037f6:	f7fc fc85 	bl	8000104 <__udivsi3>
 80037fa:	0003      	movs	r3, r0
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003800:	e067      	b.n	80038d2 <UART_SetConfig+0x113e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04b      	beq.n	80038a2 <UART_SetConfig+0x110e>
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2b01      	cmp	r3, #1
 8003810:	d044      	beq.n	800389c <UART_SetConfig+0x1108>
 8003812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b02      	cmp	r3, #2
 8003818:	d03d      	beq.n	8003896 <UART_SetConfig+0x1102>
 800381a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b03      	cmp	r3, #3
 8003820:	d037      	beq.n	8003892 <UART_SetConfig+0x10fe>
 8003822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b04      	cmp	r3, #4
 8003828:	d030      	beq.n	800388c <UART_SetConfig+0x10f8>
 800382a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b05      	cmp	r3, #5
 8003830:	d02a      	beq.n	8003888 <UART_SetConfig+0x10f4>
 8003832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b06      	cmp	r3, #6
 8003838:	d024      	beq.n	8003884 <UART_SetConfig+0x10f0>
 800383a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b07      	cmp	r3, #7
 8003840:	d01d      	beq.n	800387e <UART_SetConfig+0x10ea>
 8003842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b08      	cmp	r3, #8
 8003848:	d016      	beq.n	8003878 <UART_SetConfig+0x10e4>
 800384a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b09      	cmp	r3, #9
 8003850:	d00f      	beq.n	8003872 <UART_SetConfig+0x10de>
 8003852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b0a      	cmp	r3, #10
 8003858:	d008      	beq.n	800386c <UART_SetConfig+0x10d8>
 800385a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b0b      	cmp	r3, #11
 8003860:	d101      	bne.n	8003866 <UART_SetConfig+0x10d2>
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	e01f      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	e01c      	b.n	80038a6 <UART_SetConfig+0x1112>
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	e019      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	e016      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	e013      	b.n	80038a6 <UART_SetConfig+0x1112>
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	e010      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <UART_SetConfig+0x11c4>)
 8003886:	e00e      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <UART_SetConfig+0x11c8>)
 800388a:	e00c      	b.n	80038a6 <UART_SetConfig+0x1112>
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	015b      	lsls	r3, r3, #5
 8003890:	e009      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003892:	4b33      	ldr	r3, [pc, #204]	; (8003960 <UART_SetConfig+0x11cc>)
 8003894:	e007      	b.n	80038a6 <UART_SetConfig+0x1112>
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	e004      	b.n	80038a6 <UART_SetConfig+0x1112>
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	01db      	lsls	r3, r3, #7
 80038a0:	e001      	b.n	80038a6 <UART_SetConfig+0x1112>
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	0852      	lsrs	r2, r2, #1
 80038ac:	189a      	adds	r2, r3, r2
 80038ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	0019      	movs	r1, r3
 80038b4:	0010      	movs	r0, r2
 80038b6:	f7fc fc25 	bl	8000104 <__udivsi3>
 80038ba:	0003      	movs	r3, r0
 80038bc:	b29b      	uxth	r3, r3
 80038be:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80038c0:	e007      	b.n	80038d2 <UART_SetConfig+0x113e>
      default:
        ret = HAL_ERROR;
 80038c2:	2313      	movs	r3, #19
 80038c4:	2258      	movs	r2, #88	; 0x58
 80038c6:	4694      	mov	ip, r2
 80038c8:	44bc      	add	ip, r7
 80038ca:	4463      	add	r3, ip
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
        break;
 80038d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d908      	bls.n	80038ea <UART_SetConfig+0x1156>
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	4a22      	ldr	r2, [pc, #136]	; (8003964 <UART_SetConfig+0x11d0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d804      	bhi.n	80038ea <UART_SetConfig+0x1156>
    {
      huart->Instance->BRR = usartdiv;
 80038e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	e006      	b.n	80038f8 <UART_SetConfig+0x1164>
    }
    else
    {
      ret = HAL_ERROR;
 80038ea:	2313      	movs	r3, #19
 80038ec:	2258      	movs	r2, #88	; 0x58
 80038ee:	4694      	mov	ip, r2
 80038f0:	44bc      	add	ip, r7
 80038f2:	4463      	add	r3, ip
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fa:	226a      	movs	r2, #106	; 0x6a
 80038fc:	2101      	movs	r1, #1
 80038fe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003902:	2268      	movs	r2, #104	; 0x68
 8003904:	2101      	movs	r1, #1
 8003906:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390a:	2200      	movs	r2, #0
 800390c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800390e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003910:	2200      	movs	r2, #0
 8003912:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003914:	2313      	movs	r3, #19
 8003916:	2258      	movs	r2, #88	; 0x58
 8003918:	4694      	mov	ip, r2
 800391a:	44bc      	add	ip, r7
 800391c:	4463      	add	r3, ip
 800391e:	781b      	ldrb	r3, [r3, #0]
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b01f      	add	sp, #124	; 0x7c
 8003926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003928:	0000f424 	.word	0x0000f424
 800392c:	00f42400 	.word	0x00f42400
 8003930:	0001e848 	.word	0x0001e848
 8003934:	0003d090 	.word	0x0003d090
 8003938:	0007a120 	.word	0x0007a120
 800393c:	000f4240 	.word	0x000f4240
 8003940:	00145855 	.word	0x00145855
 8003944:	00186a00 	.word	0x00186a00
 8003948:	001e8480 	.word	0x001e8480
 800394c:	0028b0aa 	.word	0x0028b0aa
 8003950:	003d0900 	.word	0x003d0900
 8003954:	007a1200 	.word	0x007a1200
 8003958:	00000aaa 	.word	0x00000aaa
 800395c:	00000ccc 	.word	0x00000ccc
 8003960:	00001555 	.word	0x00001555
 8003964:	0000ffff 	.word	0x0000ffff

08003968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a4a      	ldr	r2, [pc, #296]	; (8003aac <UART_AdvFeatureConfig+0x144>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	2202      	movs	r2, #2
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a43      	ldr	r2, [pc, #268]	; (8003ab0 <UART_AdvFeatureConfig+0x148>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2204      	movs	r2, #4
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a3b      	ldr	r2, [pc, #236]	; (8003ab4 <UART_AdvFeatureConfig+0x14c>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	2208      	movs	r2, #8
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <UART_AdvFeatureConfig+0x150>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	2210      	movs	r2, #16
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <UART_AdvFeatureConfig+0x154>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2220      	movs	r2, #32
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <UART_AdvFeatureConfig+0x158>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	4013      	ands	r3, r2
 8003a44:	d01d      	beq.n	8003a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <UART_AdvFeatureConfig+0x15c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	035b      	lsls	r3, r3, #13
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10b      	bne.n	8003a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <UART_AdvFeatureConfig+0x160>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <UART_AdvFeatureConfig+0x164>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	fffdffff 	.word	0xfffdffff
 8003ab0:	fffeffff 	.word	0xfffeffff
 8003ab4:	fffbffff 	.word	0xfffbffff
 8003ab8:	ffff7fff 	.word	0xffff7fff
 8003abc:	ffffefff 	.word	0xffffefff
 8003ac0:	ffffdfff 	.word	0xffffdfff
 8003ac4:	ffefffff 	.word	0xffefffff
 8003ac8:	ff9fffff 	.word	0xff9fffff
 8003acc:	fff7ffff 	.word	0xfff7ffff

08003ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2288      	movs	r2, #136	; 0x88
 8003adc:	2100      	movs	r1, #0
 8003ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ae0:	f7fc fe0c 	bl	80006fc <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2208      	movs	r2, #8
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d10d      	bne.n	8003b12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	0399      	lsls	r1, r3, #14
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <UART_CheckIdleState+0x90>)
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	0013      	movs	r3, r2
 8003b04:	2200      	movs	r2, #0
 8003b06:	f000 f82d 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d001      	beq.n	8003b12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e021      	b.n	8003b56 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d10d      	bne.n	8003b3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	03d9      	lsls	r1, r3, #15
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <UART_CheckIdleState+0x90>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f000 f818 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e00c      	b.n	8003b56 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	2120      	movs	r1, #32
 8003b42:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2284      	movs	r2, #132	; 0x84
 8003b48:	2120      	movs	r1, #32
 8003b4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	227c      	movs	r2, #124	; 0x7c
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	01ffffff 	.word	0x01ffffff

08003b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b74:	e02b      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	d028      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fc fdbe 	bl	80006fc <HAL_GetTick>
 8003b80:	0002      	movs	r2, r0
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d11d      	bne.n	8003bce <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	438a      	bics	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2284      	movs	r2, #132	; 0x84
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	5099      	str	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	227c      	movs	r2, #124	; 0x7c
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e00f      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	425a      	negs	r2, r3
 8003bde:	4153      	adcs	r3, r2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	001a      	movs	r2, r3
 8003be4:	1dfb      	adds	r3, r7, #7
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d0c4      	beq.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	fffffe5f 	.word	0xfffffe5f

08003bfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	227c      	movs	r2, #124	; 0x7c
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e027      	b.n	8003c62 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	227c      	movs	r2, #124	; 0x7c
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	2124      	movs	r1, #36	; 0x24
 8003c20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	438a      	bics	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	2120      	movs	r1, #32
 8003c56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	227c      	movs	r2, #124	; 0x7c
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	dfffffff 	.word	0xdfffffff

08003c70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	227c      	movs	r2, #124	; 0x7c
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e02e      	b.n	8003ce6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	227c      	movs	r2, #124	; 0x7c
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	2124      	movs	r1, #36	; 0x24
 8003c96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	08d9      	lsrs	r1, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f854 	bl	8003d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	227c      	movs	r2, #124	; 0x7c
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	227c      	movs	r2, #124	; 0x7c
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e02f      	b.n	8003d68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	227c      	movs	r2, #124	; 0x7c
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	2124      	movs	r1, #36	; 0x24
 8003d16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f813 	bl	8003d74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	227c      	movs	r2, #124	; 0x7c
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b004      	add	sp, #16
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f1ffffff 	.word	0xf1ffffff

08003d74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b089      	sub	sp, #36	; 0x24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003d7c:	2314      	movs	r3, #20
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <UARTEx_SetNbDataToProcess+0xcc>)
 8003d82:	ca03      	ldmia	r2!, {r0, r1}
 8003d84:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003d86:	230c      	movs	r3, #12
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <UARTEx_SetNbDataToProcess+0xd0>)
 8003d8c:	ca03      	ldmia	r2!, {r0, r1}
 8003d8e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	226a      	movs	r2, #106	; 0x6a
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2268      	movs	r2, #104	; 0x68
 8003da4:	2101      	movs	r1, #1
 8003da6:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003da8:	e046      	b.n	8003e38 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003daa:	261f      	movs	r6, #31
 8003dac:	19bb      	adds	r3, r7, r6
 8003dae:	2208      	movs	r2, #8
 8003db0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003db2:	201e      	movs	r0, #30
 8003db4:	183b      	adds	r3, r7, r0
 8003db6:	2208      	movs	r2, #8
 8003db8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	0e5b      	lsrs	r3, r3, #25
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	241d      	movs	r4, #29
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	2107      	movs	r1, #7
 8003dca:	400a      	ands	r2, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	0f5b      	lsrs	r3, r3, #29
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	251c      	movs	r5, #28
 8003dda:	197b      	adds	r3, r7, r5
 8003ddc:	2107      	movs	r1, #7
 8003dde:	400a      	ands	r2, r1
 8003de0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003de2:	183b      	adds	r3, r7, r0
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	197a      	adds	r2, r7, r5
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	2114      	movs	r1, #20
 8003dec:	1879      	adds	r1, r7, r1
 8003dee:	5c8a      	ldrb	r2, [r1, r2]
 8003df0:	435a      	muls	r2, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	197b      	adds	r3, r7, r5
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	250c      	movs	r5, #12
 8003dfa:	197a      	adds	r2, r7, r5
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7fc fa0a 	bl	8000218 <__divsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	226a      	movs	r2, #106	; 0x6a
 8003e0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003e0e:	19bb      	adds	r3, r7, r6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	193a      	adds	r2, r7, r4
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	2114      	movs	r1, #20
 8003e18:	1879      	adds	r1, r7, r1
 8003e1a:	5c8a      	ldrb	r2, [r1, r2]
 8003e1c:	435a      	muls	r2, r3
 8003e1e:	0010      	movs	r0, r2
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	197a      	adds	r2, r7, r5
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	0019      	movs	r1, r3
 8003e2a:	f7fc f9f5 	bl	8000218 <__divsi3>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	b299      	uxth	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2268      	movs	r2, #104	; 0x68
 8003e36:	5299      	strh	r1, [r3, r2]
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b009      	add	sp, #36	; 0x24
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e40:	08004650 	.word	0x08004650
 8003e44:	08004658 	.word	0x08004658

08003e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b09a      	sub	sp, #104	; 0x68
 8003e4c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e4e:	f7fc fbdb 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e52:	f000 f8d5 	bl	8004000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e56:	f000 f9bf 	bl	80041d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e5a:	f000 f92d 	bl	80040b8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003e5e:	f000 f96b 	bl	8004138 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer[6];
  buffer[0]= 0x4c;	//L
 8003e62:	214c      	movs	r1, #76	; 0x4c
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	224c      	movs	r2, #76	; 0x4c
 8003e68:	701a      	strb	r2, [r3, #0]
  buffer[1]= 0x4f;	//O
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	224f      	movs	r2, #79	; 0x4f
 8003e6e:	705a      	strb	r2, [r3, #1]
  buffer[2]= 0x55;	//U
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	2255      	movs	r2, #85	; 0x55
 8003e74:	709a      	strb	r2, [r3, #2]
  buffer[3]= 0x49;	//I
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	2249      	movs	r2, #73	; 0x49
 8003e7a:	70da      	strb	r2, [r3, #3]
  buffer[4]= 0x53;	//S
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	2253      	movs	r2, #83	; 0x53
 8003e80:	711a      	strb	r2, [r3, #4]
  buffer[5]= 0x31;	//1
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2231      	movs	r2, #49	; 0x31
 8003e86:	715a      	strb	r2, [r3, #5]
  volatile char password[17];
  password[0] = 0x00;
 8003e88:	2138      	movs	r1, #56	; 0x38
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
  password[1] = 0x00;
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2200      	movs	r2, #0
 8003e94:	705a      	strb	r2, [r3, #1]
  password[2] = 0x00;
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	2200      	movs	r2, #0
 8003e9a:	709a      	strb	r2, [r3, #2]
  password[3] = 0x00;
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	70da      	strb	r2, [r3, #3]
  password[4] = 0x00;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	711a      	strb	r2, [r3, #4]
  password[5] = 0x00;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	715a      	strb	r2, [r3, #5]
  password[6] = 0x00;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	719a      	strb	r2, [r3, #6]
  password[7] = 0x00;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	71da      	strb	r2, [r3, #7]
  password[8] = 0x09;
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2209      	movs	r2, #9
 8003ebe:	721a      	strb	r2, [r3, #8]
  password[9] = 0x00;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	725a      	strb	r2, [r3, #9]
  password[10] = 0x00;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2200      	movs	r2, #0
 8003eca:	729a      	strb	r2, [r3, #10]
  password[11] = 0x00;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	72da      	strb	r2, [r3, #11]
  password[12] = 0x00;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	731a      	strb	r2, [r3, #12]
  password[13] = 0x00;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2200      	movs	r2, #0
 8003edc:	735a      	strb	r2, [r3, #13]
  password[14] = 0x00;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	739a      	strb	r2, [r3, #14]
  password[15] = 0x00;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	73da      	strb	r2, [r3, #15]
  password[16] = 0x00;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2200      	movs	r2, #0
 8003eee:	741a      	strb	r2, [r3, #16]
  volatile char WrongPass[17];
  WrongPass[0] = 0x00;
 8003ef0:	2424      	movs	r4, #36	; 0x24
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  WrongPass[1] = 0x00;
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  WrongPass[2] = 0x10;
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	2210      	movs	r2, #16
 8003f02:	709a      	strb	r2, [r3, #2]
  WrongPass[3] = 0x10;
 8003f04:	193b      	adds	r3, r7, r4
 8003f06:	2210      	movs	r2, #16
 8003f08:	70da      	strb	r2, [r3, #3]
  WrongPass[4] = 0x00;
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	711a      	strb	r2, [r3, #4]
  WrongPass[5] = 0x00;
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	2200      	movs	r2, #0
 8003f14:	715a      	strb	r2, [r3, #5]
  WrongPass[6] = 0x00;
 8003f16:	193b      	adds	r3, r7, r4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	719a      	strb	r2, [r3, #6]
  WrongPass[7] = 0x00;
 8003f1c:	193b      	adds	r3, r7, r4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	71da      	strb	r2, [r3, #7]
  WrongPass[8] = 0x09;
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	2209      	movs	r2, #9
 8003f26:	721a      	strb	r2, [r3, #8]
  WrongPass[9] = 0x00;
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	725a      	strb	r2, [r3, #9]
  WrongPass[10] = 0x00;
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	2200      	movs	r2, #0
 8003f32:	729a      	strb	r2, [r3, #10]
  WrongPass[11] = 0x00;
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	2200      	movs	r2, #0
 8003f38:	72da      	strb	r2, [r3, #11]
  WrongPass[12] = 0x00;
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	731a      	strb	r2, [r3, #12]
  WrongPass[13] = 0x00;
 8003f40:	193b      	adds	r3, r7, r4
 8003f42:	2200      	movs	r2, #0
 8003f44:	735a      	strb	r2, [r3, #13]
  WrongPass[14] = 0x00;
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	2200      	movs	r2, #0
 8003f4a:	739a      	strb	r2, [r3, #14]
  WrongPass[15] = 0x00;
 8003f4c:	193b      	adds	r3, r7, r4
 8003f4e:	2200      	movs	r2, #0
 8003f50:	73da      	strb	r2, [r3, #15]
  WrongPass[16] = 0x00;
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	2200      	movs	r2, #0
 8003f56:	741a      	strb	r2, [r3, #16]
  char received[11];
  char received1[11];
  char test1[2];
  char data[2];
  data[0] = 0x00;
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
  char *pass;
  pass = I2CPassword;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	657b      	str	r3, [r7, #84]	; 0x54


  initNFC(&hi2c1, (NFC_UserMemory));
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <main+0x1b0>)
 8003f64:	21a6      	movs	r1, #166	; 0xa6
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f9b4 	bl	80042d4 <initNFC>
  //HAL_I2C_Master_Transmit(&hi2c1, (NFC_UserMemory), buffer, 5,10);
  //HAL_I2C_Mem_Write(&hi2c1,NFC_UserMemory,0x3A,0x04,buffer,5,50);
  //HAL_I2C_Mem_Write(&hi2c1,NFC_SystemMemory, 0x0900,2, pass,17,50); //present password
  presentI2Cpassword(&hi2c1, NFC_UserMemory, I2CPassword);
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <main+0x1b0>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	21a6      	movs	r1, #166	; 0xa6
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 f9d8 	bl	8004328 <presentI2Cpassword>
  //HAL_I2C_Mem_Write(&hi2c1, NFC_UserMemory, 0x005f, 2, buffer,5,50);
  HAL_I2C_Mem_Write(&hi2c1,NFC_SystemMemory, 0x000b,2, data, 1,50);
 8003f78:	481f      	ldr	r0, [pc, #124]	; (8003ff8 <main+0x1b0>)
 8003f7a:	2332      	movs	r3, #50	; 0x32
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2302      	movs	r3, #2
 8003f88:	220b      	movs	r2, #11
 8003f8a:	21ae      	movs	r1, #174	; 0xae
 8003f8c:	f7fc fe8c 	bl	8000ca8 <HAL_I2C_Mem_Write>
  //currentAddRead(&hi2c1, NFC_SystemMemory, received,10,50);
  //HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x005f, 2, received1,6,50);
  HAL_I2C_Mem_Read(&hi2c1, NFC_SystemMemory, 0x000b, 2, received1,2,50);
 8003f90:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <main+0x1b0>)
 8003f92:	2332      	movs	r3, #50	; 0x32
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2302      	movs	r3, #2
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	220b      	movs	r2, #11
 8003fa4:	21ae      	movs	r1, #174	; 0xae
 8003fa6:	f7fc ffad 	bl	8000f04 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x2004, 2, test1, 1, 50);
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <main+0x1b4>)
 8003fac:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <main+0x1b0>)
 8003fae:	2332      	movs	r3, #50	; 0x32
 8003fb0:	9302      	str	r3, [sp, #8]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	2508      	movs	r5, #8
 8003fb8:	197b      	adds	r3, r7, r5
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	21a6      	movs	r1, #166	; 0xa6
 8003fc0:	f7fc ffa0 	bl	8000f04 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Write(&hi2c1,NFC_SystemMemory, 0x0900,2, WrongPass,17,50); //present wrong password
 8003fc4:	2390      	movs	r3, #144	; 0x90
 8003fc6:	011a      	lsls	r2, r3, #4
 8003fc8:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <main+0x1b0>)
 8003fca:	2332      	movs	r3, #50	; 0x32
 8003fcc:	9302      	str	r3, [sp, #8]
 8003fce:	2311      	movs	r3, #17
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	21ae      	movs	r1, #174	; 0xae
 8003fda:	f7fc fe65 	bl	8000ca8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, NFC_UserMemory, 0x2004, 2, test1, 1, 50);
 8003fde:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <main+0x1b4>)
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <main+0x1b0>)
 8003fe2:	2332      	movs	r3, #50	; 0x32
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	197b      	adds	r3, r7, r5
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2302      	movs	r3, #2
 8003ff0:	21a6      	movs	r1, #166	; 0xa6
 8003ff2:	f7fc ff87 	bl	8000f04 <HAL_I2C_Mem_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <main+0x1ae>
 8003ff8:	2000002c 	.word	0x2000002c
 8003ffc:	00002004 	.word	0x00002004

08004000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b0a1      	sub	sp, #132	; 0x84
 8004004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004006:	2448      	movs	r4, #72	; 0x48
 8004008:	193b      	adds	r3, r7, r4
 800400a:	0018      	movs	r0, r3
 800400c:	2338      	movs	r3, #56	; 0x38
 800400e:	001a      	movs	r2, r3
 8004010:	2100      	movs	r1, #0
 8004012:	f000 fb09 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004016:	2338      	movs	r3, #56	; 0x38
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	0018      	movs	r0, r3
 800401c:	2310      	movs	r3, #16
 800401e:	001a      	movs	r2, r3
 8004020:	2100      	movs	r1, #0
 8004022:	f000 fb01 	bl	8004628 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	0018      	movs	r0, r3
 800402a:	2334      	movs	r3, #52	; 0x34
 800402c:	001a      	movs	r2, r3
 800402e:	2100      	movs	r1, #0
 8004030:	f000 fafa 	bl	8004628 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	0018      	movs	r0, r3
 800403a:	f7fd fc87 	bl	800194c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800403e:	193b      	adds	r3, r7, r4
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004044:	193b      	adds	r3, r7, r4
 8004046:	22a0      	movs	r2, #160	; 0xa0
 8004048:	02d2      	lsls	r2, r2, #11
 800404a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800404c:	193b      	adds	r3, r7, r4
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004052:	193b      	adds	r3, r7, r4
 8004054:	0018      	movs	r0, r3
 8004056:	f7fd fcc5 	bl	80019e4 <HAL_RCC_OscConfig>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d001      	beq.n	8004062 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800405e:	f000 f933 	bl	80042c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004062:	2138      	movs	r1, #56	; 0x38
 8004064:	187b      	adds	r3, r7, r1
 8004066:	2207      	movs	r2, #7
 8004068:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800406a:	187b      	adds	r3, r7, r1
 800406c:	2201      	movs	r2, #1
 800406e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004070:	187b      	adds	r3, r7, r1
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004076:	187b      	adds	r3, r7, r1
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800407c:	187b      	adds	r3, r7, r1
 800407e:	2100      	movs	r1, #0
 8004080:	0018      	movs	r0, r3
 8004082:	f7fd ffcf 	bl	8002024 <HAL_RCC_ClockConfig>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d001      	beq.n	800408e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800408a:	f000 f91d 	bl	80042c8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	2260      	movs	r2, #96	; 0x60
 8004092:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7fe f968 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 80040a8:	1e03      	subs	r3, r0, #0
 80040aa:	d001      	beq.n	80040b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80040ac:	f000 f90c 	bl	80042c8 <Error_Handler>
  }
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b021      	add	sp, #132	; 0x84
 80040b6:	bd90      	pop	{r4, r7, pc}

080040b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <MX_I2C1_Init+0x74>)
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <MX_I2C1_Init+0x78>)
 80040c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80040c2:	4b1a      	ldr	r3, [pc, #104]	; (800412c <MX_I2C1_Init+0x74>)
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <MX_I2C1_Init+0x7c>)
 80040c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <MX_I2C1_Init+0x74>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <MX_I2C1_Init+0x74>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <MX_I2C1_Init+0x74>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <MX_I2C1_Init+0x74>)
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <MX_I2C1_Init+0x74>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <MX_I2C1_Init+0x74>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <MX_I2C1_Init+0x74>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <MX_I2C1_Init+0x74>)
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7fc fd41 	bl	8000b7c <HAL_I2C_Init>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d001      	beq.n	8004102 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040fe:	f000 f8e3 	bl	80042c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <MX_I2C1_Init+0x74>)
 8004104:	2100      	movs	r1, #0
 8004106:	0018      	movs	r0, r3
 8004108:	f7fd fb88 	bl	800181c <HAL_I2CEx_ConfigAnalogFilter>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d001      	beq.n	8004114 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004110:	f000 f8da 	bl	80042c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <MX_I2C1_Init+0x74>)
 8004116:	2100      	movs	r1, #0
 8004118:	0018      	movs	r0, r3
 800411a:	f7fd fbcb 	bl	80018b4 <HAL_I2CEx_ConfigDigitalFilter>
 800411e:	1e03      	subs	r3, r0, #0
 8004120:	d001      	beq.n	8004126 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004122:	f000 f8d1 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	2000002c 	.word	0x2000002c
 8004130:	40005400 	.word	0x40005400
 8004134:	2000090e 	.word	0x2000090e

08004138 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800413c:	4b23      	ldr	r3, [pc, #140]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 800413e:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <MX_LPUART1_UART_Init+0x98>)
 8004140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <MX_LPUART1_UART_Init+0x9c>)
 8004146:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	0552      	lsls	r2, r2, #21
 800414e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004152:	2200      	movs	r2, #0
 8004154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004158:	2200      	movs	r2, #0
 800415a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 800415e:	220c      	movs	r2, #12
 8004160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004164:	2200      	movs	r2, #0
 8004166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 800416a:	2200      	movs	r2, #0
 800416c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004170:	2200      	movs	r2, #0
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004176:	2200      	movs	r2, #0
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 800417c:	2200      	movs	r2, #0
 800417e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004182:	0018      	movs	r0, r3
 8004184:	f7fe fab0 	bl	80026e8 <HAL_UART_Init>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d001      	beq.n	8004190 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800418c:	f000 f89c 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 8004192:	2100      	movs	r1, #0
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff fd6b 	bl	8003c70 <HAL_UARTEx_SetTxFifoThreshold>
 800419a:	1e03      	subs	r3, r0, #0
 800419c:	d001      	beq.n	80041a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800419e:	f000 f893 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 80041a4:	2100      	movs	r1, #0
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7ff fda2 	bl	8003cf0 <HAL_UARTEx_SetRxFifoThreshold>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d001      	beq.n	80041b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80041b0:	f000 f88a 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <MX_LPUART1_UART_Init+0x94>)
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fd20 	bl	8003bfc <HAL_UARTEx_DisableFifoMode>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041c0:	f000 f882 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000078 	.word	0x20000078
 80041d0:	40008000 	.word	0x40008000
 80041d4:	00033324 	.word	0x00033324

080041d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b08b      	sub	sp, #44	; 0x2c
 80041dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041de:	2414      	movs	r4, #20
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	0018      	movs	r0, r3
 80041e4:	2314      	movs	r3, #20
 80041e6:	001a      	movs	r2, r3
 80041e8:	2100      	movs	r1, #0
 80041ea:	f000 fa1d 	bl	8004628 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <MX_GPIO_Init+0xe8>)
 80041f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f2:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <MX_GPIO_Init+0xe8>)
 80041f4:	2104      	movs	r1, #4
 80041f6:	430a      	orrs	r2, r1
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
 80041fa:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <MX_GPIO_Init+0xe8>)
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	2204      	movs	r2, #4
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004206:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <MX_GPIO_Init+0xe8>)
 800420c:	2120      	movs	r1, #32
 800420e:	430a      	orrs	r2, r1
 8004210:	635a      	str	r2, [r3, #52]	; 0x34
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	2220      	movs	r2, #32
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004224:	2101      	movs	r1, #1
 8004226:	430a      	orrs	r2, r1
 8004228:	635a      	str	r2, [r3, #52]	; 0x34
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <MX_GPIO_Init+0xe8>)
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	2201      	movs	r2, #1
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <MX_GPIO_Init+0xe8>)
 800423c:	2102      	movs	r1, #2
 800423e:	430a      	orrs	r2, r1
 8004240:	635a      	str	r2, [r3, #52]	; 0x34
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <MX_GPIO_Init+0xe8>)
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	2202      	movs	r2, #2
 8004248:	4013      	ands	r3, r2
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_LED3_GPIO_Port, NFC_LED3_Pin, GPIO_PIN_RESET);
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	00d9      	lsls	r1, r3, #3
 8004252:	23a0      	movs	r3, #160	; 0xa0
 8004254:	05db      	lsls	r3, r3, #23
 8004256:	2200      	movs	r2, #0
 8004258:	0018      	movs	r0, r3
 800425a:	f7fc fc71 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NFC_LED1_Pin|NFC_LED2_Pin, GPIO_PIN_RESET);
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <MX_GPIO_Init+0xec>)
 8004260:	2200      	movs	r2, #0
 8004262:	2130      	movs	r1, #48	; 0x30
 8004264:	0018      	movs	r0, r3
 8004266:	f7fc fc6b 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_LED3_Pin */
  GPIO_InitStruct.Pin = NFC_LED3_Pin;
 800426a:	193b      	adds	r3, r7, r4
 800426c:	2280      	movs	r2, #128	; 0x80
 800426e:	00d2      	lsls	r2, r2, #3
 8004270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004272:	193b      	adds	r3, r7, r4
 8004274:	2201      	movs	r2, #1
 8004276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	193b      	adds	r3, r7, r4
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427e:	193b      	adds	r3, r7, r4
 8004280:	2200      	movs	r2, #0
 8004282:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NFC_LED3_GPIO_Port, &GPIO_InitStruct);
 8004284:	193a      	adds	r2, r7, r4
 8004286:	23a0      	movs	r3, #160	; 0xa0
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7fc faf3 	bl	8000878 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_LED1_Pin NFC_LED2_Pin */
  GPIO_InitStruct.Pin = NFC_LED1_Pin|NFC_LED2_Pin;
 8004292:	0021      	movs	r1, r4
 8004294:	187b      	adds	r3, r7, r1
 8004296:	2230      	movs	r2, #48	; 0x30
 8004298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800429a:	187b      	adds	r3, r7, r1
 800429c:	2201      	movs	r2, #1
 800429e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <MX_GPIO_Init+0xec>)
 80042b0:	0019      	movs	r1, r3
 80042b2:	0010      	movs	r0, r2
 80042b4:	f7fc fae0 	bl	8000878 <HAL_GPIO_Init>

}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b00b      	add	sp, #44	; 0x2c
 80042be:	bd90      	pop	{r4, r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	50000400 	.word	0x50000400

080042c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <initNFC>:
 */

#include "nfc.h"
#include "stm32g0xx_hal.h"

void initNFC(I2C_HandleTypeDef *hi2c, uint16_t devAddress){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	000a      	movs	r2, r1
 80042de:	1cbb      	adds	r3, r7, #2
 80042e0:	801a      	strh	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(hi2c, devAddress,3,50) == HAL_OK){
 80042e2:	1cbb      	adds	r3, r7, #2
 80042e4:	8819      	ldrh	r1, [r3, #0]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	2332      	movs	r3, #50	; 0x32
 80042ea:	2203      	movs	r2, #3
 80042ec:	f7fc ff3e 	bl	800116c <HAL_I2C_IsDeviceReady>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d10c      	bne.n	800430e <initNFC+0x3a>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <initNFC+0x50>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	2110      	movs	r1, #16
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fc fc20 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NFC_LED2_PORT,NFC_LED2,1);
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <initNFC+0x50>)
 8004302:	2201      	movs	r2, #1
 8004304:	2120      	movs	r1, #32
 8004306:	0018      	movs	r0, r3
 8004308:	f7fc fc1a 	bl	8000b40 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(NFC_LED3_PORT,NFC_LED3,1);
	}
	else{
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
	}
}
 800430c:	e005      	b.n	800431a <initNFC+0x46>
		HAL_GPIO_WritePin(NFC_LED1_PORT,NFC_LED1,1);
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <initNFC+0x50>)
 8004310:	2201      	movs	r2, #1
 8004312:	2110      	movs	r1, #16
 8004314:	0018      	movs	r0, r3
 8004316:	f7fc fc13 	bl	8000b40 <HAL_GPIO_WritePin>
}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b002      	add	sp, #8
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	50000400 	.word	0x50000400

08004328 <presentI2Cpassword>:
void currentAddRead(I2C_HandleTypeDef *hi2c, uint16_t devAddress, char *buffer,int n){

	HAL_I2C_Master_Receive(hi2c, devAddress, buffer,n ,50);
}

void presentI2Cpassword(I2C_HandleTypeDef *hi2c, uint16_t devAddress, int password){
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af04      	add	r7, sp, #16
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	230a      	movs	r3, #10
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	1c0a      	adds	r2, r1, #0
 8004338:	801a      	strh	r2, [r3, #0]
	char *temp;
	*temp = password;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	701a      	strb	r2, [r3, #0]
	char pass[17];
	  pass[0] = 0x00;
 8004342:	2110      	movs	r1, #16
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
	  pass[1] = 0x00;
 800434a:	187b      	adds	r3, r7, r1
 800434c:	2200      	movs	r2, #0
 800434e:	705a      	strb	r2, [r3, #1]
	  pass[2] = 0x00;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2200      	movs	r2, #0
 8004354:	709a      	strb	r2, [r3, #2]
	  pass[3] = 0x00;
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2200      	movs	r2, #0
 800435a:	70da      	strb	r2, [r3, #3]
	  pass[4] = 0x00;
 800435c:	187b      	adds	r3, r7, r1
 800435e:	2200      	movs	r2, #0
 8004360:	711a      	strb	r2, [r3, #4]
	  pass[5] = 0x00;
 8004362:	187b      	adds	r3, r7, r1
 8004364:	2200      	movs	r2, #0
 8004366:	715a      	strb	r2, [r3, #5]
	  pass[6] = 0x00;
 8004368:	187b      	adds	r3, r7, r1
 800436a:	2200      	movs	r2, #0
 800436c:	719a      	strb	r2, [r3, #6]
	  pass[7] = 0x00;
 800436e:	187b      	adds	r3, r7, r1
 8004370:	2200      	movs	r2, #0
 8004372:	71da      	strb	r2, [r3, #7]
	  pass[8] = 0x09;
 8004374:	187b      	adds	r3, r7, r1
 8004376:	2209      	movs	r2, #9
 8004378:	721a      	strb	r2, [r3, #8]
	  pass[9] = 0x00;
 800437a:	187b      	adds	r3, r7, r1
 800437c:	2200      	movs	r2, #0
 800437e:	725a      	strb	r2, [r3, #9]
	  pass[10] = 0x00;
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2200      	movs	r2, #0
 8004384:	729a      	strb	r2, [r3, #10]
	  pass[11] = 0x00;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2200      	movs	r2, #0
 800438a:	72da      	strb	r2, [r3, #11]
	  pass[12] = 0x00;
 800438c:	187b      	adds	r3, r7, r1
 800438e:	2200      	movs	r2, #0
 8004390:	731a      	strb	r2, [r3, #12]
	  pass[13] = 0x00;
 8004392:	187b      	adds	r3, r7, r1
 8004394:	2200      	movs	r2, #0
 8004396:	735a      	strb	r2, [r3, #13]
	  pass[14] = 0x00;
 8004398:	187b      	adds	r3, r7, r1
 800439a:	2200      	movs	r2, #0
 800439c:	739a      	strb	r2, [r3, #14]
	  pass[15] = 0x00;
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	2200      	movs	r2, #0
 80043a2:	73da      	strb	r2, [r3, #15]
	  pass[16] = 0x00;
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	2200      	movs	r2, #0
 80043a8:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < 8; i++){
		pass[i+8] = *temp;
		//temp++;
	}*/

	HAL_I2C_Mem_Write(hi2c,NFC_SystemMemory, I2C_PWD, Itl, pass,17,50); //present  i2c password
 80043aa:	2390      	movs	r3, #144	; 0x90
 80043ac:	011a      	lsls	r2, r3, #4
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	2332      	movs	r3, #50	; 0x32
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	2311      	movs	r3, #17
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2302      	movs	r3, #2
 80043be:	21ae      	movs	r1, #174	; 0xae
 80043c0:	f7fc fc72 	bl	8000ca8 <HAL_I2C_Mem_Write>

}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b00a      	add	sp, #40	; 0x28
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_MspInit+0x44>)
 80043d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d6:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_MspInit+0x44>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_MspInit+0x44>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_MspInit+0x44>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_MspInit+0x44>)
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	0549      	lsls	r1, r1, #21
 80043f4:	430a      	orrs	r2, r1
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_MspInit+0x44>)
 80043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	055b      	lsls	r3, r3, #21
 8004400:	4013      	ands	r3, r2
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b002      	add	sp, #8
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	2314      	movs	r3, #20
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	0018      	movs	r0, r3
 8004422:	2314      	movs	r3, #20
 8004424:	001a      	movs	r2, r3
 8004426:	2100      	movs	r1, #0
 8004428:	f000 f8fe 	bl	8004628 <memset>
  if(hi2c->Instance==I2C1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <HAL_I2C_MspInit+0x8c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d130      	bne.n	8004498 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 8004438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 800443c:	2102      	movs	r1, #2
 800443e:	430a      	orrs	r2, r1
 8004440:	635a      	str	r2, [r3, #52]	; 0x34
 8004442:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	2202      	movs	r2, #2
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800444e:	2114      	movs	r1, #20
 8004450:	187b      	adds	r3, r7, r1
 8004452:	22c0      	movs	r2, #192	; 0xc0
 8004454:	0092      	lsls	r2, r2, #2
 8004456:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004458:	187b      	adds	r3, r7, r1
 800445a:	2212      	movs	r2, #18
 800445c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2201      	movs	r2, #1
 8004462:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800446a:	187b      	adds	r3, r7, r1
 800446c:	2206      	movs	r2, #6
 800446e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004470:	187b      	adds	r3, r7, r1
 8004472:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_I2C_MspInit+0x94>)
 8004474:	0019      	movs	r1, r3
 8004476:	0010      	movs	r0, r2
 8004478:	f7fc f9fe 	bl	8000878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 800447e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	0389      	lsls	r1, r1, #14
 8004486:	430a      	orrs	r2, r1
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_I2C_MspInit+0x90>)
 800448c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	039b      	lsls	r3, r3, #14
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	b00a      	add	sp, #40	; 0x28
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40005400 	.word	0x40005400
 80044a4:	40021000 	.word	0x40021000
 80044a8:	50000400 	.word	0x50000400

080044ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	2314      	movs	r3, #20
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	0018      	movs	r0, r3
 80044ba:	2314      	movs	r3, #20
 80044bc:	001a      	movs	r2, r3
 80044be:	2100      	movs	r1, #0
 80044c0:	f000 f8b2 	bl	8004628 <memset>
  if(huart->Instance==LPUART1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_UART_MspInit+0x8c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d130      	bne.n	8004530 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80044ce:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_UART_MspInit+0x90>)
 80044d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_UART_MspInit+0x90>)
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0349      	lsls	r1, r1, #13
 80044d8:	430a      	orrs	r2, r1
 80044da:	63da      	str	r2, [r3, #60]	; 0x3c
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <HAL_UART_MspInit+0x90>)
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	035b      	lsls	r3, r3, #13
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_UART_MspInit+0x90>)
 80044ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_UART_MspInit+0x90>)
 80044f0:	2101      	movs	r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_UART_MspInit+0x90>)
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	2201      	movs	r2, #1
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8004502:	2114      	movs	r1, #20
 8004504:	187b      	adds	r3, r7, r1
 8004506:	220c      	movs	r2, #12
 8004508:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	187b      	adds	r3, r7, r1
 800450c:	2202      	movs	r2, #2
 800450e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	187b      	adds	r3, r7, r1
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	187b      	adds	r3, r7, r1
 8004518:	2200      	movs	r2, #0
 800451a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800451c:	187b      	adds	r3, r7, r1
 800451e:	2206      	movs	r2, #6
 8004520:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004522:	187a      	adds	r2, r7, r1
 8004524:	23a0      	movs	r3, #160	; 0xa0
 8004526:	05db      	lsls	r3, r3, #23
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f7fc f9a4 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b00a      	add	sp, #40	; 0x28
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40008000 	.word	0x40008000
 800453c:	40021000 	.word	0x40021000

08004540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <HardFault_Handler+0x4>

08004550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004568:	f7fc f8b8 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <SystemInit+0x14>)
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	0512      	lsls	r2, r2, #20
 800457e:	609a      	str	r2, [r3, #8]
#endif
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800458c:	480d      	ldr	r0, [pc, #52]	; (80045c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800458e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004592:	e003      	b.n	800459c <LoopCopyDataInit>

08004594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800459a:	3104      	adds	r1, #4

0800459c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800459c:	480b      	ldr	r0, [pc, #44]	; (80045cc <LoopForever+0xa>)
  ldr r3, =_edata
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80045a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045a4:	d3f6      	bcc.n	8004594 <CopyDataInit>
  ldr r2, =_sbss
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80045a8:	e002      	b.n	80045b0 <LoopFillZerobss>

080045aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80045ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ae:	3204      	adds	r2, #4

080045b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <LoopForever+0x16>)
  cmp r2, r3
 80045b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045b4:	d3f9      	bcc.n	80045aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80045b6:	f7ff ffdd 	bl	8004574 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80045ba:	f000 f811 	bl	80045e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045be:	f7ff fc43 	bl	8003e48 <main>

080045c2 <LoopForever>:

LoopForever:
    b LoopForever
 80045c2:	e7fe      	b.n	80045c2 <LoopForever>
  ldr   r0, =_estack
 80045c4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80045c8:	080046d0 	.word	0x080046d0
  ldr r0, =_sdata
 80045cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80045d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80045d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80045d8:	20000104 	.word	0x20000104

080045dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC1_COMP_IRQHandler>
	...

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	2600      	movs	r6, #0
 80045e4:	4d0c      	ldr	r5, [pc, #48]	; (8004618 <__libc_init_array+0x38>)
 80045e6:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	42a6      	cmp	r6, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	2600      	movs	r6, #0
 80045f2:	f000 f821 	bl	8004638 <_init>
 80045f6:	4d0a      	ldr	r5, [pc, #40]	; (8004620 <__libc_init_array+0x40>)
 80045f8:	4c0a      	ldr	r4, [pc, #40]	; (8004624 <__libc_init_array+0x44>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	42a6      	cmp	r6, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	00b3      	lsls	r3, r6, #2
 8004606:	58eb      	ldr	r3, [r5, r3]
 8004608:	4798      	blx	r3
 800460a:	3601      	adds	r6, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	00b3      	lsls	r3, r6, #2
 8004610:	58eb      	ldr	r3, [r5, r3]
 8004612:	4798      	blx	r3
 8004614:	3601      	adds	r6, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	080046c8 	.word	0x080046c8
 800461c:	080046c8 	.word	0x080046c8
 8004620:	080046c8 	.word	0x080046c8
 8004624:	080046cc 	.word	0x080046cc

08004628 <memset>:
 8004628:	0003      	movs	r3, r0
 800462a:	1812      	adds	r2, r2, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	7019      	strb	r1, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <_init>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr

08004644 <_fini>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr
